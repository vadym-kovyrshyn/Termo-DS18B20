
# 1 "prog.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);

# 49 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\pic16f628a.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
unsigned :1;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 152
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 219
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 280
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 299
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned TMR0IF :1;
unsigned :2;
unsigned TMR0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 376
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned CMIF :1;
unsigned EEIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 432
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
};
struct {
unsigned :4;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 508
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 584
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 659
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADDEN :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 729
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned char CMCON @ 0x01F;

asm("CMCON equ 01Fh");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x01F;

# 810
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 879
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 940
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1001
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned CMIE :1;
unsigned EEIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1057
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned :1;
unsigned OSCF :1;
};
struct {
unsigned nBO :1;
};
struct {
unsigned nBOD :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1105
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 1167
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char EEDATA @ 0x09A;

asm("EEDATA equ 09Ah");



extern volatile unsigned char EEADR @ 0x09B;

asm("EEADR equ 09Bh");



extern volatile unsigned char EECON1 @ 0x09C;

asm("EECON1 equ 09Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x09C;

# 1222
extern volatile unsigned char EECON2 @ 0x09D;

asm("EECON2 equ 09Dh");



extern volatile unsigned char VRCON @ 0x09F;

asm("VRCON equ 09Fh");


typedef union {
struct {
unsigned VR :4;
unsigned :1;
unsigned VRR :1;
unsigned VROE :1;
unsigned VREN :1;
};
struct {
unsigned VR0 :1;
unsigned VR1 :1;
unsigned VR2 :1;
unsigned VR3 :1;
};
} VRCONbits_t;
extern volatile VRCONbits_t VRCONbits @ 0x09F;

# 1298
extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit EEIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit EEIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit OSCF @ (((unsigned) &PCON)*8) + 3;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit VR0 @ (((unsigned) &VRCON)*8) + 0;

extern volatile __bit VR1 @ (((unsigned) &VRCON)*8) + 1;

extern volatile __bit VR2 @ (((unsigned) &VRCON)*8) + 2;

extern volatile __bit VR3 @ (((unsigned) &VRCON)*8) + 3;

extern volatile __bit VREN @ (((unsigned) &VRCON)*8) + 7;

extern volatile __bit VROE @ (((unsigned) &VRCON)*8) + 6;

extern volatile __bit VRR @ (((unsigned) &VRCON)*8) + 5;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOD @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;


# 27 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 77
extern unsigned int flash_read(unsigned short addr);

# 141
extern void flash_erase(unsigned short addr);

# 114 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 151 "C:\Program Files (x86)\Microchip\xc8\v1.40\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __nonreentrant void _delaywdt(unsigned long);

# 192
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 14 "prog.c"
#pragma config FOSC = INTOSCIO
#pragma config WDTE = OFF
#pragma config PWRTE = ON
#pragma config MCLRE = OFF
#pragma config BOREN = OFF
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config CP = ON

# 38
volatile unsigned char digits [3];
volatile unsigned char digits_0 [3];
volatile unsigned char KeyCode;
const unsigned char TMR0_VALUE = 235;
unsigned char digitemp;
int powerOnInterval;
const unsigned char PortAData[3] = {
0b10000000,
0b01000000,
0b00000001,
};
bit endInterrupt;
bit Broadcasting;
unsigned char PowerBlocked;

struct {
unsigned Init : 1;
unsigned Send_Address : 1;
unsigned CountAddressBytes : 4;
unsigned SendConvertTemp : 1;
unsigned int PauseValue;
unsigned SendGetTemp : 1;
unsigned ReadData : 1;
unsigned CountDataBytes : 4;
unsigned DataIsRead : 1;
unsigned Error : 1;
unsigned ActiveProcess : 1;
unsigned Line : 8;
} getTemp_flags;

unsigned char DS_Address [] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
unsigned char DS_ReadData [] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

char temperature = 0;
unsigned char temp_drob = 0;
unsigned char sign;

# 93
void waitInterrupt() {
endInterrupt = 0;
while (!endInterrupt);
}

void Reset_powerOnInterval() {
powerOnInterval = 700;
}

unsigned char getDigit(char a) {
return (digits_0[a - 1] & 0b00111111);
}

void setDigit(char a, unsigned char data) {
digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
}

void setPoint(char dignum, char value) {
value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 0b10111111;
}

void refreshInd() {
digits[0] = digits_0[0];
digits[1] = digits_0[1];
digits[2] = digits_0[2];
}

void clrInd() {
digits_0[0] = 34;
digits_0[1] = 34;
digits_0[2] = 34;
}

void ShowError() {
clrInd();
setDigit(3, 14);
setDigit(2, 24);
setDigit(1, 24);
refreshInd();
}

unsigned char convDig(unsigned char dig) {
switch (dig) {
case 0: return 0b11011011;
case 1: return 0b00011000;
case 2: return 0b10110011;
case 3: return 0b10111010;
case 4: return 0b01111000;
case 5: return 0b11101010;
case 6: return 0b11101011;
case 7: return 0b10011000;
case 8: return 0b11111011;
case 9: return 0b11111010;

# 152
case 14: return 0b11100011;

# 164
case 24: return 0b00100001;

# 175
case 32: return 0b00100000;

default: return 0b00000000;
}
}

void EEWR(unsigned char address, unsigned char data) {
volatile unsigned char INTCON_BUP = INTCON;
INTCONbits.GIE = 0;
EEADR = address;
EEDATA = data;
EECON1bits.WREN = 1;
EECON2 = 0x55;
EECON2 = 0xAA;
EECON1bits.WR = 1;
EECON1bits.WREN = 0;
while (EECON1bits.WR == 1) {
}
INTCON = INTCON_BUP;
}

unsigned char EERD(unsigned char address) {
volatile unsigned char INTCON_BUP = INTCON;
volatile unsigned char EEDATA_BUP;
INTCONbits.GIE = 0;
EEADR = address;
EECON1bits.RD = 1;
EEDATA_BUP = EEDATA;
INTCON = INTCON_BUP;
return EEDATA_BUP;
}

void FillArrayFromEEPROM(unsigned char *container, unsigned char address_start, unsigned char quantity) {
for (unsigned char i = 0; i < quantity; i++) {
container[i] = EERD(address_start + i);
}
}

void WriteArrayToEEPROM(unsigned char * container, unsigned char address_start, unsigned char quantity) {
for (unsigned char i = 0; i < quantity; i++) {
waitInterrupt();
EEWR(address_start + i, container[i]);
}
}


unsigned char INIT(unsigned char line) {
unsigned char One = line;
unsigned char Zero = One ^ 0b11111111;

unsigned char b;
b = 0;
TRISA |= One;
_delay((unsigned long)((20)*(4000000/4000000.0)));
TRISA &= Zero;
_delay((unsigned long)((500)*(4000000/4000000.0)));
TRISA |= One;
_delay((unsigned long)((65)*(4000000/4000000.0)));
b = (PORTA & One) > 0;
_delay((unsigned long)((450)*(4000000/4000000.0)));

return !b;
}

void TX(unsigned char cmd, unsigned char line) {
unsigned char One = line;
unsigned char Zero = One ^ 0b11111111;

unsigned char temp = 0;
unsigned char i = 0;
temp = cmd;
for (i = 0; i < 8; i++) {
if (temp & 0x01) {
TRISA &= Zero;
_delay((unsigned long)((5)*(4000000/4000000.0)));
TRISA |= One;
_delay((unsigned long)((70)*(4000000/4000000.0)));
} else {
TRISA &= Zero;
_delay((unsigned long)((70)*(4000000/4000000.0)));
TRISA |= One;
_delay((unsigned long)((5)*(4000000/4000000.0)));
}
temp >>= 1;
}
}

unsigned char RX(unsigned char line) {
unsigned char One = line;
unsigned char Zero = One ^ 0b11111111;

unsigned char d = 0;
for (unsigned char i = 0; i < 8; i++) {
TRISA &= Zero;
_delay((unsigned long)((6)*(4000000/4000000.0)));
TRISA |= One;
_delay((unsigned long)((4)*(4000000/4000000.0)));
d >>= 1;
if ((PORTA & One) > 0) {
d |= 0x80;
}
_delay((unsigned long)((60)*(4000000/4000000.0)));
}
return d;
}

unsigned char calc_crc(unsigned char *mas, unsigned char len) {
unsigned char crc = 0;
while (len--) {
unsigned char dat = *mas++;
for (unsigned char i = 0; i < 8; i++) {
unsigned char fb = (crc ^ dat) & 1;
crc >>= 1;
dat >>= 1;
if (fb) crc ^= 0x8c;
}
}
return crc;
}


void get_temp_Async() {

if (!getTemp_flags.ActiveProcess) {
return;
}

unsigned char line = getTemp_flags.Line;


if (getTemp_flags.Init) {
if (INIT(line)) {
getTemp_flags.Init = 0;

getTemp_flags.Send_Address = 1;
getTemp_flags.CountAddressBytes = 0;
} else {
getTemp_flags.ActiveProcess = 0;
getTemp_flags.Error = 1;
}
} else

if (getTemp_flags.Send_Address) {
if (Broadcasting) {
TX(0xCC, line);
getTemp_flags.CountAddressBytes = 1;
getTemp_flags.Send_Address = 0;
} else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
if (getTemp_flags.CountAddressBytes == 0) {
TX(0x55, line);
}
TX(DS_Address[getTemp_flags.CountAddressBytes], line);
getTemp_flags.CountAddressBytes++;

if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
getTemp_flags.Send_Address = 0;
}
}
} else

if (getTemp_flags.SendConvertTemp) {
TX(0x44, line);
getTemp_flags.SendConvertTemp = 0;

} else

if (getTemp_flags.PauseValue > 0) {
getTemp_flags.PauseValue--;
if (getTemp_flags.PauseValue == 0) {
getTemp_flags.Init = 1;
}
} else

if (getTemp_flags.SendGetTemp) {
TX(0xBE, line);
getTemp_flags.SendGetTemp = 0;
} else

if (getTemp_flags.ReadData) {
if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (DS_ReadData); i++) {
DS_ReadData[getTemp_flags.CountDataBytes] = RX(line);
getTemp_flags.CountDataBytes++;
}
if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof (DS_ReadData) - 1)) {
getTemp_flags.Error = 1;
} else {

unsigned char temp1 = DS_ReadData[0];
unsigned char temp2 = DS_ReadData[1];

temp_drob = temp1 & 0b00001111;
temp_drob = ((temp_drob * 6) + 2) / 10;
temp1 >>= 4;
sign = temp2 & 0x80;
temp2 <<= 4;
temp2 &= 0b01110000;
temp2 |= temp1;

if (sign) {
temperature = 127 - temp2;
temp_drob = 10 - temp_drob;
if (temp_drob == 10) {
temp_drob = 0;
temperature++;
}
} else {
temperature = temp2;
}
}
getTemp_flags.ReadData = 0;
getTemp_flags.ActiveProcess = 0;
getTemp_flags.DataIsRead = 1;
}
}
} else {
getTemp_flags.ActiveProcess = 0;
}
}

unsigned char FindCell(unsigned char addressStart, unsigned char previous) {
if (addressStart == ((sizeof(DS_Address)) * 16)) {
previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address)));
}
unsigned char address = addressStart;
unsigned char addressNew = ((sizeof(DS_Address)) * 16);
do {

if (!previous) {
address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address = 0 : address += (sizeof(DS_Address));
} else {
address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) : address -= (sizeof(DS_Address));
}

unsigned char CellsData [(sizeof(DS_Address))];
waitInterrupt();
FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
unsigned char CellIsEmpty = 1;
for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
if (CellsData[i] != 0xFF) {
CellIsEmpty = 0;
}
}

if (CellIsEmpty == 0) {
addressNew = address;
break;
}
} while (address != addressStart);
return addressNew;
}



void interrupt F() {
if (T0IF) {
static unsigned char DigitNumber = 0;

T0IF = 0;
TMR0 += TMR0_VALUE;

if (DigitNumber > 2) {
DigitNumber = 0;
}
unsigned char dig = digits[DigitNumber];
digitemp = convDig(0b00111111 & dig);

# 447
(0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 0b11111011;

PORTB = 0;
PORTA = (PORTA & 0b00110100) | PortAData[DigitNumber++];

PORTB = digitemp;

endInterrupt = 1;
if (powerOnInterval == 0) {
if (PowerBlocked == 0) {
TRISA4 = 1;
}
} else {
powerOnInterval--;
}

static unsigned int KeyTimeCounter = 0;
static unsigned char LastKeysState = 0;
static unsigned char long_press = 0;
static unsigned char ButtonPressTimeIn1 = 0;
static unsigned char ButtonPressTimeIn2 = 0;
static unsigned char ButtonPressTimeOut = 0;
unsigned char CurrentKeysState = 0;

if (ButtonPressTimeOut > 0) {
ButtonPressTimeOut--;
} else {

KeyCode = 0;

if (RA5) {
CurrentKeysState = CurrentKeysState | 0b00000001;
ButtonPressTimeIn1 = 25;
} else {
if (ButtonPressTimeIn1 == 0) {
CurrentKeysState = CurrentKeysState & 0b11111110;
} else {
ButtonPressTimeIn1--;
}
}

if (RA2) {
CurrentKeysState = CurrentKeysState | 0b00000010;
ButtonPressTimeIn2 = 25;
} else {
if (ButtonPressTimeIn2 == 0) {
CurrentKeysState = CurrentKeysState & 0b11111101;
} else {
ButtonPressTimeIn2--;
}
}

if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressTimeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
if (CurrentKeysState > 0) {
if (LastKeysState != CurrentKeysState) {
KeyTimeCounter = 0;
long_press = 0;
LastKeysState = CurrentKeysState;
} else if (KeyTimeCounter < 150) {
KeyTimeCounter++;
} else if (KeyTimeCounter == 150 && !long_press) {
long_press = 1;
}

if (long_press == 1) {
KeyCode = 30 + LastKeysState + 3;
long_press = 2;
ButtonPressTimeOut = 40;
}

} else if (LastKeysState > 0 && long_press == 0) {
KeyCode = 30 + LastKeysState;
LastKeysState = 0;
KeyTimeCounter = 0;
long_press = 0;
ButtonPressTimeOut = 40;

} else if (long_press == 2) {
LastKeysState = 0;
KeyTimeCounter = 0;
long_press = 0;
ButtonPressTimeOut = 40;
}
}
}

get_temp_Async();
}
}

void indData() {

unsigned char cd = 3;
unsigned char dN = 3;

if (sign != 0) {
setDigit(cd, 32);
cd--;
dN--;
} else if (temperature < 10) {
cd--;
dN--;
}

unsigned char isPoint = 0;
if(sign && temperature > 9 || temperature > 99){
isPoint = 1;
}

do {
unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
setDigit(cd - v, temperature % 10);
if (!isPoint) {
setPoint(cd - v, 1);
isPoint = 1;
}
temperature /= 10;
dN--;
} while (temperature > 0);

if (dN > 0) {
cd = dN;
if (temp_drob > 9 && dN == 1) temp_drob /= 10;

unsigned char v = (temp_drob > 9 ? 1 : 0);
setDigit(cd - v, temp_drob % 10);
}
}

unsigned char ReadCell(unsigned char cell, unsigned char * CellsData) {
FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Address)));
for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
if (CellsData[i] != 0xFF) {
return 0;
}
}
return 1;
}

void CellToInd(unsigned char cell) {
clrInd();
cell++;

if (cell > 9) {
setDigit(3, cell / 10);
setDigit(2, cell % 10);
} else {
setDigit(3, cell);
}

refreshInd();
}

void EditAddressMemory() {
getTemp_flags.ActiveProcess = 0;

PowerBlocked++;

clrInd();

unsigned char cell = 0;
unsigned char CellIsEmpty = 1;
unsigned char CellsData [(sizeof(DS_Address))];

unsigned char ErrorShowed = 0;
unsigned char RereadCell = 1;
while (1) {

if (KeyCode != 0 && ErrorShowed) {
KeyCode = 0;
ErrorShowed = 0;
RereadCell = 1;
}

if (KeyCode == 31) {
KeyCode = 0;
if (cell > 0) {
cell--;
} else {
cell = 16 - 1;
}
RereadCell = 1;
} else if (KeyCode == 32) {
KeyCode = 0;
if (cell < 16 - 1) {
cell++;
} else {
cell = 0;
}
RereadCell = 1;
} else if (KeyCode == 34) {
KeyCode = 0;
clrInd();
refreshInd();
break;
} else if (KeyCode == 35 && CellIsEmpty == 1) {
KeyCode = 0;
waitInterrupt();
unsigned char line;
if (INIT(line = 0b00001000) || INIT(line = 0b00000010)) {
waitInterrupt();
TX(0x33, line);
for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
waitInterrupt();
CellsData[i] = RX(line);
}
if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_Address)) - 1)) {
waitInterrupt();
WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Address)));
waitInterrupt();
RereadCell = 1;
} else {
ShowError();
ErrorShowed = 1;
}
} else {
ShowError();
ErrorShowed = 1;
}
} else if (KeyCode == 36 && CellIsEmpty == 0) {
KeyCode = 0;
for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
CellsData[i] = 0xFF;
}
waitInterrupt();
WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Address)));
waitInterrupt();
RereadCell = 1;
}

if (RereadCell) {
RereadCell = 0;
CellIsEmpty = ReadCell(cell, CellsData);
CellToInd(cell);
setPoint(1, !CellIsEmpty);
refreshInd();
}
}
waitInterrupt();
PowerBlocked--;
}

void Run_getTemp(unsigned char line) {

getTemp_flags.Init = 1;
getTemp_flags.Send_Address = 1;
getTemp_flags.CountAddressBytes = 0;
getTemp_flags.SendConvertTemp = 1;
getTemp_flags.PauseValue = 120;
getTemp_flags.SendGetTemp = 1;
getTemp_flags.ReadData = 1;
getTemp_flags.CountDataBytes = 0;
getTemp_flags.Error = 0;
getTemp_flags.DataIsRead = 0;
getTemp_flags.Line = line;

getTemp_flags.ActiveProcess = 1;

}

void Run_getInit(unsigned char line) {

getTemp_flags.Init = 1;
getTemp_flags.Send_Address = 0;
getTemp_flags.CountAddressBytes = 0;
getTemp_flags.SendConvertTemp = 0;
getTemp_flags.PauseValue = 0;
getTemp_flags.SendGetTemp = 0;
getTemp_flags.ReadData = 0;
getTemp_flags.CountDataBytes = 0;
getTemp_flags.Error = 0;
getTemp_flags.DataIsRead = 0;
getTemp_flags.Line = line;

getTemp_flags.ActiveProcess = 1;

}

void main() {

INTCON = 0;
OPTION_REG = 0b00000111;
TRISA = 0b00101110;
TRISB = 0b00000000;
PORTA = 0b00000000;
PORTB = 0b00000000;
TMR0 = TMR0_VALUE;
T2CON = 0b00000100;
CMCON = 0b00000111;

clrInd();
refreshInd();

INTCON = 0b10100000;

Reset_powerOnInterval();

unsigned char cell = 0;
unsigned char address;
unsigned int point_on_ind_delay = 0;
unsigned char TheStart = 1;
unsigned char line = 0b00000010;

KeyCode = 36;

while (1) {

if (KeyCode == 33) {
KeyCode = 0;
if (PowerBlocked != 1) {
PowerBlocked = 1;
point_on_ind_delay = 4000;
} else {
powerOnInterval = 0;
PowerBlocked = 0;
}
} else if (KeyCode == 31 || KeyCode == 32 || KeyCode == 34) {
Reset_powerOnInterval();

if (Broadcasting && KeyCode != 34) {

if (KeyCode == 31 && line != 0b00000010) {
TheStart = 1;
line = 0b00000010;
} else if (KeyCode == 32 && line != 0b00001000) {
TheStart = 1;
line = 0b00001000;
} else {
continue;
}
KeyCode = 0;
getTemp_flags.ActiveProcess = 0;
waitInterrupt();
Run_getTemp(line);

} else {
getTemp_flags.ActiveProcess = 0;

address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
Broadcasting = address == ((sizeof(DS_Address)) * 16);
KeyCode = 0;
if (Broadcasting) {
TheStart = 1;
} else {
FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
cell = address / (sizeof(DS_Address));
CellToInd(cell);
}
line = 0b00000010;
Run_getInit(line);
while(getTemp_flags.ActiveProcess);
Run_getTemp(line);
}

} else if (KeyCode == 35) {
Reset_powerOnInterval();
KeyCode = 0;
Broadcasting = 1;
line = 0b00001000;
getTemp_flags.ActiveProcess = 0;
waitInterrupt();
Run_getTemp(line);
TheStart = 1;
} else if (KeyCode == 36) {
KeyCode = 0;
if (!TheStart) {
EditAddressMemory();
}

Reset_powerOnInterval();
address = FindCell(((sizeof(DS_Address)) * 16), 0);
Broadcasting = address == ((sizeof(DS_Address)) * 16);
if (Broadcasting) {
TheStart = 1;
} else {
FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
cell = address / (sizeof(DS_Address));

CellToInd(cell);
}
line = 0b00000010;
Run_getTemp(line);
}

if (getTemp_flags.Error) {
if (Broadcasting && line == 0b00001000) {
line = 0b00000010;
} else {
clrInd();
ShowError();
}
Run_getTemp(line);
} else if (getTemp_flags.DataIsRead) {
clrInd();
indData();
Run_getTemp(line);
} else if (TheStart) {
TheStart = 0;
clrInd();
setDigit(1, 32);
setDigit(2, 32);
setDigit(3, 32);
}

if (point_on_ind_delay > 0) {
setPoint(1, 1);
point_on_ind_delay--;
}

refreshInd();

}
}
