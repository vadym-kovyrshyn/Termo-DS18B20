

Microchip Technology PIC PRO Macro Assembler V1.40 build -251452761 
                                                                                               Sun Jan 22 21:30:39 2017

Microchip Technology Omniscient Code Generator v1.40 (PRO mode) build 201612010151
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	swtext1,local,class=CONST,delta=2
    51                           	psect	pa_nodes,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 1.40
    55                           ; Generated 01/12/2016 GMT
    56                           ; 
    57                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F628A Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0092                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009F                     	;# 
   125                           
   126                           	psect	idataBANK1
   127  0000                     __pidataBANK1:	
   128                           
   129                           	psect	strings
   130  0796                     __pstrings:	
   131  0796                     stringtab:	
   132  0796                     __stringtab:	
   133  0796                     stringcode:	
   134                           ;	String table - string pointers are 1 byte each
   135                           
   136  0796                     stringdir:	
   137  0796  3007               	movlw	high stringdir
   138  0797  008A               	movwf	10
   139  0798  0804               	movf	4,w
   140  0799  0A84               	incf	4,f
   141  079A  0782               	addwf	2,f
   142  079B                     __stringbase:	
   143  079B  3400               	retlw	0
   144  079C                     __end_of__stringtab:	
   145  079C                     _PortAData:	
   146  079C  3480               	retlw	128
   147  079D  3440               	retlw	64
   148  079E  3401               	retlw	1
   149  079F                     __end_of_PortAData:	
   150                           
   151                           	psect	nvBANK0
   152  005D                     __pnvBANK0:	
   153  005D                     _powerOnInterval:	
   154  005D                     	ds	2
   155  005F                     _KeyCode:	
   156  005F                     	ds	1
   157  001F                     _CMCON	set	31
   158  000B                     _INTCON	set	11
   159  000B                     _INTCONbits	set	11
   160  0005                     _PORTA	set	5
   161  0006                     _PORTB	set	6
   162  0012                     _T2CON	set	18
   163  0001                     _TMR0	set	1
   164  002A                     _RA2	set	42
   165  002D                     _RA5	set	45
   166  005A                     _T0IF	set	90
   167  009B                     _EEADR	set	155
   168  009C                     _EECON1bits	set	156
   169  009D                     _EECON2	set	157
   170  009A                     _EEDATA	set	154
   171  0081                     _OPTION_REG	set	129
   172  0085                     _TRISA	set	133
   173  0086                     _TRISB	set	134
   174  042C                     _TRISA4	set	1068
   175                           
   176                           ; #config settings
   177  0000                     
   178                           	psect	cinit
   179  0011                     start_initialization:	
   180  0011                     __initialization:	
   181  0011  30FF               	movlw	255
   182                           
   183                           ; Initialize objects allocated to BANK1
   184  0012  1683               	bsf	3,5	;RP0=1, select bank1
   185                           
   186                           ;initializer for _DS_ReadData
   187  0013  00B7               	movwf	__pdataBANK1& (0+127)
   188  0014  00B8               	movwf	(__pdataBANK1+1)& (0+127)
   189  0015  00B9               	movwf	(__pdataBANK1+2)& (0+127)
   190  0016  00BA               	movwf	(__pdataBANK1+3)& (0+127)
   191  0017  00BB               	movwf	(__pdataBANK1+4)& (0+127)
   192  0018  00BC               	movwf	(__pdataBANK1+5)& (0+127)
   193  0019  00BD               	movwf	(__pdataBANK1+6)& (0+127)
   194  001A  00BE               	movwf	(__pdataBANK1+7)& (0+127)
   195  001B  00BF               	movwf	(__pdataBANK1+8)& (0+127)
   196                           
   197                           ;initializer for _DS_Address
   198  001C  00C0               	movwf	(__pdataBANK1+9)& (0+127)
   199  001D  00C1               	movwf	(__pdataBANK1+10)& (0+127)
   200  001E  00C2               	movwf	(__pdataBANK1+11)& (0+127)
   201  001F  00C3               	movwf	(__pdataBANK1+12)& (0+127)
   202  0020  00C4               	movwf	(__pdataBANK1+13)& (0+127)
   203  0021  00C5               	movwf	(__pdataBANK1+14)& (0+127)
   204  0022  00C6               	movwf	(__pdataBANK1+15)& (0+127)
   205  0023  00C7               	movwf	(__pdataBANK1+16)& (0+127)
   206  0024  3044               	movlw	low __pbssBANK0
   207                           
   208                           ; Clear objects allocated to BANK0
   209  0025  1383               	bcf	3,7	;select IRP bank0
   210  0026  0084               	movwf	4
   211  0027  305D               	movlw	low (__pbssBANK0+25)
   212  0028  279F               	fcall	clear_ram0
   213                           
   214                           ; Clear objects allocated to BITBANK0
   215  0029  1283               	bcf	3,5	;RP0=0, select bank0
   216  002A  01E0               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   217  002B                     end_of_initialization:	
   218                           ;End of C runtime variable initialization code
   219                           
   220  002B                     __end_of__initialization:	
   221  002B  0183               	clrf	3
   222  002C  282D               	ljmp	_main	;jump to C main() function
   223                           
   224                           	psect	bssBANK0
   225  0044                     __pbssBANK0:	
   226  0044                     _getTemp_flags:	
   227  0044                     	ds	6
   228  004A                     _digits:	
   229  004A                     	ds	3
   230  004D                     _digits_0:	
   231  004D                     	ds	3
   232  0050                     F@KeyTimeCounter:	
   233  0050                     	ds	2
   234  0052                     F@ButtonPressTimeIn1:	
   235  0052                     	ds	1
   236  0053                     F@ButtonPressTimeIn2:	
   237  0053                     	ds	1
   238  0054                     F@ButtonPressTimeOut:	
   239  0054                     	ds	1
   240  0055                     F@DigitNumber:	
   241  0055                     	ds	1
   242  0056                     F@LastKeysState:	
   243  0056                     	ds	1
   244  0057                     F@long_press:	
   245  0057                     	ds	1
   246  0058                     _PowerBlocked:	
   247  0058                     	ds	1
   248  0059                     _digitemp:	
   249  0059                     	ds	1
   250  005A                     _sign:	
   251  005A                     	ds	1
   252  005B                     _temp_drob:	
   253  005B                     	ds	1
   254  005C                     _temperature:	
   255  005C                     	ds	1
   256                           
   257                           	psect	bitbssBANK0
   258  0300                     __pbitbssBANK0:	
   259  0300                     _Broadcasting:	
   260  0300                     	ds	1
   261  0301                     _endInterrupt:	
   262  0301                     	ds	1
   263                           
   264                           	psect	dataBANK1
   265  00B7                     __pdataBANK1:	
   266  00B7                     _DS_ReadData:	
   267  00B7                     	ds	9
   268  00C0                     _DS_Address:	
   269  00C0                     	ds	8
   270                           
   271                           	psect	clrtext
   272  079F                     clear_ram0:	
   273                           ;	Called with FSR containing the base address, and
   274                           ;	W with the last address+1
   275                           
   276  079F  0064               	clrwdt	;clear the watchdog before getting into this loop
   277  07A0                     clrloop0:	
   278  07A0  0180               	clrf	0	;clear RAM location pointed to by FSR
   279  07A1  0A84               	incf	4,f	;increment pointer
   280  07A2  0604               	xorwf	4,w	;XOR with final address
   281  07A3  1903               	btfsc	3,2	;have we reached the end yet?
   282  07A4  3400               	retlw	0	;all done for this memory range, return
   283  07A5  0604               	xorwf	4,w	;XOR again to restore value
   284  07A6  2FA0               	goto	clrloop0	;do the next byte
   285                           
   286                           	psect	cstackBANK1
   287  00A0                     __pcstackBANK1:	
   288  00A0                     EditAddressMemory@CellsData:	
   289                           
   290                           ; 8 bytes @ 0x0
   291  00A0                     	ds	8
   292  00A8                     EditAddressMemory@ErrorShowed:	
   293                           
   294                           ; 1 bytes @ 0x8
   295  00A8                     	ds	1
   296  00A9                     EditAddressMemory@line:	
   297                           
   298                           ; 1 bytes @ 0x9
   299  00A9                     	ds	1
   300  00AA                     EditAddressMemory@RereadCell:	
   301                           
   302                           ; 1 bytes @ 0xA
   303  00AA                     	ds	1
   304  00AB                     EditAddressMemory@CellIsEmpty:	
   305                           
   306                           ; 1 bytes @ 0xB
   307  00AB                     	ds	1
   308  00AC                     EditAddressMemory@i:	
   309                           
   310                           ; 1 bytes @ 0xC
   311  00AC                     	ds	1
   312  00AD                     EditAddressMemory@i_257:	
   313                           
   314                           ; 1 bytes @ 0xD
   315  00AD                     	ds	1
   316  00AE                     EditAddressMemory@cell:	
   317                           
   318                           ; 1 bytes @ 0xE
   319  00AE                     	ds	1
   320  00AF                     main@point_on_ind_delay:	
   321                           
   322                           ; 2 bytes @ 0xF
   323  00AF                     	ds	2
   324  00B1                     _main$273:	
   325                           
   326                           ; 2 bytes @ 0x11
   327  00B1                     	ds	2
   328  00B3                     main@cell:	
   329                           
   330                           ; 1 bytes @ 0x13
   331  00B3                     	ds	1
   332  00B4                     main@TheStart:	
   333                           
   334                           ; 1 bytes @ 0x14
   335  00B4                     	ds	1
   336  00B5                     main@address:	
   337                           
   338                           ; 1 bytes @ 0x15
   339  00B5                     	ds	1
   340  00B6                     main@line:	
   341                           
   342                           ; 1 bytes @ 0x16
   343  00B6                     	ds	1
   344                           
   345                           	psect	cstackCOMMON
   346  0070                     __pcstackCOMMON:	
   347  0070                     ?_waitInterrupt:	
   348  0070                     ?_Reset_powerOnInterval:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_refreshInd:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_clrInd:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_ShowError:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_convDig:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ??_convDig:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_EERD:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_INIT:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_RX:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_get_temp_Async:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_F:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_indData:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_CellToInd:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_EditAddressMemory:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_Run_getTemp:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_Run_getInit:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_main:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?i1_INIT:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ??i1_INIT:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?i1_TX:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?i1_RX:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ??i1_RX:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?i1_calc_crc:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?___wmul:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     convDig@dig:	
   421                           ; 2 bytes @ 0x0
   422                           
   423  0070                     i1TX@line:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     i1calc_crc@len:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ___wmul@multiplier:	
   430                           ; 1 bytes @ 0x0
   431                           
   432                           
   433                           ; 2 bytes @ 0x0
   434  0070                     	ds	1
   435  0071                     ??i1_TX:	
   436  0071                     ??i1_calc_crc:	
   437                           ; 1 bytes @ 0x1
   438                           
   439  0071                     i1INIT@line:	
   440                           ; 1 bytes @ 0x1
   441                           
   442  0071                     i1RX@line:	
   443                           ; 1 bytes @ 0x1
   444                           
   445  0071                     i1calc_crc@mas:	
   446                           ; 1 bytes @ 0x1
   447                           
   448                           
   449                           ; 1 bytes @ 0x1
   450  0071                     	ds	1
   451  0072                     i1INIT@Zero:	
   452  0072                     i1TX@cmd:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0072                     i1RX@Zero:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0072                     i1calc_crc@dat:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     ___wmul@multiplicand:	
   462                           ; 1 bytes @ 0x2
   463                           
   464                           
   465                           ; 2 bytes @ 0x2
   466  0072                     	ds	1
   467  0073                     i1INIT@b:	
   468  0073                     i1TX@temp:	
   469                           ; 1 bytes @ 0x3
   470                           
   471  0073                     i1RX@d:	
   472                           ; 1 bytes @ 0x3
   473                           
   474  0073                     i1calc_crc@fb:	
   475                           ; 1 bytes @ 0x3
   476                           
   477                           
   478                           ; 1 bytes @ 0x3
   479  0073                     	ds	1
   480  0074                     ??___wmul:	
   481  0074                     i1INIT@One:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     i1TX@Zero:	
   485                           ; 1 bytes @ 0x4
   486                           
   487  0074                     i1RX@i:	
   488                           ; 1 bytes @ 0x4
   489                           
   490  0074                     i1calc_crc@i:	
   491                           ; 1 bytes @ 0x4
   492                           
   493  0074                     ___wmul@product:	
   494                           ; 1 bytes @ 0x4
   495                           
   496                           
   497                           ; 2 bytes @ 0x4
   498  0074                     	ds	1
   499  0075                     i1TX@i:	
   500  0075                     i1RX@One:	
   501                           ; 1 bytes @ 0x5
   502                           
   503  0075                     i1calc_crc@crc:	
   504                           ; 1 bytes @ 0x5
   505                           
   506                           
   507                           ; 1 bytes @ 0x5
   508  0075                     	ds	1
   509  0076                     ?___awdiv:	
   510  0076                     i1TX@One:	
   511                           ; 2 bytes @ 0x6
   512                           
   513  0076                     ___awdiv@divisor:	
   514                           ; 1 bytes @ 0x6
   515                           
   516                           
   517                           ; 2 bytes @ 0x6
   518  0076                     	ds	2
   519  0078                     ___awdiv@dividend:	
   520                           
   521                           ; 2 bytes @ 0x8
   522  0078                     	ds	2
   523  007A                     ??___awdiv:	
   524  007A                     ___awdiv@counter:	
   525                           ; 1 bytes @ 0xA
   526                           
   527                           
   528                           ; 1 bytes @ 0xA
   529  007A                     	ds	1
   530  007B                     ___awdiv@sign:	
   531                           
   532                           ; 1 bytes @ 0xB
   533  007B                     	ds	1
   534  007C                     ___awdiv@quotient:	
   535                           
   536                           ; 2 bytes @ 0xC
   537  007C                     	ds	2
   538                           
   539                           	psect	cstackBANK0
   540  0020                     __pcstackBANK0:	
   541  0020                     ??_get_temp_Async:	
   542                           
   543                           ; 1 bytes @ 0x0
   544  0020                     	ds	2
   545  0022                     get_temp_Async@i:	
   546                           
   547                           ; 1 bytes @ 0x2
   548  0022                     	ds	1
   549  0023                     get_temp_Async@temp1:	
   550                           
   551                           ; 1 bytes @ 0x3
   552  0023                     	ds	1
   553  0024                     get_temp_Async@temp2:	
   554                           
   555                           ; 1 bytes @ 0x4
   556  0024                     	ds	1
   557  0025                     get_temp_Async@line:	
   558                           
   559                           ; 1 bytes @ 0x5
   560  0025                     	ds	1
   561  0026                     ??_F:	
   562                           
   563                           ; 1 bytes @ 0x6
   564  0026                     	ds	5
   565  002B                     F@dig:	
   566                           
   567                           ; 1 bytes @ 0xB
   568  002B                     	ds	1
   569  002C                     F@CurrentKeysState:	
   570                           
   571                           ; 1 bytes @ 0xC
   572  002C                     	ds	1
   573  002D                     ??_waitInterrupt:	
   574  002D                     ??_Reset_powerOnInterval:	
   575                           ; 1 bytes @ 0xD
   576                           
   577  002D                     ?_setPoint:	
   578                           ; 1 bytes @ 0xD
   579                           
   580  002D                     ??_refreshInd:	
   581                           ; 1 bytes @ 0xD
   582                           
   583  002D                     ??_clrInd:	
   584                           ; 1 bytes @ 0xD
   585                           
   586  002D                     ?_EEWR:	
   587                           ; 1 bytes @ 0xD
   588                           
   589  002D                     ??_EERD:	
   590                           ; 1 bytes @ 0xD
   591                           
   592  002D                     ??_INIT:	
   593                           ; 1 bytes @ 0xD
   594                           
   595  002D                     ?_TX:	
   596                           ; 1 bytes @ 0xD
   597                           
   598  002D                     ??_RX:	
   599                           ; 1 bytes @ 0xD
   600                           
   601  002D                     ?_calc_crc:	
   602                           ; 1 bytes @ 0xD
   603                           
   604  002D                     ??_Run_getTemp:	
   605                           ; 1 bytes @ 0xD
   606                           
   607  002D                     ??_Run_getInit:	
   608                           ; 1 bytes @ 0xD
   609                           
   610  002D                     ?___lbdiv:	
   611                           ; 1 bytes @ 0xD
   612                           
   613  002D                     ?___lbmod:	
   614                           ; 1 bytes @ 0xD
   615                           
   616  002D                     setPoint@value:	
   617                           ; 1 bytes @ 0xD
   618                           
   619  002D                     EEWR@data:	
   620                           ; 1 bytes @ 0xD
   621                           
   622  002D                     EERD@address:	
   623                           ; 1 bytes @ 0xD
   624                           
   625  002D                     TX@line:	
   626                           ; 1 bytes @ 0xD
   627                           
   628  002D                     calc_crc@len:	
   629                           ; 1 bytes @ 0xD
   630                           
   631  002D                     Run_getTemp@line:	
   632                           ; 1 bytes @ 0xD
   633                           
   634  002D                     Run_getInit@line:	
   635                           ; 1 bytes @ 0xD
   636                           
   637  002D                     ___lbdiv@divisor:	
   638                           ; 1 bytes @ 0xD
   639                           
   640  002D                     ___lbmod@divisor:	
   641                           ; 1 bytes @ 0xD
   642                           
   643                           
   644                           ; 1 bytes @ 0xD
   645  002D                     	ds	1
   646  002E                     ??_setPoint:	
   647  002E                     ??_EEWR:	
   648                           ; 1 bytes @ 0xE
   649                           
   650  002E                     ??_TX:	
   651                           ; 1 bytes @ 0xE
   652                           
   653  002E                     ??_calc_crc:	
   654                           ; 1 bytes @ 0xE
   655                           
   656  002E                     ??___lbdiv:	
   657                           ; 1 bytes @ 0xE
   658                           
   659  002E                     ??___lbmod:	
   660                           ; 1 bytes @ 0xE
   661                           
   662  002E                     setPoint@dignum:	
   663                           ; 1 bytes @ 0xE
   664                           
   665  002E                     EEWR@address:	
   666                           ; 1 bytes @ 0xE
   667                           
   668  002E                     EERD@INTCON_BUP:	
   669                           ; 1 bytes @ 0xE
   670                           
   671  002E                     INIT@line:	
   672                           ; 1 bytes @ 0xE
   673                           
   674  002E                     RX@line:	
   675                           ; 1 bytes @ 0xE
   676                           
   677  002E                     calc_crc@dat:	
   678                           ; 1 bytes @ 0xE
   679                           
   680  002E                     ___lbdiv@dividend:	
   681                           ; 1 bytes @ 0xE
   682                           
   683                           
   684                           ; 1 bytes @ 0xE
   685  002E                     	ds	1
   686  002F                     EEWR@INTCON_BUP:	
   687  002F                     EERD@EEDATA_BUP:	
   688                           ; 1 bytes @ 0xF
   689                           
   690  002F                     INIT@Zero:	
   691                           ; 1 bytes @ 0xF
   692                           
   693  002F                     TX@cmd:	
   694                           ; 1 bytes @ 0xF
   695                           
   696  002F                     RX@Zero:	
   697                           ; 1 bytes @ 0xF
   698                           
   699  002F                     calc_crc@fb:	
   700                           ; 1 bytes @ 0xF
   701                           
   702  002F                     ___lbdiv@counter:	
   703                           ; 1 bytes @ 0xF
   704                           
   705  002F                     ___lbmod@dividend:	
   706                           ; 1 bytes @ 0xF
   707                           
   708                           
   709                           ; 1 bytes @ 0xF
   710  002F                     	ds	1
   711  0030                     ?_FillArrayFromEEPROM:	
   712  0030                     ?_WriteArrayToEEPROM:	
   713                           ; 1 bytes @ 0x10
   714                           
   715  0030                     FillArrayFromEEPROM@address_start:	
   716                           ; 1 bytes @ 0x10
   717                           
   718  0030                     WriteArrayToEEPROM@address_start:	
   719                           ; 1 bytes @ 0x10
   720                           
   721  0030                     INIT@b:	
   722                           ; 1 bytes @ 0x10
   723                           
   724  0030                     TX@temp:	
   725                           ; 1 bytes @ 0x10
   726                           
   727  0030                     RX@d:	
   728                           ; 1 bytes @ 0x10
   729                           
   730  0030                     calc_crc@mas:	
   731                           ; 1 bytes @ 0x10
   732                           
   733  0030                     ___lbdiv@quotient:	
   734                           ; 1 bytes @ 0x10
   735                           
   736  0030                     ___lbmod@counter:	
   737                           ; 1 bytes @ 0x10
   738                           
   739                           
   740                           ; 1 bytes @ 0x10
   741  0030                     	ds	1
   742  0031                     FillArrayFromEEPROM@quantity:	
   743  0031                     WriteArrayToEEPROM@quantity:	
   744                           ; 1 bytes @ 0x11
   745                           
   746  0031                     INIT@One:	
   747                           ; 1 bytes @ 0x11
   748                           
   749  0031                     TX@Zero:	
   750                           ; 1 bytes @ 0x11
   751                           
   752  0031                     RX@i:	
   753                           ; 1 bytes @ 0x11
   754                           
   755  0031                     calc_crc@i:	
   756                           ; 1 bytes @ 0x11
   757                           
   758  0031                     ___lbmod@rem:	
   759                           ; 1 bytes @ 0x11
   760                           
   761                           
   762                           ; 1 bytes @ 0x11
   763  0031                     	ds	1
   764  0032                     ?_setDigit:	
   765  0032                     ??_FillArrayFromEEPROM:	
   766                           ; 1 bytes @ 0x12
   767                           
   768  0032                     ??_WriteArrayToEEPROM:	
   769                           ; 1 bytes @ 0x12
   770                           
   771  0032                     setDigit@data:	
   772                           ; 1 bytes @ 0x12
   773                           
   774  0032                     TX@i:	
   775                           ; 1 bytes @ 0x12
   776                           
   777  0032                     RX@One:	
   778                           ; 1 bytes @ 0x12
   779                           
   780  0032                     calc_crc@crc:	
   781                           ; 1 bytes @ 0x12
   782                           
   783                           
   784                           ; 1 bytes @ 0x12
   785  0032                     	ds	1
   786  0033                     ??_setDigit:	
   787  0033                     FillArrayFromEEPROM@container:	
   788                           ; 1 bytes @ 0x13
   789                           
   790  0033                     WriteArrayToEEPROM@container:	
   791                           ; 1 bytes @ 0x13
   792                           
   793  0033                     TX@One:	
   794                           ; 1 bytes @ 0x13
   795                           
   796                           
   797                           ; 1 bytes @ 0x13
   798  0033                     	ds	1
   799  0034                     FillArrayFromEEPROM@i:	
   800  0034                     WriteArrayToEEPROM@i:	
   801                           ; 1 bytes @ 0x14
   802                           
   803                           
   804                           ; 1 bytes @ 0x14
   805  0034                     	ds	1
   806  0035                     ?_FindCell:	
   807  0035                     ?_ReadCell:	
   808                           ; 1 bytes @ 0x15
   809                           
   810  0035                     setDigit@a:	
   811                           ; 1 bytes @ 0x15
   812                           
   813  0035                     FindCell@previous:	
   814                           ; 1 bytes @ 0x15
   815                           
   816  0035                     ReadCell@CellsData:	
   817                           ; 1 bytes @ 0x15
   818                           
   819                           
   820                           ; 1 bytes @ 0x15
   821  0035                     	ds	1
   822  0036                     ??_ShowError:	
   823  0036                     ??_FindCell:	
   824                           ; 1 bytes @ 0x16
   825                           
   826  0036                     ??_indData:	
   827                           ; 1 bytes @ 0x16
   828                           
   829  0036                     ??_ReadCell:	
   830                           ; 1 bytes @ 0x16
   831                           
   832  0036                     ??_CellToInd:	
   833                           ; 1 bytes @ 0x16
   834                           
   835  0036                     CellToInd@cell:	
   836                           ; 1 bytes @ 0x16
   837                           
   838  0036                     FindCell@CellsData:	
   839                           ; 1 bytes @ 0x16
   840                           
   841                           
   842                           ; 8 bytes @ 0x16
   843  0036                     	ds	1
   844  0037                     indData@v_240:	
   845  0037                     ReadCell@cell:	
   846                           ; 1 bytes @ 0x17
   847                           
   848                           
   849                           ; 1 bytes @ 0x17
   850  0037                     	ds	1
   851  0038                     indData@isPoint:	
   852  0038                     ReadCell@i:	
   853                           ; 1 bytes @ 0x18
   854                           
   855                           
   856                           ; 1 bytes @ 0x18
   857  0038                     	ds	1
   858  0039                     ??_EditAddressMemory:	
   859  0039                     indData@v:	
   860                           ; 1 bytes @ 0x19
   861                           
   862                           
   863                           ; 1 bytes @ 0x19
   864  0039                     	ds	1
   865  003A                     indData@dN:	
   866                           
   867                           ; 1 bytes @ 0x1A
   868  003A                     	ds	1
   869  003B                     indData@cd:	
   870                           
   871                           ; 1 bytes @ 0x1B
   872  003B                     	ds	3
   873  003E                     FindCell@addressNew:	
   874                           
   875                           ; 1 bytes @ 0x1E
   876  003E                     	ds	1
   877  003F                     FindCell@CellIsEmpty:	
   878                           
   879                           ; 1 bytes @ 0x1F
   880  003F                     	ds	1
   881  0040                     FindCell@addressStart:	
   882                           
   883                           ; 1 bytes @ 0x20
   884  0040                     	ds	1
   885  0041                     FindCell@i:	
   886                           
   887                           ; 1 bytes @ 0x21
   888  0041                     	ds	1
   889  0042                     FindCell@address:	
   890                           
   891                           ; 1 bytes @ 0x22
   892  0042                     	ds	1
   893  0043                     ??_main:	
   894                           
   895                           ; 1 bytes @ 0x23
   896  0043                     	ds	1
   897                           
   898                           	psect	maintext
   899  002D                     __pmaintext:	
   900 ;;
   901 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   902 ;;
   903 ;; *************** function _main *****************
   904 ;; Defined at:
   905 ;;		line 725 in file "prog.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;		None
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  point_on_ind    2   15[BANK1 ] unsigned int 
   910 ;;  line            1   22[BANK1 ] unsigned char 
   911 ;;  address         1   21[BANK1 ] unsigned char 
   912 ;;  TheStart        1   20[BANK1 ] unsigned char 
   913 ;;  cell            1   19[BANK1 ] unsigned char 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : B00/0
   920 ;;		On exit  : 300/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   923 ;;      Params:         0       0       0       0
   924 ;;      Locals:         0       0       8       0
   925 ;;      Temps:          0       1       0       0
   926 ;;      Totals:         0       1       8       0
   927 ;;Total ram usage:        9 bytes
   928 ;; Hardware stack levels required when called:    7
   929 ;; This function calls:
   930 ;;		_CellToInd
   931 ;;		_EditAddressMemory
   932 ;;		_FillArrayFromEEPROM
   933 ;;		_FindCell
   934 ;;		_Reset_powerOnInterval
   935 ;;		_Run_getInit
   936 ;;		_Run_getTemp
   937 ;;		_ShowError
   938 ;;		_clrInd
   939 ;;		_indData
   940 ;;		_refreshInd
   941 ;;		_setDigit
   942 ;;		_setPoint
   943 ;;		_waitInterrupt
   944 ;; This function is called by:
   945 ;;		Startup code after reset
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           
   950                           ;psect for function _main
   951  002D                     _main:	
   952                           
   953                           ;prog.c: 727: INTCON = 0;
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   957  002D  018B               	clrf	11	;volatile
   958                           
   959                           ;prog.c: 728: OPTION_REG = 0b00000111;
   960  002E  3007               	movlw	7
   961  002F  1683               	bsf	3,5	;RP0=1, select bank1
   962  0030  0081               	movwf	1	;volatile
   963                           
   964                           ;prog.c: 729: TRISA = 0b00101110;
   965  0031  302E               	movlw	46
   966  0032  0085               	movwf	5	;volatile
   967                           
   968                           ;prog.c: 730: TRISB = 0b00000000;
   969  0033  0186               	clrf	6	;volatile
   970                           
   971                           ;prog.c: 731: PORTA = 0b00000000;
   972  0034  1283               	bcf	3,5	;RP0=0, select bank0
   973  0035  0185               	clrf	5	;volatile
   974                           
   975                           ;prog.c: 732: PORTB = 0b00000000;
   976  0036  0186               	clrf	6	;volatile
   977                           
   978                           ;prog.c: 733: TMR0 = TMR0_VALUE;
   979  0037  30EB               	movlw	235
   980  0038  0081               	movwf	1	;volatile
   981                           
   982                           ;prog.c: 734: T2CON = 0b00000100;
   983  0039  3004               	movlw	4
   984  003A  0092               	movwf	18	;volatile
   985                           
   986                           ;prog.c: 735: CMCON = 0b00000111;
   987  003B  3007               	movlw	7
   988  003C  009F               	movwf	31	;volatile
   989                           
   990                           ;prog.c: 737: clrInd();
   991  003D  27B5               	fcall	_clrInd
   992                           
   993                           ;prog.c: 738: refreshInd();
   994  003E  27A7               	fcall	_refreshInd
   995                           
   996                           ;prog.c: 740: INTCON = 0b10100000;
   997  003F  30A0               	movlw	160
   998  0040  008B               	movwf	11	;volatile
   999                           
  1000                           ;prog.c: 742: Reset_powerOnInterval();
  1001  0041  27AF               	fcall	_Reset_powerOnInterval
  1002  0042  3002               	movlw	2
  1003                           
  1004                           ;prog.c: 744: unsigned char cell = 0;
  1005  0043  1683               	bsf	3,5	;RP0=1, select bank1
  1006  0044  01B3               	clrf	main@cell^(0+128)
  1007                           
  1008                           ;prog.c: 745: unsigned char address;
  1009                           ;prog.c: 746: unsigned int point_on_ind_delay = 0;
  1010  0045  01AF               	clrf	main@point_on_ind_delay^(0+128)
  1011  0046  01B0               	clrf	(main@point_on_ind_delay+1)^(0+128)
  1012                           
  1013                           ;prog.c: 747: unsigned char TheStart = 1;
  1014  0047  01B4               	clrf	main@TheStart^(0+128)
  1015  0048  0AB4               	incf	main@TheStart^(0+128),f
  1016                           
  1017                           ;prog.c: 748: unsigned char line = 0b00000010;
  1018  0049  00B6               	movwf	main@line^(0+128)
  1019                           
  1020                           ;prog.c: 750: KeyCode = 36;
  1021  004A  3024               	movlw	36
  1022  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1023  004C  00DF               	movwf	_KeyCode	;volatile
  1024  004D                     l4107:	
  1025                           
  1026                           ;prog.c: 754: if (KeyCode == 33) {
  1027  004D  3021               	movlw	33
  1028  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1029  004F  065F               	xorwf	_KeyCode,w	;volatile
  1030  0050  1D03               	btfss	3,2
  1031  0051  2862               	goto	l4119
  1032                           
  1033                           ;prog.c: 755: KeyCode = 0;
  1034  0052  01DF               	clrf	_KeyCode	;volatile
  1035                           
  1036                           ;prog.c: 756: if (PowerBlocked != 1) {
  1037  0053  0358               	decf	_PowerBlocked,w
  1038  0054  1903               	btfsc	3,2
  1039  0055  285E               	goto	l4117
  1040  0056  30A0               	movlw	160
  1041                           
  1042                           ;prog.c: 757: PowerBlocked = 1;
  1043  0057  01D8               	clrf	_PowerBlocked
  1044  0058  0AD8               	incf	_PowerBlocked,f
  1045                           
  1046                           ;prog.c: 758: point_on_ind_delay = 4000;
  1047  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1048  005A  00AF               	movwf	main@point_on_ind_delay^(0+128)
  1049  005B  300F               	movlw	15
  1050  005C  00B0               	movwf	(main@point_on_ind_delay^(0+128)+1)
  1051                           
  1052                           ;prog.c: 759: } else {
  1053  005D  28FC               	goto	l4231
  1054  005E                     l4117:	
  1055                           
  1056                           ;prog.c: 760: powerOnInterval = 0;
  1057  005E  01DD               	clrf	_powerOnInterval
  1058  005F  01DE               	clrf	_powerOnInterval+1
  1059                           
  1060                           ;prog.c: 761: PowerBlocked = 0;
  1061  0060  01D8               	clrf	_PowerBlocked
  1062  0061  28FC               	goto	l4231
  1063  0062                     l4119:	
  1064  0062  301F               	movlw	31
  1065  0063  065F               	xorwf	_KeyCode,w	;volatile
  1066  0064  1903               	btfsc	3,2
  1067  0065  286E               	goto	l4125
  1068  0066  3020               	movlw	32
  1069  0067  065F               	xorwf	_KeyCode,w	;volatile
  1070  0068  1903               	btfsc	3,2
  1071  0069  286E               	goto	l4125
  1072  006A  3022               	movlw	34
  1073  006B  065F               	xorwf	_KeyCode,w	;volatile
  1074  006C  1D03               	btfss	3,2
  1075  006D  28CB               	goto	l4185
  1076  006E                     l4125:	
  1077                           
  1078                           ;prog.c: 764: Reset_powerOnInterval();
  1079  006E  27AF               	fcall	_Reset_powerOnInterval
  1080                           
  1081                           ;prog.c: 766: if (Broadcasting && KeyCode != 34) {
  1082  006F  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1083  0070  2895               	goto	l353
  1084  0071  3022               	movlw	34
  1085  0072  065F               	xorwf	_KeyCode,w	;volatile
  1086  0073  1903               	btfsc	3,2
  1087  0074  2895               	goto	l353
  1088                           
  1089                           ;prog.c: 768: if (KeyCode == 31 && line != 0b00000010) {
  1090  0075  301F               	movlw	31
  1091  0076  065F               	xorwf	_KeyCode,w	;volatile
  1092  0077  1D03               	btfss	3,2
  1093  0078  2880               	goto	l4139
  1094  0079  3002               	movlw	2
  1095  007A  1683               	bsf	3,5	;RP0=1, select bank1
  1096  007B  0636               	xorwf	main@line^(0+128),w
  1097  007C  1903               	btfsc	3,2
  1098  007D  2880               	goto	l4139
  1099  007E  3002               	movlw	2
  1100  007F  288B               	goto	L6
  1101  0080                     l4139:	
  1102                           ;prog.c: 771: } else if (KeyCode == 32 && line != 0b00001000) {
  1103                           
  1104                           ;prog.c: 770: line = 0b00000010;
  1105                           
  1106                           ;prog.c: 769: TheStart = 1;
  1107                           
  1108  0080  3020               	movlw	32
  1109  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0082  065F               	xorwf	_KeyCode,w	;volatile
  1111  0083  1D03               	btfss	3,2
  1112  0084  284D               	goto	l4107
  1113  0085  3008               	movlw	8
  1114  0086  1683               	bsf	3,5	;RP0=1, select bank1
  1115  0087  0636               	xorwf	main@line^(0+128),w
  1116  0088  1903               	btfsc	3,2
  1117  0089  284D               	goto	l4107
  1118  008A  3008               	movlw	8
  1119  008B                     L6:	
  1120                           
  1121                           ;prog.c: 772: TheStart = 1;
  1122  008B  01B4               	clrf	main@TheStart^(0+128)
  1123  008C  0AB4               	incf	main@TheStart^(0+128),f
  1124                           
  1125                           ;prog.c: 773: line = 0b00001000;
  1126  008D  00B6               	movwf	main@line^(0+128)
  1127                           
  1128                           ;prog.c: 776: }
  1129                           ;prog.c: 777: KeyCode = 0;
  1130                           
  1131                           ;prog.c: 774: } else {
  1132  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1133  008F  01DF               	clrf	_KeyCode	;volatile
  1134                           
  1135                           ;prog.c: 778: getTemp_flags.ActiveProcess = 0;
  1136  0090  1048               	bcf	_getTemp_flags+4,0
  1137                           
  1138                           ;prog.c: 779: waitInterrupt();
  1139  0091  27BB               	fcall	_waitInterrupt
  1140                           
  1141                           ;prog.c: 780: Run_getTemp(line);
  1142  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1143  0093  0836               	movf	main@line^(0+128),w
  1144  0094  28FB               	goto	L2
  1145  0095                     l353:	
  1146                           ;prog.c: 782: } else {
  1147                           
  1148  0095  3022               	movlw	34
  1149                           
  1150                           ;prog.c: 783: getTemp_flags.ActiveProcess = 0;
  1151  0096  1048               	bcf	_getTemp_flags+4,0
  1152                           
  1153                           ;prog.c: 785: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1154  0097  065F               	xorwf	_KeyCode,w	;volatile
  1155  0098  1903               	btfsc	3,2
  1156  0099  28A8               	goto	l4161
  1157  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1158  009B  0833               	movf	main@cell^(0+128),w
  1159  009C  00B1               	movwf	_main$273^(0+128)
  1160  009D  01B2               	clrf	(_main$273+1)^(0+128)
  1161  009E  1003               	clrc
  1162  009F  0DB1               	rlf	_main$273^(0+128),f
  1163  00A0  0DB2               	rlf	(_main$273+1)^(0+128),f
  1164  00A1  1003               	clrc
  1165  00A2  0DB1               	rlf	_main$273^(0+128),f
  1166  00A3  0DB2               	rlf	(_main$273+1)^(0+128),f
  1167  00A4  1003               	clrc
  1168  00A5  0DB1               	rlf	_main$273^(0+128),f
  1169  00A6  0DB2               	rlf	(_main$273+1)^(0+128),f
  1170  00A7  28AC               	goto	l4163
  1171  00A8                     l4161:	
  1172  00A8  3080               	movlw	128
  1173  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1174  00AA  00B1               	movwf	_main$273^(0+128)
  1175  00AB  01B2               	clrf	(_main$273+1)^(0+128)
  1176  00AC                     l4163:	
  1177  00AC  301F               	movlw	31
  1178  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1179  00AE  065F               	xorwf	_KeyCode,w	;volatile
  1180  00AF  1D03               	btfss	3,2
  1181  00B0  28B3               	goto	u4550
  1182  00B1  3001               	movlw	1
  1183  00B2  28B4               	goto	u4560
  1184  00B3                     u4550:	
  1185  00B3  3000               	movlw	0
  1186  00B4                     u4560:	
  1187  00B4  00B5               	movwf	FindCell@previous
  1188  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1189  00B6  0831               	movf	_main$273^(0+128),w
  1190  00B7  243E               	fcall	_FindCell
  1191                           
  1192                           ;prog.c: 786: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1193  00B8  214B               	fcall	PL4	;call to abstracted procedure
  1194                           
  1195                           ;prog.c: 787: KeyCode = 0;
  1196  00B9  01DF               	clrf	_KeyCode	;volatile
  1197                           
  1198                           ;prog.c: 788: if (Broadcasting) {
  1199  00BA  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1200  00BB  28C0               	goto	l4173
  1201                           
  1202                           ;prog.c: 789: TheStart = 1;
  1203  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  1204  00BD  01B4               	clrf	main@TheStart^(0+128)
  1205  00BE  0AB4               	incf	main@TheStart^(0+128),f
  1206                           
  1207                           ;prog.c: 790: } else {
  1208  00BF  28C4               	goto	l4179
  1209  00C0                     l4173:	
  1210                           
  1211                           ;prog.c: 791: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1212  00C0  2156               	fcall	PL6	;call to abstracted procedure
  1213  00C1  2759               	fcall	_FillArrayFromEEPROM
  1214                           
  1215                           ;prog.c: 792: cell = address / (sizeof(DS_Address));
  1216                           
  1217                           ;prog.c: 793: CellToInd(cell);
  1218  00C2  213C               	fcall	PL2	;call to abstracted procedure
  1219  00C3  26A7               	fcall	_CellToInd
  1220  00C4                     l4179:	
  1221                           
  1222                           ;prog.c: 794: }
  1223                           ;prog.c: 795: line = 0b00000010;
  1224  00C4  3002               	movlw	2
  1225  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  1226  00C6  00B6               	movwf	main@line^(0+128)
  1227                           
  1228                           ;prog.c: 796: Run_getInit(line);
  1229  00C7  2735               	fcall	_Run_getInit
  1230  00C8                     l366:	
  1231                           ;prog.c: 797: while(getTemp_flags.ActiveProcess);
  1232                           
  1233  00C8  1848               	btfsc	_getTemp_flags+4,0
  1234  00C9  28C8               	goto	l366
  1235  00CA  28FA               	goto	L3
  1236  00CB                     l4185:	
  1237                           ;prog.c: 798: Run_getTemp(line);
  1238                           
  1239  00CB  3023               	movlw	35
  1240  00CC  065F               	xorwf	_KeyCode,w	;volatile
  1241  00CD  1D03               	btfss	3,2
  1242  00CE  28DE               	goto	l4203
  1243                           
  1244                           ;prog.c: 802: Reset_powerOnInterval();
  1245  00CF  27AF               	fcall	_Reset_powerOnInterval
  1246                           
  1247                           ;prog.c: 803: KeyCode = 0;
  1248  00D0  01DF               	clrf	_KeyCode	;volatile
  1249  00D1  3008               	movlw	8
  1250                           
  1251                           ;prog.c: 804: Broadcasting = 1;
  1252  00D2  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1253                           
  1254                           ;prog.c: 805: line = 0b00001000;
  1255  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1256  00D4  00B6               	movwf	main@line^(0+128)
  1257                           
  1258                           ;prog.c: 806: getTemp_flags.ActiveProcess = 0;
  1259  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1260  00D6  1048               	bcf	_getTemp_flags+4,0
  1261                           
  1262                           ;prog.c: 807: waitInterrupt();
  1263  00D7  27BB               	fcall	_waitInterrupt
  1264                           
  1265                           ;prog.c: 808: Run_getTemp(line);
  1266  00D8  3008               	movlw	8
  1267  00D9  270E               	fcall	_Run_getTemp
  1268                           
  1269                           ;prog.c: 809: TheStart = 1;
  1270  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  1271  00DB  01B4               	clrf	main@TheStart^(0+128)
  1272  00DC  0AB4               	incf	main@TheStart^(0+128),f
  1273                           
  1274                           ;prog.c: 810: } else if (KeyCode == 36) {
  1275  00DD  28FC               	goto	l4231
  1276  00DE                     l4203:	
  1277  00DE  3024               	movlw	36
  1278  00DF  065F               	xorwf	_KeyCode,w	;volatile
  1279  00E0  1D03               	btfss	3,2
  1280  00E1  28FC               	goto	l4231
  1281                           
  1282                           ;prog.c: 811: KeyCode = 0;
  1283  00E2  01DF               	clrf	_KeyCode	;volatile
  1284                           
  1285                           ;prog.c: 812: if (!TheStart) {
  1286  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1287  00E4  0834               	movf	main@TheStart^(0+128),w
  1288  00E5  1D03               	btfss	3,2
  1289  00E6  28E8               	goto	l4211
  1290                           
  1291                           ;prog.c: 813: EditAddressMemory();
  1292  00E7  225F               	fcall	_EditAddressMemory
  1293  00E8                     l4211:	
  1294                           
  1295                           ;prog.c: 814: }
  1296                           ;prog.c: 816: Reset_powerOnInterval();
  1297  00E8  27AF               	fcall	_Reset_powerOnInterval
  1298  00E9  3080               	movlw	128
  1299                           
  1300                           ;prog.c: 817: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1301  00EA  01B5               	clrf	FindCell@previous
  1302  00EB  243E               	fcall	_FindCell
  1303                           
  1304                           ;prog.c: 818: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1305  00EC  214B               	fcall	PL4	;call to abstracted procedure
  1306                           
  1307                           ;prog.c: 819: if (Broadcasting) {
  1308  00ED  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1309  00EE  28F3               	goto	l4221
  1310                           
  1311                           ;prog.c: 820: TheStart = 1;
  1312  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1313  00F0  01B4               	clrf	main@TheStart^(0+128)
  1314  00F1  0AB4               	incf	main@TheStart^(0+128),f
  1315                           
  1316                           ;prog.c: 821: } else {
  1317  00F2  28F7               	goto	l4227
  1318  00F3                     l4221:	
  1319                           
  1320                           ;prog.c: 822: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1321  00F3  2156               	fcall	PL6	;call to abstracted procedure
  1322  00F4  2759               	fcall	_FillArrayFromEEPROM
  1323                           
  1324                           ;prog.c: 823: cell = address / (sizeof(DS_Address));
  1325                           
  1326                           ;prog.c: 825: CellToInd(cell);
  1327  00F5  213C               	fcall	PL2	;call to abstracted procedure
  1328  00F6  26A7               	fcall	_CellToInd
  1329  00F7                     l4227:	
  1330                           
  1331                           ;prog.c: 826: }
  1332                           ;prog.c: 827: line = 0b00000010;
  1333  00F7  3002               	movlw	2
  1334  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  1335  00F9  00B6               	movwf	main@line^(0+128)
  1336  00FA                     L3:	
  1337                           
  1338                           ;prog.c: 828: Run_getTemp(line);
  1339  00FA  3002               	movlw	2
  1340  00FB                     L2:	
  1341  00FB  270E               	fcall	_Run_getTemp
  1342  00FC                     l4231:	
  1343                           
  1344                           ;prog.c: 829: }
  1345                           ;prog.c: 831: if (getTemp_flags.Error) {
  1346  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1347  00FD  1FC7               	btfss	_getTemp_flags+3,7
  1348  00FE  290F               	goto	l376
  1349                           
  1350                           ;prog.c: 832: if (Broadcasting && line == 0b00001000) {
  1351  00FF  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1352  0100  2909               	goto	l4239
  1353  0101  3008               	movlw	8
  1354  0102  1683               	bsf	3,5	;RP0=1, select bank1
  1355  0103  0636               	xorwf	main@line^(0+128),w
  1356  0104  1D03               	btfss	3,2
  1357  0105  2909               	goto	l4239
  1358                           
  1359                           ;prog.c: 833: line = 0b00000010;
  1360  0106  3002               	movlw	2
  1361  0107  00B6               	movwf	main@line^(0+128)
  1362                           
  1363                           ;prog.c: 834: } else {
  1364  0108  290B               	goto	l4243
  1365  0109                     l4239:	
  1366                           
  1367                           ;prog.c: 835: clrInd();
  1368  0109  27B5               	fcall	_clrInd
  1369                           
  1370                           ;prog.c: 836: ShowError();
  1371  010A  2788               	fcall	_ShowError
  1372  010B                     l4243:	
  1373                           
  1374                           ;prog.c: 837: }
  1375                           ;prog.c: 838: Run_getTemp(line);
  1376  010B  1683               	bsf	3,5	;RP0=1, select bank1
  1377  010C  0836               	movf	main@line^(0+128),w
  1378  010D  270E               	fcall	_Run_getTemp
  1379                           
  1380                           ;prog.c: 839: } else if (getTemp_flags.DataIsRead) {
  1381  010E  2929               	goto	l4263
  1382  010F                     l376:	
  1383  010F  1F47               	btfss	_getTemp_flags+3,6
  1384  0110  2917               	goto	l4251
  1385                           
  1386                           ;prog.c: 840: clrInd();
  1387  0111  27B5               	fcall	_clrInd
  1388                           
  1389                           ;prog.c: 841: indData();
  1390  0112  23D3               	fcall	_indData
  1391                           
  1392                           ;prog.c: 842: Run_getTemp(line);
  1393  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1394  0114  0836               	movf	main@line^(0+128),w
  1395  0115  270E               	fcall	_Run_getTemp
  1396                           
  1397                           ;prog.c: 843: } else if (TheStart) {
  1398  0116  2929               	goto	l4263
  1399  0117                     l4251:	
  1400  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1401  0118  0834               	movf	main@TheStart^(0+128),w
  1402  0119  1903               	btfsc	3,2
  1403  011A  2929               	goto	l4263
  1404                           
  1405                           ;prog.c: 844: TheStart = 0;
  1406  011B  01B4               	clrf	main@TheStart^(0+128)
  1407                           
  1408                           ;prog.c: 845: clrInd();
  1409  011C  27B5               	fcall	_clrInd
  1410                           
  1411                           ;prog.c: 846: setDigit(1, 32);
  1412  011D  3020               	movlw	32
  1413  011E  00B2               	movwf	setDigit@data
  1414  011F  3001               	movlw	1
  1415  0120  2747               	fcall	_setDigit
  1416                           
  1417                           ;prog.c: 847: setDigit(2, 32);
  1418  0121  3020               	movlw	32
  1419  0122  00B2               	movwf	setDigit@data
  1420  0123  3002               	movlw	2
  1421  0124  2747               	fcall	_setDigit
  1422                           
  1423                           ;prog.c: 848: setDigit(3, 32);
  1424  0125  3020               	movlw	32
  1425  0126  00B2               	movwf	setDigit@data
  1426  0127  3003               	movlw	3
  1427  0128  2747               	fcall	_setDigit
  1428  0129                     l4263:	
  1429                           
  1430                           ;prog.c: 849: }
  1431                           ;prog.c: 851: if (point_on_ind_delay > 0) {
  1432  0129  1683               	bsf	3,5	;RP0=1, select bank1
  1433  012A  082F               	movf	main@point_on_ind_delay^(0+128),w
  1434  012B  0430               	iorwf	(main@point_on_ind_delay+1)^(0+128),w
  1435  012C  1903               	btfsc	3,2
  1436  012D  293A               	goto	l4269
  1437  012E  3001               	movlw	1
  1438                           
  1439                           ;prog.c: 852: setPoint(1, 1);
  1440  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0130  01AD               	clrf	setPoint@value
  1442  0131  0AAD               	incf	setPoint@value,f
  1443  0132  276A               	fcall	_setPoint
  1444                           
  1445                           ;prog.c: 853: point_on_ind_delay--;
  1446  0133  3001               	movlw	1
  1447  0134  1683               	bsf	3,5	;RP0=1, select bank1
  1448  0135  02AF               	subwf	main@point_on_ind_delay^(0+128),f
  1449  0136  3000               	movlw	0
  1450  0137  1C03               	skipc
  1451  0138  03B0               	decf	(main@point_on_ind_delay+1)^(0+128),f
  1452  0139  02B0               	subwf	(main@point_on_ind_delay+1)^(0+128),f
  1453  013A                     l4269:	
  1454                           
  1455                           ;prog.c: 854: }
  1456                           ;prog.c: 856: refreshInd();
  1457  013A  27A7               	fcall	_refreshInd
  1458  013B  284D               	goto	l4107
  1459  013C                     __end_of_main:	
  1460  013C                     PL2:	
  1461  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1462  013D  0835               	movf	main@address^(0+128),w
  1463  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1464  013F  00C3               	movwf	??_main
  1465  0140  1003               	clrc
  1466  0141  0CC3               	rrf	??_main,f
  1467  0142  1003               	clrc
  1468  0143  0CC3               	rrf	??_main,f
  1469  0144  1003               	clrc
  1470  0145  0CC3               	rrf	??_main,f
  1471  0146  0843               	movf	??_main,w
  1472  0147  1683               	bsf	3,5	;RP0=1, select bank1
  1473  0148  00B3               	movwf	main@cell^(0+128)
  1474  0149  0833               	movf	main@cell^(0+128),w
  1475  014A  0008               	return
  1476  014B                     __end_ofPL2:	
  1477  014B                     PL4:	
  1478  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1479  014C  00B5               	movwf	main@address^(0+128)
  1480  014D  3A80               	xorlw	128
  1481  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1482  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0150  1D03               	btfss	3,2
  1484  0151  2954               	goto	L4
  1485  0152  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1486  0153  0008               	return
  1487  0154                     L4:	
  1488  0154  1060               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1489  0155  0008               	return
  1490  0156                     __end_ofPL4:	
  1491  0156                     PL6:	
  1492  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1493  0157  0835               	movf	main@address^(0+128),w
  1494  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0159  00B0               	movwf	FillArrayFromEEPROM@address_start
  1496  015A  3008               	movlw	8
  1497  015B  00B1               	movwf	FillArrayFromEEPROM@quantity
  1498  015C  34C0               	retlw	(low (_DS_Address| 0))& (0+255)
  1499  015D                     __end_ofPL6:	
  1500                           
  1501                           	psect	text1
  1502  03D3                     __ptext1:	
  1503 ;; *************** function _indData *****************
  1504 ;; Defined at:
  1505 ;;		line 537 in file "prog.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;  v               1   23[BANK0 ] unsigned char 
  1510 ;;  v               1   25[BANK0 ] unsigned char 
  1511 ;;  cd              1   27[BANK0 ] unsigned char 
  1512 ;;  dN              1   26[BANK0 ] unsigned char 
  1513 ;;  isPoint         1   24[BANK0 ] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 300/0
  1520 ;;		On exit  : 300/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1523 ;;      Params:         0       0       0       0
  1524 ;;      Locals:         0       5       0       0
  1525 ;;      Temps:          0       1       0       0
  1526 ;;      Totals:         0       6       0       0
  1527 ;;Total ram usage:        6 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    4
  1530 ;; This function calls:
  1531 ;;		___lbdiv
  1532 ;;		___lbmod
  1533 ;;		_setDigit
  1534 ;;		_setPoint
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function _indData
  1542  03D3                     _indData:	
  1543                           
  1544                           ;prog.c: 539: unsigned char cd = 3;
  1545                           
  1546                           ;incstack = 0
  1547                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1548  03D3  3003               	movlw	3
  1549  03D4  00BB               	movwf	indData@cd
  1550                           
  1551                           ;prog.c: 540: unsigned char dN = 3;
  1552  03D5  00BA               	movwf	indData@dN
  1553                           
  1554                           ;prog.c: 542: if (sign != 0) {
  1555  03D6  085A               	movf	_sign,w
  1556  03D7  1903               	btfsc	3,2
  1557  03D8  2BDE               	goto	l3727
  1558                           
  1559                           ;prog.c: 543: setDigit(cd, 32);
  1560  03D9  3020               	movlw	32
  1561  03DA  00B2               	movwf	setDigit@data
  1562  03DB  3003               	movlw	3
  1563  03DC  2747               	fcall	_setDigit
  1564  03DD  2BE2               	goto	l3729
  1565  03DE                     l3727:	
  1566                           ;prog.c: 546: } else if (temperature < 10) {
  1567                           
  1568                           ;prog.c: 545: dN--;
  1569                           
  1570                           ;prog.c: 544: cd--;
  1571                           
  1572  03DE  300A               	movlw	10
  1573  03DF  025C               	subwf	_temperature,w
  1574  03E0  1803               	skipnc
  1575  03E1  2BE4               	goto	l3731
  1576  03E2                     l3729:	
  1577                           
  1578                           ;prog.c: 547: cd--;
  1579  03E2  03BB               	decf	indData@cd,f
  1580                           
  1581                           ;prog.c: 548: dN--;
  1582  03E3  03BA               	decf	indData@dN,f
  1583  03E4                     l3731:	
  1584                           
  1585                           ;prog.c: 549: }
  1586                           ;prog.c: 551: unsigned char isPoint = 0;
  1587  03E4  01B8               	clrf	indData@isPoint
  1588                           
  1589                           ;prog.c: 552: if(sign && temperature > 9 || temperature > 99){
  1590  03E5  085A               	movf	_sign,w
  1591  03E6  1903               	btfsc	3,2
  1592  03E7  2BEC               	goto	l3737
  1593  03E8  300A               	movlw	10
  1594  03E9  025C               	subwf	_temperature,w
  1595  03EA  1803               	skipnc
  1596  03EB  2BF0               	goto	l286
  1597  03EC                     l3737:	
  1598  03EC  3064               	movlw	100
  1599  03ED  025C               	subwf	_temperature,w
  1600  03EE  1C03               	skipc
  1601  03EF  2BF2               	goto	l3739
  1602  03F0                     l286:	
  1603                           
  1604                           ;prog.c: 553: isPoint = 1;
  1605  03F0  01B8               	clrf	indData@isPoint
  1606  03F1  0AB8               	incf	indData@isPoint,f
  1607  03F2                     l3739:	
  1608                           
  1609                           ;prog.c: 557: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1610  03F2  3064               	movlw	100
  1611  03F3  025C               	subwf	_temperature,w
  1612  03F4  1C03               	btfss	3,0
  1613  03F5  2BF8               	goto	u3900
  1614  03F6  3001               	movlw	1
  1615  03F7  2BF9               	goto	u3910
  1616  03F8                     u3900:	
  1617  03F8  3000               	movlw	0
  1618  03F9                     u3910:	
  1619  03F9  00B6               	movwf	??_indData
  1620  03FA  300A               	movlw	10
  1621  03FB  025C               	subwf	_temperature,w
  1622  03FC  1C03               	btfss	3,0
  1623  03FD  2C00               	goto	u3920
  1624  03FE  3001               	movlw	1
  1625  03FF  2C01               	goto	u3930
  1626  0400                     u3920:	
  1627  0400  3000               	movlw	0
  1628  0401                     u3930:	
  1629  0401  0736               	addwf	??_indData,w
  1630  0402  00B9               	movwf	indData@v
  1631                           
  1632                           ;prog.c: 558: setDigit(cd - v, temperature % 10);
  1633  0403  300A               	movlw	10
  1634  0404  00AD               	movwf	___lbmod@divisor
  1635  0405  085C               	movf	_temperature,w
  1636  0406  266F               	fcall	___lbmod
  1637  0407  00B2               	movwf	setDigit@data
  1638  0408  0839               	movf	indData@v,w
  1639  0409  023B               	subwf	indData@cd,w
  1640  040A  2747               	fcall	_setDigit
  1641                           
  1642                           ;prog.c: 559: if (!isPoint) {
  1643  040B  0838               	movf	indData@isPoint,w
  1644  040C  1D03               	btfss	3,2
  1645  040D  2C15               	goto	l3749
  1646                           
  1647                           ;prog.c: 560: setPoint(cd - v, 1);
  1648  040E  01AD               	clrf	setPoint@value
  1649  040F  0AAD               	incf	setPoint@value,f
  1650  0410  0839               	movf	indData@v,w
  1651  0411  023B               	subwf	indData@cd,w
  1652  0412  276A               	fcall	_setPoint
  1653                           
  1654                           ;prog.c: 561: isPoint = 1;
  1655  0413  01B8               	clrf	indData@isPoint
  1656  0414  0AB8               	incf	indData@isPoint,f
  1657  0415                     l3749:	
  1658                           
  1659                           ;prog.c: 562: }
  1660                           ;prog.c: 563: temperature /= 10;
  1661  0415  300A               	movlw	10
  1662  0416  00AD               	movwf	___lbdiv@divisor
  1663  0417  085C               	movf	_temperature,w
  1664  0418  26C2               	fcall	___lbdiv
  1665  0419  00DC               	movwf	_temperature
  1666                           
  1667                           ;prog.c: 564: dN--;
  1668  041A  03BA               	decf	indData@dN,f
  1669                           
  1670                           ;prog.c: 565: } while (temperature > 0);
  1671  041B  085C               	movf	_temperature,w
  1672  041C  1D03               	btfss	3,2
  1673  041D  2BF2               	goto	l3739
  1674                           
  1675                           ;prog.c: 567: if (dN > 0) {
  1676  041E  083A               	movf	indData@dN,w
  1677  041F  1903               	btfsc	3,2
  1678  0420  0008               	return
  1679                           
  1680                           ;prog.c: 568: cd = dN;
  1681  0421  083A               	movf	indData@dN,w
  1682  0422  00BB               	movwf	indData@cd
  1683                           
  1684                           ;prog.c: 569: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1685  0423  300A               	movlw	10
  1686  0424  025B               	subwf	_temp_drob,w
  1687  0425  1C03               	skipc
  1688  0426  2C2E               	goto	l3763
  1689  0427  0B3A               	decfsz	indData@dN,w
  1690  0428  2C2E               	goto	l3763
  1691  0429  300A               	movlw	10
  1692  042A  00AD               	movwf	___lbdiv@divisor
  1693  042B  085B               	movf	_temp_drob,w
  1694  042C  26C2               	fcall	___lbdiv
  1695  042D  00DB               	movwf	_temp_drob
  1696  042E                     l3763:	
  1697                           
  1698                           ;prog.c: 571: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1699  042E  300A               	movlw	10
  1700  042F  025B               	subwf	_temp_drob,w
  1701  0430  1C03               	btfss	3,0
  1702  0431  2C34               	goto	u3990
  1703  0432  3001               	movlw	1
  1704  0433  2C35               	goto	u4000
  1705  0434                     u3990:	
  1706  0434  3000               	movlw	0
  1707  0435                     u4000:	
  1708  0435  00B7               	movwf	indData@v_240
  1709                           
  1710                           ;prog.c: 572: setDigit(cd - v, temp_drob % 10);
  1711  0436  300A               	movlw	10
  1712  0437  00AD               	movwf	___lbmod@divisor
  1713  0438  085B               	movf	_temp_drob,w
  1714  0439  266F               	fcall	___lbmod
  1715  043A  00B2               	movwf	setDigit@data
  1716  043B  0837               	movf	indData@v_240,w
  1717  043C  023B               	subwf	indData@cd,w
  1718  043D  2F47               	ljmp	_setDigit
  1719  043E                     __end_of_indData:	
  1720                           
  1721                           	psect	text2
  1722  070E                     __ptext2:	
  1723 ;; *************** function _Run_getTemp *****************
  1724 ;; Defined at:
  1725 ;;		line 689 in file "prog.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  line            1    wreg     unsigned char 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  line            1   13[BANK0 ] unsigned char 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, status,2, status,0
  1734 ;; Tracked objects:
  1735 ;;		On entry : 200/100
  1736 ;;		On exit  : 300/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1739 ;;      Params:         0       0       0       0
  1740 ;;      Locals:         0       1       0       0
  1741 ;;      Temps:          0       0       0       0
  1742 ;;      Totals:         0       1       0       0
  1743 ;;Total ram usage:        1 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    3
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_main
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _Run_getTemp
  1755  070E                     _Run_getTemp:	
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1759                           ;Run_getTemp@line stored from wreg
  1760  070E  1283               	bcf	3,5	;RP0=0, select bank0
  1761  070F  00AD               	movwf	Run_getTemp@line
  1762  0710  30C3               	movlw	-61
  1763                           
  1764                           ;prog.c: 691: getTemp_flags.Init = 1;
  1765  0711  1444               	bsf	_getTemp_flags,0
  1766                           
  1767                           ;prog.c: 692: getTemp_flags.Send_Address = 1;
  1768  0712  14C4               	bsf	_getTemp_flags,1
  1769                           
  1770                           ;prog.c: 693: getTemp_flags.CountAddressBytes = 0;
  1771  0713  05C4               	andwf	_getTemp_flags,f
  1772  0714  3078               	movlw	120
  1773                           
  1774                           ;prog.c: 694: getTemp_flags.SendConvertTemp = 1;
  1775  0715  1744               	bsf	_getTemp_flags,6
  1776                           
  1777                           ;prog.c: 695: getTemp_flags.PauseValue = 120;
  1778  0716  00C5               	movwf	_getTemp_flags+1
  1779  0717  30C3               	movlw	-61
  1780  0718  01C6               	clrf	_getTemp_flags+2
  1781                           
  1782                           ;prog.c: 696: getTemp_flags.SendGetTemp = 1;
  1783  0719  1447               	bsf	_getTemp_flags+3,0
  1784                           
  1785                           ;prog.c: 697: getTemp_flags.ReadData = 1;
  1786  071A  14C7               	bsf	_getTemp_flags+3,1
  1787                           
  1788                           ;prog.c: 698: getTemp_flags.CountDataBytes = 0;
  1789  071B  05C7               	andwf	_getTemp_flags+3,f
  1790                           
  1791                           ;prog.c: 699: getTemp_flags.Error = 0;
  1792  071C  13C7               	bcf	_getTemp_flags+3,7
  1793                           
  1794                           ;prog.c: 700: getTemp_flags.DataIsRead = 0;
  1795  071D  1347               	bcf	_getTemp_flags+3,6
  1796                           
  1797                           ;prog.c: 701: getTemp_flags.Line = line;
  1798  071E  082D               	movf	Run_getTemp@line,w
  1799  071F  00C9               	movwf	_getTemp_flags+5
  1800                           
  1801                           ;prog.c: 703: getTemp_flags.ActiveProcess = 1;
  1802  0720  1448               	bsf	_getTemp_flags+4,0
  1803  0721  0008               	return
  1804  0722                     __end_of_Run_getTemp:	
  1805                           
  1806                           	psect	text3
  1807  0735                     __ptext3:	
  1808 ;; *************** function _Run_getInit *****************
  1809 ;; Defined at:
  1810 ;;		line 707 in file "prog.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  line            1    wreg     unsigned char 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  line            1   13[BANK0 ] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0
  1819 ;; Tracked objects:
  1820 ;;		On entry : 300/100
  1821 ;;		On exit  : 300/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1824 ;;      Params:         0       0       0       0
  1825 ;;      Locals:         0       1       0       0
  1826 ;;      Temps:          0       0       0       0
  1827 ;;      Totals:         0       1       0       0
  1828 ;;Total ram usage:        1 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    3
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           
  1839                           ;psect for function _Run_getInit
  1840  0735                     _Run_getInit:	
  1841                           
  1842                           ;incstack = 0
  1843                           ; Regs used in _Run_getInit: [wreg+status,2+status,0]
  1844                           ;Run_getInit@line stored from wreg
  1845  0735  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0736  00AD               	movwf	Run_getInit@line
  1847  0737  30C3               	movlw	-61
  1848                           
  1849                           ;prog.c: 709: getTemp_flags.Init = 1;
  1850  0738  1444               	bsf	_getTemp_flags,0
  1851                           
  1852                           ;prog.c: 710: getTemp_flags.Send_Address = 0;
  1853  0739  10C4               	bcf	_getTemp_flags,1
  1854                           
  1855                           ;prog.c: 711: getTemp_flags.CountAddressBytes = 0;
  1856  073A  05C4               	andwf	_getTemp_flags,f
  1857                           
  1858                           ;prog.c: 712: getTemp_flags.SendConvertTemp = 0;
  1859  073B  1344               	bcf	_getTemp_flags,6
  1860                           
  1861                           ;prog.c: 713: getTemp_flags.PauseValue = 0;
  1862  073C  01C5               	clrf	_getTemp_flags+1
  1863  073D  01C6               	clrf	_getTemp_flags+2
  1864                           
  1865                           ;prog.c: 714: getTemp_flags.SendGetTemp = 0;
  1866  073E  1047               	bcf	_getTemp_flags+3,0
  1867                           
  1868                           ;prog.c: 715: getTemp_flags.ReadData = 0;
  1869  073F  10C7               	bcf	_getTemp_flags+3,1
  1870                           
  1871                           ;prog.c: 716: getTemp_flags.CountDataBytes = 0;
  1872  0740  05C7               	andwf	_getTemp_flags+3,f
  1873                           
  1874                           ;prog.c: 717: getTemp_flags.Error = 0;
  1875  0741  13C7               	bcf	_getTemp_flags+3,7
  1876                           
  1877                           ;prog.c: 718: getTemp_flags.DataIsRead = 0;
  1878  0742  1347               	bcf	_getTemp_flags+3,6
  1879                           
  1880                           ;prog.c: 719: getTemp_flags.Line = line;
  1881  0743  082D               	movf	Run_getInit@line,w
  1882  0744  00C9               	movwf	_getTemp_flags+5
  1883                           
  1884                           ;prog.c: 721: getTemp_flags.ActiveProcess = 1;
  1885  0745  1448               	bsf	_getTemp_flags+4,0
  1886  0746  0008               	return
  1887  0747                     __end_of_Run_getInit:	
  1888                           
  1889                           	psect	text4
  1890  07AF                     __ptext4:	
  1891 ;; *************** function _Reset_powerOnInterval *****************
  1892 ;; Defined at:
  1893 ;;		line 98 in file "prog.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg
  1902 ;; Tracked objects:
  1903 ;;		On entry : 200/0
  1904 ;;		On exit  : 300/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1907 ;;      Params:         0       0       0       0
  1908 ;;      Locals:         0       0       0       0
  1909 ;;      Temps:          0       0       0       0
  1910 ;;      Totals:         0       0       0       0
  1911 ;;Total ram usage:        0 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    3
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           
  1922                           ;psect for function _Reset_powerOnInterval
  1923  07AF                     _Reset_powerOnInterval:	
  1924                           
  1925                           ;prog.c: 99: powerOnInterval = 700;
  1926                           
  1927                           ;incstack = 0
  1928                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1929  07AF  30BC               	movlw	188
  1930  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  1931  07B1  00DD               	movwf	_powerOnInterval
  1932  07B2  3002               	movlw	2
  1933  07B3  00DE               	movwf	_powerOnInterval+1
  1934  07B4  0008               	return
  1935  07B5                     __end_of_Reset_powerOnInterval:	
  1936                           
  1937                           	psect	text5
  1938  043E                     __ptext5:	
  1939 ;; *************** function _FindCell *****************
  1940 ;; Defined at:
  1941 ;;		line 396 in file "prog.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  addressStart    1    wreg     unsigned char 
  1944 ;;  previous        1   21[BANK0 ] unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  addressStart    1   32[BANK0 ] unsigned char 
  1947 ;;  i               1   33[BANK0 ] unsigned char 
  1948 ;;  CellsData       8   22[BANK0 ] unsigned char [8]
  1949 ;;  CellIsEmpty     1   31[BANK0 ] unsigned char 
  1950 ;;  address         1   34[BANK0 ] unsigned char 
  1951 ;;  addressNew      1   30[BANK0 ] unsigned char 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      unsigned char 
  1954 ;; Registers used:
  1955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 200/100
  1958 ;;		On exit  : B00/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1961 ;;      Params:         0       1       0       0
  1962 ;;      Locals:         0      13       0       0
  1963 ;;      Temps:          0       0       0       0
  1964 ;;      Totals:         0      14       0       0
  1965 ;;Total ram usage:       14 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    5
  1968 ;; This function calls:
  1969 ;;		_FillArrayFromEEPROM
  1970 ;;		_waitInterrupt
  1971 ;; This function is called by:
  1972 ;;		_main
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           
  1977                           ;psect for function _FindCell
  1978  043E                     _FindCell:	
  1979                           
  1980                           ;incstack = 0
  1981                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1982                           ;FindCell@addressStart stored from wreg
  1983  043E  1283               	bcf	3,5	;RP0=0, select bank0
  1984  043F  00C0               	movwf	FindCell@addressStart
  1985                           
  1986                           ;prog.c: 397: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1987  0440  3A80               	xorlw	128
  1988  0441  1D03               	btfss	3,2
  1989  0442  2C4A               	goto	l205
  1990                           
  1991                           ;prog.c: 398: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1992  0443  0835               	movf	FindCell@previous,w
  1993  0444  1903               	btfsc	3,2
  1994  0445  2C48               	goto	l3671
  1995  0446  01C0               	clrf	FindCell@addressStart
  1996  0447  2C4A               	goto	l205
  1997  0448                     l3671:	
  1998  0448  3078               	movlw	120
  1999  0449  00C0               	movwf	FindCell@addressStart
  2000  044A                     l205:	
  2001                           
  2002                           ;prog.c: 399: }
  2003                           ;prog.c: 400: unsigned char address = addressStart;
  2004  044A  0840               	movf	FindCell@addressStart,w
  2005  044B  00C2               	movwf	FindCell@address
  2006                           
  2007                           ;prog.c: 401: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  2008  044C  3080               	movlw	128
  2009  044D  00BE               	movwf	FindCell@addressNew
  2010  044E                     l3673:	
  2011                           
  2012                           ;prog.c: 404: if (!previous) {
  2013  044E  0835               	movf	FindCell@previous,w
  2014  044F  1D03               	btfss	3,2
  2015  0450  2C5A               	goto	l3681
  2016                           
  2017                           ;prog.c: 405: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  2018  0451  3078               	movlw	120
  2019  0452  0642               	xorwf	FindCell@address,w
  2020  0453  1D03               	btfss	3,2
  2021  0454  2C57               	goto	l3679
  2022  0455  01C2               	clrf	FindCell@address
  2023  0456  2C62               	goto	l3687
  2024  0457                     l3679:	
  2025  0457  3008               	movlw	8
  2026  0458  07C2               	addwf	FindCell@address,f
  2027  0459  2C62               	goto	l3687
  2028  045A                     l3681:	
  2029                           
  2030                           ;prog.c: 407: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  2031  045A  0842               	movf	FindCell@address,w
  2032  045B  1D03               	btfss	3,2
  2033  045C  2C60               	goto	l3685
  2034  045D  3078               	movlw	120
  2035  045E  00C2               	movwf	FindCell@address
  2036  045F  2C62               	goto	l3687
  2037  0460                     l3685:	
  2038  0460  3008               	movlw	8
  2039  0461  02C2               	subwf	FindCell@address,f
  2040  0462                     l3687:	
  2041                           
  2042                           ;prog.c: 408: }
  2043                           ;prog.c: 410: unsigned char CellsData [(sizeof(DS_Address))];
  2044                           ;prog.c: 411: waitInterrupt();
  2045  0462  27BB               	fcall	_waitInterrupt
  2046                           
  2047                           ;prog.c: 412: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  2048  0463  0842               	movf	FindCell@address,w
  2049  0464  00B0               	movwf	FillArrayFromEEPROM@address_start
  2050  0465  3008               	movlw	8
  2051  0466  00B1               	movwf	FillArrayFromEEPROM@quantity
  2052  0467  3036               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  2053  0468  2759               	fcall	_FillArrayFromEEPROM
  2054                           
  2055                           ;prog.c: 413: unsigned char CellIsEmpty = 1;
  2056  0469  01BF               	clrf	FindCell@CellIsEmpty
  2057  046A  0ABF               	incf	FindCell@CellIsEmpty,f
  2058                           
  2059                           ;prog.c: 414: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2060  046B  01C1               	clrf	FindCell@i
  2061  046C                     l3699:	
  2062                           
  2063                           ;prog.c: 415: if (CellsData[i] != 0xFF) {
  2064  046C  0841               	movf	FindCell@i,w
  2065  046D  3E36               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  2066  046E  0084               	movwf	4
  2067  046F  1383               	bcf	3,7	;select IRP bank0
  2068  0470  0F00               	incfsz	0,w
  2069                           
  2070                           ;prog.c: 416: CellIsEmpty = 0;
  2071  0471  01BF               	clrf	FindCell@CellIsEmpty
  2072  0472  3008               	movlw	8
  2073  0473  0AC1               	incf	FindCell@i,f
  2074  0474  0241               	subwf	FindCell@i,w
  2075  0475  1C03               	skipc
  2076  0476  2C6C               	goto	l3699
  2077                           
  2078                           ;prog.c: 417: }
  2079                           ;prog.c: 418: }
  2080                           ;prog.c: 420: if (CellIsEmpty == 0) {
  2081  0477  083F               	movf	FindCell@CellIsEmpty,w
  2082  0478  1D03               	btfss	3,2
  2083  0479  2C7D               	goto	l3711
  2084                           
  2085                           ;prog.c: 421: addressNew = address;
  2086  047A  0842               	movf	FindCell@address,w
  2087  047B  00BE               	movwf	FindCell@addressNew
  2088                           
  2089                           ;prog.c: 422: break;
  2090  047C  2C81               	goto	l3713
  2091  047D                     l3711:	
  2092                           
  2093                           ;prog.c: 423: }
  2094                           ;prog.c: 424: } while (address != addressStart);
  2095  047D  0842               	movf	FindCell@address,w
  2096  047E  0640               	xorwf	FindCell@addressStart,w
  2097  047F  1D03               	skipz
  2098  0480  2C4E               	goto	l3673
  2099  0481                     l3713:	
  2100                           
  2101                           ;prog.c: 425: return addressNew;
  2102  0481  083E               	movf	FindCell@addressNew,w
  2103  0482  0008               	return
  2104  0483                     __end_of_FindCell:	
  2105                           
  2106                           	psect	text6
  2107  025F                     __ptext6:	
  2108 ;; *************** function _EditAddressMemory *****************
  2109 ;; Defined at:
  2110 ;;		line 600 in file "prog.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;		None
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  i               1   12[BANK1 ] unsigned char 
  2115 ;;  i               1   13[BANK1 ] unsigned char 
  2116 ;;  line            1    9[BANK1 ] unsigned char 
  2117 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  2118 ;;  cell            1   14[BANK1 ] unsigned char 
  2119 ;;  CellIsEmpty     1   11[BANK1 ] unsigned char 
  2120 ;;  RereadCell      1   10[BANK1 ] unsigned char 
  2121 ;;  ErrorShowed     1    8[BANK1 ] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 300/100
  2128 ;;		On exit  : 300/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2131 ;;      Params:         0       0       0       0
  2132 ;;      Locals:         0       0      15       0
  2133 ;;      Temps:          0       1       0       0
  2134 ;;      Totals:         0       1      15       0
  2135 ;;Total ram usage:       16 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    6
  2138 ;; This function calls:
  2139 ;;		_CellToInd
  2140 ;;		_INIT
  2141 ;;		_RX
  2142 ;;		_ReadCell
  2143 ;;		_ShowError
  2144 ;;		_TX
  2145 ;;		_WriteArrayToEEPROM
  2146 ;;		_calc_crc
  2147 ;;		_clrInd
  2148 ;;		_refreshInd
  2149 ;;		_setPoint
  2150 ;;		_waitInterrupt
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           
  2157                           ;psect for function _EditAddressMemory
  2158  025F                     _EditAddressMemory:	
  2159                           
  2160                           ;prog.c: 601: getTemp_flags.ActiveProcess = 0;
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2164  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2165  0260  1048               	bcf	_getTemp_flags+4,0
  2166                           
  2167                           ;prog.c: 603: PowerBlocked++;
  2168  0261  0AD8               	incf	_PowerBlocked,f
  2169                           
  2170                           ;prog.c: 605: clrInd();
  2171  0262  27B5               	fcall	_clrInd
  2172                           
  2173                           ;prog.c: 607: unsigned char cell = 0;
  2174  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2175  0264  01AE               	clrf	EditAddressMemory@cell^(0+128)
  2176                           
  2177                           ;prog.c: 608: unsigned char CellIsEmpty = 1;
  2178  0265  01AB               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2179  0266  0AAB               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2180                           
  2181                           ;prog.c: 609: unsigned char CellsData [(sizeof(DS_Address))];
  2182                           ;prog.c: 611: unsigned char ErrorShowed = 0;
  2183  0267  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2184                           
  2185                           ;prog.c: 612: unsigned char RereadCell = 1;
  2186  0268  01AA               	clrf	EditAddressMemory@RereadCell^(0+128)
  2187  0269  0AAA               	incf	EditAddressMemory@RereadCell^(0+128),f
  2188  026A                     l3781:	
  2189                           
  2190                           ;prog.c: 615: if (KeyCode != 0 && ErrorShowed) {
  2191  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2192  026B  085F               	movf	_KeyCode,w	;volatile
  2193  026C  1903               	btfsc	3,2
  2194  026D  2A78               	goto	l3789
  2195  026E  1683               	bsf	3,5	;RP0=1, select bank1
  2196  026F  0828               	movf	EditAddressMemory@ErrorShowed^(0+128),w
  2197  0270  1903               	btfsc	3,2
  2198  0271  2A78               	goto	l3789
  2199                           
  2200                           ;prog.c: 616: KeyCode = 0;
  2201  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2202  0273  01DF               	clrf	_KeyCode	;volatile
  2203                           
  2204                           ;prog.c: 617: ErrorShowed = 0;
  2205  0274  1683               	bsf	3,5	;RP0=1, select bank1
  2206  0275  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2207                           
  2208                           ;prog.c: 618: RereadCell = 1;
  2209  0276  01AA               	clrf	EditAddressMemory@RereadCell^(0+128)
  2210  0277  0AAA               	incf	EditAddressMemory@RereadCell^(0+128),f
  2211  0278                     l3789:	
  2212                           
  2213                           ;prog.c: 619: }
  2214                           ;prog.c: 621: if (KeyCode == 31) {
  2215  0278  301F               	movlw	31
  2216  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2217  027A  065F               	xorwf	_KeyCode,w	;volatile
  2218  027B  1D03               	btfss	3,2
  2219  027C  2A8A               	goto	l3801
  2220                           
  2221                           ;prog.c: 622: KeyCode = 0;
  2222  027D  01DF               	clrf	_KeyCode	;volatile
  2223                           
  2224                           ;prog.c: 623: if (cell > 0) {
  2225  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2226  027F  082E               	movf	EditAddressMemory@cell^(0+128),w
  2227  0280  1903               	btfsc	3,2
  2228  0281  2A84               	goto	l3797
  2229                           
  2230                           ;prog.c: 624: cell--;
  2231  0282  03AE               	decf	EditAddressMemory@cell^(0+128),f
  2232                           
  2233                           ;prog.c: 625: } else {
  2234  0283  2A86               	goto	l3799
  2235  0284                     l3797:	
  2236                           
  2237                           ;prog.c: 626: cell = 16 - 1;
  2238  0284  300F               	movlw	15
  2239  0285  00AE               	movwf	EditAddressMemory@cell^(0+128)
  2240  0286                     l3799:	
  2241                           
  2242                           ;prog.c: 627: }
  2243                           ;prog.c: 628: RereadCell = 1;
  2244  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2245  0287  01AA               	clrf	EditAddressMemory@RereadCell^(0+128)
  2246  0288  0AAA               	incf	EditAddressMemory@RereadCell^(0+128),f
  2247                           
  2248                           ;prog.c: 629: } else if (KeyCode == 32) {
  2249  0289  2B09               	goto	l3895
  2250  028A                     l3801:	
  2251  028A  3020               	movlw	32
  2252  028B  065F               	xorwf	_KeyCode,w	;volatile
  2253  028C  1D03               	btfss	3,2
  2254  028D  2A98               	goto	l3813
  2255                           
  2256                           ;prog.c: 630: KeyCode = 0;
  2257  028E  01DF               	clrf	_KeyCode	;volatile
  2258                           
  2259                           ;prog.c: 631: if (cell < 16 - 1) {
  2260  028F  300F               	movlw	15
  2261  0290  1683               	bsf	3,5	;RP0=1, select bank1
  2262  0291  022E               	subwf	EditAddressMemory@cell^(0+128),w
  2263  0292  1803               	skipnc
  2264  0293  2A96               	goto	l3809
  2265                           
  2266                           ;prog.c: 632: cell++;
  2267  0294  0AAE               	incf	EditAddressMemory@cell^(0+128),f
  2268                           
  2269                           ;prog.c: 633: } else {
  2270  0295  2A86               	goto	l3799
  2271  0296                     l3809:	
  2272                           
  2273                           ;prog.c: 634: cell = 0;
  2274  0296  01AE               	clrf	EditAddressMemory@cell^(0+128)
  2275  0297  2A86               	goto	l3799
  2276  0298                     l3813:	
  2277  0298  3022               	movlw	34
  2278  0299  065F               	xorwf	_KeyCode,w	;volatile
  2279  029A  1D03               	btfss	3,2
  2280  029B  2AA0               	goto	l3823
  2281                           
  2282                           ;prog.c: 638: KeyCode = 0;
  2283  029C  01DF               	clrf	_KeyCode	;volatile
  2284                           
  2285                           ;prog.c: 639: clrInd();
  2286  029D  27B5               	fcall	_clrInd
  2287                           
  2288                           ;prog.c: 640: refreshInd();
  2289  029E  27A7               	fcall	_refreshInd
  2290                           
  2291                           ;prog.c: 641: break;
  2292  029F  2B25               	goto	l3907
  2293  02A0                     l3823:	
  2294  02A0  3023               	movlw	35
  2295  02A1  065F               	xorwf	_KeyCode,w	;volatile
  2296  02A2  1D03               	btfss	3,2
  2297  02A3  2AF0               	goto	l3871
  2298  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  2299  02A5  0B2B               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2300  02A6  2AF0               	goto	l3871
  2301                           
  2302                           ;prog.c: 643: KeyCode = 0;
  2303  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2304  02A8  01DF               	clrf	_KeyCode	;volatile
  2305                           
  2306                           ;prog.c: 644: waitInterrupt();
  2307  02A9  27BB               	fcall	_waitInterrupt
  2308                           
  2309                           ;prog.c: 645: unsigned char line;
  2310                           ;prog.c: 646: if (INIT(line = 0b00001000) || INIT(line = 0b00000010)) {
  2311  02AA  3008               	movlw	8
  2312  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2313  02AC  00A9               	movwf	EditAddressMemory@line^(0+128)
  2314  02AD  24C8               	fcall	_INIT
  2315  02AE  3A00               	xorlw	0
  2316  02AF  1D03               	skipz
  2317  02B0  2AB8               	goto	l3835
  2318  02B1  3002               	movlw	2
  2319  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  2320  02B3  00A9               	movwf	EditAddressMemory@line^(0+128)
  2321  02B4  24C8               	fcall	_INIT
  2322  02B5  3A00               	xorlw	0
  2323  02B6  1903               	skipnz
  2324  02B7  2AEB               	goto	l3863
  2325  02B8                     l3835:	
  2326                           
  2327                           ;prog.c: 647: waitInterrupt();
  2328  02B8  27BB               	fcall	_waitInterrupt
  2329                           
  2330                           ;prog.c: 648: TX(0x33, line);
  2331  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2332  02BA  0829               	movf	EditAddressMemory@line^(0+128),w
  2333  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2334  02BC  00AD               	movwf	TX@line
  2335  02BD  3033               	movlw	51
  2336  02BE  2503               	fcall	_TX
  2337                           
  2338                           ;prog.c: 649: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2339  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2340  02C0  01AC               	clrf	EditAddressMemory@i^(0+128)
  2341  02C1                     l3845:	
  2342                           
  2343                           ;prog.c: 650: waitInterrupt();
  2344  02C1  27BB               	fcall	_waitInterrupt
  2345                           
  2346                           ;prog.c: 651: CellsData[i] = RX(line);
  2347  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  2348  02C3  082C               	movf	EditAddressMemory@i^(0+128),w
  2349  02C4  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2350  02C5  0084               	movwf	4
  2351  02C6  0829               	movf	EditAddressMemory@line^(0+128),w
  2352  02C7  259C               	fcall	_RX
  2353  02C8  1383               	bcf	3,7	;select IRP bank1
  2354  02C9  0080               	movwf	0
  2355  02CA  3008               	movlw	8
  2356  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2357  02CC  0AAC               	incf	EditAddressMemory@i^(0+128),f
  2358  02CD  022C               	subwf	EditAddressMemory@i^(0+128),w
  2359  02CE  1C03               	skipc
  2360  02CF  2AC1               	goto	l3845
  2361                           
  2362                           ;prog.c: 652: }
  2363                           ;prog.c: 653: if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_
      +                          Address)) - 1)) {
  2364  02D0  3007               	movlw	7
  2365  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2366  02D2  00AD               	movwf	calc_crc@len
  2367  02D3  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2368  02D4  2611               	fcall	_calc_crc
  2369  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  2370  02D6  0627               	xorwf	(EditAddressMemory@CellsData^(0+128)+7),w
  2371  02D7  1D03               	skipz
  2372  02D8  2AEB               	goto	l3863
  2373  02D9                     l3855:	
  2374                           
  2375                           ;prog.c: 654: waitInterrupt();
  2376  02D9  27BB               	fcall	_waitInterrupt
  2377                           
  2378                           ;prog.c: 655: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2379  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  2380  02DB  082E               	movf	EditAddressMemory@cell^(0+128),w
  2381  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2382  02DD  00B9               	movwf	??_EditAddressMemory
  2383  02DE  1003               	clrc
  2384  02DF  0DB9               	rlf	??_EditAddressMemory,f
  2385  02E0  1003               	clrc
  2386  02E1  0DB9               	rlf	??_EditAddressMemory,f
  2387  02E2  1003               	clrc
  2388  02E3  0D39               	rlf	??_EditAddressMemory,w
  2389  02E4  00B0               	movwf	WriteArrayToEEPROM@address_start
  2390  02E5  3008               	movlw	8
  2391  02E6  00B1               	movwf	WriteArrayToEEPROM@quantity
  2392  02E7  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2393  02E8  2722               	fcall	_WriteArrayToEEPROM
  2394                           
  2395                           ;prog.c: 656: waitInterrupt();
  2396  02E9  27BB               	fcall	_waitInterrupt
  2397  02EA  2A86               	goto	l3799
  2398  02EB                     l3863:	
  2399                           
  2400                           ;prog.c: 659: ShowError();
  2401  02EB  2788               	fcall	_ShowError
  2402                           
  2403                           ;prog.c: 660: ErrorShowed = 1;
  2404  02EC  1683               	bsf	3,5	;RP0=1, select bank1
  2405  02ED  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2406  02EE  0AA8               	incf	EditAddressMemory@ErrorShowed^(0+128),f
  2407  02EF  2B09               	goto	l3895
  2408  02F0                     l3871:	
  2409  02F0  3024               	movlw	36
  2410  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  2411  02F2  065F               	xorwf	_KeyCode,w	;volatile
  2412  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  2413  02F4  1D03               	btfss	3,2
  2414  02F5  2B0A               	goto	L7
  2415  02F6  082B               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2416  02F7  1D03               	btfss	3,2
  2417  02F8  2B09               	goto	l3895
  2418                           
  2419                           ;prog.c: 667: KeyCode = 0;
  2420  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2421  02FA  01DF               	clrf	_KeyCode	;volatile
  2422                           
  2423                           ;prog.c: 668: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2424  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  2425  02FC  01AD               	clrf	EditAddressMemory@i_257^(0+128)
  2426  02FD                     l3881:	
  2427                           
  2428                           ;prog.c: 669: CellsData[i] = 0xFF;
  2429  02FD  082D               	movf	EditAddressMemory@i_257^(0+128),w
  2430  02FE  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2431  02FF  0084               	movwf	4
  2432  0300  30FF               	movlw	255
  2433  0301  1383               	bcf	3,7	;select IRP bank1
  2434  0302  0080               	movwf	0
  2435  0303  3008               	movlw	8
  2436  0304  0AAD               	incf	EditAddressMemory@i_257^(0+128),f
  2437  0305  022D               	subwf	EditAddressMemory@i_257^(0+128),w
  2438  0306  1C03               	skipc
  2439  0307  2AFD               	goto	l3881
  2440  0308  2AD9               	goto	l3855
  2441  0309                     l3895:	
  2442                           ;prog.c: 672: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2443                           
  2444                           ;prog.c: 670: }
  2445                           ;prog.c: 671: waitInterrupt();
  2446                           
  2447                           
  2448                           ;prog.c: 675: }
  2449                           ;prog.c: 677: if (RereadCell) {
  2450  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2451  030A                     L7:	
  2452  030A  082A               	movf	EditAddressMemory@RereadCell^(0+128),w
  2453  030B  1903               	btfsc	3,2
  2454  030C  2A6A               	goto	l3781
  2455  030D  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2456                           
  2457                           ;prog.c: 678: RereadCell = 0;
  2458  030E  01AA               	clrf	EditAddressMemory@RereadCell^(0+128)
  2459                           
  2460                           ;prog.c: 679: CellIsEmpty = ReadCell(cell, CellsData);
  2461  030F  1283               	bcf	3,5	;RP0=0, select bank0
  2462  0310  00B5               	movwf	ReadCell@CellsData
  2463  0311  1683               	bsf	3,5	;RP0=1, select bank1
  2464  0312  082E               	movf	EditAddressMemory@cell^(0+128),w
  2465  0313  2653               	fcall	_ReadCell
  2466  0314  1683               	bsf	3,5	;RP0=1, select bank1
  2467  0315  00AB               	movwf	EditAddressMemory@CellIsEmpty^(0+128)
  2468                           
  2469                           ;prog.c: 680: CellToInd(cell);
  2470  0316  082E               	movf	EditAddressMemory@cell^(0+128),w
  2471  0317  26A7               	fcall	_CellToInd
  2472                           
  2473                           ;prog.c: 681: setPoint(1, !CellIsEmpty);
  2474  0318  1683               	bsf	3,5	;RP0=1, select bank1
  2475  0319  082B               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2476  031A  1D03               	btfss	3,2
  2477  031B  2B1E               	goto	u4180
  2478  031C  3001               	movlw	1
  2479  031D  2B1F               	goto	u4190
  2480  031E                     u4180:	
  2481  031E  3000               	movlw	0
  2482  031F                     u4190:	
  2483  031F  1283               	bcf	3,5	;RP0=0, select bank0
  2484  0320  00AD               	movwf	setPoint@value
  2485  0321  3001               	movlw	1
  2486  0322  276A               	fcall	_setPoint
  2487                           
  2488                           ;prog.c: 682: refreshInd();
  2489  0323  27A7               	fcall	_refreshInd
  2490  0324  2A6A               	goto	l3781
  2491  0325                     l3907:	
  2492                           
  2493                           ;prog.c: 683: }
  2494                           ;prog.c: 684: }
  2495                           ;prog.c: 685: waitInterrupt();
  2496  0325  27BB               	fcall	_waitInterrupt
  2497                           
  2498                           ;prog.c: 686: PowerBlocked--;
  2499  0326  03D8               	decf	_PowerBlocked,f
  2500  0327  0008               	return
  2501  0328                     __end_of_EditAddressMemory:	
  2502                           
  2503                           	psect	text7
  2504  076A                     __ptext7:	
  2505 ;; *************** function _setPoint *****************
  2506 ;; Defined at:
  2507 ;;		line 110 in file "prog.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  dignum          1    wreg     unsigned char 
  2510 ;;  value           1   13[BANK0 ] unsigned char 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  dignum          1   14[BANK0 ] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2517 ;; Tracked objects:
  2518 ;;		On entry : 300/0
  2519 ;;		On exit  : B00/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2522 ;;      Params:         0       1       0       0
  2523 ;;      Locals:         0       1       0       0
  2524 ;;      Temps:          0       0       0       0
  2525 ;;      Totals:         0       2       0       0
  2526 ;;Total ram usage:        2 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    3
  2529 ;; This function calls:
  2530 ;;		Nothing
  2531 ;; This function is called by:
  2532 ;;		_indData
  2533 ;;		_EditAddressMemory
  2534 ;;		_main
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _setPoint
  2540  076A                     _setPoint:	
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2544                           ;setPoint@dignum stored from wreg
  2545  076A  00AE               	movwf	setPoint@dignum
  2546                           
  2547                           ;prog.c: 111: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 
      +                          0b10111111;
  2548  076B  0B2D               	decfsz	setPoint@value,w
  2549  076C  2F73               	goto	l3363
  2550  076D  082E               	movf	setPoint@dignum,w
  2551  076E  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2552  076F  0084               	movwf	4
  2553  0770  1383               	bcf	3,7	;select IRP bank0
  2554  0771  1700               	bsf	0,6
  2555  0772  0008               	return
  2556  0773                     l3363:	
  2557  0773  082E               	movf	setPoint@dignum,w
  2558  0774  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2559  0775  0084               	movwf	4
  2560  0776  1383               	bcf	3,7	;select IRP bank0
  2561  0777  1300               	bcf	0,6
  2562  0778  0008               	return
  2563  0779                     __end_of_setPoint:	
  2564                           
  2565                           	psect	text8
  2566  0611                     __ptext8:	
  2567 ;; *************** function _calc_crc *****************
  2568 ;; Defined at:
  2569 ;;		line 281 in file "prog.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;  mas             1    wreg     PTR unsigned char 
  2572 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2573 ;;  len             1   13[BANK0 ] unsigned char 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  mas             1   16[BANK0 ] PTR unsigned char 
  2576 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2577 ;;  fb              1   15[BANK0 ] unsigned char 
  2578 ;;  i               1   17[BANK0 ] unsigned char 
  2579 ;;  dat             1   14[BANK0 ] unsigned char 
  2580 ;;  crc             1   18[BANK0 ] unsigned char 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      unsigned char 
  2583 ;; Registers used:
  2584 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2585 ;; Tracked objects:
  2586 ;;		On entry : B00/0
  2587 ;;		On exit  : B00/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2590 ;;      Params:         0       1       0       0
  2591 ;;      Locals:         0       5       0       0
  2592 ;;      Temps:          0       0       0       0
  2593 ;;      Totals:         0       6       0       0
  2594 ;;Total ram usage:        6 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    3
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_EditAddressMemory
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           
  2605                           ;psect for function _calc_crc
  2606  0611                     _calc_crc:	
  2607                           
  2608                           ;incstack = 0
  2609                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2610                           ;calc_crc@mas stored from wreg
  2611  0611  00B0               	movwf	calc_crc@mas
  2612                           
  2613                           ;prog.c: 282: unsigned char crc = 0;
  2614  0612  01B2               	clrf	calc_crc@crc
  2615                           
  2616                           ;prog.c: 283: while (len--) {
  2617  0613  2E2D               	goto	l3489
  2618  0614                     l3469:	
  2619                           
  2620                           ;prog.c: 284: unsigned char dat = *mas++;
  2621  0614  0830               	movf	calc_crc@mas,w
  2622  0615  0084               	movwf	4
  2623  0616  0800               	movf	0,w
  2624  0617  00AE               	movwf	calc_crc@dat
  2625  0618  0AB0               	incf	calc_crc@mas,f
  2626                           
  2627                           ;prog.c: 285: for (unsigned char i = 0; i < 8; i++) {
  2628  0619  01B1               	clrf	calc_crc@i
  2629  061A                     l3479:	
  2630                           
  2631                           ;prog.c: 286: unsigned char fb = (crc ^ dat) & 1;
  2632  061A  0832               	movf	calc_crc@crc,w
  2633  061B  062E               	xorwf	calc_crc@dat,w
  2634  061C  00AF               	movwf	calc_crc@fb
  2635  061D  3001               	movlw	1
  2636  061E  05AF               	andwf	calc_crc@fb,f
  2637                           
  2638                           ;prog.c: 287: crc >>= 1;
  2639  061F  1003               	clrc
  2640  0620  0CB2               	rrf	calc_crc@crc,f
  2641                           
  2642                           ;prog.c: 288: dat >>= 1;
  2643  0621  1003               	clrc
  2644  0622  0CAE               	rrf	calc_crc@dat,f
  2645                           
  2646                           ;prog.c: 289: if (fb) crc ^= 0x8c;
  2647  0623  082F               	movf	calc_crc@fb,w
  2648  0624  1903               	btfsc	3,2
  2649  0625  2E28               	goto	l3487
  2650  0626  308C               	movlw	140
  2651  0627  06B2               	xorwf	calc_crc@crc,f
  2652  0628                     l3487:	
  2653  0628  3008               	movlw	8
  2654  0629  0AB1               	incf	calc_crc@i,f
  2655  062A  0231               	subwf	calc_crc@i,w
  2656  062B  1C03               	skipc
  2657  062C  2E1A               	goto	l3479
  2658  062D                     l3489:	
  2659  062D  03AD               	decf	calc_crc@len,f
  2660  062E  0F2D               	incfsz	calc_crc@len,w
  2661  062F  2E14               	goto	l3469
  2662                           
  2663                           ;prog.c: 290: }
  2664                           ;prog.c: 291: }
  2665                           ;prog.c: 292: return crc;
  2666  0630  0832               	movf	calc_crc@crc,w
  2667  0631  0008               	return
  2668  0632                     __end_of_calc_crc:	
  2669                           
  2670                           	psect	text9
  2671  0722                     __ptext9:	
  2672 ;; *************** function _WriteArrayToEEPROM *****************
  2673 ;; Defined at:
  2674 ;;		line 213 in file "prog.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  container       1    wreg     PTR unsigned char 
  2677 ;;		 -> EditAddressMemory@CellsData(8), 
  2678 ;;  address_star    1   16[BANK0 ] unsigned char 
  2679 ;;  quantity        1   17[BANK0 ] unsigned char 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  container       1   19[BANK0 ] PTR unsigned char 
  2682 ;;		 -> EditAddressMemory@CellsData(8), 
  2683 ;;  i               1   20[BANK0 ] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 300/0
  2690 ;;		On exit  : 300/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2693 ;;      Params:         0       2       0       0
  2694 ;;      Locals:         0       2       0       0
  2695 ;;      Temps:          0       1       0       0
  2696 ;;      Totals:         0       5       0       0
  2697 ;;Total ram usage:        5 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    4
  2700 ;; This function calls:
  2701 ;;		_EEWR
  2702 ;;		_waitInterrupt
  2703 ;; This function is called by:
  2704 ;;		_EditAddressMemory
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           
  2709                           ;psect for function _WriteArrayToEEPROM
  2710  0722                     _WriteArrayToEEPROM:	
  2711                           
  2712                           ;incstack = 0
  2713                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2714                           ;WriteArrayToEEPROM@container stored from wreg
  2715  0722  00B3               	movwf	WriteArrayToEEPROM@container
  2716                           
  2717                           ;prog.c: 214: for (unsigned char i = 0; i < quantity; i++) {
  2718  0723  01B4               	clrf	WriteArrayToEEPROM@i
  2719  0724                     l3383:	
  2720  0724  0831               	movf	WriteArrayToEEPROM@quantity,w
  2721  0725  0234               	subwf	WriteArrayToEEPROM@i,w
  2722  0726  1803               	btfsc	3,0
  2723  0727  0008               	return
  2724                           
  2725                           ;prog.c: 215: waitInterrupt();
  2726  0728  27BB               	fcall	_waitInterrupt
  2727                           
  2728                           ;prog.c: 216: EEWR(address_start + i, container[i]);
  2729  0729  0834               	movf	WriteArrayToEEPROM@i,w
  2730  072A  0733               	addwf	WriteArrayToEEPROM@container,w
  2731  072B  00B2               	movwf	??_WriteArrayToEEPROM
  2732  072C  0084               	movwf	4
  2733  072D  1383               	bcf	3,7	;select IRP bank0
  2734  072E  0800               	movf	0,w
  2735  072F  00AD               	movwf	EEWR@data
  2736  0730  0834               	movf	WriteArrayToEEPROM@i,w
  2737  0731  0730               	addwf	WriteArrayToEEPROM@address_start,w
  2738  0732  26F6               	fcall	_EEWR
  2739  0733  0AB4               	incf	WriteArrayToEEPROM@i,f
  2740  0734  2F24               	goto	l3383
  2741  0735                     __end_of_WriteArrayToEEPROM:	
  2742                           
  2743                           	psect	text10
  2744  07BB                     __ptext10:	
  2745 ;; *************** function _waitInterrupt *****************
  2746 ;; Defined at:
  2747 ;;		line 93 in file "prog.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;		None
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;		None
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		None
  2756 ;; Tracked objects:
  2757 ;;		On entry : 200/0
  2758 ;;		On exit  : 300/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2761 ;;      Params:         0       0       0       0
  2762 ;;      Locals:         0       0       0       0
  2763 ;;      Temps:          0       0       0       0
  2764 ;;      Totals:         0       0       0       0
  2765 ;;Total ram usage:        0 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    3
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_WriteArrayToEEPROM
  2772 ;;		_FindCell
  2773 ;;		_EditAddressMemory
  2774 ;;		_main
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           
  2779                           ;psect for function _waitInterrupt
  2780  07BB                     _waitInterrupt:	
  2781                           
  2782                           ;prog.c: 94: endInterrupt = 0;
  2783                           
  2784                           ;incstack = 0
  2785                           ; Regs used in _waitInterrupt: []
  2786  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  2787  07BC  10E0               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2788  07BD                     l73:	
  2789                           ;prog.c: 95: while (!endInterrupt);
  2790                           
  2791  07BD  18E0               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2792  07BE  0008               	return
  2793  07BF  2FBD               	goto	l73
  2794  07C0                     __end_of_waitInterrupt:	
  2795                           
  2796                           	psect	text11
  2797  06F6                     __ptext11:	
  2798 ;; *************** function _EEWR *****************
  2799 ;; Defined at:
  2800 ;;		line 181 in file "prog.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  address         1    wreg     unsigned char 
  2803 ;;  data            1   13[BANK0 ] unsigned char 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  address         1   14[BANK0 ] unsigned char 
  2806 ;;  INTCON_BUP      1   15[BANK0 ] volatile unsigned char 
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg
  2811 ;; Tracked objects:
  2812 ;;		On entry : B00/0
  2813 ;;		On exit  : B00/0
  2814 ;;		Unchanged: 800/0
  2815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2816 ;;      Params:         0       1       0       0
  2817 ;;      Locals:         0       2       0       0
  2818 ;;      Temps:          0       0       0       0
  2819 ;;      Totals:         0       3       0       0
  2820 ;;Total ram usage:        3 bytes
  2821 ;; Hardware stack levels used:    1
  2822 ;; Hardware stack levels required when called:    3
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_WriteArrayToEEPROM
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           
  2831                           ;psect for function _EEWR
  2832  06F6                     _EEWR:	
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _EEWR: [wreg]
  2836                           ;EEWR@address stored from wreg
  2837  06F6  00AE               	movwf	EEWR@address
  2838                           
  2839                           ;prog.c: 182: volatile unsigned char INTCON_BUP = INTCON;
  2840  06F7  080B               	movf	11,w	;volatile
  2841  06F8  00AF               	movwf	EEWR@INTCON_BUP	;volatile
  2842                           
  2843                           ;prog.c: 183: INTCONbits.GIE = 0;
  2844  06F9  138B               	bcf	11,7	;volatile
  2845                           
  2846                           ;prog.c: 184: EEADR = address;
  2847  06FA  082E               	movf	EEWR@address,w
  2848  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  2849  06FC  009B               	movwf	27	;volatile
  2850                           
  2851                           ;prog.c: 185: EEDATA = data;
  2852  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  2853  06FE  082D               	movf	EEWR@data,w
  2854  06FF  1683               	bsf	3,5	;RP0=1, select bank1
  2855  0700  009A               	movwf	26	;volatile
  2856                           
  2857                           ;prog.c: 186: EECON1bits.WREN = 1;
  2858  0701  151C               	bsf	28,2	;volsfr
  2859                           
  2860                           ;prog.c: 187: EECON2 = 0x55;
  2861  0702  3055               	movlw	85
  2862  0703  009D               	movwf	29	;volsfr
  2863                           
  2864                           ;prog.c: 188: EECON2 = 0xAA;
  2865  0704  30AA               	movlw	170
  2866  0705  009D               	movwf	29	;volsfr
  2867                           
  2868                           ;prog.c: 189: EECON1bits.WR = 1;
  2869  0706  149C               	bsf	28,1	;volsfr
  2870                           
  2871                           ;prog.c: 190: EECON1bits.WREN = 0;
  2872  0707  111C               	bcf	28,2	;volsfr
  2873  0708                     l123:	
  2874                           ;prog.c: 191: while (EECON1bits.WR == 1) {
  2875                           
  2876  0708  189C               	btfsc	28,1	;volsfr
  2877  0709  2F08               	goto	l123
  2878                           
  2879                           ;prog.c: 192: }
  2880                           ;prog.c: 193: INTCON = INTCON_BUP;
  2881  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2882  070B  082F               	movf	EEWR@INTCON_BUP,w	;volatile
  2883  070C  008B               	movwf	11	;volatile
  2884  070D  0008               	return
  2885  070E                     __end_of_EEWR:	
  2886                           
  2887                           	psect	text12
  2888  0503                     __ptext12:	
  2889 ;; *************** function _TX *****************
  2890 ;; Defined at:
  2891 ;;		line 239 in file "prog.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  cmd             1    wreg     unsigned char 
  2894 ;;  line            1   13[BANK0 ] unsigned char 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  cmd             1   15[BANK0 ] unsigned char 
  2897 ;;  One             1   19[BANK0 ] unsigned char 
  2898 ;;  i               1   18[BANK0 ] unsigned char 
  2899 ;;  Zero            1   17[BANK0 ] unsigned char 
  2900 ;;  temp            1   16[BANK0 ] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0
  2905 ;; Tracked objects:
  2906 ;;		On entry : 300/0
  2907 ;;		On exit  : 300/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2910 ;;      Params:         0       1       0       0
  2911 ;;      Locals:         0       5       0       0
  2912 ;;      Temps:          0       1       0       0
  2913 ;;      Totals:         0       7       0       0
  2914 ;;Total ram usage:        7 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    3
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_EditAddressMemory
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           
  2925                           ;psect for function _TX
  2926  0503                     _TX:	
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _TX: [wreg+status,2+status,0]
  2930                           ;TX@cmd stored from wreg
  2931  0503  00AF               	movwf	TX@cmd
  2932                           
  2933                           ;prog.c: 240: unsigned char One = line;
  2934  0504  082D               	movf	TX@line,w
  2935  0505  00B3               	movwf	TX@One
  2936                           
  2937                           ;prog.c: 241: unsigned char Zero = One ^ 0b11111111;
  2938  0506  0933               	comf	TX@One,w
  2939  0507  00B1               	movwf	TX@Zero
  2940                           
  2941                           ;prog.c: 244: unsigned char i = 0;
  2942  0508  01B2               	clrf	TX@i
  2943                           
  2944                           ;prog.c: 245: temp = cmd;
  2945  0509  082F               	movf	TX@cmd,w
  2946  050A  00B0               	movwf	TX@temp
  2947                           
  2948                           ;prog.c: 246: for (i = 0; i < 8; i++) {
  2949  050B  01B2               	clrf	TX@i
  2950  050C                     l147:	
  2951                           
  2952                           ;prog.c: 247: if (temp & 0x01) {
  2953  050C  1C30               	btfss	TX@temp,0
  2954  050D  2D1D               	goto	l3425
  2955                           
  2956                           ;prog.c: 248: TRISA &= Zero;
  2957  050E  0831               	movf	TX@Zero,w
  2958  050F  1683               	bsf	3,5	;RP0=1, select bank1
  2959  0510  0585               	andwf	5,f	;volatile
  2960                           
  2961                           ;prog.c: 249: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2962  0511  2D12               	nop2	;2 cycle nop
  2963  0512  2D13               	nop2	;2 cycle nop
  2964  0513  0000               	nop
  2965                           
  2966                           ;prog.c: 250: TRISA |= One;
  2967  0514  2535               	fcall	PL12	;call to abstracted procedure
  2968                           
  2969                           ;prog.c: 251: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2970  0515  3016               	movlw	22
  2971  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2972  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2973  0518  00AE               	movwf	??_TX
  2974  0519                     u4737:	
  2975  0519  0BAE               	decfsz	??_TX,f
  2976  051A  2D19               	goto	u4737
  2977  051B  2D1C               	nop2
  2978                           
  2979                           ;prog.c: 252: } else {
  2980  051C  2D2B               	goto	l3433
  2981  051D                     l3425:	
  2982                           
  2983                           ;prog.c: 253: TRISA &= Zero;
  2984  051D  0831               	movf	TX@Zero,w
  2985  051E  1683               	bsf	3,5	;RP0=1, select bank1
  2986  051F  0585               	andwf	5,f	;volatile
  2987                           
  2988                           ;prog.c: 254: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2989  0520  3016               	movlw	22
  2990  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0523  00AE               	movwf	??_TX
  2993  0524                     u4747:	
  2994  0524  0BAE               	decfsz	??_TX,f
  2995  0525  2D24               	goto	u4747
  2996  0526  2D27               	nop2
  2997                           
  2998                           ;prog.c: 255: TRISA |= One;
  2999  0527  2535               	fcall	PL12	;call to abstracted procedure
  3000                           
  3001                           ;prog.c: 256: _delay((unsigned long)((5)*(4000000/4000000.0)));
  3002  0528  2D29               	nop2	;2 cycle nop
  3003  0529  2D2A               	nop2	;2 cycle nop
  3004  052A  0000               	nop
  3005  052B                     l3433:	
  3006  052B  3008               	movlw	8
  3007                           
  3008                           ;prog.c: 257: }
  3009                           ;prog.c: 258: temp >>= 1;
  3010  052C  1283               	bcf	3,5	;RP0=0, select bank0
  3011  052D  1303               	bcf	3,6	;RP1=0, select bank0
  3012  052E  1003               	clrc
  3013  052F  0CB0               	rrf	TX@temp,f
  3014  0530  0AB2               	incf	TX@i,f
  3015  0531  0232               	subwf	TX@i,w
  3016  0532  1803               	btfsc	3,0
  3017  0533  0008               	return
  3018  0534  2D0C               	goto	l147
  3019  0535                     __end_of_TX:	
  3020  0535                     PL12:	
  3021  0535  1283               	bcf	3,5	;RP0=0, select bank0
  3022  0536  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0537  0833               	movf	TX@One,w
  3024  0538  1683               	bsf	3,5	;RP0=1, select bank1
  3025  0539  0485               	iorwf	5,f	;volatile
  3026  053A  0008               	return
  3027  053B                     __end_ofPL12:	
  3028                           
  3029                           	psect	text13
  3030  0788                     __ptext13:	
  3031 ;; *************** function _ShowError *****************
  3032 ;; Defined at:
  3033 ;;		line 126 in file "prog.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      void 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 200/0
  3044 ;;		On exit  : 300/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3047 ;;      Params:         0       0       0       0
  3048 ;;      Locals:         0       0       0       0
  3049 ;;      Temps:          0       0       0       0
  3050 ;;      Totals:         0       0       0       0
  3051 ;;Total ram usage:        0 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    4
  3054 ;; This function calls:
  3055 ;;		_clrInd
  3056 ;;		_refreshInd
  3057 ;;		_setDigit
  3058 ;; This function is called by:
  3059 ;;		_EditAddressMemory
  3060 ;;		_main
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _ShowError
  3066  0788                     _ShowError:	
  3067                           
  3068                           ;prog.c: 127: clrInd();
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in _ShowError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3072  0788  27B5               	fcall	_clrInd
  3073                           
  3074                           ;prog.c: 128: setDigit(3, 14);
  3075  0789  300E               	movlw	14
  3076  078A  00B2               	movwf	setDigit@data
  3077  078B  3003               	movlw	3
  3078  078C  2747               	fcall	_setDigit
  3079                           
  3080                           ;prog.c: 129: setDigit(2, 24);
  3081  078D  3018               	movlw	24
  3082  078E  00B2               	movwf	setDigit@data
  3083  078F  3002               	movlw	2
  3084  0790  2747               	fcall	_setDigit
  3085                           
  3086                           ;prog.c: 130: setDigit(1, 24);
  3087  0791  3018               	movlw	24
  3088  0792  00B2               	movwf	setDigit@data
  3089  0793  3001               	movlw	1
  3090  0794  2747               	fcall	_setDigit
  3091                           
  3092                           ;prog.c: 131: refreshInd();
  3093  0795  2FA7               	ljmp	l3293
  3094  0796                     __end_of_ShowError:	
  3095                           
  3096                           	psect	text14
  3097  0653                     __ptext14:	
  3098 ;; *************** function _ReadCell *****************
  3099 ;; Defined at:
  3100 ;;		line 576 in file "prog.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;  cell            1    wreg     unsigned char 
  3103 ;;  CellsData       1   21[BANK0 ] PTR unsigned char 
  3104 ;;		 -> EditAddressMemory@CellsData(8), 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  cell            1   23[BANK0 ] unsigned char 
  3107 ;;  i               1   24[BANK0 ] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 300/100
  3114 ;;		On exit  : B00/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3117 ;;      Params:         0       1       0       0
  3118 ;;      Locals:         0       2       0       0
  3119 ;;      Temps:          0       1       0       0
  3120 ;;      Totals:         0       4       0       0
  3121 ;;Total ram usage:        4 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    5
  3124 ;; This function calls:
  3125 ;;		_FillArrayFromEEPROM
  3126 ;; This function is called by:
  3127 ;;		_EditAddressMemory
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           
  3132                           ;psect for function _ReadCell
  3133  0653                     _ReadCell:	
  3134                           
  3135                           ;incstack = 0
  3136                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3137                           ;ReadCell@cell stored from wreg
  3138  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0654  00B7               	movwf	ReadCell@cell
  3140                           
  3141                           ;prog.c: 577: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  3142  0655  00B6               	movwf	??_ReadCell
  3143  0656  1003               	clrc
  3144  0657  0DB6               	rlf	??_ReadCell,f
  3145  0658  1003               	clrc
  3146  0659  0DB6               	rlf	??_ReadCell,f
  3147  065A  1003               	clrc
  3148  065B  0D36               	rlf	??_ReadCell,w
  3149  065C  00B0               	movwf	FillArrayFromEEPROM@address_start
  3150  065D  3008               	movlw	8
  3151  065E  00B1               	movwf	FillArrayFromEEPROM@quantity
  3152  065F  0835               	movf	ReadCell@CellsData,w
  3153  0660  2759               	fcall	_FillArrayFromEEPROM
  3154                           
  3155                           ;prog.c: 578: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  3156  0661  01B8               	clrf	ReadCell@i
  3157  0662                     l3503:	
  3158                           
  3159                           ;prog.c: 579: if (CellsData[i] != 0xFF) {
  3160  0662  0838               	movf	ReadCell@i,w
  3161  0663  0735               	addwf	ReadCell@CellsData,w
  3162  0664  00B6               	movwf	??_ReadCell
  3163  0665  0084               	movwf	4
  3164  0666  1383               	bcf	3,7	;select IRP bank0
  3165  0667  0F00               	incfsz	0,w
  3166                           
  3167                           ;prog.c: 580: return 0;
  3168  0668  3400               	retlw	0
  3169  0669  3008               	movlw	8
  3170  066A  0AB8               	incf	ReadCell@i,f
  3171  066B  0238               	subwf	ReadCell@i,w
  3172  066C  1803               	btfsc	3,0
  3173                           
  3174                           ;prog.c: 581: }
  3175                           ;prog.c: 582: }
  3176                           ;prog.c: 583: return 1;
  3177  066D  3401               	retlw	1
  3178  066E  2E62               	goto	l3503
  3179  066F                     __end_of_ReadCell:	
  3180                           
  3181                           	psect	text15
  3182  0759                     __ptext15:	
  3183 ;; *************** function _FillArrayFromEEPROM *****************
  3184 ;; Defined at:
  3185 ;;		line 207 in file "prog.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  container       1    wreg     PTR unsigned char 
  3188 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3189 ;;  address_star    1   16[BANK0 ] unsigned char 
  3190 ;;  quantity        1   17[BANK0 ] unsigned char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  container       1   19[BANK0 ] PTR unsigned char 
  3193 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3194 ;;  i               1   20[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  1    wreg      void 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 300/0
  3201 ;;		On exit  : 300/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3204 ;;      Params:         0       2       0       0
  3205 ;;      Locals:         0       2       0       0
  3206 ;;      Temps:          0       1       0       0
  3207 ;;      Totals:         0       5       0       0
  3208 ;;Total ram usage:        5 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    4
  3211 ;; This function calls:
  3212 ;;		_EERD
  3213 ;; This function is called by:
  3214 ;;		_FindCell
  3215 ;;		_ReadCell
  3216 ;;		_main
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           
  3221                           ;psect for function _FillArrayFromEEPROM
  3222  0759                     _FillArrayFromEEPROM:	
  3223                           
  3224                           ;incstack = 0
  3225                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3226                           ;FillArrayFromEEPROM@container stored from wreg
  3227  0759  00B3               	movwf	FillArrayFromEEPROM@container
  3228                           
  3229                           ;prog.c: 208: for (unsigned char i = 0; i < quantity; i++) {
  3230  075A  01B4               	clrf	FillArrayFromEEPROM@i
  3231  075B                     l3315:	
  3232  075B  0831               	movf	FillArrayFromEEPROM@quantity,w
  3233  075C  0234               	subwf	FillArrayFromEEPROM@i,w
  3234  075D  1803               	btfsc	3,0
  3235  075E  0008               	return
  3236                           
  3237                           ;prog.c: 209: container[i] = EERD(address_start + i);
  3238  075F  0834               	movf	FillArrayFromEEPROM@i,w
  3239  0760  0733               	addwf	FillArrayFromEEPROM@container,w
  3240  0761  00B2               	movwf	??_FillArrayFromEEPROM
  3241  0762  0084               	movwf	4
  3242  0763  0834               	movf	FillArrayFromEEPROM@i,w
  3243  0764  0730               	addwf	FillArrayFromEEPROM@address_start,w
  3244  0765  2779               	fcall	_EERD
  3245  0766  1383               	bcf	3,7	;select IRP bank0
  3246  0767  0080               	movwf	0
  3247  0768  0AB4               	incf	FillArrayFromEEPROM@i,f
  3248  0769  2F5B               	goto	l3315
  3249  076A                     __end_of_FillArrayFromEEPROM:	
  3250                           
  3251                           	psect	text16
  3252  0779                     __ptext16:	
  3253 ;; *************** function _EERD *****************
  3254 ;; Defined at:
  3255 ;;		line 196 in file "prog.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  address         1    wreg     unsigned char 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  address         1   13[BANK0 ] unsigned char 
  3260 ;;  EEDATA_BUP      1   15[BANK0 ] volatile unsigned char 
  3261 ;;  INTCON_BUP      1   14[BANK0 ] volatile unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      unsigned char 
  3264 ;; Registers used:
  3265 ;;		wreg
  3266 ;; Tracked objects:
  3267 ;;		On entry : 300/0
  3268 ;;		On exit  : 300/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3271 ;;      Params:         0       0       0       0
  3272 ;;      Locals:         0       3       0       0
  3273 ;;      Temps:          0       0       0       0
  3274 ;;      Totals:         0       3       0       0
  3275 ;;Total ram usage:        3 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    3
  3278 ;; This function calls:
  3279 ;;		Nothing
  3280 ;; This function is called by:
  3281 ;;		_FillArrayFromEEPROM
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           
  3286                           ;psect for function _EERD
  3287  0779                     _EERD:	
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _EERD: [wreg]
  3291                           ;EERD@address stored from wreg
  3292  0779  00AD               	movwf	EERD@address
  3293                           
  3294                           ;prog.c: 197: volatile unsigned char INTCON_BUP = INTCON;
  3295  077A  080B               	movf	11,w	;volatile
  3296  077B  00AE               	movwf	EERD@INTCON_BUP	;volatile
  3297                           
  3298                           ;prog.c: 198: volatile unsigned char EEDATA_BUP;
  3299                           ;prog.c: 199: INTCONbits.GIE = 0;
  3300  077C  138B               	bcf	11,7	;volatile
  3301                           
  3302                           ;prog.c: 200: EEADR = address;
  3303  077D  082D               	movf	EERD@address,w
  3304  077E  1683               	bsf	3,5	;RP0=1, select bank1
  3305  077F  009B               	movwf	27	;volatile
  3306                           
  3307                           ;prog.c: 201: EECON1bits.RD = 1;
  3308  0780  141C               	bsf	28,0	;volsfr
  3309                           
  3310                           ;prog.c: 202: EEDATA_BUP = EEDATA;
  3311  0781  081A               	movf	26,w	;volatile
  3312  0782  1283               	bcf	3,5	;RP0=0, select bank0
  3313  0783  00AF               	movwf	EERD@EEDATA_BUP	;volatile
  3314                           
  3315                           ;prog.c: 203: INTCON = INTCON_BUP;
  3316  0784  082E               	movf	EERD@INTCON_BUP,w	;volatile
  3317  0785  008B               	movwf	11	;volatile
  3318                           
  3319                           ;prog.c: 204: return EEDATA_BUP;
  3320  0786  082F               	movf	EERD@EEDATA_BUP,w	;volatile
  3321  0787  0008               	return
  3322  0788                     __end_of_EERD:	
  3323                           
  3324                           	psect	text17
  3325  059C                     __ptext17:	
  3326 ;; *************** function _RX *****************
  3327 ;; Defined at:
  3328 ;;		line 262 in file "prog.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  line            1    wreg     unsigned char 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  line            1   14[BANK0 ] unsigned char 
  3333 ;;  i               1   17[BANK0 ] unsigned char 
  3334 ;;  One             1   18[BANK0 ] unsigned char 
  3335 ;;  d               1   16[BANK0 ] unsigned char 
  3336 ;;  Zero            1   15[BANK0 ] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      unsigned char 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0
  3341 ;; Tracked objects:
  3342 ;;		On entry : 300/100
  3343 ;;		On exit  : 300/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3346 ;;      Params:         0       0       0       0
  3347 ;;      Locals:         0       5       0       0
  3348 ;;      Temps:          0       1       0       0
  3349 ;;      Totals:         0       6       0       0
  3350 ;;Total ram usage:        6 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    3
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_EditAddressMemory
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           
  3361                           ;psect for function _RX
  3362  059C                     _RX:	
  3363                           
  3364                           ;incstack = 0
  3365                           ; Regs used in _RX: [wreg+status,2+status,0]
  3366                           ;RX@line stored from wreg
  3367  059C  1283               	bcf	3,5	;RP0=0, select bank0
  3368  059D  00AE               	movwf	RX@line
  3369                           
  3370                           ;prog.c: 263: unsigned char One = line;
  3371  059E  00B2               	movwf	RX@One
  3372                           
  3373                           ;prog.c: 264: unsigned char Zero = One ^ 0b11111111;
  3374  059F  0932               	comf	RX@One,w
  3375  05A0  00AF               	movwf	RX@Zero
  3376                           
  3377                           ;prog.c: 266: unsigned char d = 0;
  3378  05A1  01B0               	clrf	RX@d
  3379                           
  3380                           ;prog.c: 267: for (unsigned char i = 0; i < 8; i++) {
  3381  05A2  01B1               	clrf	RX@i
  3382  05A3                     l3447:	
  3383                           
  3384                           ;prog.c: 268: TRISA &= Zero;
  3385  05A3  082F               	movf	RX@Zero,w
  3386  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  3387  05A5  0585               	andwf	5,f	;volatile
  3388                           
  3389                           ;prog.c: 269: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3390  05A6  2DA7               	nop2	;2 cycle nop
  3391  05A7  2DA8               	nop2	;2 cycle nop
  3392  05A8  2DA9               	nop2	;2 cycle nop
  3393                           
  3394                           ;prog.c: 270: TRISA |= One;
  3395  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  3396  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  3397  05AB  0832               	movf	RX@One,w
  3398  05AC  1683               	bsf	3,5	;RP0=1, select bank1
  3399  05AD  0485               	iorwf	5,f	;volatile
  3400                           
  3401                           ;prog.c: 271: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3402  05AE  2DAF               	nop2	;2 cycle nop
  3403  05AF  2DB0               	nop2	;2 cycle nop
  3404                           
  3405                           ;prog.c: 272: d >>= 1;
  3406  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3407  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3408  05B2  1003               	clrc
  3409  05B3  0CB0               	rrf	RX@d,f
  3410                           
  3411                           ;prog.c: 273: if ((PORTA & One) > 0) {
  3412  05B4  0805               	movf	5,w	;volatile
  3413  05B5  0532               	andwf	RX@One,w
  3414  05B6  1D03               	btfss	3,2
  3415                           
  3416                           ;prog.c: 274: d |= 0x80;
  3417  05B7  17B0               	bsf	RX@d,7
  3418                           
  3419                           ;prog.c: 275: }
  3420                           ;prog.c: 276: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3421  05B8  3013               	movlw	19
  3422  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  3423  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  3424  05BB  00AD               	movwf	??_RX
  3425  05BC                     u4757:	
  3426  05BC  0BAD               	decfsz	??_RX,f
  3427  05BD  2DBC               	goto	u4757
  3428  05BE  0000               	nop
  3429  05BF  3008               	movlw	8
  3430  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  3431  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  3432  05C2  0AB1               	incf	RX@i,f
  3433  05C3  0231               	subwf	RX@i,w
  3434  05C4  1C03               	skipc
  3435  05C5  2DA3               	goto	l3447
  3436                           
  3437                           ;prog.c: 277: }
  3438                           ;prog.c: 278: return d;
  3439  05C6  0830               	movf	RX@d,w
  3440  05C7  0008               	return
  3441  05C8                     __end_of_RX:	
  3442                           
  3443                           	psect	text18
  3444  04C8                     __ptext18:	
  3445 ;; *************** function _INIT *****************
  3446 ;; Defined at:
  3447 ;;		line 221 in file "prog.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  line            1    wreg     unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  line            1   14[BANK0 ] unsigned char 
  3452 ;;  One             1   17[BANK0 ] unsigned char 
  3453 ;;  b               1   16[BANK0 ] unsigned char 
  3454 ;;  Zero            1   15[BANK0 ] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      unsigned char 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0
  3459 ;; Tracked objects:
  3460 ;;		On entry : 300/100
  3461 ;;		On exit  : 300/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3464 ;;      Params:         0       0       0       0
  3465 ;;      Locals:         0       4       0       0
  3466 ;;      Temps:          0       1       0       0
  3467 ;;      Totals:         0       5       0       0
  3468 ;;Total ram usage:        5 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    3
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_EditAddressMemory
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           
  3479                           ;psect for function _INIT
  3480  04C8                     _INIT:	
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3484                           ;INIT@line stored from wreg
  3485  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  3486  04C9  00AE               	movwf	INIT@line
  3487                           
  3488                           ;prog.c: 222: unsigned char One = line;
  3489  04CA  00B1               	movwf	INIT@One
  3490                           
  3491                           ;prog.c: 223: unsigned char Zero = One ^ 0b11111111;
  3492  04CB  0931               	comf	INIT@One,w
  3493  04CC  00AF               	movwf	INIT@Zero
  3494                           
  3495                           ;prog.c: 227: TRISA |= One;
  3496  04CD  0831               	movf	INIT@One,w
  3497  04CE  1683               	bsf	3,5	;RP0=1, select bank1
  3498  04CF  0485               	iorwf	5,f	;volatile
  3499                           
  3500                           ;prog.c: 228: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3501  04D0  3006               	movlw	6
  3502  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  3503  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  3504  04D3  00AD               	movwf	??_INIT
  3505  04D4                     u4767:	
  3506  04D4  0BAD               	decfsz	??_INIT,f
  3507  04D5  2CD4               	goto	u4767
  3508                           
  3509                           ;prog.c: 229: TRISA &= Zero;
  3510  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  3511  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  3512  04D8  082F               	movf	INIT@Zero,w
  3513  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3514  04DA  0585               	andwf	5,f	;volatile
  3515                           
  3516                           ;prog.c: 230: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3517  04DB  30A6               	movlw	166
  3518  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3519  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3520  04DE  00AD               	movwf	??_INIT
  3521  04DF                     u4777:	
  3522  04DF  0BAD               	decfsz	??_INIT,f
  3523  04E0  2CDF               	goto	u4777
  3524                           
  3525                           ;prog.c: 231: TRISA |= One;
  3526  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3527  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3528  04E3  0831               	movf	INIT@One,w
  3529  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  3530  04E5  0485               	iorwf	5,f	;volatile
  3531                           
  3532                           ;prog.c: 232: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3533  04E6  3015               	movlw	21
  3534  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3535  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  3536  04E9  00AD               	movwf	??_INIT
  3537  04EA                     u4787:	
  3538  04EA  0BAD               	decfsz	??_INIT,f
  3539  04EB  2CEA               	goto	u4787
  3540                           
  3541                           ;prog.c: 233: b = (PORTA & One) > 0;
  3542  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3543  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  3544  04EE  0805               	movf	5,w	;volatile
  3545  04EF  0531               	andwf	INIT@One,w
  3546  04F0  1903               	btfsc	3,2
  3547  04F1  2CF4               	goto	u3390
  3548  04F2  3001               	movlw	1
  3549  04F3  2CF5               	goto	u3400
  3550  04F4                     u3390:	
  3551  04F4  3000               	movlw	0
  3552  04F5                     u3400:	
  3553  04F5  00B0               	movwf	INIT@b
  3554                           
  3555                           ;prog.c: 234: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3556  04F6  3095               	movlw	149
  3557  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  3558  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  3559  04F9  00AD               	movwf	??_INIT
  3560  04FA                     u4797:	
  3561  04FA  0BAD               	decfsz	??_INIT,f
  3562  04FB  2CFA               	goto	u4797
  3563  04FC  0000               	nop
  3564                           
  3565                           ;prog.c: 236: return !b;
  3566  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  3567  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  3568  04FF  0830               	movf	INIT@b,w
  3569  0500  1903               	btfsc	3,2
  3570  0501  3401               	retlw	1
  3571  0502  3400               	retlw	0
  3572  0503                     __end_of_INIT:	
  3573                           
  3574                           	psect	text19
  3575  06A7                     __ptext19:	
  3576 ;; *************** function _CellToInd *****************
  3577 ;; Defined at:
  3578 ;;		line 586 in file "prog.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  cell            1    wreg     unsigned char 
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  cell            1   22[BANK0 ] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      void 
  3585 ;; Registers used:
  3586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 300/100
  3589 ;;		On exit  : 300/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3592 ;;      Params:         0       0       0       0
  3593 ;;      Locals:         0       1       0       0
  3594 ;;      Temps:          0       0       0       0
  3595 ;;      Totals:         0       1       0       0
  3596 ;;Total ram usage:        1 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    4
  3599 ;; This function calls:
  3600 ;;		___lbdiv
  3601 ;;		___lbmod
  3602 ;;		_clrInd
  3603 ;;		_refreshInd
  3604 ;;		_setDigit
  3605 ;; This function is called by:
  3606 ;;		_EditAddressMemory
  3607 ;;		_main
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function _CellToInd
  3613  06A7                     _CellToInd:	
  3614                           
  3615                           ;incstack = 0
  3616                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3617                           ;CellToInd@cell stored from wreg
  3618  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  3619  06A8  00B6               	movwf	CellToInd@cell
  3620                           
  3621                           ;prog.c: 587: clrInd();
  3622  06A9  27B5               	fcall	_clrInd
  3623  06AA  300A               	movlw	10
  3624                           
  3625                           ;prog.c: 588: cell++;
  3626  06AB  0AB6               	incf	CellToInd@cell,f
  3627                           
  3628                           ;prog.c: 590: if (cell > 9) {
  3629  06AC  0236               	subwf	CellToInd@cell,w
  3630  06AD  1C03               	skipc
  3631  06AE  2EBD               	goto	l3525
  3632                           
  3633                           ;prog.c: 591: setDigit(3, cell / 10);
  3634  06AF  300A               	movlw	10
  3635  06B0  00AD               	movwf	___lbdiv@divisor
  3636  06B1  0836               	movf	CellToInd@cell,w
  3637  06B2  26C2               	fcall	___lbdiv
  3638  06B3  00B2               	movwf	setDigit@data
  3639  06B4  3003               	movlw	3
  3640  06B5  2747               	fcall	_setDigit
  3641                           
  3642                           ;prog.c: 592: setDigit(2, cell % 10);
  3643  06B6  300A               	movlw	10
  3644  06B7  00AD               	movwf	___lbmod@divisor
  3645  06B8  0836               	movf	CellToInd@cell,w
  3646  06B9  266F               	fcall	___lbmod
  3647  06BA  00B2               	movwf	setDigit@data
  3648  06BB  3002               	movlw	2
  3649  06BC  2EC0               	goto	L8
  3650  06BD                     l3525:	
  3651                           ;prog.c: 593: } else {
  3652                           
  3653                           
  3654                           ;prog.c: 594: setDigit(3, cell);
  3655  06BD  0836               	movf	CellToInd@cell,w
  3656  06BE  00B2               	movwf	setDigit@data
  3657  06BF  3003               	movlw	3
  3658  06C0                     L8:	
  3659  06C0  2747               	fcall	_setDigit
  3660                           
  3661                           ;prog.c: 595: }
  3662                           ;prog.c: 597: refreshInd();
  3663  06C1  2FA7               	ljmp	l3293
  3664  06C2                     __end_of_CellToInd:	
  3665                           
  3666                           	psect	text20
  3667  0747                     __ptext20:	
  3668 ;; *************** function _setDigit *****************
  3669 ;; Defined at:
  3670 ;;		line 106 in file "prog.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  a               1    wreg     unsigned char 
  3673 ;;  data            1   18[BANK0 ] unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  a               1   21[BANK0 ] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 300/0
  3682 ;;		On exit  : B00/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3685 ;;      Params:         0       1       0       0
  3686 ;;      Locals:         0       1       0       0
  3687 ;;      Temps:          0       2       0       0
  3688 ;;      Totals:         0       4       0       0
  3689 ;;Total ram usage:        4 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    3
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_ShowError
  3696 ;;		_indData
  3697 ;;		_CellToInd
  3698 ;;		_main
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _setDigit
  3704  0747                     _setDigit:	
  3705                           
  3706                           ;incstack = 0
  3707                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3708                           ;setDigit@a stored from wreg
  3709  0747  00B5               	movwf	setDigit@a
  3710                           
  3711                           ;prog.c: 107: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3712  0748  303F               	movlw	63
  3713  0749  0532               	andwf	setDigit@data,w
  3714  074A  00B3               	movwf	??_setDigit
  3715  074B  0835               	movf	setDigit@a,w
  3716  074C  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3717  074D  0084               	movwf	4
  3718  074E  1383               	bcf	3,7	;select IRP bank0
  3719  074F  0800               	movf	0,w
  3720  0750  39C0               	andlw	192
  3721  0751  0433               	iorwf	??_setDigit,w
  3722  0752  00B4               	movwf	??_setDigit+1
  3723  0753  0835               	movf	setDigit@a,w
  3724  0754  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3725  0755  0084               	movwf	4
  3726  0756  0834               	movf	??_setDigit+1,w
  3727  0757  0080               	movwf	0
  3728  0758  0008               	return
  3729  0759                     __end_of_setDigit:	
  3730                           
  3731                           	psect	text21
  3732  07A7                     __ptext21:	
  3733 ;; *************** function _refreshInd *****************
  3734 ;; Defined at:
  3735 ;;		line 114 in file "prog.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg
  3744 ;; Tracked objects:
  3745 ;;		On entry : 200/0
  3746 ;;		On exit  : 300/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3749 ;;      Params:         0       0       0       0
  3750 ;;      Locals:         0       0       0       0
  3751 ;;      Temps:          0       0       0       0
  3752 ;;      Totals:         0       0       0       0
  3753 ;;Total ram usage:        0 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    3
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_ShowError
  3760 ;;		_CellToInd
  3761 ;;		_EditAddressMemory
  3762 ;;		_main
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _refreshInd
  3768  07A7                     _refreshInd:	
  3769  07A7                     l3293:	
  3770                           ;incstack = 0
  3771                           ; Regs used in _refreshInd: [wreg]
  3772                           
  3773                           
  3774                           ;prog.c: 115: digits[0] = digits_0[0];
  3775  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  3776  07A8  084D               	movf	_digits_0,w	;volatile
  3777  07A9  00CA               	movwf	_digits	;volatile
  3778                           
  3779                           ;prog.c: 116: digits[1] = digits_0[1];
  3780  07AA  084E               	movf	_digits_0+1,w	;volatile
  3781  07AB  00CB               	movwf	_digits+1	;volatile
  3782                           
  3783                           ;prog.c: 117: digits[2] = digits_0[2];
  3784  07AC  084F               	movf	_digits_0+2,w	;volatile
  3785  07AD  00CC               	movwf	_digits+2	;volatile
  3786  07AE  0008               	return
  3787  07AF                     __end_of_refreshInd:	
  3788                           
  3789                           	psect	text22
  3790  07B5                     __ptext22:	
  3791 ;; *************** function _clrInd *****************
  3792 ;; Defined at:
  3793 ;;		line 120 in file "prog.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;		None
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;		None
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      void 
  3800 ;; Registers used:
  3801 ;;		wreg
  3802 ;; Tracked objects:
  3803 ;;		On entry : 200/0
  3804 ;;		On exit  : 300/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3807 ;;      Params:         0       0       0       0
  3808 ;;      Locals:         0       0       0       0
  3809 ;;      Temps:          0       0       0       0
  3810 ;;      Totals:         0       0       0       0
  3811 ;;Total ram usage:        0 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    3
  3814 ;; This function calls:
  3815 ;;		Nothing
  3816 ;; This function is called by:
  3817 ;;		_ShowError
  3818 ;;		_CellToInd
  3819 ;;		_EditAddressMemory
  3820 ;;		_main
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function _clrInd
  3826  07B5                     _clrInd:	
  3827                           
  3828                           ;prog.c: 121: digits_0[0] = 34;
  3829                           
  3830                           ;incstack = 0
  3831                           ; Regs used in _clrInd: [wreg]
  3832  07B5  3022               	movlw	34
  3833  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  3834  07B7  00CD               	movwf	_digits_0	;volatile
  3835                           
  3836                           ;prog.c: 122: digits_0[1] = 34;
  3837  07B8  00CE               	movwf	_digits_0+1	;volatile
  3838                           
  3839                           ;prog.c: 123: digits_0[2] = 34;
  3840  07B9  00CF               	movwf	_digits_0+2	;volatile
  3841  07BA  0008               	return
  3842  07BB                     __end_of_clrInd:	
  3843                           
  3844                           	psect	text23
  3845  066F                     __ptext23:	
  3846 ;; *************** function ___lbmod *****************
  3847 ;; Defined at:
  3848 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lbmod.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  dividend        1    wreg     unsigned char 
  3851 ;;  divisor         1   13[BANK0 ] unsigned char 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  dividend        1   15[BANK0 ] unsigned char 
  3854 ;;  rem             1   17[BANK0 ] unsigned char 
  3855 ;;  counter         1   16[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      unsigned char 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 300/0
  3862 ;;		On exit  : 300/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3865 ;;      Params:         0       1       0       0
  3866 ;;      Locals:         0       3       0       0
  3867 ;;      Temps:          0       1       0       0
  3868 ;;      Totals:         0       5       0       0
  3869 ;;Total ram usage:        5 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_indData
  3876 ;;		_CellToInd
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           
  3881                           ;psect for function ___lbmod
  3882  066F                     ___lbmod:	
  3883                           
  3884                           ;incstack = 0
  3885                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3886                           ;___lbmod@dividend stored from wreg
  3887  066F  00AF               	movwf	___lbmod@dividend
  3888  0670  3008               	movlw	8
  3889  0671  00B0               	movwf	___lbmod@counter
  3890  0672  01B1               	clrf	___lbmod@rem
  3891  0673                     l3345:	
  3892  0673  082F               	movf	___lbmod@dividend,w
  3893  0674  00AE               	movwf	??___lbmod
  3894  0675  3007               	movlw	7
  3895  0676  1003               	clrc
  3896  0677                     L9:	
  3897  0677  0CAE               	rrf	??___lbmod,f
  3898  0678  3EFF               	addlw	-1
  3899  0679  1003               	clrc
  3900  067A  1D03               	skipz
  3901  067B  2E77               	goto	L9
  3902  067C  0D31               	rlf	___lbmod@rem,w
  3903  067D  042E               	iorwf	??___lbmod,w
  3904  067E  00B1               	movwf	___lbmod@rem
  3905  067F  1003               	clrc
  3906  0680  0DAF               	rlf	___lbmod@dividend,f
  3907  0681  082D               	movf	___lbmod@divisor,w
  3908  0682  0231               	subwf	___lbmod@rem,w
  3909  0683  1C03               	skipc
  3910  0684  2E87               	goto	l3353
  3911  0685  082D               	movf	___lbmod@divisor,w
  3912  0686  02B1               	subwf	___lbmod@rem,f
  3913  0687                     l3353:	
  3914  0687  0BB0               	decfsz	___lbmod@counter,f
  3915  0688  2E73               	goto	l3345
  3916  0689  0831               	movf	___lbmod@rem,w
  3917  068A  0008               	return
  3918  068B                     __end_of___lbmod:	
  3919                           
  3920                           	psect	text24
  3921  06C2                     __ptext24:	
  3922 ;; *************** function ___lbdiv *****************
  3923 ;; Defined at:
  3924 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lbdiv.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  dividend        1    wreg     unsigned char 
  3927 ;;  divisor         1   13[BANK0 ] unsigned char 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  dividend        1   14[BANK0 ] unsigned char 
  3930 ;;  quotient        1   16[BANK0 ] unsigned char 
  3931 ;;  counter         1   15[BANK0 ] unsigned char 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      unsigned char 
  3934 ;; Registers used:
  3935 ;;		wreg, status,2, status,0
  3936 ;; Tracked objects:
  3937 ;;		On entry : 300/0
  3938 ;;		On exit  : 300/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3941 ;;      Params:         0       1       0       0
  3942 ;;      Locals:         0       3       0       0
  3943 ;;      Temps:          0       0       0       0
  3944 ;;      Totals:         0       4       0       0
  3945 ;;Total ram usage:        4 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    3
  3948 ;; This function calls:
  3949 ;;		Nothing
  3950 ;; This function is called by:
  3951 ;;		_indData
  3952 ;;		_CellToInd
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function ___lbdiv
  3958  06C2                     ___lbdiv:	
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3962                           ;___lbdiv@dividend stored from wreg
  3963  06C2  00AE               	movwf	___lbdiv@dividend
  3964  06C3  01B0               	clrf	___lbdiv@quotient
  3965  06C4  082D               	movf	___lbdiv@divisor,w
  3966  06C5  1903               	btfsc	3,2
  3967  06C6  2EDB               	goto	l3337
  3968  06C7  01AF               	clrf	___lbdiv@counter
  3969  06C8                     l3323:	
  3970  06C8  0AAF               	incf	___lbdiv@counter,f
  3971  06C9  1BAD               	btfsc	___lbdiv@divisor,7
  3972  06CA  2ECE               	goto	l731
  3973  06CB  1003               	clrc
  3974  06CC  0DAD               	rlf	___lbdiv@divisor,f
  3975  06CD  2EC8               	goto	l3323
  3976  06CE                     l731:	
  3977  06CE  1003               	clrc
  3978  06CF  0DB0               	rlf	___lbdiv@quotient,f
  3979  06D0  082D               	movf	___lbdiv@divisor,w
  3980  06D1  022E               	subwf	___lbdiv@dividend,w
  3981  06D2  1C03               	skipc
  3982  06D3  2ED8               	goto	L10
  3983  06D4  082D               	movf	___lbdiv@divisor,w
  3984  06D5  02AE               	subwf	___lbdiv@dividend,f
  3985  06D6  1430               	bsf	___lbdiv@quotient,0
  3986  06D7  1003               	clrc
  3987  06D8                     L10:	
  3988  06D8  0CAD               	rrf	___lbdiv@divisor,f
  3989  06D9  0BAF               	decfsz	___lbdiv@counter,f
  3990  06DA  2ECE               	goto	l731
  3991  06DB                     l3337:	
  3992  06DB  0830               	movf	___lbdiv@quotient,w
  3993  06DC  0008               	return
  3994  06DD                     __end_of___lbdiv:	
  3995                           
  3996                           	psect	text25
  3997  0328                     __ptext25:	
  3998 ;; *************** function _F *****************
  3999 ;; Defined at:
  4000 ;;		line 430 in file "prog.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  CurrentKeysS    1   12[BANK0 ] unsigned char 
  4005 ;;  dig             1   11[BANK0 ] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  1    wreg      void 
  4008 ;; Registers used:
  4009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 300/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4015 ;;      Params:         0       0       0       0
  4016 ;;      Locals:         0       2       0       0
  4017 ;;      Temps:          0       5       0       0
  4018 ;;      Totals:         0       7       0       0
  4019 ;;Total ram usage:        7 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    2
  4022 ;; This function calls:
  4023 ;;		_convDig
  4024 ;;		_get_temp_Async
  4025 ;; This function is called by:
  4026 ;;		Interrupt level 1
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           
  4031                           ;psect for function _F
  4032  0328                     _F:	
  4033                           
  4034                           ;prog.c: 431: if (T0IF) {
  4035  0328  1D0B               	btfss	11,2	;volatile
  4036  0329  2BC8               	goto	i1l278
  4037                           
  4038                           ;prog.c: 432: static unsigned char DigitNumber = 0;
  4039                           ;prog.c: 434: T0IF = 0;
  4040  032A  110B               	bcf	11,2	;volatile
  4041                           
  4042                           ;prog.c: 435: TMR0 += TMR0_VALUE;
  4043  032B  30EB               	movlw	235
  4044  032C  0781               	addwf	1,f	;volatile
  4045                           
  4046                           ;prog.c: 437: if (DigitNumber > 2) {
  4047  032D  3003               	movlw	3
  4048  032E  0255               	subwf	F@DigitNumber,w
  4049  032F  1803               	btfsc	3,0
  4050                           
  4051                           ;prog.c: 438: DigitNumber = 0;
  4052  0330  01D5               	clrf	F@DigitNumber
  4053                           
  4054                           ;prog.c: 439: }
  4055                           ;prog.c: 440: unsigned char dig = digits[DigitNumber];
  4056  0331  0855               	movf	F@DigitNumber,w
  4057  0332  3E4A               	addlw	(low (_digits| 0))& (0+255)
  4058  0333  0084               	movwf	4
  4059  0334  1383               	bcf	3,7	;select IRP bank0
  4060  0335  0800               	movf	0,w
  4061  0336  00AB               	movwf	F@dig
  4062                           
  4063                           ;prog.c: 441: digitemp = convDig(0b00111111 & dig);
  4064  0337  393F               	andlw	63
  4065  0338  268B               	fcall	_convDig
  4066  0339  00D9               	movwf	_digitemp
  4067                           
  4068                           ;prog.c: 447: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  4069  033A  1F2B               	btfss	F@dig,6
  4070  033B  2B3E               	goto	i1l234
  4071  033C  1559               	bsf	_digitemp,2
  4072  033D  2B3F               	goto	i1l3971
  4073  033E                     i1l234:	
  4074  033E  1159               	bcf	_digitemp,2
  4075  033F                     i1l3971:	
  4076                           
  4077                           ;prog.c: 449: PORTB = 0;
  4078  033F  0186               	clrf	6	;volatile
  4079                           
  4080                           ;prog.c: 450: PORTA = (PORTA & 0b00110100) | PortAData[DigitNumber++];
  4081  0340  0855               	movf	F@DigitNumber,w
  4082  0341  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  4083  0342  0084               	movwf	4
  4084  0343  2796               	fcall	stringdir
  4085  0344  00A6               	movwf	??_F
  4086  0345  0805               	movf	5,w	;volatile
  4087  0346  3934               	andlw	52
  4088  0347  0426               	iorwf	??_F,w
  4089  0348  0085               	movwf	5	;volatile
  4090  0349  0AD5               	incf	F@DigitNumber,f
  4091                           
  4092                           ;prog.c: 452: PORTB = digitemp;
  4093  034A  0859               	movf	_digitemp,w
  4094  034B  0086               	movwf	6	;volatile
  4095                           
  4096                           ;prog.c: 454: endInterrupt = 1;
  4097  034C  14E0               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  4098                           
  4099                           ;prog.c: 455: if (powerOnInterval == 0) {
  4100  034D  085D               	movf	_powerOnInterval,w
  4101  034E  045E               	iorwf	_powerOnInterval+1,w
  4102  034F  1D03               	btfss	3,2
  4103  0350  2B57               	goto	i1l3987
  4104                           
  4105                           ;prog.c: 456: if (PowerBlocked == 0) {
  4106  0351  0858               	movf	_PowerBlocked,w
  4107  0352  1D03               	btfss	3,2
  4108  0353  2B5B               	goto	i1l3989
  4109                           
  4110                           ;prog.c: 457: TRISA4 = 1;
  4111  0354  1683               	bsf	3,5	;RP0=1, select bank1
  4112  0355  1605               	bsf	5,4	;volatile
  4113  0356  2B5B               	goto	i1l3989
  4114  0357                     i1l3987:	
  4115                           
  4116                           ;prog.c: 460: powerOnInterval--;
  4117  0357  30FF               	movlw	-1
  4118  0358  07DD               	addwf	_powerOnInterval,f
  4119  0359  1C03               	skipc
  4120  035A  03DE               	decf	_powerOnInterval+1,f
  4121  035B                     i1l3989:	
  4122                           
  4123                           ;prog.c: 461: }
  4124                           ;prog.c: 463: static unsigned int KeyTimeCounter = 0;
  4125                           ;prog.c: 464: static unsigned char LastKeysState = 0;
  4126                           ;prog.c: 465: static unsigned char long_press = 0;
  4127                           ;prog.c: 466: static unsigned char ButtonPressTimeIn1 = 0;
  4128                           ;prog.c: 467: static unsigned char ButtonPressTimeIn2 = 0;
  4129                           ;prog.c: 468: static unsigned char ButtonPressTimeOut = 0;
  4130                           ;prog.c: 469: unsigned char CurrentKeysState = 0;
  4131  035B  1283               	bcf	3,5	;RP0=0, select bank0
  4132  035C  01AC               	clrf	F@CurrentKeysState
  4133                           
  4134                           ;prog.c: 471: if (ButtonPressTimeOut > 0) {
  4135  035D  0854               	movf	F@ButtonPressTimeOut,w
  4136  035E  1903               	btfsc	3,2
  4137  035F  2B62               	goto	i1l3995
  4138                           
  4139                           ;prog.c: 472: ButtonPressTimeOut--;
  4140  0360  03D4               	decf	F@ButtonPressTimeOut,f
  4141                           
  4142                           ;prog.c: 473: } else {
  4143  0361  2BC7               	goto	i1l4075
  4144  0362                     i1l3995:	
  4145                           
  4146                           ;prog.c: 475: KeyCode = 0;
  4147  0362  01DF               	clrf	_KeyCode	;volatile
  4148                           
  4149                           ;prog.c: 477: if (RA5) {
  4150  0363  1E85               	btfss	5,5	;volatile
  4151  0364  2B69               	goto	i1l4003
  4152  0365  3019               	movlw	25
  4153                           
  4154                           ;prog.c: 478: CurrentKeysState = CurrentKeysState | 0b00000001;
  4155  0366  142C               	bsf	F@CurrentKeysState,0
  4156                           
  4157                           ;prog.c: 479: ButtonPressTimeIn1 = 25;
  4158  0367  00D2               	movwf	F@ButtonPressTimeIn1
  4159                           
  4160                           ;prog.c: 480: } else {
  4161  0368  2B6F               	goto	i1l4009
  4162  0369                     i1l4003:	
  4163                           
  4164                           ;prog.c: 481: if (ButtonPressTimeIn1 == 0) {
  4165  0369  0852               	movf	F@ButtonPressTimeIn1,w
  4166  036A  1D03               	btfss	3,2
  4167  036B  2B6E               	goto	i1l4007
  4168                           
  4169                           ;prog.c: 482: CurrentKeysState = CurrentKeysState & 0b11111110;
  4170  036C  102C               	bcf	F@CurrentKeysState,0
  4171                           
  4172                           ;prog.c: 483: } else {
  4173  036D  2B6F               	goto	i1l4009
  4174  036E                     i1l4007:	
  4175                           
  4176                           ;prog.c: 484: ButtonPressTimeIn1--;
  4177  036E  03D2               	decf	F@ButtonPressTimeIn1,f
  4178  036F                     i1l4009:	
  4179                           
  4180                           ;prog.c: 485: }
  4181                           ;prog.c: 486: }
  4182                           ;prog.c: 488: if (RA2) {
  4183  036F  1D05               	btfss	5,2	;volatile
  4184  0370  2B75               	goto	i1l4015
  4185  0371  3019               	movlw	25
  4186                           
  4187                           ;prog.c: 489: CurrentKeysState = CurrentKeysState | 0b00000010;
  4188  0372  14AC               	bsf	F@CurrentKeysState,1
  4189                           
  4190                           ;prog.c: 490: ButtonPressTimeIn2 = 25;
  4191  0373  00D3               	movwf	F@ButtonPressTimeIn2
  4192                           
  4193                           ;prog.c: 491: } else {
  4194  0374  2B7B               	goto	i1l4021
  4195  0375                     i1l4015:	
  4196                           
  4197                           ;prog.c: 492: if (ButtonPressTimeIn2 == 0) {
  4198  0375  0853               	movf	F@ButtonPressTimeIn2,w
  4199  0376  1D03               	btfss	3,2
  4200  0377  2B7A               	goto	i1l4019
  4201                           
  4202                           ;prog.c: 493: CurrentKeysState = CurrentKeysState & 0b11111101;
  4203  0378  10AC               	bcf	F@CurrentKeysState,1
  4204                           
  4205                           ;prog.c: 494: } else {
  4206  0379  2B7B               	goto	i1l4021
  4207  037A                     i1l4019:	
  4208                           
  4209                           ;prog.c: 495: ButtonPressTimeIn2--;
  4210  037A  03D3               	decf	F@ButtonPressTimeIn2,f
  4211  037B                     i1l4021:	
  4212                           
  4213                           ;prog.c: 496: }
  4214                           ;prog.c: 497: }
  4215                           ;prog.c: 499: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4216  037B  0852               	movf	F@ButtonPressTimeIn1,w
  4217  037C  1903               	btfsc	3,2
  4218  037D  2B82               	goto	i1l4025
  4219  037E  3019               	movlw	25
  4220  037F  0652               	xorwf	F@ButtonPressTimeIn1,w
  4221  0380  1D03               	btfss	3,2
  4222  0381  2BC7               	goto	i1l4075
  4223  0382                     i1l4025:	
  4224  0382  0853               	movf	F@ButtonPressTimeIn2,w
  4225  0383  1903               	btfsc	3,2
  4226  0384  2B89               	goto	i1l4029
  4227  0385  3019               	movlw	25
  4228  0386  0653               	xorwf	F@ButtonPressTimeIn2,w
  4229  0387  1D03               	btfss	3,2
  4230  0388  2BC7               	goto	i1l4075
  4231  0389                     i1l4029:	
  4232                           
  4233                           ;prog.c: 500: if (CurrentKeysState > 0) {
  4234  0389  082C               	movf	F@CurrentKeysState,w
  4235  038A  1903               	btfsc	3,2
  4236  038B  2BB3               	goto	i1l4055
  4237                           
  4238                           ;prog.c: 501: if (LastKeysState != CurrentKeysState) {
  4239  038C  0856               	movf	F@LastKeysState,w
  4240  038D  062C               	xorwf	F@CurrentKeysState,w
  4241  038E  1903               	skipnz
  4242  038F  2B96               	goto	i1l4037
  4243                           
  4244                           ;prog.c: 502: KeyTimeCounter = 0;
  4245  0390  01D0               	clrf	F@KeyTimeCounter
  4246  0391  01D1               	clrf	F@KeyTimeCounter+1
  4247                           
  4248                           ;prog.c: 503: long_press = 0;
  4249  0392  01D7               	clrf	F@long_press
  4250                           
  4251                           ;prog.c: 504: LastKeysState = CurrentKeysState;
  4252  0393  082C               	movf	F@CurrentKeysState,w
  4253  0394  00D6               	movwf	F@LastKeysState
  4254                           
  4255                           ;prog.c: 505: } else if (KeyTimeCounter < 150) {
  4256  0395  2BAB               	goto	i1l4047
  4257  0396                     i1l4037:	
  4258  0396  3000               	movlw	0
  4259  0397  0251               	subwf	F@KeyTimeCounter+1,w
  4260  0398  3096               	movlw	150
  4261  0399  1903               	skipnz
  4262  039A  0250               	subwf	F@KeyTimeCounter,w
  4263  039B  1803               	skipnc
  4264  039C  2BA1               	goto	i1l4041
  4265                           
  4266                           ;prog.c: 506: KeyTimeCounter++;
  4267  039D  0AD0               	incf	F@KeyTimeCounter,f
  4268  039E  1903               	skipnz
  4269  039F  0AD1               	incf	F@KeyTimeCounter+1,f
  4270                           
  4271                           ;prog.c: 507: } else if (KeyTimeCounter == 150 && !long_press) {
  4272  03A0  2BAB               	goto	i1l4047
  4273  03A1                     i1l4041:	
  4274  03A1  3096               	movlw	150
  4275  03A2  0650               	xorwf	F@KeyTimeCounter,w
  4276  03A3  0451               	iorwf	F@KeyTimeCounter+1,w
  4277  03A4  1D03               	btfss	3,2
  4278  03A5  2BAB               	goto	i1l4047
  4279  03A6  0857               	movf	F@long_press,w
  4280  03A7  1D03               	btfss	3,2
  4281  03A8  2BAB               	goto	i1l4047
  4282                           
  4283                           ;prog.c: 508: long_press = 1;
  4284  03A9  01D7               	clrf	F@long_press
  4285  03AA  0AD7               	incf	F@long_press,f
  4286  03AB                     i1l4047:	
  4287                           
  4288                           ;prog.c: 509: }
  4289                           ;prog.c: 511: if (long_press == 1) {
  4290  03AB  0B57               	decfsz	F@long_press,w
  4291  03AC  2BC7               	goto	i1l4075
  4292                           
  4293                           ;prog.c: 512: KeyCode = 30 + LastKeysState + 3;
  4294  03AD  0856               	movf	F@LastKeysState,w
  4295  03AE  3E21               	addlw	33
  4296  03AF  00DF               	movwf	_KeyCode	;volatile
  4297                           
  4298                           ;prog.c: 513: long_press = 2;
  4299  03B0  3002               	movlw	2
  4300  03B1  00D7               	movwf	F@long_press
  4301  03B2  2BC5               	goto	i1l4053
  4302  03B3                     i1l4055:	
  4303  03B3  0856               	movf	F@LastKeysState,w
  4304  03B4  1903               	btfsc	3,2
  4305  03B5  2BBD               	goto	i1l4069
  4306  03B6  0857               	movf	F@long_press,w
  4307  03B7  1D03               	btfss	3,2
  4308  03B8  2BBD               	goto	i1l4069
  4309                           
  4310                           ;prog.c: 518: KeyCode = 30 + LastKeysState;
  4311  03B9  0856               	movf	F@LastKeysState,w
  4312  03BA  3E1E               	addlw	30
  4313  03BB  00DF               	movwf	_KeyCode	;volatile
  4314  03BC  2BC1               	goto	i1l4071
  4315  03BD                     i1l4069:	
  4316                           ;prog.c: 521: long_press = 0;
  4317                           
  4318                           ;prog.c: 520: KeyTimeCounter = 0;
  4319                           
  4320                           ;prog.c: 519: LastKeysState = 0;
  4321                           
  4322  03BD  3002               	movlw	2
  4323  03BE  0657               	xorwf	F@long_press,w
  4324  03BF  1D03               	btfss	3,2
  4325  03C0  2BC7               	goto	i1l4075
  4326  03C1                     i1l4071:	
  4327                           
  4328                           ;prog.c: 525: LastKeysState = 0;
  4329  03C1  01D6               	clrf	F@LastKeysState
  4330                           
  4331                           ;prog.c: 526: KeyTimeCounter = 0;
  4332  03C2  01D0               	clrf	F@KeyTimeCounter
  4333  03C3  01D1               	clrf	F@KeyTimeCounter+1
  4334                           
  4335                           ;prog.c: 527: long_press = 0;
  4336  03C4  01D7               	clrf	F@long_press
  4337  03C5                     i1l4053:	
  4338                           
  4339                           ;prog.c: 514: ButtonPressTimeOut = 40;
  4340  03C5  3028               	movlw	40
  4341  03C6  00D4               	movwf	F@ButtonPressTimeOut
  4342  03C7                     i1l4075:	
  4343                           
  4344                           ;prog.c: 529: }
  4345                           ;prog.c: 530: }
  4346                           ;prog.c: 531: }
  4347                           ;prog.c: 533: get_temp_Async();
  4348  03C7  215D               	fcall	_get_temp_Async
  4349  03C8                     i1l278:	
  4350  03C8  082A               	movf	??_F+4,w
  4351  03C9  00FF               	movwf	127
  4352  03CA  0829               	movf	??_F+3,w
  4353  03CB  008A               	movwf	10
  4354  03CC  0828               	movf	??_F+2,w
  4355  03CD  0084               	movwf	4
  4356  03CE  0E27               	swapf	(??_F+1)^0,w
  4357  03CF  0083               	movwf	3
  4358  03D0  0EFE               	swapf	126,f
  4359  03D1  0E7E               	swapf	126,w
  4360  03D2  0009               	retfie
  4361  03D3                     __end_of_F:	
  4362                           
  4363                           	psect	intentry
  4364  0004                     __pintentry:	
  4365                           ;incstack = 0
  4366                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4367                           
  4368  0004                     interrupt_function:	
  4369  007E                     saved_w	set	btemp
  4370  0004  00FE               	movwf	btemp
  4371  0005  0E03               	swapf	3,w
  4372  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4373  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4374  0008  00A7               	movwf	??_F+1
  4375  0009  0804               	movf	4,w
  4376  000A  00A8               	movwf	??_F+2
  4377  000B  080A               	movf	10,w
  4378  000C  00A9               	movwf	??_F+3
  4379  000D  087F               	movf	btemp+1,w
  4380  000E  00AA               	movwf	??_F+4
  4381  000F  2B28               	ljmp	_F
  4382                           
  4383                           	psect	text26
  4384  015D                     __ptext26:	
  4385 ;; *************** function _get_temp_Async *****************
  4386 ;; Defined at:
  4387 ;;		line 296 in file "prog.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  temp2           1    4[BANK0 ] unsigned char 
  4392 ;;  temp1           1    3[BANK0 ] unsigned char 
  4393 ;;  i               1    2[BANK0 ] unsigned char 
  4394 ;;  line            1    5[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 300/0
  4401 ;;		On exit  : 300/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4404 ;;      Params:         0       0       0       0
  4405 ;;      Locals:         0       4       0       0
  4406 ;;      Temps:          0       2       0       0
  4407 ;;      Totals:         0       6       0       0
  4408 ;;Total ram usage:        6 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    1
  4411 ;; This function calls:
  4412 ;;		___awdiv
  4413 ;;		___wmul
  4414 ;;		i1_INIT
  4415 ;;		i1_RX
  4416 ;;		i1_TX
  4417 ;;		i1_calc_crc
  4418 ;; This function is called by:
  4419 ;;		_F
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _get_temp_Async
  4425  015D                     _get_temp_Async:	
  4426                           
  4427                           ;prog.c: 298: if (!getTemp_flags.ActiveProcess) {
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4431  015D  1C48               	btfss	_getTemp_flags+4,0
  4432  015E  0008               	return
  4433                           
  4434                           ;prog.c: 300: }
  4435                           ;prog.c: 302: unsigned char line = getTemp_flags.Line;
  4436                           
  4437                           ;prog.c: 299: return;
  4438  015F  0849               	movf	_getTemp_flags+5,w
  4439  0160  00A5               	movwf	get_temp_Async@line
  4440                           
  4441                           ;prog.c: 305: if (getTemp_flags.Init) {
  4442  0161  1C44               	btfss	_getTemp_flags,0
  4443  0162  2972               	goto	i1l171
  4444                           
  4445                           ;prog.c: 306: if (INIT(line)) {
  4446  0163  0825               	movf	get_temp_Async@line,w
  4447  0164  253B               	fcall	i1_INIT
  4448  0165  3A00               	xorlw	0
  4449                           
  4450                           ;prog.c: 307: getTemp_flags.Init = 0;
  4451  0166  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0167  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0168  1903               	skipnz
  4454  0169  296F               	goto	L11
  4455  016A  30C3               	movlw	-61
  4456  016B  1044               	bcf	_getTemp_flags,0
  4457                           
  4458                           ;prog.c: 309: getTemp_flags.Send_Address = 1;
  4459  016C  14C4               	bsf	_getTemp_flags,1
  4460                           
  4461                           ;prog.c: 310: getTemp_flags.CountAddressBytes = 0;
  4462  016D  05C4               	andwf	_getTemp_flags,f
  4463                           
  4464                           ;prog.c: 311: } else {
  4465  016E  0008               	return
  4466  016F                     L11:	
  4467                           ;prog.c: 312: getTemp_flags.ActiveProcess = 0;
  4468                           
  4469  016F  1048               	bcf	_getTemp_flags+4,0
  4470                           
  4471                           ;prog.c: 313: getTemp_flags.Error = 1;
  4472  0170  17C7               	bsf	_getTemp_flags+3,7
  4473  0171  0008               	return
  4474  0172                     i1l171:	
  4475                           
  4476                           ;prog.c: 317: if (getTemp_flags.Send_Address) {
  4477  0172  1CC4               	btfss	_getTemp_flags,1
  4478  0173  29B3               	goto	i1l175
  4479                           
  4480                           ;prog.c: 318: if (Broadcasting) {
  4481  0174  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4482  0175  2982               	goto	i1l3581
  4483                           
  4484                           ;prog.c: 319: TX(0xCC, line);
  4485  0176  0825               	movf	get_temp_Async@line,w
  4486  0177  00F0               	movwf	i1TX@line
  4487  0178  30CC               	movlw	204
  4488  0179  256C               	fcall	i1_TX
  4489                           
  4490                           ;prog.c: 320: getTemp_flags.CountAddressBytes = 1;
  4491  017A  1283               	bcf	3,5	;RP0=0, select bank0
  4492  017B  1303               	bcf	3,6	;RP1=0, select bank0
  4493  017C  0844               	movf	_getTemp_flags,w
  4494  017D  39C3               	andlw	-61
  4495  017E  3804               	iorlw	4
  4496  017F  00C4               	movwf	_getTemp_flags
  4497  0180                     i1l3579:	
  4498                           
  4499                           ;prog.c: 321: getTemp_flags.Send_Address = 0;
  4500  0180  10C4               	bcf	_getTemp_flags,1
  4501                           
  4502                           ;prog.c: 322: } else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
  4503  0181  0008               	return
  4504  0182                     i1l3581:	
  4505  0182  0C44               	rrf	_getTemp_flags,w
  4506  0183  00A0               	movwf	??_get_temp_Async
  4507  0184  0C20               	rrf	??_get_temp_Async,w
  4508  0185  390F               	andlw	15
  4509  0186  00A1               	movwf	??_get_temp_Async+1
  4510  0187  3008               	movlw	8
  4511  0188  0221               	subwf	??_get_temp_Async+1,w
  4512  0189  1803               	skipnc
  4513  018A  0008               	return
  4514                           
  4515                           ;prog.c: 323: if (getTemp_flags.CountAddressBytes == 0) {
  4516  018B  0C44               	rrf	_getTemp_flags,w
  4517  018C  00A0               	movwf	??_get_temp_Async
  4518  018D  0C20               	rrf	??_get_temp_Async,w
  4519  018E  390F               	andlw	15
  4520  018F  1D03               	skipz
  4521  0190  2995               	goto	i1l3587
  4522                           
  4523                           ;prog.c: 324: TX(0x55, line);
  4524  0191  0825               	movf	get_temp_Async@line,w
  4525  0192  00F0               	movwf	i1TX@line
  4526  0193  3055               	movlw	85
  4527  0194  256C               	fcall	i1_TX
  4528  0195                     i1l3587:	
  4529                           
  4530                           ;prog.c: 325: }
  4531                           ;prog.c: 326: TX(DS_Address[getTemp_flags.CountAddressBytes], line);
  4532  0195  1283               	bcf	3,5	;RP0=0, select bank0
  4533  0196  1303               	bcf	3,6	;RP1=0, select bank0
  4534  0197  0825               	movf	get_temp_Async@line,w
  4535  0198  00F0               	movwf	i1TX@line
  4536  0199  0C44               	rrf	_getTemp_flags,w
  4537  019A  00A0               	movwf	??_get_temp_Async
  4538  019B  0C20               	rrf	??_get_temp_Async,w
  4539  019C  390F               	andlw	15
  4540  019D  3EC0               	addlw	(low (_DS_Address| 0))& (0+255)
  4541  019E  0084               	movwf	4
  4542  019F  1383               	bcf	3,7	;select IRP bank1
  4543  01A0  0800               	movf	0,w
  4544  01A1  256C               	fcall	i1_TX
  4545                           
  4546                           ;prog.c: 327: getTemp_flags.CountAddressBytes++;
  4547  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4548  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4549  01A4  0C44               	rrf	_getTemp_flags,w
  4550  01A5  224F               	fcall	PL8	;call to abstracted procedure
  4551  01A6  0844               	movf	_getTemp_flags,w
  4552  01A7  0620               	xorwf	??_get_temp_Async,w
  4553  01A8  39C3               	andlw	-61
  4554  01A9  0620               	xorwf	??_get_temp_Async,w
  4555  01AA  00C4               	movwf	_getTemp_flags
  4556                           
  4557                           ;prog.c: 329: if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
  4558  01AB  0C44               	rrf	_getTemp_flags,w
  4559  01AC  00A0               	movwf	??_get_temp_Async
  4560  01AD  0C20               	rrf	??_get_temp_Async,w
  4561  01AE  390F               	andlw	15
  4562  01AF  3A08               	xorlw	8
  4563  01B0  1D03               	skipz
  4564  01B1  0008               	return
  4565  01B2  2980               	goto	i1l3579
  4566  01B3                     i1l175:	
  4567                           
  4568                           ;prog.c: 335: if (getTemp_flags.SendConvertTemp) {
  4569  01B3  1F44               	btfss	_getTemp_flags,6
  4570  01B4  29BD               	goto	i1l3599
  4571                           
  4572                           ;prog.c: 336: TX(0x44, line);
  4573  01B5  0825               	movf	get_temp_Async@line,w
  4574  01B6  00F0               	movwf	i1TX@line
  4575  01B7  3044               	movlw	68
  4576  01B8  256C               	fcall	i1_TX
  4577                           
  4578                           ;prog.c: 337: getTemp_flags.SendConvertTemp = 0;
  4579  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  4580  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  4581  01BB  1344               	bcf	_getTemp_flags,6
  4582                           
  4583                           ;prog.c: 339: } else
  4584  01BC  0008               	return
  4585  01BD                     i1l3599:	
  4586                           
  4587                           ;prog.c: 341: if (getTemp_flags.PauseValue > 0) {
  4588  01BD  0845               	movf	_getTemp_flags+1,w
  4589  01BE  0446               	iorwf	_getTemp_flags+2,w
  4590  01BF  1903               	btfsc	3,2
  4591  01C0  29CC               	goto	i1l184
  4592                           
  4593                           ;prog.c: 342: getTemp_flags.PauseValue--;
  4594  01C1  3001               	movlw	1
  4595  01C2  02C5               	subwf	_getTemp_flags+1,f
  4596  01C3  3000               	movlw	0
  4597  01C4  1C03               	skipc
  4598  01C5  03C6               	decf	_getTemp_flags+2,f
  4599  01C6  02C6               	subwf	_getTemp_flags+2,f
  4600                           
  4601                           ;prog.c: 343: if (getTemp_flags.PauseValue == 0) {
  4602  01C7  0845               	movf	_getTemp_flags+1,w
  4603  01C8  0446               	iorwf	_getTemp_flags+2,w
  4604  01C9  1903               	btfsc	3,2
  4605                           
  4606                           ;prog.c: 344: getTemp_flags.Init = 1;
  4607  01CA  1444               	bsf	_getTemp_flags,0
  4608  01CB  0008               	return
  4609  01CC                     i1l184:	
  4610                           
  4611                           ;prog.c: 348: if (getTemp_flags.SendGetTemp) {
  4612  01CC  1C47               	btfss	_getTemp_flags+3,0
  4613  01CD  29D6               	goto	i1l187
  4614                           
  4615                           ;prog.c: 349: TX(0xBE, line);
  4616  01CE  0825               	movf	get_temp_Async@line,w
  4617  01CF  00F0               	movwf	i1TX@line
  4618  01D0  30BE               	movlw	190
  4619  01D1  256C               	fcall	i1_TX
  4620                           
  4621                           ;prog.c: 350: getTemp_flags.SendGetTemp = 0;
  4622  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  4623  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  4624  01D4  1047               	bcf	_getTemp_flags+3,0
  4625                           
  4626                           ;prog.c: 351: } else
  4627  01D5  0008               	return
  4628  01D6                     i1l187:	
  4629                           
  4630                           ;prog.c: 353: if (getTemp_flags.ReadData) {
  4631  01D6  1CC7               	btfss	_getTemp_flags+3,1
  4632  01D7  2A4D               	goto	i1l189
  4633                           
  4634                           ;prog.c: 354: if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
  4635  01D8  2257               	fcall	PL10	;call to abstracted procedure
  4636  01D9  1803               	skipnc
  4637  01DA  0008               	return
  4638                           
  4639                           ;prog.c: 355: for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (
      +                          DS_ReadData); i++) {
  4640  01DB  01A2               	clrf	get_temp_Async@i
  4641  01DC  29F4               	goto	i1l3621
  4642  01DD                     i1l3623:	
  4643  01DD  2257               	fcall	PL10	;call to abstracted procedure
  4644  01DE  1803               	btfsc	3,0
  4645  01DF  29F8               	goto	i1l3625
  4646                           
  4647                           ;prog.c: 356: DS_ReadData[getTemp_flags.CountDataBytes] = RX(line);
  4648  01E0  0C47               	rrf	_getTemp_flags+3,w
  4649  01E1  00A0               	movwf	??_get_temp_Async
  4650  01E2  0C20               	rrf	??_get_temp_Async,w
  4651  01E3  390F               	andlw	15
  4652  01E4  3EB7               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4653  01E5  0084               	movwf	4
  4654  01E6  0825               	movf	get_temp_Async@line,w
  4655  01E7  25C8               	fcall	i1_RX
  4656  01E8  1383               	bcf	3,7	;select IRP bank1
  4657  01E9  0080               	movwf	0
  4658                           
  4659                           ;prog.c: 357: getTemp_flags.CountDataBytes++;
  4660  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  4661  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  4662  01EC  0C47               	rrf	_getTemp_flags+3,w
  4663  01ED  224F               	fcall	PL8	;call to abstracted procedure
  4664  01EE  0847               	movf	_getTemp_flags+3,w
  4665  01EF  0620               	xorwf	??_get_temp_Async,w
  4666  01F0  39C3               	andlw	-61
  4667  01F1  0620               	xorwf	??_get_temp_Async,w
  4668  01F2  00C7               	movwf	_getTemp_flags+3
  4669  01F3  0AA2               	incf	get_temp_Async@i,f
  4670  01F4                     i1l3621:	
  4671  01F4  3003               	movlw	3
  4672  01F5  0222               	subwf	get_temp_Async@i,w
  4673  01F6  1C03               	btfss	3,0
  4674  01F7  29DD               	goto	i1l3623
  4675  01F8                     i1l3625:	
  4676                           
  4677                           ;prog.c: 358: }
  4678                           ;prog.c: 359: if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
  4679  01F8  0C47               	rrf	_getTemp_flags+3,w
  4680  01F9  00A0               	movwf	??_get_temp_Async
  4681  01FA  0C20               	rrf	??_get_temp_Async,w
  4682  01FB  390F               	andlw	15
  4683  01FC  3A09               	xorlw	9
  4684  01FD  1D03               	skipz
  4685  01FE  0008               	return
  4686                           
  4687                           ;prog.c: 360: if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof 
      +                          (DS_ReadData) - 1)) {
  4688  01FF  3008               	movlw	8
  4689  0200  00F0               	movwf	i1calc_crc@len
  4690  0201  30B7               	movlw	(low (_DS_ReadData| 0))& (0+255)
  4691  0202  25EF               	fcall	i1_calc_crc
  4692  0203  1683               	bsf	3,5	;RP0=1, select bank1
  4693  0204  063F               	xorwf	(_DS_ReadData^(0+128)+8),w
  4694  0205  1903               	skipnz
  4695  0206  2A0A               	goto	i1l3631
  4696                           
  4697                           ;prog.c: 361: getTemp_flags.Error = 1;
  4698  0207  1283               	bcf	3,5	;RP0=0, select bank0
  4699  0208  17C7               	bsf	_getTemp_flags+3,7
  4700                           
  4701                           ;prog.c: 362: } else {
  4702  0209  2A49               	goto	i1l3659
  4703  020A                     i1l3631:	
  4704                           
  4705                           ;prog.c: 364: unsigned char temp1 = DS_ReadData[0];
  4706  020A  0837               	movf	_DS_ReadData^(0+128),w
  4707  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4708  020C  00A3               	movwf	get_temp_Async@temp1
  4709                           
  4710                           ;prog.c: 365: unsigned char temp2 = DS_ReadData[1];
  4711  020D  1683               	bsf	3,5	;RP0=1, select bank1
  4712  020E  0838               	movf	(_DS_ReadData^(0+128)+1),w
  4713  020F  1283               	bcf	3,5	;RP0=0, select bank0
  4714  0210  00A4               	movwf	get_temp_Async@temp2
  4715                           
  4716                           ;prog.c: 367: temp_drob = temp1 & 0b00001111;
  4717  0211  0823               	movf	get_temp_Async@temp1,w
  4718  0212  00DB               	movwf	_temp_drob
  4719  0213  300F               	movlw	15
  4720  0214  05DB               	andwf	_temp_drob,f
  4721                           
  4722                           ;prog.c: 368: temp_drob = ((temp_drob * 6) + 2) / 10;
  4723  0215  300A               	movlw	10
  4724  0216  00F6               	movwf	___awdiv@divisor
  4725  0217  01F7               	clrf	___awdiv@divisor+1
  4726  0218  085B               	movf	_temp_drob,w
  4727  0219  00F0               	movwf	___wmul@multiplier
  4728  021A  3006               	movlw	6
  4729  021B  01F1               	clrf	___wmul@multiplier+1
  4730  021C  00F2               	movwf	___wmul@multiplicand
  4731  021D  01F3               	clrf	___wmul@multiplicand+1
  4732  021E  26DD               	fcall	___wmul
  4733  021F  0870               	movf	?___wmul,w
  4734  0220  3E02               	addlw	2
  4735  0221  00F8               	movwf	___awdiv@dividend
  4736  0222  0871               	movf	?___wmul+1,w
  4737  0223  1803               	skipnc
  4738  0224  3E01               	addlw	1
  4739  0225  3E00               	addlw	0
  4740  0226  00F9               	movwf	___awdiv@dividend+1
  4741  0227  2483               	fcall	___awdiv
  4742  0228  0876               	movf	?___awdiv,w
  4743  0229  00DB               	movwf	_temp_drob
  4744  022A  300F               	movlw	15
  4745                           
  4746                           ;prog.c: 369: temp1 >>= 4;
  4747  022B  0EA3               	swapf	get_temp_Async@temp1,f
  4748  022C  05A3               	andwf	get_temp_Async@temp1,f
  4749                           
  4750                           ;prog.c: 370: sign = temp2 & 0x80;
  4751  022D  0824               	movf	get_temp_Async@temp2,w
  4752  022E  00DA               	movwf	_sign
  4753  022F  3080               	movlw	128
  4754  0230  05DA               	andwf	_sign,f
  4755  0231  30F0               	movlw	240
  4756                           
  4757                           ;prog.c: 371: temp2 <<= 4;
  4758  0232  0EA4               	swapf	get_temp_Async@temp2,f
  4759  0233  05A4               	andwf	get_temp_Async@temp2,f
  4760                           
  4761                           ;prog.c: 372: temp2 &= 0b01110000;
  4762  0234  3070               	movlw	112
  4763  0235  05A4               	andwf	get_temp_Async@temp2,f
  4764                           
  4765                           ;prog.c: 373: temp2 |= temp1;
  4766  0236  0823               	movf	get_temp_Async@temp1,w
  4767  0237  04A4               	iorwf	get_temp_Async@temp2,f
  4768                           
  4769                           ;prog.c: 375: if (sign) {
  4770  0238  085A               	movf	_sign,w
  4771  0239  1903               	btfsc	3,2
  4772  023A  2A47               	goto	i1l3657
  4773                           
  4774                           ;prog.c: 376: temperature = 127 - temp2;
  4775  023B  0824               	movf	get_temp_Async@temp2,w
  4776  023C  3C7F               	sublw	127
  4777  023D  00DC               	movwf	_temperature
  4778                           
  4779                           ;prog.c: 377: temp_drob = 10 - temp_drob;
  4780  023E  085B               	movf	_temp_drob,w
  4781  023F  3C0A               	sublw	10
  4782  0240  00DB               	movwf	_temp_drob
  4783                           
  4784                           ;prog.c: 378: if (temp_drob == 10) {
  4785  0241  3A0A               	xorlw	10
  4786  0242  1D03               	btfss	3,2
  4787  0243  2A49               	goto	i1l3659
  4788                           
  4789                           ;prog.c: 379: temp_drob = 0;
  4790  0244  01DB               	clrf	_temp_drob
  4791                           
  4792                           ;prog.c: 380: temperature++;
  4793  0245  0ADC               	incf	_temperature,f
  4794  0246  2A49               	goto	i1l3659
  4795  0247                     i1l3657:	
  4796                           
  4797                           ;prog.c: 383: temperature = temp2;
  4798  0247  0824               	movf	get_temp_Async@temp2,w
  4799  0248  00DC               	movwf	_temperature
  4800  0249                     i1l3659:	
  4801                           
  4802                           ;prog.c: 384: }
  4803                           ;prog.c: 385: }
  4804                           ;prog.c: 386: getTemp_flags.ReadData = 0;
  4805  0249  10C7               	bcf	_getTemp_flags+3,1
  4806                           
  4807                           ;prog.c: 387: getTemp_flags.ActiveProcess = 0;
  4808  024A  1048               	bcf	_getTemp_flags+4,0
  4809                           
  4810                           ;prog.c: 388: getTemp_flags.DataIsRead = 1;
  4811  024B  1747               	bsf	_getTemp_flags+3,6
  4812  024C  0008               	return
  4813  024D                     i1l189:	
  4814                           
  4815                           ;prog.c: 392: getTemp_flags.ActiveProcess = 0;
  4816  024D  1048               	bcf	_getTemp_flags+4,0
  4817  024E  0008               	return
  4818  024F                     __end_of_get_temp_Async:	
  4819  024F                     PL8:	
  4820  024F  00A0               	movwf	??_get_temp_Async
  4821  0250  0C20               	rrf	??_get_temp_Async,w
  4822  0251  390F               	andlw	15
  4823  0252  00A0               	movwf	??_get_temp_Async
  4824  0253  0AA0               	incf	??_get_temp_Async,f
  4825  0254  0DA0               	rlf	??_get_temp_Async,f
  4826  0255  0DA0               	rlf	??_get_temp_Async,f
  4827  0256  0008               	return
  4828  0257                     __end_ofPL8:	
  4829  0257                     PL10:	
  4830  0257  0C47               	rrf	_getTemp_flags+3,w
  4831  0258  00A0               	movwf	??_get_temp_Async
  4832  0259  0C20               	rrf	??_get_temp_Async,w
  4833  025A  390F               	andlw	15
  4834  025B  00A1               	movwf	??_get_temp_Async+1
  4835  025C  3009               	movlw	9
  4836  025D  0221               	subwf	??_get_temp_Async+1,w
  4837  025E  0008               	return
  4838  025F                     __end_ofPL10:	
  4839                           
  4840                           	psect	text27
  4841  05EF                     __ptext27:	
  4842 ;; *************** function i1_calc_crc *****************
  4843 ;; Defined at:
  4844 ;;		line 281 in file "prog.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  mas             1    wreg     PTR unsigned char 
  4847 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4848 ;;  len             1    0[COMMON] unsigned char 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  mas             1    1[COMMON] PTR unsigned char 
  4851 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4852 ;;  calc_crc        1    5[COMMON] unsigned char 
  4853 ;;  calc_crc        1    4[COMMON] unsigned char 
  4854 ;;  calc_crc        1    3[COMMON] unsigned char 
  4855 ;;  calc_crc        1    2[COMMON] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      unsigned char 
  4858 ;; Registers used:
  4859 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4860 ;; Tracked objects:
  4861 ;;		On entry : 300/0
  4862 ;;		On exit  : 300/0
  4863 ;;		Unchanged: 300/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4865 ;;      Params:         1       0       0       0
  4866 ;;      Locals:         5       0       0       0
  4867 ;;      Temps:          0       0       0       0
  4868 ;;      Totals:         6       0       0       0
  4869 ;;Total ram usage:        6 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_get_temp_Async
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function i1_calc_crc
  4880  05EF                     i1_calc_crc:	
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in i1_calc_crc: [wreg-fsr0h+status,2+status,0]
  4884                           ;i1calc_crc@mas stored from wreg
  4885  05EF  00F1               	movwf	i1calc_crc@mas
  4886                           
  4887                           ;prog.c: 282: unsigned char crc = 0;
  4888  05F0  01F5               	clrf	i1calc_crc@crc
  4889                           
  4890                           ;prog.c: 283: while (len--) {
  4891  05F1  2E0C               	goto	i1l3551
  4892  05F2                     i1l3531:	
  4893                           
  4894                           ;prog.c: 284: unsigned char dat = *mas++;
  4895  05F2  0871               	movf	i1calc_crc@mas,w
  4896  05F3  0084               	movwf	4
  4897  05F4  1383               	bcf	3,7	;select IRP bank0
  4898  05F5  0800               	movf	0,w
  4899  05F6  00F2               	movwf	i1calc_crc@dat
  4900  05F7  0AF1               	incf	i1calc_crc@mas,f
  4901                           
  4902                           ;prog.c: 285: for (unsigned char i = 0; i < 8; i++) {
  4903  05F8  01F4               	clrf	i1calc_crc@i
  4904  05F9                     i1l3541:	
  4905                           
  4906                           ;prog.c: 286: unsigned char fb = (crc ^ dat) & 1;
  4907  05F9  0875               	movf	i1calc_crc@crc,w
  4908  05FA  0672               	xorwf	i1calc_crc@dat,w
  4909  05FB  00F3               	movwf	i1calc_crc@fb
  4910  05FC  3001               	movlw	1
  4911  05FD  05F3               	andwf	i1calc_crc@fb,f
  4912                           
  4913                           ;prog.c: 287: crc >>= 1;
  4914  05FE  1003               	clrc
  4915  05FF  0CF5               	rrf	i1calc_crc@crc,f
  4916                           
  4917                           ;prog.c: 288: dat >>= 1;
  4918  0600  1003               	clrc
  4919  0601  0CF2               	rrf	i1calc_crc@dat,f
  4920                           
  4921                           ;prog.c: 289: if (fb) crc ^= 0x8c;
  4922  0602  0873               	movf	i1calc_crc@fb,w
  4923  0603  1903               	btfsc	3,2
  4924  0604  2E07               	goto	i1l3549
  4925  0605  308C               	movlw	140
  4926  0606  06F5               	xorwf	i1calc_crc@crc,f
  4927  0607                     i1l3549:	
  4928  0607  3008               	movlw	8
  4929  0608  0AF4               	incf	i1calc_crc@i,f
  4930  0609  0274               	subwf	i1calc_crc@i,w
  4931  060A  1C03               	skipc
  4932  060B  2DF9               	goto	i1l3541
  4933  060C                     i1l3551:	
  4934  060C  03F0               	decf	i1calc_crc@len,f
  4935  060D  0F70               	incfsz	i1calc_crc@len,w
  4936  060E  2DF2               	goto	i1l3531
  4937                           
  4938                           ;prog.c: 290: }
  4939                           ;prog.c: 291: }
  4940                           ;prog.c: 292: return crc;
  4941  060F  0875               	movf	i1calc_crc@crc,w
  4942  0610  0008               	return
  4943  0611                     __end_ofi1_calc_crc:	
  4944                           
  4945                           	psect	text28
  4946  056C                     __ptext28:	
  4947 ;; *************** function i1_TX *****************
  4948 ;; Defined at:
  4949 ;;		line 239 in file "prog.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  cmd             1    wreg     unsigned char 
  4952 ;;  line            1    0[COMMON] unsigned char 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  cmd             1    2[COMMON] unsigned char 
  4955 ;;  TX              1    6[COMMON] unsigned char 
  4956 ;;  TX              1    5[COMMON] unsigned char 
  4957 ;;  TX              1    4[COMMON] unsigned char 
  4958 ;;  TX              1    3[COMMON] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0
  4963 ;; Tracked objects:
  4964 ;;		On entry : 300/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4968 ;;      Params:         1       0       0       0
  4969 ;;      Locals:         5       0       0       0
  4970 ;;      Temps:          1       0       0       0
  4971 ;;      Totals:         7       0       0       0
  4972 ;;Total ram usage:        7 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; This function calls:
  4975 ;;		Nothing
  4976 ;; This function is called by:
  4977 ;;		_get_temp_Async
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           
  4982                           ;psect for function i1_TX
  4983  056C                     i1_TX:	
  4984                           
  4985                           ;incstack = 0
  4986                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  4987                           ;i1TX@cmd stored from wreg
  4988  056C  00F2               	movwf	i1TX@cmd
  4989                           
  4990                           ;prog.c: 240: unsigned char One = line;
  4991  056D  0870               	movf	i1TX@line,w
  4992  056E  00F6               	movwf	i1TX@One
  4993                           
  4994                           ;prog.c: 241: unsigned char Zero = One ^ 0b11111111;
  4995  056F  0976               	comf	i1TX@One,w
  4996  0570  00F4               	movwf	i1TX@Zero
  4997                           
  4998                           ;prog.c: 244: unsigned char i = 0;
  4999  0571  01F5               	clrf	i1TX@i
  5000                           
  5001                           ;prog.c: 245: temp = cmd;
  5002  0572  0872               	movf	i1TX@cmd,w
  5003  0573  00F3               	movwf	i1TX@temp
  5004                           
  5005                           ;prog.c: 246: for (i = 0; i < 8; i++) {
  5006  0574  01F5               	clrf	i1TX@i
  5007  0575                     i1l147:	
  5008                           
  5009                           ;prog.c: 247: if (temp & 0x01) {
  5010  0575  1C73               	btfss	i1TX@temp,0
  5011  0576  2D81               	goto	i1l2411
  5012                           
  5013                           ;prog.c: 248: TRISA &= Zero;
  5014  0577  2597               	fcall	PL16	;call to abstracted procedure
  5015                           
  5016                           ;prog.c: 249: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5017  0578  2D79               	nop2	;2 cycle nop
  5018  0579  2D7A               	nop2	;2 cycle nop
  5019  057A  0000               	nop
  5020                           
  5021                           ;prog.c: 250: TRISA |= One;
  5022  057B  2592               	fcall	PL14	;call to abstracted procedure
  5023                           
  5024                           ;prog.c: 251: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5025  057C  3017               	movlw	23
  5026  057D  00F1               	movwf	??i1_TX
  5027  057E                     u480_27:	
  5028  057E  0BF1               	decfsz	??i1_TX,f
  5029  057F  2D7E               	goto	u480_27
  5030                           
  5031                           ;prog.c: 252: } else {
  5032  0580  2D8A               	goto	i1l2419
  5033  0581                     i1l2411:	
  5034                           
  5035                           ;prog.c: 253: TRISA &= Zero;
  5036  0581  2597               	fcall	PL16	;call to abstracted procedure
  5037                           
  5038                           ;prog.c: 254: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5039  0582  3017               	movlw	23
  5040  0583  00F1               	movwf	??i1_TX
  5041  0584                     u481_27:	
  5042  0584  0BF1               	decfsz	??i1_TX,f
  5043  0585  2D84               	goto	u481_27
  5044                           
  5045                           ;prog.c: 255: TRISA |= One;
  5046  0586  2592               	fcall	PL14	;call to abstracted procedure
  5047                           
  5048                           ;prog.c: 256: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5049  0587  2D88               	nop2	;2 cycle nop
  5050  0588  2D89               	nop2	;2 cycle nop
  5051  0589  0000               	nop
  5052  058A                     i1l2419:	
  5053  058A  3008               	movlw	8
  5054                           
  5055                           ;prog.c: 257: }
  5056                           ;prog.c: 258: temp >>= 1;
  5057  058B  1003               	clrc
  5058  058C  0CF3               	rrf	i1TX@temp,f
  5059  058D  0AF5               	incf	i1TX@i,f
  5060  058E  0275               	subwf	i1TX@i,w
  5061  058F  1803               	btfsc	3,0
  5062  0590  0008               	return
  5063  0591  2D75               	goto	i1l147
  5064  0592                     __end_ofi1_TX:	
  5065  0592                     PL14:	
  5066  0592  0876               	movf	i1TX@One,w
  5067  0593  1683               	bsf	3,5	;RP0=1, select bank1
  5068  0594  1303               	bcf	3,6	;RP1=0, select bank1
  5069  0595  0485               	iorwf	5,f	;volatile
  5070  0596  0008               	return
  5071  0597                     __end_ofPL14:	
  5072  0597                     PL16:	
  5073  0597  0874               	movf	i1TX@Zero,w
  5074  0598  1683               	bsf	3,5	;RP0=1, select bank1
  5075  0599  1303               	bcf	3,6	;RP1=0, select bank1
  5076  059A  0585               	andwf	5,f	;volatile
  5077  059B  0008               	return
  5078  059C                     __end_ofPL16:	
  5079                           
  5080                           	psect	text29
  5081  05C8                     __ptext29:	
  5082 ;; *************** function i1_RX *****************
  5083 ;; Defined at:
  5084 ;;		line 262 in file "prog.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  line            1    wreg     unsigned char 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  line            1    1[COMMON] unsigned char 
  5089 ;;  RX              1    5[COMMON] unsigned char 
  5090 ;;  RX              1    4[COMMON] unsigned char 
  5091 ;;  RX              1    3[COMMON] unsigned char 
  5092 ;;  RX              1    2[COMMON] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      unsigned char 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 300/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5102 ;;      Params:         0       0       0       0
  5103 ;;      Locals:         5       0       0       0
  5104 ;;      Temps:          1       0       0       0
  5105 ;;      Totals:         6       0       0       0
  5106 ;;Total ram usage:        6 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_get_temp_Async
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           
  5116                           ;psect for function i1_RX
  5117  05C8                     i1_RX:	
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  5121                           ;i1RX@line stored from wreg
  5122  05C8  00F1               	movwf	i1RX@line
  5123                           
  5124                           ;prog.c: 263: unsigned char One = line;
  5125  05C9  00F5               	movwf	i1RX@One
  5126                           
  5127                           ;prog.c: 264: unsigned char Zero = One ^ 0b11111111;
  5128  05CA  0975               	comf	i1RX@One,w
  5129  05CB  00F2               	movwf	i1RX@Zero
  5130                           
  5131                           ;prog.c: 266: unsigned char d = 0;
  5132  05CC  01F3               	clrf	i1RX@d
  5133                           
  5134                           ;prog.c: 267: for (unsigned char i = 0; i < 8; i++) {
  5135  05CD  01F4               	clrf	i1RX@i
  5136  05CE                     i1l2433:	
  5137                           
  5138                           ;prog.c: 268: TRISA &= Zero;
  5139  05CE  0872               	movf	i1RX@Zero,w
  5140  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  5141  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  5142  05D1  0585               	andwf	5,f	;volatile
  5143                           
  5144                           ;prog.c: 269: _delay((unsigned long)((6)*(4000000/4000000.0)));
  5145  05D2  2DD3               	nop2	;2 cycle nop
  5146  05D3  2DD4               	nop2	;2 cycle nop
  5147  05D4  2DD5               	nop2	;2 cycle nop
  5148                           
  5149                           ;prog.c: 270: TRISA |= One;
  5150  05D5  0875               	movf	i1RX@One,w
  5151  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  5152  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  5153  05D8  0485               	iorwf	5,f	;volatile
  5154                           
  5155                           ;prog.c: 271: _delay((unsigned long)((4)*(4000000/4000000.0)));
  5156  05D9  2DDA               	nop2	;2 cycle nop
  5157  05DA  2DDB               	nop2	;2 cycle nop
  5158                           
  5159                           ;prog.c: 272: d >>= 1;
  5160  05DB  1003               	clrc
  5161  05DC  0CF3               	rrf	i1RX@d,f
  5162                           
  5163                           ;prog.c: 273: if ((PORTA & One) > 0) {
  5164  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  5165  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  5166  05DF  0805               	movf	5,w	;volatile
  5167  05E0  0575               	andwf	i1RX@One,w
  5168  05E1  1D03               	btfss	3,2
  5169                           
  5170                           ;prog.c: 274: d |= 0x80;
  5171  05E2  17F3               	bsf	i1RX@d,7
  5172                           
  5173                           ;prog.c: 275: }
  5174                           ;prog.c: 276: _delay((unsigned long)((60)*(4000000/4000000.0)));
  5175  05E3  3013               	movlw	19
  5176  05E4  00F0               	movwf	??i1_RX
  5177  05E5                     u482_27:	
  5178  05E5  0BF0               	decfsz	??i1_RX,f
  5179  05E6  2DE5               	goto	u482_27
  5180  05E7  2DE8               	nop2
  5181  05E8  3008               	movlw	8
  5182  05E9  0AF4               	incf	i1RX@i,f
  5183  05EA  0274               	subwf	i1RX@i,w
  5184  05EB  1C03               	skipc
  5185  05EC  2DCE               	goto	i1l2433
  5186                           
  5187                           ;prog.c: 277: }
  5188                           ;prog.c: 278: return d;
  5189  05ED  0873               	movf	i1RX@d,w
  5190  05EE  0008               	return
  5191  05EF                     __end_ofi1_RX:	
  5192                           
  5193                           	psect	text30
  5194  053B                     __ptext30:	
  5195 ;; *************** function i1_INIT *****************
  5196 ;; Defined at:
  5197 ;;		line 221 in file "prog.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  line            1    wreg     unsigned char 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  line            1    1[COMMON] unsigned char 
  5202 ;;  INIT            1    4[COMMON] unsigned char 
  5203 ;;  INIT            1    3[COMMON] unsigned char 
  5204 ;;  INIT            1    2[COMMON] unsigned char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      unsigned char 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0
  5209 ;; Tracked objects:
  5210 ;;		On entry : 300/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5214 ;;      Params:         0       0       0       0
  5215 ;;      Locals:         4       0       0       0
  5216 ;;      Temps:          1       0       0       0
  5217 ;;      Totals:         5       0       0       0
  5218 ;;Total ram usage:        5 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_get_temp_Async
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           
  5228                           ;psect for function i1_INIT
  5229  053B                     i1_INIT:	
  5230                           
  5231                           ;incstack = 0
  5232                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  5233                           ;i1INIT@line stored from wreg
  5234  053B  00F1               	movwf	i1INIT@line
  5235                           
  5236                           ;prog.c: 222: unsigned char One = line;
  5237  053C  00F4               	movwf	i1INIT@One
  5238                           
  5239                           ;prog.c: 223: unsigned char Zero = One ^ 0b11111111;
  5240  053D  0974               	comf	i1INIT@One,w
  5241  053E  00F2               	movwf	i1INIT@Zero
  5242                           
  5243                           ;prog.c: 227: TRISA |= One;
  5244  053F  0874               	movf	i1INIT@One,w
  5245  0540  1683               	bsf	3,5	;RP0=1, select bank1
  5246  0541  0485               	iorwf	5,f	;volatile
  5247                           
  5248                           ;prog.c: 228: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5249  0542  3006               	movlw	6
  5250  0543  00F0               	movwf	??i1_INIT
  5251  0544                     u483_27:	
  5252  0544  0BF0               	decfsz	??i1_INIT,f
  5253  0545  2D44               	goto	u483_27
  5254  0546  0000               	nop
  5255                           
  5256                           ;prog.c: 229: TRISA &= Zero;
  5257  0547  0872               	movf	i1INIT@Zero,w
  5258  0548  1683               	bsf	3,5	;RP0=1, select bank1
  5259  0549  1303               	bcf	3,6	;RP1=0, select bank1
  5260  054A  0585               	andwf	5,f	;volatile
  5261                           
  5262                           ;prog.c: 230: _delay((unsigned long)((500)*(4000000/4000000.0)));
  5263  054B  30A6               	movlw	166
  5264  054C  00F0               	movwf	??i1_INIT
  5265  054D                     u484_27:	
  5266  054D  0BF0               	decfsz	??i1_INIT,f
  5267  054E  2D4D               	goto	u484_27
  5268  054F  0000               	nop
  5269                           
  5270                           ;prog.c: 231: TRISA |= One;
  5271  0550  0874               	movf	i1INIT@One,w
  5272  0551  1683               	bsf	3,5	;RP0=1, select bank1
  5273  0552  1303               	bcf	3,6	;RP1=0, select bank1
  5274  0553  0485               	iorwf	5,f	;volatile
  5275                           
  5276                           ;prog.c: 232: _delay((unsigned long)((65)*(4000000/4000000.0)));
  5277  0554  3015               	movlw	21
  5278  0555  00F0               	movwf	??i1_INIT
  5279  0556                     u485_27:	
  5280  0556  0BF0               	decfsz	??i1_INIT,f
  5281  0557  2D56               	goto	u485_27
  5282  0558  0000               	nop
  5283                           
  5284                           ;prog.c: 233: b = (PORTA & One) > 0;
  5285  0559  1283               	bcf	3,5	;RP0=0, select bank0
  5286  055A  1303               	bcf	3,6	;RP1=0, select bank0
  5287  055B  0805               	movf	5,w	;volatile
  5288  055C  0574               	andwf	i1INIT@One,w
  5289  055D  1903               	btfsc	3,2
  5290  055E  2D61               	goto	u199_20
  5291  055F  3001               	movlw	1
  5292  0560  2D62               	goto	u200_20
  5293  0561                     u199_20:	
  5294  0561  3000               	movlw	0
  5295  0562                     u200_20:	
  5296  0562  00F3               	movwf	i1INIT@b
  5297                           
  5298                           ;prog.c: 234: _delay((unsigned long)((450)*(4000000/4000000.0)));
  5299  0563  3095               	movlw	149
  5300  0564  00F0               	movwf	??i1_INIT
  5301  0565                     u486_27:	
  5302  0565  0BF0               	decfsz	??i1_INIT,f
  5303  0566  2D65               	goto	u486_27
  5304  0567  2D68               	nop2
  5305                           
  5306                           ;prog.c: 236: return !b;
  5307  0568  0873               	movf	i1INIT@b,w
  5308  0569  1903               	btfsc	3,2
  5309  056A  3401               	retlw	1
  5310  056B  3400               	retlw	0
  5311  056C                     __end_ofi1_INIT:	
  5312                           
  5313                           	psect	text31
  5314  06DD                     __ptext31:	
  5315 ;; *************** function ___wmul *****************
  5316 ;; Defined at:
  5317 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  multiplier      2    0[COMMON] unsigned int 
  5320 ;;  multiplicand    2    2[COMMON] unsigned int 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  product         2    4[COMMON] unsigned int 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  2    0[COMMON] unsigned int 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 300/0
  5329 ;;		On exit  : 300/0
  5330 ;;		Unchanged: 300/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5332 ;;      Params:         4       0       0       0
  5333 ;;      Locals:         2       0       0       0
  5334 ;;      Temps:          0       0       0       0
  5335 ;;      Totals:         6       0       0       0
  5336 ;;Total ram usage:        6 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; This function calls:
  5339 ;;		Nothing
  5340 ;; This function is called by:
  5341 ;;		_get_temp_Async
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           
  5346                           ;psect for function ___wmul
  5347  06DD                     ___wmul:	
  5348                           
  5349                           ;incstack = 0
  5350                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5351  06DD  01F4               	clrf	___wmul@product
  5352  06DE  01F5               	clrf	___wmul@product+1
  5353  06DF                     i1l2313:	
  5354  06DF  1C70               	btfss	___wmul@multiplier,0
  5355  06E0  2EE7               	goto	i1l2317
  5356  06E1  0872               	movf	___wmul@multiplicand,w
  5357  06E2  07F4               	addwf	___wmul@product,f
  5358  06E3  1803               	skipnc
  5359  06E4  0AF5               	incf	___wmul@product+1,f
  5360  06E5  0873               	movf	___wmul@multiplicand+1,w
  5361  06E6  07F5               	addwf	___wmul@product+1,f
  5362  06E7                     i1l2317:	
  5363  06E7  1003               	clrc
  5364  06E8  0DF2               	rlf	___wmul@multiplicand,f
  5365  06E9  0DF3               	rlf	___wmul@multiplicand+1,f
  5366  06EA  1003               	clrc
  5367  06EB  0CF1               	rrf	___wmul@multiplier+1,f
  5368  06EC  0CF0               	rrf	___wmul@multiplier,f
  5369  06ED  0870               	movf	___wmul@multiplier,w
  5370  06EE  0471               	iorwf	___wmul@multiplier+1,w
  5371  06EF  1D03               	btfss	3,2
  5372  06F0  2EDF               	goto	i1l2313
  5373  06F1  0875               	movf	___wmul@product+1,w
  5374  06F2  00F1               	movwf	?___wmul+1
  5375  06F3  0874               	movf	___wmul@product,w
  5376  06F4  00F0               	movwf	?___wmul
  5377  06F5  0008               	return
  5378  06F6                     __end_of___wmul:	
  5379                           
  5380                           	psect	text32
  5381  0483                     __ptext32:	
  5382 ;; *************** function ___awdiv *****************
  5383 ;; Defined at:
  5384 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  divisor         2    6[COMMON] int 
  5387 ;;  dividend        2    8[COMMON] int 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  quotient        2   12[COMMON] int 
  5390 ;;  sign            1   11[COMMON] unsigned char 
  5391 ;;  counter         1   10[COMMON] unsigned char 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  2    6[COMMON] int 
  5394 ;; Registers used:
  5395 ;;		wreg, status,2, status,0
  5396 ;; Tracked objects:
  5397 ;;		On entry : 300/0
  5398 ;;		On exit  : 300/0
  5399 ;;		Unchanged: 300/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5401 ;;      Params:         4       0       0       0
  5402 ;;      Locals:         4       0       0       0
  5403 ;;      Temps:          0       0       0       0
  5404 ;;      Totals:         8       0       0       0
  5405 ;;Total ram usage:        8 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_get_temp_Async
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function ___awdiv
  5416  0483                     ___awdiv:	
  5417                           
  5418                           ;incstack = 0
  5419                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5420  0483  01FB               	clrf	___awdiv@sign
  5421  0484  1FF7               	btfss	___awdiv@divisor+1,7
  5422  0485  2C8D               	goto	i1l2335
  5423  0486  09F6               	comf	___awdiv@divisor,f
  5424  0487  09F7               	comf	___awdiv@divisor+1,f
  5425  0488  0AF6               	incf	___awdiv@divisor,f
  5426  0489  1903               	skipnz
  5427  048A  0AF7               	incf	___awdiv@divisor+1,f
  5428  048B  01FB               	clrf	___awdiv@sign
  5429  048C  0AFB               	incf	___awdiv@sign,f
  5430  048D                     i1l2335:	
  5431  048D  1FF9               	btfss	___awdiv@dividend+1,7
  5432  048E  2C96               	goto	i1l2341
  5433  048F  09F8               	comf	___awdiv@dividend,f
  5434  0490  09F9               	comf	___awdiv@dividend+1,f
  5435  0491  0AF8               	incf	___awdiv@dividend,f
  5436  0492  1903               	skipnz
  5437  0493  0AF9               	incf	___awdiv@dividend+1,f
  5438  0494  3001               	movlw	1
  5439  0495  06FB               	xorwf	___awdiv@sign,f
  5440  0496                     i1l2341:	
  5441  0496  01FC               	clrf	___awdiv@quotient
  5442  0497  01FD               	clrf	___awdiv@quotient+1
  5443  0498  0876               	movf	___awdiv@divisor,w
  5444  0499  0477               	iorwf	___awdiv@divisor+1,w
  5445  049A  1903               	btfsc	3,2
  5446  049B  2CBB               	goto	i1l2363
  5447  049C  01FA               	clrf	___awdiv@counter
  5448  049D                     L12:	
  5449  049D  0AFA               	incf	___awdiv@counter,f
  5450  049E  1BF7               	btfsc	___awdiv@divisor+1,7
  5451  049F  2CA4               	goto	i1l2351
  5452  04A0  1003               	clrc
  5453  04A1  0DF6               	rlf	___awdiv@divisor,f
  5454  04A2  0DF7               	rlf	___awdiv@divisor+1,f
  5455  04A3  2C9D               	goto	L12
  5456  04A4                     i1l2351:	
  5457  04A4  1003               	clrc
  5458  04A5  0DFC               	rlf	___awdiv@quotient,f
  5459  04A6  0DFD               	rlf	___awdiv@quotient+1,f
  5460  04A7  0877               	movf	___awdiv@divisor+1,w
  5461  04A8  0279               	subwf	___awdiv@dividend+1,w
  5462  04A9  1D03               	skipz
  5463  04AA  2CAD               	goto	u196_25
  5464  04AB  0876               	movf	___awdiv@divisor,w
  5465  04AC  0278               	subwf	___awdiv@dividend,w
  5466  04AD                     u196_25:	
  5467  04AD  1C03               	skipc
  5468  04AE  2CB7               	goto	L13
  5469  04AF  0876               	movf	___awdiv@divisor,w
  5470  04B0  02F8               	subwf	___awdiv@dividend,f
  5471  04B1  0877               	movf	___awdiv@divisor+1,w
  5472  04B2  1C03               	skipc
  5473  04B3  03F9               	decf	___awdiv@dividend+1,f
  5474  04B4  02F9               	subwf	___awdiv@dividend+1,f
  5475  04B5  147C               	bsf	___awdiv@quotient,0
  5476  04B6  1003               	clrc
  5477  04B7                     L13:	
  5478  04B7  0CF7               	rrf	___awdiv@divisor+1,f
  5479  04B8  0CF6               	rrf	___awdiv@divisor,f
  5480  04B9  0BFA               	decfsz	___awdiv@counter,f
  5481  04BA  2CA4               	goto	i1l2351
  5482  04BB                     i1l2363:	
  5483  04BB  087B               	movf	___awdiv@sign,w
  5484  04BC  1903               	btfsc	3,2
  5485  04BD  2CC3               	goto	i1l2367
  5486  04BE  09FC               	comf	___awdiv@quotient,f
  5487  04BF  09FD               	comf	___awdiv@quotient+1,f
  5488  04C0  0AFC               	incf	___awdiv@quotient,f
  5489  04C1  1903               	skipnz
  5490  04C2  0AFD               	incf	___awdiv@quotient+1,f
  5491  04C3                     i1l2367:	
  5492  04C3  087D               	movf	___awdiv@quotient+1,w
  5493  04C4  00F7               	movwf	?___awdiv+1
  5494  04C5  087C               	movf	___awdiv@quotient,w
  5495  04C6  00F6               	movwf	?___awdiv
  5496  04C7  0008               	return
  5497  04C8                     __end_of___awdiv:	
  5498                           
  5499                           	psect	text33
  5500  068B                     __ptext33:	
  5501 ;; *************** function _convDig *****************
  5502 ;; Defined at:
  5503 ;;		line 134 in file "prog.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  dig             1    wreg     unsigned char 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  dig             1    0[COMMON] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  1    wreg      unsigned char 
  5510 ;; Registers used:
  5511 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5512 ;; Tracked objects:
  5513 ;;		On entry : B00/0
  5514 ;;		On exit  : B00/0
  5515 ;;		Unchanged: B00/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5517 ;;      Params:         0       0       0       0
  5518 ;;      Locals:         1       0       0       0
  5519 ;;      Temps:          0       0       0       0
  5520 ;;      Totals:         1       0       0       0
  5521 ;;Total ram usage:        1 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; This function calls:
  5524 ;;		Nothing
  5525 ;; This function is called by:
  5526 ;;		_F
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _convDig
  5532  068B                     _convDig:	
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5536                           ;convDig@dig stored from wreg
  5537  068B  00F0               	movwf	convDig@dig
  5538                           
  5539                           ;prog.c: 135: switch (dig) {
  5540  068C  2E9B               	goto	i1l2543
  5541  068D                     i1l2485:	
  5542  068D  34DB               	retlw	219
  5543  068E                     i1l2489:	
  5544  068E  3418               	retlw	24
  5545  068F                     i1l2493:	
  5546  068F  34B3               	retlw	179
  5547  0690                     i1l2497:	
  5548  0690  34BA               	retlw	186
  5549  0691                     i1l2501:	
  5550  0691  3478               	retlw	120
  5551  0692                     i1l2505:	
  5552  0692  34EA               	retlw	234
  5553  0693                     i1l2509:	
  5554  0693  34EB               	retlw	235
  5555  0694                     i1l2513:	
  5556  0694  3498               	retlw	152
  5557  0695                     i1l2517:	
  5558  0695  34FB               	retlw	251
  5559  0696                     i1l2521:	
  5560  0696  34FA               	retlw	250
  5561  0697                     i1l2525:	
  5562  0697  34E3               	retlw	227
  5563  0698                     i1l2529:	
  5564  0698  3421               	retlw	33
  5565  0699                     i1l2533:	
  5566  0699  3420               	retlw	32
  5567  069A                     i1l2537:	
  5568  069A  3400               	retlw	0
  5569  069B                     i1l2543:	
  5570  069B  0870               	movf	convDig@dig,w
  5571                           
  5572                           ; Switch size 1, requested type "space"
  5573                           ; Number of cases is 13, Range of values is 0 to 32
  5574                           ; switch strategies available:
  5575                           ; Name         Instructions Cycles
  5576                           ; direct_byte           39     6 (fixed)
  5577                           ; simple_byte           40    21 (average)
  5578                           ; jumptable            260     6 (fixed)
  5579                           ;	Chosen strategy is direct_byte
  5580  069C  0084               	movwf	4
  5581  069D  3021               	movlw	33
  5582  069E  0204               	subwf	4,w
  5583  069F  1803               	skipnc
  5584  06A0  3400               	retlw	0
  5585  06A1  3006               	movlw	high i1S4291
  5586  06A2  008A               	movwf	10
  5587  06A3  3032               	movlw	low i1S4291
  5588  06A4  0704               	addwf	4,w
  5589  06A5  0082               	movwf	2
  5590  06A6  0008               	return
  5591  06A7                     __end_of_convDig:	
  5592  007E                     btemp	set	126	;btemp
  5593  007E                     wtemp0	set	126
  5594                           
  5595                           	psect	swtext1
  5596  0632                     __pswtext1:	
  5597  0632                     i1S4291:	
  5598  0632  2E8D               	ljmp	i1l2485
  5599  0633  2E8E               	ljmp	i1l2489
  5600  0634  2E8F               	ljmp	i1l2493
  5601  0635  2E90               	ljmp	i1l2497
  5602  0636  2E91               	ljmp	i1l2501
  5603  0637  2E92               	ljmp	i1l2505
  5604  0638  2E93               	ljmp	i1l2509
  5605  0639  2E94               	ljmp	i1l2513
  5606  063A  2E95               	ljmp	i1l2517
  5607  063B  2E96               	ljmp	i1l2521
  5608  063C  2E9A               	ljmp	i1l2537
  5609  063D  2E9A               	ljmp	i1l2537
  5610  063E  2E9A               	ljmp	i1l2537
  5611  063F  2E9A               	ljmp	i1l2537
  5612  0640  2E97               	ljmp	i1l2525
  5613  0641  2E9A               	ljmp	i1l2537
  5614  0642  2E9A               	ljmp	i1l2537
  5615  0643  2E9A               	ljmp	i1l2537
  5616  0644  2E9A               	ljmp	i1l2537
  5617  0645  2E9A               	ljmp	i1l2537
  5618  0646  2E9A               	ljmp	i1l2537
  5619  0647  2E9A               	ljmp	i1l2537
  5620  0648  2E9A               	ljmp	i1l2537
  5621  0649  2E9A               	ljmp	i1l2537
  5622  064A  2E98               	ljmp	i1l2529
  5623  064B  2E9A               	ljmp	i1l2537
  5624  064C  2E9A               	ljmp	i1l2537
  5625  064D  2E9A               	ljmp	i1l2537
  5626  064E  2E9A               	ljmp	i1l2537
  5627  064F  2E9A               	ljmp	i1l2537
  5628  0650  2E9A               	ljmp	i1l2537
  5629  0651  2E9A               	ljmp	i1l2537
  5630  0652  2E99               	ljmp	i1l2533


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         25
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      65
    BANK1            80     23      40
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 9
		 -> EditAddressMemory@CellsData(BANK1[8]), DS_ReadData(BANK1[9]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_ReadCell
    _WriteArrayToEEPROM->_EEWR
    _ShowError->_setDigit
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___lbmod

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   16994
                                             35 BANK0      1     1      0
                                             15 BANK1      8     8      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
              _Reset_powerOnInterval
                        _Run_getInit
                        _Run_getTemp
                          _ShowError
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2404
                                             22 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Run_getInit                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            14    13      1    1636
                                             21 BANK0     14    13      1
                _FillArrayFromEEPROM
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   16    16      0    7276
                                             25 BANK0      1     1      0
                                              0 BANK1     15    15      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                          _ShowError
                                 _TX
                 _WriteArrayToEEPROM
                           _calc_crc
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     288
                                             13 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     433
                                             13 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     673
                                             16 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     161
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _TX                                                   7     6      1     549
                                             13 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ShowError                                            0     0      0     873
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             4     3      1    1188
                                             21 BANK0      4     3      1
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2     931
                                             16 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             13 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   6     6      0     269
                                             13 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _INIT                                                 5     5      0     229
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    1863
                                             22 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1     873
                                             18 BANK0      4     3      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     427
                                             13 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     436
                                             13 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    7     7      0    2241
                                              6 BANK0      7     7      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       6     6      0    2046
                                              0 BANK0      6     6      0
                            ___awdiv
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                         i1_calc_crc
 ---------------------------------------------------------------------------------
 (7) i1_calc_crc                                           6     5      1     313
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 7     6      1     358
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 6     6      0     183
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               5     5      0     158
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     406
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___lbdiv
     ___lbmod
     _clrInd
     _refreshInd
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___lbdiv
       ___lbmod
       _clrInd
       _refreshInd
       _setDigit
         ___lbdiv (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _ShowError
       _clrInd
       _refreshInd
       _setDigit
         ___lbdiv (ARG)
         ___lbmod (ARG)
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _calc_crc
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _waitInterrupt
   _Reset_powerOnInterval
   _Run_getInit
   _Run_getTemp
   _ShowError
     _clrInd
     _refreshInd
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___lbdiv (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___awdiv
       ___wmul (ARG)
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1_calc_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      41       3       81.3%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      77      10        0.0%
ABS                  0      0      77       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Jan 22 21:30:39 2017

                      __CFG_CP$ON 0000                                 _F 0328              FindCell@addressStart 0040  
                               pc 0002                                ?_F 0070                                PL2 013C  
                              PL4 014B                                PL6 0156                                PL8 024F  
                              l73 07BD                                _RX 059C                                _TX 0503  
                    ___awdiv@sign 007B                                fsr 0004               ___wmul@multiplicand 0072  
                      i1_calc_crc 05EF                               ??_F 0026                               PL10 0257  
                             PL12 0535                               PL14 0592                               PL16 0597  
                             ?_RX 0070                               ?_TX 002D                               l123 0708  
                             l205 044A                               l147 050C                               l353 0095  
                             l286 03F0                               l366 00C8                               l376 010F  
                             l731 06CE                               RX@d 0030                               RX@i 0031  
                             TX@i 0032                               _RA2 002A                               _RA5 002D  
                    __CFG_CPD$OFF 0000                               fsr0 0004                               indf 0000  
                     main@address 00B5                   ?_get_temp_Async 0070                      main@TheStart 00B4  
                            ??_RX 002D                              ??_TX 002E                      __CFG_LVP$OFF 0000  
                            F@dig 002B                    setPoint@dignum 002E                              l3323 06C8  
                            l3315 075B                              l4211 00E8                              l4203 00DE  
                            l4107 004D                              l4221 00F3                              l4125 006E  
                            l4117 005E                              l3503 0662                              l4231 00FC  
                            l4119 0062                              l3337 06DB                              l3353 0687  
                            l3345 0673                              l3433 052B                              l3425 051D  
                            l4161 00A8                              l3363 0773                              l4251 0117  
                            l4243 010B                              l4227 00F7                              l4163 00AC  
                            l4139 0080                              l3293 07A7                              l3525 06BD  
                            l4173 00C0                              l3447 05A3                              l3383 0724  
                            l3711 047D                              l4263 0129                              l4239 0109  
                            l3801 028A                              l3713 0481                              l4185 00CB  
                            l3731 03E4                              l4179 00C4                              l3469 0614  
                            l3813 0298                              l4269 013A                              l3487 0628  
                            l3479 061A                              l3823 02A0                              l3671 0448  
                            l3727 03DE                              l3489 062D                              l3809 0296  
                            l3681 045A                              l3673 044E                              l3737 03EC  
                            l3729 03E2                              l3835 02B8                              l3907 0325  
                            l3763 042E                              l3739 03F2                              l3845 02C1  
                            l3781 026A                              l3685 0460                              l3749 0415  
                            l3855 02D9                              l3863 02EB                              l3871 02F0  
                            l3687 0462                              l3679 0457                              l3881 02FD  
                            l3699 046C                              l3797 0284                              l3789 0278  
                            l3895 0309                              l3799 0286                              _EERD 0779  
                            _T0IF 005A                              _EEWR 06F6                              u4000 0435  
                            u3400 04F5                              u4180 031E                              u3390 04F4  
                            u4190 031F                              _INIT 04C8                              u3900 03F8  
                            u3910 03F9                              u4550 00B3                              u3920 0400  
                            u4560 00B4                              u3930 0401                              u4737 0519  
                            u4747 0524                              u4757 05BC                              u3990 0434  
                            u4767 04D4                              u4777 04DF                              u4787 04EA  
                            u4797 04FA                              i1_RX 05C8                              i1_TX 056C  
                            _TMR0 0001                              _main 002D                              _sign 005A  
                            btemp 007E                              start 0010        WriteArrayToEEPROM@quantity 0031  
                  EEWR@INTCON_BUP 002F       WriteArrayToEEPROM@container 0033                       i1calc_crc@i 0074  
    __size_of_FillArrayFromEEPROM 0011                             ?_EERD 0070                             ?_EEWR 002D  
                           ?_INIT 0070                             ?i1_RX 0070                             ?i1_TX 0070  
                           INIT@b 0030                             ?_main 0070                   __end_of___awdiv 04C8  
                 __end_of___lbdiv 06DD                             _EEADR 009B                             RX@One 0032  
                   __CFG_WDTE$OFF 0000                   __end_of___lbmod 068B                             _CMCON 001F  
                           TX@One 0033                   ___awdiv@divisor 0076                             _T2CON 0012  
                           TX@cmd 002F                             i1l234 033E                             i1l147 0575  
                           i1l171 0172                             i1l175 01B3                             i1l184 01CC  
                           i1l187 01D6                             i1l189 024D                             i1l278 03C8  
                           i1RX@d 0073                             i1RX@i 0074                             i1TX@i 0075  
                 ___awdiv@counter 007A                             _PORTA 0005                             _PORTB 0006  
                           _TRISA 0085                             _TRISB 0086                     __CFG_PWRTE$ON 0000  
                 __end_of_indData 043E                   __end_of_convDig 06A7                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             status 0003                             wtemp0 007E  
                 ___lbdiv@divisor 002D            main@point_on_ind_delay 00AF                   ___lbdiv@counter 002F  
                __end_of_FindCell 0483                      __end_of_EERD 0788                      __end_of_EEWR 070E  
                    __end_of_INIT 0503                      __end_ofi1_RX 05EF                      __end_ofi1_TX 0592  
                  __CFG_MCLRE$OFF 0000                   __initialization 0011                      __end_of_main 013C  
                    i1calc_crc@fb 0073                __size_of_CellToInd 001B                    EERD@EEDATA_BUP 002F  
                __end_of_ReadCell 066F                            ??_EERD 002D                            ??_EEWR 002E  
                          ??_INIT 002D                            ??i1_RX 0070                            ??i1_TX 0071  
                     ?i1_calc_crc 0070                            ??_main 0043           ??_Reset_powerOnInterval 002D  
                    ReadCell@cell 0037                            i1S4291 0632                            _EEDATA 009A  
                          _EECON2 009D                  ___awdiv@dividend 0078                            RX@Zero 002F  
                          TX@Zero 0031                            RX@line 002E                 F@CurrentKeysState 002C  
                          u200_20 0562                            i1l2313 06DF                            i1l2411 0581  
                          i1l4003 0369                            i1l2501 0691                            i1l2341 0496  
                          i1l2317 06E7                            i1l4021 037B                            i1l2351 04A4  
                          i1l2335 048D                            i1l4015 0375                            i1l4007 036E  
                          i1l2521 0696                            i1l2513 0694                            i1l2505 0692  
                          i1l2433 05CE                            i1l4041 03A1                            i1l4025 0382  
                          i1l4009 036F                            i1l2363 04BB                            i1l2419 058A  
                          i1l4019 037A                            i1l2533 0699                            i1l2525 0697  
                          i1l2517 0695                            i1l2509 0693                            i1l4053 03C5  
                          i1l4037 0396                            i1l4029 0389                            i1l2543 069B  
                          i1l2367 04C3                            i1l4071 03C1                            i1l4047 03AB  
                          i1l4055 03B3                            i1l2537 069A                            i1l2529 0698  
                          i1l3531 05F2                            i1l4075 03C7                            i1l2493 068F  
                          i1l2485 068D                            i1l3541 05F9                            i1l3621 01F4  
                          i1l4069 03BD                            i1l3551 060C                            i1l3631 020A  
                          i1l3623 01DD                            i1l2497 0690                            i1l2489 068E  
                          i1l3625 01F8                            i1l3549 0607                            i1l3581 0182  
                          i1l3657 0247                            i1l3659 0249                            i1l3587 0195  
                          i1l3579 0180                            i1l3599 01BD                            i1l3971 033F  
                          i1l3995 0362                            i1l3987 0357                            i1l3989 035B  
                          TX@line 002D                            _INTCON 000B                            TX@temp 0030  
                          u196_25 04AD                            i1_INIT 053B                            u199_20 0561  
                          u480_27 057E                            u481_27 0584                            u482_27 05E5  
                          u483_27 0544                            u484_27 054D                            u485_27 0556  
                          u486_27 0565                  __end_of_calc_crc 0632                            _TRISA4 042C  
                          ___wmul 06DD                         ??___awdiv 007A                         ??___lbdiv 002E  
                       ??___lbmod 002E                            _clrInd 07B5                            _digits 004A  
                ___awdiv@quotient 007C                         ??_indData 0036                  __end_of_setDigit 0759  
                       ??_convDig 0070                __size_of_ShowError 000E                  __end_of_setPoint 0779  
                          saved_w 007E                 _EditAddressMemory 025F                 __end_of_CellToInd 06C2  
                ___lbdiv@dividend 002E                ?_EditAddressMemory 0070                   ___lbmod@divisor 002D  
         __end_of__initialization 002B                    EERD@INTCON_BUP 002E                   ___lbmod@counter 0030  
             __size_ofi1_calc_crc 0022        __end_of_WriteArrayToEEPROM 0735               ??_EditAddressMemory 0039  
                  __pcstackCOMMON 0070                      __pidataBANK1 0000             __end_of_waitInterrupt 07C0  
                   ??_Run_getInit 002D                     ??_Run_getTemp 002D                     i1calc_crc@dat 0072  
                   i1calc_crc@crc 0075                     i1calc_crc@len 0070                     i1calc_crc@mas 0071  
                      __end_ofPL2 014B                        __end_ofPL4 0156                        __end_ofPL6 015D  
                      __end_ofPL8 0257                  ___lbdiv@quotient 0030                        __end_of_RX 05C8  
                      __end_of_TX 0535                  ??_get_temp_Async 0020                       F@long_press 0057  
      EditAddressMemory@CellsData 00A0         __end_of_EditAddressMemory 0328                         ?_FindCell 0035  
             _FillArrayFromEEPROM 0759       EditAddressMemory@RereadCell 00AA                        __pbssBANK0 0044  
                         ?i1_INIT 0070                         ?_ReadCell 0035                           INIT@One 0031  
               __end_of_PortAData 079F                 __end_of_ShowError 0796                        __pmaintext 002D  
    EditAddressMemory@CellIsEmpty 00AB                      _endInterrupt 0301              ?_FillArrayFromEEPROM 0030  
                         ?___wmul 0070                           ?_clrInd 0070                        __pintentry 0004  
                         i1INIT@b 0073                        __size_of_F 00AB                         ?_calc_crc 002D  
             __end_of_Run_getInit 0747                           i1RX@One 0075               __end_of_Run_getTemp 0722  
                         i1TX@One 0076                           i1TX@cmd 0072  FillArrayFromEEPROM@address_start 0030  
                      ??_FindCell 0036                        calc_crc@fb 002F                   Run_getInit@line 002D  
                    _Broadcasting 0300                        __stringtab 0796                 ReadCell@CellsData 0035  
                      ??_ReadCell 0036                   __size_ofi1_INIT 0031                           _KeyCode 005F  
                       ?_setDigit 0032                         ?_setPoint 002D               get_temp_Async@temp1 0023  
             get_temp_Async@temp2 0024             ??_FillArrayFromEEPROM 0032                   Run_getTemp@line 002D  
                         ___awdiv 0483                           ___lbdiv 06C2                           ___lbmod 066F  
                 __size_of___wmul 0019                   __size_of_clrInd 0006                      ??i1_calc_crc 0071  
                       i1INIT@One 0074                           __ptext1 03D3                           __ptext2 070E  
                         __ptext3 0735                           __ptext4 07AF                           __ptext5 043E  
                         __ptext6 025F                           __ptext7 076A                           __ptext8 0611  
                         __ptext9 0722                           _indData 03D3                           _convDig 068B  
                      ??_calc_crc 002E        __size_of_EditAddressMemory 00C9    __size_of_Reset_powerOnInterval 0006  
   __end_of_Reset_powerOnInterval 07B5                           clrloop0 07A0              end_of_initialization 002B  
                      _refreshInd 07A7                __end_ofi1_calc_crc 0611                        ??_setDigit 0033  
                      ??_setPoint 002E                         FindCell@i 0041                       _Run_getInit 0735  
                     _Run_getTemp 070E                  FindCell@previous 0035                  ___lbmod@dividend 002F  
             WriteArrayToEEPROM@i 0034                        convDig@dig 0070                       ___lbmod@rem 0031  
                 F@KeyTimeCounter 0050                         _CellToInd 06A7                         ReadCell@i 0038  
                  __end_ofi1_INIT 056C                     setPoint@value 002D                    __end_of___wmul 06F6  
    EditAddressMemory@ErrorShowed 00A8                    __end_of_clrInd 07BB                     __pbitbssBANK0 0300  
              _WriteArrayToEEPROM 0722                       __end_ofPL10 025F                       __end_ofPL12 053B  
                     __end_ofPL14 0597                       __end_ofPL16 059C               start_initialization 0011  
 WriteArrayToEEPROM@address_start 0030               ?_WriteArrayToEEPROM 0030                 __size_of_FindCell 0045  
                     ?_refreshInd 0070                          ??i1_INIT 0070      FillArrayFromEEPROM@container 0033  
                      ?_CellToInd 0070                 __size_of_ReadCell 001C                         _PortAData 079C  
            ??_WriteArrayToEEPROM 0032                EditAddressMemory@i 00AC                         _ShowError 0788  
                        ??___wmul 0074                          ??_clrInd 002D                       __pdataBANK1 00B7  
                        EEWR@data 002D                      setDigit@data 0032                         ___latbits 0000  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                 __size_of_calc_crc 0021  
          EditAddressMemory@i_257 00AD                          INIT@Zero 002F                          INIT@line 002E  
                       __end_of_F 03D3            __size_of_waitInterrupt 0005                         __pnvBANK0 005D  
               __size_of_setDigit 0012                        ?_ShowError 0070                 __size_of_setPoint 000F  
                        ?___awdiv 0076                          ?___lbdiv 002D                          ?___lbmod 002D  
             __size_of_refreshInd 0008                         __pstrings 0796                         calc_crc@i 0031  
                        ?_indData 0070                         __pswtext1 0632                          ?_convDig 0070  
              get_temp_Async@line 0025           __size_of_get_temp_Async 00F2                   get_temp_Async@i 0022  
                     __size_of_RX 002C                       __size_of_TX 0032                 interrupt_function 0004  
                 FindCell@address 0042                    ___wmul@product 0074                       ??_CellToInd 0036  
     __end_of_FillArrayFromEEPROM 076A                          i1RX@Zero 0072                         clear_ram0 079F  
                        i1TX@Zero 0074                          i1RX@line 0071                          i1TX@line 0070  
                        i1TX@temp 0073                         _temp_drob 005B                       calc_crc@dat 002E  
                     calc_crc@crc 0032                       calc_crc@len 002D                       calc_crc@mas 0030  
                       indData@dN 003A                         indData@cd 003B                     _waitInterrupt 07BB  
                    ?_Run_getInit 0070                      ?_Run_getTemp 0070                FindCell@addressNew 003E  
                     __stringbase 079B                 FindCell@CellsData 0036                 ___wmul@multiplier 0070  
                 _powerOnInterval 005D                    F@LastKeysState 0056                          _FindCell 043E  
           _Reset_powerOnInterval 07AF                          _ReadCell 0653                        _EECON1bits 009C  
            FillArrayFromEEPROM@i 0034                    indData@isPoint 0038                       ??_ShowError 0036  
                  ?_waitInterrupt 0070                  __size_of___awdiv 0045                  __size_of___lbdiv 001B  
                __size_of___lbmod 001C                     _getTemp_flags 0044                __end_of__stringtab 079C  
           EditAddressMemory@cell 00AE             EditAddressMemory@line 00A9       FillArrayFromEEPROM@quantity 0031  
                        _calc_crc 0611                  __size_of_indData 006B                  __size_of_convDig 001C  
                    F@DigitNumber 0055                         setDigit@a 0035                        i1INIT@Zero 0072  
                     EERD@address 002D                          _main$273 00B1                        i1INIT@line 0071  
                        _digits_0 004D                          _digitemp 0059                          __ptext10 07BB  
                        __ptext11 06F6                          __ptext20 0747                          __ptext12 0503  
                        __ptext21 07A7                          __ptext13 0788                          __ptext30 053B  
                        __ptext22 07B5                          __ptext14 0653                          __ptext31 06DD  
                        __ptext23 066F                          __ptext15 0759                          __ptext32 0483  
                        __ptext24 06C2                          __ptext16 0779                          __ptext33 068B  
                        __ptext25 0328                          __ptext17 059C                          __ptext26 015D  
                        __ptext18 04C8                          __ptext27 05EF                          __ptext19 06A7  
                        __ptext28 056C                          __ptext29 05C8                      ??_refreshInd 002D  
                   __size_of_EERD 000F                     __size_of_EEWR 0018                     __size_of_INIT 003B  
                   __size_ofi1_RX 0027                     __size_ofi1_TX 0026                       _DS_ReadData 00B7  
                   __size_of_main 010F                          _setDigit 0747                          _setPoint 076A  
                        indData@v 0039                      _PowerBlocked 0058                          main@cell 00B3  
                        main@line 00B6                __end_of_refreshInd 07AF                        _INTCONbits 000B  
          ?_Reset_powerOnInterval 0070                    _get_temp_Async 015D                          intlevel1 0000  
                      _DS_Address 00C0                         stringcode 0796                   ??_waitInterrupt 002D  
                     EEWR@address 002E               F@ButtonPressTimeIn1 0052               F@ButtonPressTimeIn2 0053  
     __size_of_WriteArrayToEEPROM 0013               F@ButtonPressTimeOut 0054                     CellToInd@cell 0036  
                    indData@v_240 0037              __size_of_Run_getInit 0012              __size_of_Run_getTemp 0014  
                      _OPTION_REG 0081                       _temperature 005C                          stringdir 0796  
                        stringtab 0796            __end_of_get_temp_Async 024F                __CFG_FOSC$INTOSCIO 0000  
             FindCell@CellIsEmpty 003F  
