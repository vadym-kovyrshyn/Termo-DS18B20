

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 27 19:37:07 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	swtext1,local,class=CONST,delta=2
    53                           	psect	pa_nodes,global,class=CODE,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0092                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009F                     	;# 
    92                           
    93                           	psect	idataBANK1
    94  0000                     __pidataBANK1:	
    95                           
    96                           	psect	strings
    97  07B4                     __pstrings:	
    98  07B4                     stringtab:	
    99  07B4                     __stringtab:	
   100  07B4                     stringcode:	
   101                           ;	String table - string pointers are 1 byte each
   102                           
   103  07B4                     stringdir:	
   104  07B4  3007               	movlw	high stringdir
   105  07B5  008A               	movwf	10
   106  07B6  0804               	movf	4,w
   107  07B7  0A84               	incf	4,f
   108  07B8  0782               	addwf	2,f
   109  07B9                     __stringbase:	
   110  07B9  3400               	retlw	0
   111  07BA                     __end_of__stringtab:	
   112  07BA                     _PortAData:	
   113  07BA  3480               	retlw	128
   114  07BB  3440               	retlw	64
   115  07BC  3401               	retlw	1
   116  07BD                     __end_of_PortAData:	
   117                           
   118                           	psect	nvBANK1
   119  00D5                     __pnvBANK1:	
   120  00D5                     _powerOnInterval:	
   121  00D5                     	ds	2
   122  001F                     _CMCON	set	31
   123  000B                     _INTCON	set	11
   124  000B                     _INTCONbits	set	11
   125  0005                     _PORTA	set	5
   126  0006                     _PORTB	set	6
   127  0012                     _T2CON	set	18
   128  0001                     _TMR0	set	1
   129  0029                     _RA1	set	41
   130  002A                     _RA2	set	42
   131  002B                     _RA3	set	43
   132  005A                     _T0IF	set	90
   133  009B                     _EEADR	set	155
   134  009C                     _EECON1bits	set	156
   135  009D                     _EECON2	set	157
   136  009A                     _EEDATA	set	154
   137  0081                     _OPTION_REG	set	129
   138  0085                     _TRISA	set	133
   139  0086                     _TRISB	set	134
   140  042B                     _TRISA3	set	1067
   141  042C                     _TRISA4	set	1068
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  0011                     start_initialization:	
   147  0011                     __initialization:	
   148  0011  30FF               	movlw	255
   149                           
   150                           ; Initialize objects allocated to BANK1
   151  0012  1683               	bsf	3,5	;RP0=1, select bank1
   152                           
   153                           ;initializer for _DS_ReadData
   154  0013  00BC               	movwf	__pdataBANK1& (0+127)
   155  0014  00BD               	movwf	(__pdataBANK1+1)& (0+127)
   156  0015  00BE               	movwf	(__pdataBANK1+2)& (0+127)
   157  0016  00BF               	movwf	(__pdataBANK1+3)& (0+127)
   158  0017  00C0               	movwf	(__pdataBANK1+4)& (0+127)
   159  0018  00C1               	movwf	(__pdataBANK1+5)& (0+127)
   160  0019  00C2               	movwf	(__pdataBANK1+6)& (0+127)
   161  001A  00C3               	movwf	(__pdataBANK1+7)& (0+127)
   162  001B  00C4               	movwf	(__pdataBANK1+8)& (0+127)
   163                           
   164                           ;initializer for _DS_Address
   165  001C  00C5               	movwf	(__pdataBANK1+9)& (0+127)
   166  001D  00C6               	movwf	(__pdataBANK1+10)& (0+127)
   167  001E  00C7               	movwf	(__pdataBANK1+11)& (0+127)
   168  001F  00C8               	movwf	(__pdataBANK1+12)& (0+127)
   169  0020  00C9               	movwf	(__pdataBANK1+13)& (0+127)
   170  0021  00CA               	movwf	(__pdataBANK1+14)& (0+127)
   171  0022  00CB               	movwf	(__pdataBANK1+15)& (0+127)
   172  0023  00CC               	movwf	(__pdataBANK1+16)& (0+127)
   173  0024  30CD               	movlw	low __pbssBANK1
   174                           
   175                           ; Clear objects allocated to BANK1
   176  0025  1383               	bcf	3,7	;select IRP bank0
   177  0026  0084               	movwf	4
   178  0027  30D5               	movlw	low (__pbssBANK1+8)
   179  0028  27BD               	fcall	clear_ram0
   180                           
   181                           ; Clear objects allocated to BANK0
   182  0029  3048               	movlw	low __pbssBANK0
   183  002A  0084               	movwf	4
   184  002B  3059               	movlw	low (__pbssBANK0+17)
   185  002C  27BD               	fcall	clear_ram0
   186                           
   187                           ; Clear objects allocated to BITBANK0
   188  002D  1283               	bcf	3,5	;RP0=0, select bank0
   189  002E  01D9               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   190  002F                     end_of_initialization:	
   191                           ;End of C runtime variable initialization code
   192                           
   193  002F                     __end_of__initialization:	
   194  002F  0183               	clrf	3
   195  0030  2921               	ljmp	_main	;jump to C main() function
   196                           
   197                           	psect	bssBANK0
   198  0048                     __pbssBANK0:	
   199  0048                     _getTemp_flags:	
   200  0048                     	ds	4
   201  004C                     F@ButtonPressTimeIn1:	
   202  004C                     	ds	1
   203  004D                     F@ButtonPressTimeIn2:	
   204  004D                     	ds	1
   205  004E                     F@ButtonPressTimeOut:	
   206  004E                     	ds	1
   207  004F                     F@LastKeysState:	
   208  004F                     	ds	1
   209  0050                     F@long_press:	
   210  0050                     	ds	1
   211  0051                     _DigitNumber:	
   212  0051                     	ds	1
   213  0052                     _KeyCode:	
   214  0052                     	ds	1
   215  0053                     _PowerBlocked:	
   216  0053                     	ds	1
   217  0054                     _digitemp:	
   218  0054                     	ds	1
   219  0055                     _digitnum:	
   220  0055                     	ds	1
   221  0056                     _sign:	
   222  0056                     	ds	1
   223  0057                     _temp_drob:	
   224  0057                     	ds	1
   225  0058                     _temperature:	
   226  0058                     	ds	1
   227                           
   228                           	psect	bitbssBANK0
   229  02C8                     __pbitbssBANK0:	
   230  02C8                     INIT@b:	
   231  02C8                     	ds	1
   232  02C9                     _Broadcasting:	
   233  02C9                     	ds	1
   234  02CA                     _endInterrupt:	
   235  02CA                     	ds	1
   236                           
   237                           	psect	bssBANK1
   238  00CD                     __pbssBANK1:	
   239  00CD                     _digits:	
   240  00CD                     	ds	3
   241  00D0                     _digits_0:	
   242  00D0                     	ds	3
   243  00D3                     F@KeyTimeCounter:	
   244  00D3                     	ds	2
   245                           
   246                           	psect	dataBANK1
   247  00BC                     __pdataBANK1:	
   248  00BC                     _DS_ReadData:	
   249  00BC                     	ds	9
   250  00C5                     _DS_Address:	
   251  00C5                     	ds	8
   252                           
   253                           	psect	clrtext
   254  07BD                     clear_ram0:	
   255                           ;	Called with FSR containing the base address, and
   256                           ;	W with the last address+1
   257                           
   258  07BD  0064               	clrwdt	;clear the watchdog before getting into this loop
   259  07BE                     clrloop0:	
   260  07BE  0180               	clrf	0	;clear RAM location pointed to by FSR
   261  07BF  0A84               	incf	4,f	;increment pointer
   262  07C0  0604               	xorwf	4,w	;XOR with final address
   263  07C1  1903               	btfsc	3,2	;have we reached the end yet?
   264  07C2  3400               	retlw	0	;all done for this memory range, return
   265  07C3  0604               	xorwf	4,w	;XOR again to restore value
   266  07C4  2FBE               	goto	clrloop0	;do the next byte
   267                           
   268                           	psect	cstackBANK1
   269  00A0                     __pcstackBANK1:	
   270  00A0                     EditAddressMemory@CellsData:	
   271                           
   272                           ; 8 bytes @ 0x0
   273  00A0                     	ds	8
   274  00A8                     EditAddressMemory@CellsData_258:	
   275                           
   276                           ; 8 bytes @ 0x8
   277  00A8                     	ds	8
   278  00B0                     EditAddressMemory@CellsData_254:	
   279                           
   280                           ; 8 bytes @ 0x10
   281  00B0                     	ds	8
   282  00B8                     EditAddressMemory@i:	
   283                           
   284                           ; 1 bytes @ 0x18
   285  00B8                     	ds	1
   286  00B9                     EditAddressMemory@i_259:	
   287                           
   288                           ; 1 bytes @ 0x19
   289  00B9                     	ds	1
   290  00BA                     EditAddressMemory@CellIsEmpty:	
   291                           
   292                           ; 1 bytes @ 0x1A
   293  00BA                     	ds	1
   294  00BB                     EditAddressMemory@cell:	
   295                           
   296                           ; 1 bytes @ 0x1B
   297  00BB                     	ds	1
   298                           
   299                           	psect	cstackCOMMON
   300  0070                     __pcstackCOMMON:	
   301  0070                     ?_INIT:	
   302  0070                     ?i1_INIT:	
   303                           ; 1 bit 
   304                           
   305  0070                     ?_waitInterrupt:	
   306                           ; 1 bit 
   307                           
   308  0070                     ?_Reset_powerOnInterval:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?_refreshInd:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_clrInd:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_ShowError:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_convDig:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ??_convDig:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_EERD:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_TX:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_RX:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_get_temp_Async:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_F:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_indData:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_CellToInd:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_EditAddressMemory:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_Run_getTemp:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_main:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ??i1_INIT:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?i1_TX:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ??i1_TX:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?i1_RX:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??i1_RX:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?i1_calc_crc:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?___wmul:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     convDig@dig:	
   378                           ; 2 bytes @ 0x0
   379                           
   380  0070                     i1calc_crc@len:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ___wmul@multiplier:	
   384                           ; 1 bytes @ 0x0
   385                           
   386                           
   387                           ; 2 bytes @ 0x0
   388  0070                     	ds	1
   389  0071                     ??i1_calc_crc:	
   390  0071                     i1TX@cmd:	
   391                           ; 1 bytes @ 0x1
   392                           
   393  0071                     i1RX@d:	
   394                           ; 1 bytes @ 0x1
   395                           
   396  0071                     i1calc_crc@mas:	
   397                           ; 1 bytes @ 0x1
   398                           
   399                           
   400                           ; 1 bytes @ 0x1
   401  0071                     	ds	1
   402  0072                     i1TX@temp:	
   403  0072                     i1RX@i:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     i1calc_crc@dat:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     ___wmul@multiplicand:	
   410                           ; 1 bytes @ 0x2
   411                           
   412                           
   413                           ; 2 bytes @ 0x2
   414  0072                     	ds	1
   415  0073                     i1TX@i:	
   416  0073                     i1calc_crc@fb:	
   417                           ; 1 bytes @ 0x3
   418                           
   419                           
   420                           ; 1 bytes @ 0x3
   421  0073                     	ds	1
   422  0074                     ??___wmul:	
   423  0074                     i1calc_crc@i:	
   424                           ; 1 bytes @ 0x4
   425                           
   426  0074                     ___wmul@product:	
   427                           ; 1 bytes @ 0x4
   428                           
   429                           
   430                           ; 2 bytes @ 0x4
   431  0074                     	ds	1
   432  0075                     i1calc_crc@crc:	
   433                           
   434                           ; 1 bytes @ 0x5
   435  0075                     	ds	1
   436  0076                     ?i1___awdiv:	
   437  0076                     i1___awdiv@divisor:	
   438                           ; 2 bytes @ 0x6
   439                           
   440                           
   441                           ; 2 bytes @ 0x6
   442  0076                     	ds	2
   443  0078                     i1___awdiv@dividend:	
   444                           
   445                           ; 2 bytes @ 0x8
   446  0078                     	ds	2
   447  007A                     ??i1___awdiv:	
   448  007A                     i1___awdiv@counter:	
   449                           ; 1 bytes @ 0xA
   450                           
   451                           
   452                           ; 1 bytes @ 0xA
   453  007A                     	ds	1
   454  007B                     i1___awdiv@sign:	
   455                           
   456                           ; 1 bytes @ 0xB
   457  007B                     	ds	1
   458  007C                     i1___awdiv@quotient:	
   459                           
   460                           ; 2 bytes @ 0xC
   461  007C                     	ds	2
   462                           
   463                           	psect	cstackBANK0
   464  0020                     __pcstackBANK0:	
   465  0020                     ??_get_temp_Async:	
   466                           
   467                           ; 1 bytes @ 0x0
   468  0020                     	ds	2
   469  0022                     get_temp_Async@i:	
   470                           
   471                           ; 1 bytes @ 0x2
   472  0022                     	ds	1
   473  0023                     get_temp_Async@temp1:	
   474                           
   475                           ; 1 bytes @ 0x3
   476  0023                     	ds	1
   477  0024                     get_temp_Async@temp2:	
   478                           
   479                           ; 1 bytes @ 0x4
   480  0024                     	ds	1
   481  0025                     ??_F:	
   482                           
   483                           ; 1 bytes @ 0x5
   484  0025                     	ds	4
   485  0029                     F@dig:	
   486                           
   487                           ; 1 bytes @ 0x9
   488  0029                     	ds	1
   489  002A                     F@CurrentKeysState:	
   490                           
   491                           ; 1 bytes @ 0xA
   492  002A                     	ds	1
   493  002B                     ??_waitInterrupt:	
   494  002B                     ??_Reset_powerOnInterval:	
   495                           ; 1 bytes @ 0xB
   496                           
   497  002B                     ?_setPoint:	
   498                           ; 1 bytes @ 0xB
   499                           
   500  002B                     ??_refreshInd:	
   501                           ; 1 bytes @ 0xB
   502                           
   503  002B                     ??_clrInd:	
   504                           ; 1 bytes @ 0xB
   505                           
   506  002B                     ?_EEWR:	
   507                           ; 1 bytes @ 0xB
   508                           
   509  002B                     ??_EERD:	
   510                           ; 1 bytes @ 0xB
   511                           
   512  002B                     ??_INIT:	
   513                           ; 1 bytes @ 0xB
   514                           
   515  002B                     ??_TX:	
   516                           ; 1 bytes @ 0xB
   517                           
   518  002B                     ??_RX:	
   519                           ; 1 bytes @ 0xB
   520                           
   521  002B                     ?_calc_crc:	
   522                           ; 1 bytes @ 0xB
   523                           
   524  002B                     ??_Run_getTemp:	
   525                           ; 1 bytes @ 0xB
   526                           
   527  002B                     ?___lbdiv:	
   528                           ; 1 bytes @ 0xB
   529                           
   530  002B                     ?___lbmod:	
   531                           ; 1 bytes @ 0xB
   532                           
   533  002B                     ?___awdiv:	
   534                           ; 1 bytes @ 0xB
   535                           
   536  002B                     ?___awmod:	
   537                           ; 2 bytes @ 0xB
   538                           
   539  002B                     setPoint@value:	
   540                           ; 2 bytes @ 0xB
   541                           
   542  002B                     clrInd@a:	
   543                           ; 1 bytes @ 0xB
   544                           
   545  002B                     EEWR@data:	
   546                           ; 1 bytes @ 0xB
   547                           
   548  002B                     EERD@address:	
   549                           ; 1 bytes @ 0xB
   550                           
   551  002B                     calc_crc@len:	
   552                           ; 1 bytes @ 0xB
   553                           
   554  002B                     ___lbdiv@divisor:	
   555                           ; 1 bytes @ 0xB
   556                           
   557  002B                     ___lbmod@divisor:	
   558                           ; 1 bytes @ 0xB
   559                           
   560  002B                     ___awdiv@divisor:	
   561                           ; 1 bytes @ 0xB
   562                           
   563  002B                     ___awmod@divisor:	
   564                           ; 2 bytes @ 0xB
   565                           
   566                           
   567                           ; 2 bytes @ 0xB
   568  002B                     	ds	1
   569  002C                     ??_setPoint:	
   570  002C                     ??_EEWR:	
   571                           ; 1 bytes @ 0xC
   572                           
   573  002C                     ??_calc_crc:	
   574                           ; 1 bytes @ 0xC
   575                           
   576  002C                     ??___lbdiv:	
   577                           ; 1 bytes @ 0xC
   578                           
   579  002C                     ??___lbmod:	
   580                           ; 1 bytes @ 0xC
   581                           
   582  002C                     setPoint@dignum:	
   583                           ; 1 bytes @ 0xC
   584                           
   585  002C                     refreshInd@a:	
   586                           ; 1 bytes @ 0xC
   587                           
   588  002C                     EEWR@address:	
   589                           ; 1 bytes @ 0xC
   590                           
   591  002C                     EERD@INTCON_BUP:	
   592                           ; 1 bytes @ 0xC
   593                           
   594  002C                     TX@cmd:	
   595                           ; 1 bytes @ 0xC
   596                           
   597  002C                     RX@d:	
   598                           ; 1 bytes @ 0xC
   599                           
   600  002C                     calc_crc@dat:	
   601                           ; 1 bytes @ 0xC
   602                           
   603  002C                     ___lbdiv@dividend:	
   604                           ; 1 bytes @ 0xC
   605                           
   606                           
   607                           ; 1 bytes @ 0xC
   608  002C                     	ds	1
   609  002D                     EEWR@INTCON_BUP:	
   610  002D                     EERD@EEDATA_BUP:	
   611                           ; 1 bytes @ 0xD
   612                           
   613  002D                     TX@temp:	
   614                           ; 1 bytes @ 0xD
   615                           
   616  002D                     RX@i:	
   617                           ; 1 bytes @ 0xD
   618                           
   619  002D                     calc_crc@fb:	
   620                           ; 1 bytes @ 0xD
   621                           
   622  002D                     ___lbdiv@counter:	
   623                           ; 1 bytes @ 0xD
   624                           
   625  002D                     ___lbmod@dividend:	
   626                           ; 1 bytes @ 0xD
   627                           
   628  002D                     ___awdiv@dividend:	
   629                           ; 1 bytes @ 0xD
   630                           
   631  002D                     ___awmod@dividend:	
   632                           ; 2 bytes @ 0xD
   633                           
   634                           
   635                           ; 2 bytes @ 0xD
   636  002D                     	ds	1
   637  002E                     ?_FillArrayFromEEPROM:	
   638  002E                     ?_WriteArrayToEEPROM:	
   639                           ; 1 bytes @ 0xE
   640                           
   641  002E                     FillArrayFromEEPROM@address_start:	
   642                           ; 1 bytes @ 0xE
   643                           
   644  002E                     WriteArrayToEEPROM@address_start:	
   645                           ; 1 bytes @ 0xE
   646                           
   647  002E                     TX@i:	
   648                           ; 1 bytes @ 0xE
   649                           
   650  002E                     calc_crc@mas:	
   651                           ; 1 bytes @ 0xE
   652                           
   653  002E                     ___lbdiv@quotient:	
   654                           ; 1 bytes @ 0xE
   655                           
   656  002E                     ___lbmod@counter:	
   657                           ; 1 bytes @ 0xE
   658                           
   659                           
   660                           ; 1 bytes @ 0xE
   661  002E                     	ds	1
   662  002F                     ??___awdiv:	
   663  002F                     ??___awmod:	
   664                           ; 1 bytes @ 0xF
   665                           
   666  002F                     FillArrayFromEEPROM@quantity:	
   667                           ; 1 bytes @ 0xF
   668                           
   669  002F                     WriteArrayToEEPROM@quantity:	
   670                           ; 1 bytes @ 0xF
   671                           
   672  002F                     calc_crc@i:	
   673                           ; 1 bytes @ 0xF
   674                           
   675  002F                     ___awdiv@counter:	
   676                           ; 1 bytes @ 0xF
   677                           
   678  002F                     ___awmod@counter:	
   679                           ; 1 bytes @ 0xF
   680                           
   681  002F                     ___lbmod@rem:	
   682                           ; 1 bytes @ 0xF
   683                           
   684                           
   685                           ; 1 bytes @ 0xF
   686  002F                     	ds	1
   687  0030                     ??_FillArrayFromEEPROM:	
   688  0030                     ??_WriteArrayToEEPROM:	
   689                           ; 1 bytes @ 0x10
   690                           
   691  0030                     calc_crc@crc:	
   692                           ; 1 bytes @ 0x10
   693                           
   694  0030                     ___awdiv@sign:	
   695                           ; 1 bytes @ 0x10
   696                           
   697  0030                     ___awmod@sign:	
   698                           ; 1 bytes @ 0x10
   699                           
   700                           
   701                           ; 1 bytes @ 0x10
   702  0030                     	ds	1
   703  0031                     FillArrayFromEEPROM@container:	
   704  0031                     WriteArrayToEEPROM@container:	
   705                           ; 1 bytes @ 0x11
   706                           
   707  0031                     ___awdiv@quotient:	
   708                           ; 1 bytes @ 0x11
   709                           
   710                           
   711                           ; 2 bytes @ 0x11
   712  0031                     	ds	1
   713  0032                     FillArrayFromEEPROM@i:	
   714  0032                     WriteArrayToEEPROM@i:	
   715                           ; 1 bytes @ 0x12
   716                           
   717                           
   718                           ; 1 bytes @ 0x12
   719  0032                     	ds	1
   720  0033                     ?_setDigit:	
   721  0033                     ?_FindCell:	
   722                           ; 1 bytes @ 0x13
   723                           
   724  0033                     ?_ReadCell:	
   725                           ; 1 bytes @ 0x13
   726                           
   727  0033                     setDigit@data:	
   728                           ; 1 bytes @ 0x13
   729                           
   730  0033                     FindCell@previous:	
   731                           ; 1 bytes @ 0x13
   732                           
   733  0033                     ReadCell@CellsData:	
   734                           ; 1 bytes @ 0x13
   735                           
   736                           
   737                           ; 1 bytes @ 0x13
   738  0033                     	ds	1
   739  0034                     ??_setDigit:	
   740  0034                     ??_FindCell:	
   741                           ; 1 bytes @ 0x14
   742                           
   743  0034                     ReadCell@CellIsEmpty:	
   744                           ; 1 bytes @ 0x14
   745                           
   746  0034                     FindCell@CellsData:	
   747                           ; 1 bytes @ 0x14
   748                           
   749                           
   750                           ; 8 bytes @ 0x14
   751  0034                     	ds	1
   752  0035                     ??_ReadCell:	
   753                           
   754                           ; 1 bytes @ 0x15
   755  0035                     	ds	1
   756  0036                     setDigit@a:	
   757  0036                     ReadCell@cell:	
   758                           ; 1 bytes @ 0x16
   759                           
   760                           
   761                           ; 1 bytes @ 0x16
   762  0036                     	ds	1
   763  0037                     ??_ShowError:	
   764  0037                     ??_indData:	
   765                           ; 1 bytes @ 0x17
   766                           
   767  0037                     ??_CellToInd:	
   768                           ; 1 bytes @ 0x17
   769                           
   770  0037                     ReadCell@_CellIsEmpty:	
   771                           ; 1 bytes @ 0x17
   772                           
   773  0037                     CellToInd@cell:	
   774                           ; 1 bytes @ 0x17
   775                           
   776                           
   777                           ; 1 bytes @ 0x17
   778  0037                     	ds	1
   779  0038                     indData@v_239:	
   780  0038                     ReadCell@i:	
   781                           ; 1 bytes @ 0x18
   782                           
   783                           
   784                           ; 1 bytes @ 0x18
   785  0038                     	ds	1
   786  0039                     ??_EditAddressMemory:	
   787  0039                     indData@isPoint:	
   788                           ; 1 bytes @ 0x19
   789                           
   790                           
   791                           ; 1 bytes @ 0x19
   792  0039                     	ds	1
   793  003A                     indData@v:	
   794                           
   795                           ; 1 bytes @ 0x1A
   796  003A                     	ds	1
   797  003B                     indData@cd:	
   798                           
   799                           ; 1 bytes @ 0x1B
   800  003B                     	ds	1
   801  003C                     FindCell@addressNew:	
   802  003C                     indData@dN:	
   803                           ; 1 bytes @ 0x1C
   804                           
   805                           
   806                           ; 1 bytes @ 0x1C
   807  003C                     	ds	1
   808  003D                     FindCell@CellIsEmpty:	
   809                           
   810                           ; 1 bytes @ 0x1D
   811  003D                     	ds	1
   812  003E                     FindCell@addressStart:	
   813                           
   814                           ; 1 bytes @ 0x1E
   815  003E                     	ds	1
   816  003F                     FindCell@i:	
   817                           
   818                           ; 1 bytes @ 0x1F
   819  003F                     	ds	1
   820  0040                     FindCell@address:	
   821                           
   822                           ; 1 bytes @ 0x20
   823  0040                     	ds	1
   824  0041                     ??_main:	
   825                           
   826                           ; 1 bytes @ 0x21
   827  0041                     	ds	1
   828  0042                     _main$268:	
   829                           
   830                           ; 2 bytes @ 0x22
   831  0042                     	ds	2
   832  0044                     main@data_on_ind_delay:	
   833                           
   834                           ; 2 bytes @ 0x24
   835  0044                     	ds	2
   836  0046                     main@cell:	
   837                           
   838                           ; 1 bytes @ 0x26
   839  0046                     	ds	1
   840  0047                     main@address:	
   841                           
   842                           ; 1 bytes @ 0x27
   843  0047                     	ds	1
   844                           
   845                           	psect	maintext
   846  0121                     __pmaintext:	
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 732 in file "prog.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  data_on_ind_    2   36[BANK0 ] unsigned int 
   857 ;;  address         1   39[BANK0 ] unsigned char 
   858 ;;  cell            1   38[BANK0 ] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : B00/0
   865 ;;		On exit  : 300/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   868 ;;      Params:         0       0       0       0
   869 ;;      Locals:         0       6       0       0
   870 ;;      Temps:          0       1       0       0
   871 ;;      Totals:         0       7       0       0
   872 ;;Total ram usage:        7 bytes
   873 ;; Hardware stack levels required when called:    7
   874 ;; This function calls:
   875 ;;		_CellToInd
   876 ;;		_EditAddressMemory
   877 ;;		_FillArrayFromEEPROM
   878 ;;		_FindCell
   879 ;;		_INIT
   880 ;;		_Reset_powerOnInterval
   881 ;;		_Run_getTemp
   882 ;;		_ShowError
   883 ;;		_TX
   884 ;;		_clrInd
   885 ;;		_indData
   886 ;;		_refreshInd
   887 ;;		_setDigit
   888 ;;		_setPoint
   889 ;;		_waitInterrupt
   890 ;; This function is called by:
   891 ;;		Startup code after reset
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           
   896                           ;psect for function _main
   897  0121                     _main:	
   898                           
   899                           ;prog.c: 735: INTCON = 0;
   900                           
   901                           ;incstack = 0
   902                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   903  0121  018B               	clrf	11	;volatile
   904                           
   905                           ;prog.c: 736: OPTION_REG = 0b00000111;
   906  0122  3007               	movlw	7
   907  0123  1683               	bsf	3,5	;RP0=1, select bank1
   908  0124  0081               	movwf	1	;volatile
   909                           
   910                           ;prog.c: 737: TRISA = 0b00000110;
   911  0125  3006               	movlw	6
   912  0126  0085               	movwf	5	;volatile
   913                           
   914                           ;prog.c: 738: TRISB = 0b00000000;
   915  0127  0186               	clrf	6	;volatile
   916                           
   917                           ;prog.c: 739: PORTA = 0b00000000;
   918  0128  1283               	bcf	3,5	;RP0=0, select bank0
   919  0129  0185               	clrf	5	;volatile
   920                           
   921                           ;prog.c: 740: PORTB = 0b00000000;
   922  012A  0186               	clrf	6	;volatile
   923                           
   924                           ;prog.c: 741: TMR0 = TMR0_VALUE;
   925  012B  30EB               	movlw	235
   926  012C  0081               	movwf	1	;volatile
   927                           
   928                           ;prog.c: 742: T2CON = 0b00000100;
   929  012D  3004               	movlw	4
   930  012E  0092               	movwf	18	;volatile
   931                           
   932                           ;prog.c: 743: CMCON = 0b00000111;
   933  012F  3007               	movlw	7
   934  0130  009F               	movwf	31	;volatile
   935                           
   936                           ;prog.c: 744: INTCON = 0b10100000;
   937  0131  30A0               	movlw	160
   938  0132  008B               	movwf	11	;volatile
   939                           
   940                           ;prog.c: 746: Reset_powerOnInterval();
   941  0133  27C5               	fcall	_Reset_powerOnInterval
   942                           
   943                           ;prog.c: 748: clrInd();
   944  0134  27A6               	fcall	_clrInd
   945                           
   946                           ;prog.c: 749: setDigit(1, 32);
   947  0135  3020               	movlw	32
   948  0136  00B3               	movwf	setDigit@data
   949  0137  3001               	movlw	1
   950  0138  2736               	fcall	_setDigit
   951                           
   952                           ;prog.c: 750: setDigit(2, 32);
   953  0139  3020               	movlw	32
   954  013A  00B3               	movwf	setDigit@data
   955  013B  3002               	movlw	2
   956  013C  2736               	fcall	_setDigit
   957                           
   958                           ;prog.c: 751: setDigit(3, 32);
   959  013D  3020               	movlw	32
   960  013E  00B3               	movwf	setDigit@data
   961  013F  3003               	movlw	3
   962  0140  2736               	fcall	_setDigit
   963                           
   964                           ;prog.c: 753: refreshInd();
   965  0141  2748               	fcall	_refreshInd
   966                           
   967                           ;prog.c: 755: waitInterrupt();
   968  0142  27CB               	fcall	_waitInterrupt
   969                           
   970                           ;prog.c: 757: INIT();
   971  0143  2515               	fcall	_INIT
   972                           
   973                           ;prog.c: 758: waitInterrupt();
   974  0144  27CB               	fcall	_waitInterrupt
   975                           
   976                           ;prog.c: 759: TX(0xCC);
   977  0145  30CC               	movlw	204
   978  0146  2572               	fcall	_TX
   979                           
   980                           ;prog.c: 760: waitInterrupt();
   981  0147  27CB               	fcall	_waitInterrupt
   982                           
   983                           ;prog.c: 761: TX(0x44);
   984  0148  3044               	movlw	68
   985  0149  2572               	fcall	_TX
   986  014A  3080               	movlw	128
   987                           
   988                           ;prog.c: 763: unsigned char address = FindCell(((sizeof(DS_Address)) * 16), 0);
   989  014B  01B3               	clrf	FindCell@previous
   990  014C  2463               	fcall	_FindCell
   991  014D  00C7               	movwf	main@address
   992                           
   993                           ;prog.c: 764: Broadcasting = address == ((sizeof(DS_Address)) * 16);
   994  014E  3A80               	xorlw	128
   995  014F  1283               	bcf	3,5	;RP0=0, select bank0
   996  0150  1303               	bcf	3,6	;RP1=0, select bank0
   997  0151  1D03               	btfss	3,2
   998  0152  2955               	goto	L1
   999  0153  14D9               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1000  0154  2956               	goto	l4427
  1001  0155                     L1:	
  1002  0155  10D9               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1003  0156                     l4427:	
  1004                           
  1005                           ;prog.c: 766: unsigned char cell = 0;
  1006  0156  01C6               	clrf	main@cell
  1007                           
  1008                           ;prog.c: 768: if (!Broadcasting) {
  1009  0157  18D9               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1010  0158  295C               	goto	l4435
  1011                           
  1012                           ;prog.c: 769: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1013  0159  21F8               	fcall	PL14	;call to abstracted procedure
  1014  015A  275A               	fcall	_FillArrayFromEEPROM
  1015                           
  1016                           ;prog.c: 770: cell = address / (sizeof(DS_Address));
  1017  015B  21ED               	fcall	PL4	;call to abstracted procedure
  1018  015C                     l4435:	
  1019                           
  1020                           ;prog.c: 771: }
  1021                           ;prog.c: 773: unsigned int data_on_ind_delay = 0;
  1022  015C  01C4               	clrf	main@data_on_ind_delay
  1023  015D  01C5               	clrf	main@data_on_ind_delay+1
  1024  015E                     l4437:	
  1025                           
  1026                           ;prog.c: 775: Run_getTemp();
  1027  015E  276B               	fcall	_Run_getTemp
  1028  015F                     l4439:	
  1029                           
  1030                           ;prog.c: 779: if (KeyCode == 33) {
  1031  015F  3021               	movlw	33
  1032  0160  0652               	xorwf	_KeyCode,w	;volatile
  1033  0161  1D03               	btfss	3,2
  1034  0162  2975               	goto	l402
  1035                           
  1036                           ;prog.c: 780: KeyCode = 0;
  1037  0163  01D2               	clrf	_KeyCode	;volatile
  1038                           
  1039                           ;prog.c: 781: if (PowerBlocked != 1) {
  1040  0164  0353               	decf	_PowerBlocked,w
  1041  0165  1903               	btfsc	3,2
  1042  0166  2973               	goto	l4453
  1043  0167  3001               	movlw	1
  1044                           
  1045                           ;prog.c: 782: PowerBlocked = 1;
  1046  0168  01D3               	clrf	_PowerBlocked
  1047  0169  0AD3               	incf	_PowerBlocked,f
  1048  016A  01AB               	clrf	setPoint@value
  1049  016B  0AAB               	incf	setPoint@value,f
  1050  016C  277A               	fcall	_setPoint
  1051                           
  1052                           ;prog.c: 784: data_on_ind_delay = 10000;
  1053  016D  3010               	movlw	16
  1054  016E  00C4               	movwf	main@data_on_ind_delay
  1055  016F  3027               	movlw	39
  1056  0170  00C5               	movwf	main@data_on_ind_delay+1
  1057                           
  1058                           ;prog.c: 785: refreshInd();
  1059  0171  2748               	fcall	_refreshInd
  1060                           
  1061                           ;prog.c: 786: } else {
  1062  0172  29D6               	goto	l4515
  1063  0173                     l4453:	
  1064                           
  1065                           ;prog.c: 787: PowerBlocked = 0;
  1066  0173  01D3               	clrf	_PowerBlocked
  1067  0174  29D6               	goto	l4515
  1068  0175                     l402:	
  1069  0175  18D9               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1070  0176  297B               	goto	l4457
  1071  0177  301F               	movlw	31
  1072  0178  0652               	xorwf	_KeyCode,w	;volatile
  1073  0179  1903               	btfsc	3,2
  1074  017A  2983               	goto	l4461
  1075  017B                     l4457:	
  1076  017B  3020               	movlw	32
  1077  017C  0652               	xorwf	_KeyCode,w	;volatile
  1078  017D  1903               	btfsc	3,2
  1079  017E  2983               	goto	l4461
  1080  017F  3022               	movlw	34
  1081  0180  0652               	xorwf	_KeyCode,w	;volatile
  1082  0181  1D03               	btfss	3,2
  1083  0182  29A8               	goto	l4489
  1084  0183                     l4461:	
  1085                           
  1086                           ;prog.c: 790: Reset_powerOnInterval();
  1087  0183  27C5               	fcall	_Reset_powerOnInterval
  1088  0184  3022               	movlw	34
  1089                           
  1090                           ;prog.c: 791: getTemp_flags.ActiveProcess = 0;
  1091  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0186  13CB               	bcf	_getTemp_flags+3,7
  1093                           
  1094                           ;prog.c: 792: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1095  0187  0652               	xorwf	_KeyCode,w	;volatile
  1096  0188  1903               	btfsc	3,2
  1097  0189  2997               	goto	l4471
  1098  018A  0846               	movf	main@cell,w
  1099  018B  00C2               	movwf	_main$268
  1100  018C  01C3               	clrf	_main$268+1
  1101  018D  1003               	clrc
  1102  018E  0DC2               	rlf	_main$268,f
  1103  018F  0DC3               	rlf	_main$268+1,f
  1104  0190  1003               	clrc
  1105  0191  0DC2               	rlf	_main$268,f
  1106  0192  0DC3               	rlf	_main$268+1,f
  1107  0193  1003               	clrc
  1108  0194  0DC2               	rlf	_main$268,f
  1109  0195  0DC3               	rlf	_main$268+1,f
  1110  0196  299A               	goto	l4473
  1111  0197                     l4471:	
  1112  0197  3080               	movlw	128
  1113  0198  00C2               	movwf	_main$268
  1114  0199  01C3               	clrf	_main$268+1
  1115  019A                     l4473:	
  1116  019A  301F               	movlw	31
  1117  019B  0652               	xorwf	_KeyCode,w	;volatile
  1118  019C  1D03               	btfss	3,2
  1119  019D  29A0               	goto	u4520
  1120  019E  3001               	movlw	1
  1121  019F  29A1               	goto	u4530
  1122  01A0                     u4520:	
  1123  01A0  3000               	movlw	0
  1124  01A1                     u4530:	
  1125  01A1  00B3               	movwf	FindCell@previous
  1126  01A2  0842               	movf	_main$268,w
  1127  01A3  2463               	fcall	_FindCell
  1128  01A4  00C7               	movwf	main@address
  1129                           
  1130                           ;prog.c: 793: KeyCode = 0;
  1131  01A5  01D2               	clrf	_KeyCode	;volatile
  1132                           
  1133                           ;prog.c: 795: waitInterrupt();
  1134  01A6  27CB               	fcall	_waitInterrupt
  1135  01A7  29CC               	goto	l4505
  1136  01A8                     l4489:	
  1137                           ;prog.c: 804: } else if (KeyCode == 36) {
  1138                           
  1139                           ;prog.c: 799: CellToInd(cell);
  1140                           
  1141                           ;prog.c: 797: cell = address / (sizeof(DS_Address));
  1142                           
  1143                           ;prog.c: 796: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1144                           
  1145  01A8  3024               	movlw	36
  1146  01A9  0652               	xorwf	_KeyCode,w	;volatile
  1147  01AA  1D03               	btfss	3,2
  1148  01AB  29D6               	goto	l4515
  1149                           
  1150                           ;prog.c: 805: KeyCode = 0;
  1151  01AC  01D2               	clrf	_KeyCode	;volatile
  1152                           
  1153                           ;prog.c: 806: EditAddressMemory();
  1154  01AD  21FD               	fcall	_EditAddressMemory
  1155                           
  1156                           ;prog.c: 808: Reset_powerOnInterval();
  1157  01AE  27C5               	fcall	_Reset_powerOnInterval
  1158  01AF  3080               	movlw	128
  1159                           
  1160                           ;prog.c: 809: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1161  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1162  01B1  01B3               	clrf	FindCell@previous
  1163  01B2  2463               	fcall	_FindCell
  1164  01B3  00C7               	movwf	main@address
  1165                           
  1166                           ;prog.c: 810: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1167  01B4  3A80               	xorlw	128
  1168  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1169  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1170  01B7  1D03               	btfss	3,2
  1171  01B8  29BB               	goto	L2
  1172  01B9  14D9               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1173  01BA  29BC               	goto	l4501
  1174  01BB                     L2:	
  1175  01BB  10D9               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1176  01BC                     l4501:	
  1177                           
  1178                           ;prog.c: 811: if (Broadcasting) {
  1179  01BC  1CD9               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1180  01BD  29CC               	goto	l4505
  1181                           
  1182                           ;prog.c: 812: setDigit(1, 32);
  1183  01BE  3020               	movlw	32
  1184  01BF  00B3               	movwf	setDigit@data
  1185  01C0  3001               	movlw	1
  1186  01C1  2736               	fcall	_setDigit
  1187                           
  1188                           ;prog.c: 813: setDigit(2, 32);
  1189  01C2  3020               	movlw	32
  1190  01C3  00B3               	movwf	setDigit@data
  1191  01C4  3002               	movlw	2
  1192  01C5  2736               	fcall	_setDigit
  1193                           
  1194                           ;prog.c: 814: setDigit(3, 32);
  1195  01C6  3020               	movlw	32
  1196  01C7  00B3               	movwf	setDigit@data
  1197  01C8  3003               	movlw	3
  1198  01C9  2736               	fcall	_setDigit
  1199                           
  1200                           ;prog.c: 815: refreshInd();
  1201  01CA  2748               	fcall	_refreshInd
  1202                           
  1203                           ;prog.c: 816: } else {
  1204  01CB  29D6               	goto	l4515
  1205  01CC                     l4505:	
  1206                           
  1207                           ;prog.c: 817: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1208  01CC  21F8               	fcall	PL14	;call to abstracted procedure
  1209  01CD  275A               	fcall	_FillArrayFromEEPROM
  1210                           
  1211                           ;prog.c: 818: cell = address / (sizeof(DS_Address));
  1212  01CE  21ED               	fcall	PL4	;call to abstracted procedure
  1213                           
  1214                           ;prog.c: 820: CellToInd(cell);
  1215  01CF  0846               	movf	main@cell,w
  1216  01D0  2544               	fcall	_CellToInd
  1217                           
  1218                           ;prog.c: 800: data_on_ind_delay = 18000;
  1219  01D1  3050               	movlw	80
  1220  01D2  00C4               	movwf	main@data_on_ind_delay
  1221  01D3  3046               	movlw	70
  1222  01D4  00C5               	movwf	main@data_on_ind_delay+1
  1223                           
  1224                           ;prog.c: 802: Run_getTemp();
  1225  01D5  276B               	fcall	_Run_getTemp
  1226  01D6                     l4515:	
  1227                           
  1228                           ;prog.c: 823: }
  1229                           ;prog.c: 824: }
  1230                           ;prog.c: 826: if (getTemp_flags.Error) {
  1231  01D6  1F4B               	btfss	_getTemp_flags+3,6
  1232  01D7  29DA               	goto	l419
  1233                           
  1234                           ;prog.c: 827: ShowError();
  1235  01D8  2798               	fcall	_ShowError
  1236                           
  1237                           ;prog.c: 828: } else if (!getTemp_flags.ActiveProcess) {
  1238  01D9  29DE               	goto	l4521
  1239  01DA                     l419:	
  1240  01DA  1BCB               	btfsc	_getTemp_flags+3,7
  1241  01DB  29DE               	goto	l4521
  1242                           
  1243                           ;prog.c: 829: clrInd();
  1244  01DC  27A6               	fcall	_clrInd
  1245                           
  1246                           ;prog.c: 830: indData();
  1247  01DD  2365               	fcall	_indData
  1248  01DE                     l4521:	
  1249                           
  1250                           ;prog.c: 831: }
  1251                           ;prog.c: 833: if (data_on_ind_delay == 0) {
  1252  01DE  0844               	movf	main@data_on_ind_delay,w
  1253  01DF  0445               	iorwf	main@data_on_ind_delay+1,w
  1254  01E0  1D03               	btfss	3,2
  1255  01E1  29E4               	goto	l4525
  1256                           
  1257                           ;prog.c: 834: refreshInd();
  1258  01E2  2748               	fcall	_refreshInd
  1259                           
  1260                           ;prog.c: 835: } else {
  1261  01E3  29EA               	goto	l4527
  1262  01E4                     l4525:	
  1263                           
  1264                           ;prog.c: 836: data_on_ind_delay--;
  1265  01E4  3001               	movlw	1
  1266  01E5  02C4               	subwf	main@data_on_ind_delay,f
  1267  01E6  3000               	movlw	0
  1268  01E7  1C03               	skipc
  1269  01E8  03C5               	decf	main@data_on_ind_delay+1,f
  1270  01E9  02C5               	subwf	main@data_on_ind_delay+1,f
  1271  01EA                     l4527:	
  1272                           
  1273                           ;prog.c: 837: }
  1274                           ;prog.c: 839: if (!getTemp_flags.ActiveProcess) {
  1275  01EA  1FCB               	btfss	_getTemp_flags+3,7
  1276  01EB  295E               	goto	l4437
  1277  01EC  295F               	goto	l4439
  1278  01ED                     __end_of_main:	
  1279  01ED                     PL4:	
  1280  01ED  0847               	movf	main@address,w
  1281  01EE  00C1               	movwf	??_main
  1282  01EF  1003               	clrc
  1283  01F0  0CC1               	rrf	??_main,f
  1284  01F1  1003               	clrc
  1285  01F2  0CC1               	rrf	??_main,f
  1286  01F3  1003               	clrc
  1287  01F4  0CC1               	rrf	??_main,f
  1288  01F5  0841               	movf	??_main,w
  1289  01F6  00C6               	movwf	main@cell
  1290  01F7  0008               	return
  1291  01F8                     __end_ofPL4:	
  1292  01F8                     PL14:	
  1293  01F8  0847               	movf	main@address,w
  1294  01F9  00AE               	movwf	FillArrayFromEEPROM@address_start
  1295  01FA  3008               	movlw	8
  1296  01FB  00AF               	movwf	FillArrayFromEEPROM@quantity
  1297  01FC  34C5               	retlw	(low (_DS_Address| 0))& (0+255)
  1298  01FD                     __end_ofPL14:	
  1299                           
  1300                           	psect	text1
  1301  0365                     __ptext1:	
  1302 ;; *************** function _indData *****************
  1303 ;; Defined at:
  1304 ;;		line 570 in file "prog.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  v               1   24[BANK0 ] unsigned char 
  1309 ;;  v               1   26[BANK0 ] unsigned char 
  1310 ;;  dN              1   28[BANK0 ] unsigned char 
  1311 ;;  cd              1   27[BANK0 ] unsigned char 
  1312 ;;  isPoint         1   25[BANK0 ] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : B00/0
  1319 ;;		On exit  : 300/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1322 ;;      Params:         0       0       0       0
  1323 ;;      Locals:         0       5       0       0
  1324 ;;      Temps:          0       1       0       0
  1325 ;;      Totals:         0       6       0       0
  1326 ;;Total ram usage:        6 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    4
  1329 ;; This function calls:
  1330 ;;		___lbdiv
  1331 ;;		___lbmod
  1332 ;;		_setDigit
  1333 ;;		_setPoint
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function _indData
  1341  0365                     _indData:	
  1342                           
  1343                           ;prog.c: 572: unsigned char cd = 3;
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1347  0365  3003               	movlw	3
  1348  0366  00BB               	movwf	indData@cd
  1349                           
  1350                           ;prog.c: 573: unsigned char dN = 3;
  1351  0367  00BC               	movwf	indData@dN
  1352                           
  1353                           ;prog.c: 575: if (sign != 0) {
  1354  0368  0856               	movf	_sign,w
  1355  0369  1903               	btfsc	3,2
  1356  036A  2B71               	goto	l4105
  1357                           
  1358                           ;prog.c: 576: setDigit(cd, 32);
  1359  036B  3020               	movlw	32
  1360  036C  00B3               	movwf	setDigit@data
  1361  036D  3003               	movlw	3
  1362  036E  2736               	fcall	_setDigit
  1363                           
  1364                           ;prog.c: 577: cd--;
  1365  036F  03BB               	decf	indData@cd,f
  1366                           
  1367                           ;prog.c: 578: dN--;
  1368  0370  03BC               	decf	indData@dN,f
  1369  0371                     l4105:	
  1370                           
  1371                           ;prog.c: 579: }
  1372                           ;prog.c: 580: unsigned char isPoint = 0;
  1373  0371  01B9               	clrf	indData@isPoint
  1374  0372                     l4107:	
  1375                           
  1376                           ;prog.c: 582: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1377  0372  3064               	movlw	100
  1378  0373  0258               	subwf	_temperature,w
  1379  0374  1C03               	btfss	3,0
  1380  0375  2B78               	goto	u3900
  1381  0376  3001               	movlw	1
  1382  0377  2B79               	goto	u3910
  1383  0378                     u3900:	
  1384  0378  3000               	movlw	0
  1385  0379                     u3910:	
  1386  0379  00B7               	movwf	??_indData
  1387  037A  300A               	movlw	10
  1388  037B  0258               	subwf	_temperature,w
  1389  037C  1C03               	btfss	3,0
  1390  037D  2B80               	goto	u3920
  1391  037E  3001               	movlw	1
  1392  037F  2B81               	goto	u3930
  1393  0380                     u3920:	
  1394  0380  3000               	movlw	0
  1395  0381                     u3930:	
  1396  0381  0737               	addwf	??_indData,w
  1397  0382  00BA               	movwf	indData@v
  1398                           
  1399                           ;prog.c: 583: setDigit(cd - v, temperature % 10);
  1400  0383  300A               	movlw	10
  1401  0384  00AB               	movwf	___lbmod@divisor
  1402  0385  0858               	movf	_temperature,w
  1403  0386  26BB               	fcall	___lbmod
  1404  0387  00B3               	movwf	setDigit@data
  1405  0388  083A               	movf	indData@v,w
  1406  0389  023B               	subwf	indData@cd,w
  1407  038A  2736               	fcall	_setDigit
  1408                           
  1409                           ;prog.c: 584: if (!isPoint) {
  1410  038B  0839               	movf	indData@isPoint,w
  1411  038C  1D03               	btfss	3,2
  1412  038D  2B95               	goto	l4117
  1413                           
  1414                           ;prog.c: 585: setPoint(cd - v, 1);
  1415  038E  01AB               	clrf	setPoint@value
  1416  038F  0AAB               	incf	setPoint@value,f
  1417  0390  083A               	movf	indData@v,w
  1418  0391  023B               	subwf	indData@cd,w
  1419  0392  277A               	fcall	_setPoint
  1420                           
  1421                           ;prog.c: 586: isPoint = 1;
  1422  0393  01B9               	clrf	indData@isPoint
  1423  0394  0AB9               	incf	indData@isPoint,f
  1424  0395                     l4117:	
  1425                           
  1426                           ;prog.c: 587: }
  1427                           ;prog.c: 588: temperature /= 10;
  1428  0395  300A               	movlw	10
  1429  0396  00AB               	movwf	___lbdiv@divisor
  1430  0397  0858               	movf	_temperature,w
  1431  0398  26D7               	fcall	___lbdiv
  1432  0399  00D8               	movwf	_temperature
  1433                           
  1434                           ;prog.c: 589: dN--;
  1435  039A  03BC               	decf	indData@dN,f
  1436                           
  1437                           ;prog.c: 590: } while (temperature > 0);
  1438  039B  0858               	movf	_temperature,w
  1439  039C  1D03               	btfss	3,2
  1440  039D  2B72               	goto	l4107
  1441                           
  1442                           ;prog.c: 592: if (dN > 0) {
  1443  039E  083C               	movf	indData@dN,w
  1444  039F  1903               	btfsc	3,2
  1445  03A0  2BD5               	goto	l4149
  1446                           
  1447                           ;prog.c: 593: cd = dN;
  1448  03A1  083C               	movf	indData@dN,w
  1449  03A2  00BB               	movwf	indData@cd
  1450                           
  1451                           ;prog.c: 594: if (temp_drob > 99) temp_drob /= 10;
  1452  03A3  3064               	movlw	100
  1453  03A4  0257               	subwf	_temp_drob,w
  1454  03A5  300A               	movlw	10
  1455  03A6  1C03               	skipc
  1456  03A7  2BAD               	goto	L3
  1457  03A8  00AB               	movwf	___lbdiv@divisor
  1458  03A9  0857               	movf	_temp_drob,w
  1459  03AA  26D7               	fcall	___lbdiv
  1460  03AB  00D7               	movwf	_temp_drob
  1461                           
  1462                           ;prog.c: 595: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1463  03AC  300A               	movlw	10
  1464  03AD                     L3:	
  1465  03AD  0257               	subwf	_temp_drob,w
  1466  03AE  1C03               	skipc
  1467  03AF  2BB7               	goto	l4135
  1468  03B0  0B3C               	decfsz	indData@dN,w
  1469  03B1  2BB7               	goto	l4135
  1470  03B2  300A               	movlw	10
  1471  03B3  00AB               	movwf	___lbdiv@divisor
  1472  03B4  0857               	movf	_temp_drob,w
  1473  03B5  26D7               	fcall	___lbdiv
  1474  03B6  00D7               	movwf	_temp_drob
  1475  03B7                     l4135:	
  1476                           
  1477                           ;prog.c: 597: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1478  03B7  300A               	movlw	10
  1479  03B8  0257               	subwf	_temp_drob,w
  1480  03B9  1C03               	btfss	3,0
  1481  03BA  2BBD               	goto	u4000
  1482  03BB  3001               	movlw	1
  1483  03BC  2BBE               	goto	u4010
  1484  03BD                     u4000:	
  1485  03BD  3000               	movlw	0
  1486  03BE                     u4010:	
  1487  03BE  00B8               	movwf	indData@v_239
  1488                           
  1489                           ;prog.c: 598: setDigit(cd - v, temp_drob % 10);
  1490  03BF  300A               	movlw	10
  1491  03C0  00AB               	movwf	___lbmod@divisor
  1492  03C1  0857               	movf	_temp_drob,w
  1493  03C2  26BB               	fcall	___lbmod
  1494  03C3  00B3               	movwf	setDigit@data
  1495  03C4  0838               	movf	indData@v_239,w
  1496  03C5  023B               	subwf	indData@cd,w
  1497  03C6  2736               	fcall	_setDigit
  1498                           
  1499                           ;prog.c: 599: temp_drob /= 10;
  1500  03C7  300A               	movlw	10
  1501  03C8  00AB               	movwf	___lbdiv@divisor
  1502  03C9  0857               	movf	_temp_drob,w
  1503  03CA  26D7               	fcall	___lbdiv
  1504  03CB  00D7               	movwf	_temp_drob
  1505                           
  1506                           ;prog.c: 600: dN--;
  1507  03CC  03BC               	decf	indData@dN,f
  1508                           
  1509                           ;prog.c: 601: } while (temp_drob > 0);
  1510  03CD  0857               	movf	_temp_drob,w
  1511  03CE  1903               	btfsc	3,2
  1512  03CF  2BD5               	goto	l4149
  1513  03D0  2BB7               	goto	l4135
  1514  03D1                     l4145:	
  1515                           
  1516                           ;prog.c: 605: setDigit(dN, 0);
  1517  03D1  01B3               	clrf	setDigit@data
  1518  03D2  083C               	movf	indData@dN,w
  1519  03D3  2736               	fcall	_setDigit
  1520                           
  1521                           ;prog.c: 606: dN--;
  1522  03D4  03BC               	decf	indData@dN,f
  1523  03D5                     l4149:	
  1524  03D5  083C               	movf	indData@dN,w
  1525  03D6  1903               	btfsc	3,2
  1526  03D7  0008               	return
  1527  03D8  2BD1               	goto	l4145
  1528  03D9                     __end_of_indData:	
  1529                           
  1530                           	psect	text2
  1531  06BB                     __ptext2:	
  1532 ;; *************** function ___lbmod *****************
  1533 ;; Defined at:
  1534 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  dividend        1    wreg     unsigned char 
  1537 ;;  divisor         1   11[BANK0 ] unsigned char 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  dividend        1   13[BANK0 ] unsigned char 
  1540 ;;  rem             1   15[BANK0 ] unsigned char 
  1541 ;;  counter         1   14[BANK0 ] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      unsigned char 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0
  1546 ;; Tracked objects:
  1547 ;;		On entry : 300/0
  1548 ;;		On exit  : 300/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1551 ;;      Params:         0       1       0       0
  1552 ;;      Locals:         0       3       0       0
  1553 ;;      Temps:          0       1       0       0
  1554 ;;      Totals:         0       5       0       0
  1555 ;;Total ram usage:        5 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    3
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_indData
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           
  1566                           ;psect for function ___lbmod
  1567  06BB                     ___lbmod:	
  1568                           
  1569                           ;incstack = 0
  1570                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1571                           ;___lbmod@dividend stored from wreg
  1572  06BB  00AD               	movwf	___lbmod@dividend
  1573  06BC  3008               	movlw	8
  1574  06BD  00AE               	movwf	___lbmod@counter
  1575  06BE  01AF               	clrf	___lbmod@rem
  1576  06BF                     l2709:	
  1577  06BF  082D               	movf	___lbmod@dividend,w
  1578  06C0  00AC               	movwf	??___lbmod
  1579  06C1  3007               	movlw	7
  1580  06C2  1003               	clrc
  1581  06C3                     L4:	
  1582  06C3  0CAC               	rrf	??___lbmod,f
  1583  06C4  3EFF               	addlw	-1
  1584  06C5  1003               	clrc
  1585  06C6  1D03               	skipz
  1586  06C7  2EC3               	goto	L4
  1587  06C8  0D2F               	rlf	___lbmod@rem,w
  1588  06C9  042C               	iorwf	??___lbmod,w
  1589  06CA  00AF               	movwf	___lbmod@rem
  1590  06CB  1003               	clrc
  1591  06CC  0DAD               	rlf	___lbmod@dividend,f
  1592  06CD  082B               	movf	___lbmod@divisor,w
  1593  06CE  022F               	subwf	___lbmod@rem,w
  1594  06CF  1C03               	skipc
  1595  06D0  2ED3               	goto	l2717
  1596  06D1  082B               	movf	___lbmod@divisor,w
  1597  06D2  02AF               	subwf	___lbmod@rem,f
  1598  06D3                     l2717:	
  1599  06D3  0BAE               	decfsz	___lbmod@counter,f
  1600  06D4  2EBF               	goto	l2709
  1601  06D5  082F               	movf	___lbmod@rem,w
  1602  06D6  0008               	return
  1603  06D7                     __end_of___lbmod:	
  1604                           
  1605                           	psect	text3
  1606  06D7                     __ptext3:	
  1607 ;; *************** function ___lbdiv *****************
  1608 ;; Defined at:
  1609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  dividend        1    wreg     unsigned char 
  1612 ;;  divisor         1   11[BANK0 ] unsigned char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  dividend        1   12[BANK0 ] unsigned char 
  1615 ;;  quotient        1   14[BANK0 ] unsigned char 
  1616 ;;  counter         1   13[BANK0 ] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      unsigned char 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0
  1621 ;; Tracked objects:
  1622 ;;		On entry : 300/0
  1623 ;;		On exit  : 300/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1626 ;;      Params:         0       1       0       0
  1627 ;;      Locals:         0       3       0       0
  1628 ;;      Temps:          0       0       0       0
  1629 ;;      Totals:         0       4       0       0
  1630 ;;Total ram usage:        4 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    3
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_indData
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function ___lbdiv
  1642  06D7                     ___lbdiv:	
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1646                           ;___lbdiv@dividend stored from wreg
  1647  06D7  00AC               	movwf	___lbdiv@dividend
  1648  06D8  01AE               	clrf	___lbdiv@quotient
  1649  06D9  082B               	movf	___lbdiv@divisor,w
  1650  06DA  1903               	btfsc	3,2
  1651  06DB  2EF0               	goto	l2701
  1652  06DC  01AD               	clrf	___lbdiv@counter
  1653  06DD                     l2687:	
  1654  06DD  0AAD               	incf	___lbdiv@counter,f
  1655  06DE  1BAB               	btfsc	___lbdiv@divisor,7
  1656  06DF  2EE3               	goto	l798
  1657  06E0  1003               	clrc
  1658  06E1  0DAB               	rlf	___lbdiv@divisor,f
  1659  06E2  2EDD               	goto	l2687
  1660  06E3                     l798:	
  1661  06E3  1003               	clrc
  1662  06E4  0DAE               	rlf	___lbdiv@quotient,f
  1663  06E5  082B               	movf	___lbdiv@divisor,w
  1664  06E6  022C               	subwf	___lbdiv@dividend,w
  1665  06E7  1C03               	skipc
  1666  06E8  2EED               	goto	L5
  1667  06E9  082B               	movf	___lbdiv@divisor,w
  1668  06EA  02AC               	subwf	___lbdiv@dividend,f
  1669  06EB  142E               	bsf	___lbdiv@quotient,0
  1670  06EC  1003               	clrc
  1671  06ED                     L5:	
  1672  06ED  0CAB               	rrf	___lbdiv@divisor,f
  1673  06EE  0BAD               	decfsz	___lbdiv@counter,f
  1674  06EF  2EE3               	goto	l798
  1675  06F0                     l2701:	
  1676  06F0  082E               	movf	___lbdiv@quotient,w
  1677  06F1  0008               	return
  1678  06F2                     __end_of___lbdiv:	
  1679                           
  1680                           	psect	text4
  1681  076B                     __ptext4:	
  1682 ;; *************** function _Run_getTemp *****************
  1683 ;; Defined at:
  1684 ;;		line 716 in file "prog.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0
  1693 ;; Tracked objects:
  1694 ;;		On entry : 300/0
  1695 ;;		On exit  : 300/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1698 ;;      Params:         0       0       0       0
  1699 ;;      Locals:         0       0       0       0
  1700 ;;      Temps:          0       0       0       0
  1701 ;;      Totals:         0       0       0       0
  1702 ;;Total ram usage:        0 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    3
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           
  1713                           ;psect for function _Run_getTemp
  1714  076B                     _Run_getTemp:	
  1715  076B  30C3               	movlw	-61
  1716                           
  1717                           ;prog.c: 718: getTemp_flags.Init = 1;
  1718                           
  1719                           ;incstack = 0
  1720                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1721  076C  1448               	bsf	_getTemp_flags,0
  1722                           
  1723                           ;prog.c: 719: getTemp_flags.Send_Address = 1;
  1724  076D  14C8               	bsf	_getTemp_flags,1
  1725                           
  1726                           ;prog.c: 720: getTemp_flags.CountAddressBytes = 0;
  1727  076E  05C8               	andwf	_getTemp_flags,f
  1728  076F  3078               	movlw	120
  1729                           
  1730                           ;prog.c: 721: getTemp_flags.SendConvertTemp = 1;
  1731  0770  1748               	bsf	_getTemp_flags,6
  1732                           
  1733                           ;prog.c: 722: getTemp_flags.PauseValue = 120;
  1734  0771  00C9               	movwf	_getTemp_flags+1
  1735  0772  30C3               	movlw	-61
  1736  0773  01CA               	clrf	_getTemp_flags+2
  1737                           
  1738                           ;prog.c: 723: getTemp_flags.SendGetTemp = 1;
  1739  0774  144B               	bsf	_getTemp_flags+3,0
  1740                           
  1741                           ;prog.c: 724: getTemp_flags.ReadData = 1;
  1742  0775  14CB               	bsf	_getTemp_flags+3,1
  1743                           
  1744                           ;prog.c: 725: getTemp_flags.CountDataBytes = 0;
  1745  0776  05CB               	andwf	_getTemp_flags+3,f
  1746                           
  1747                           ;prog.c: 726: getTemp_flags.Error = 0;
  1748  0777  134B               	bcf	_getTemp_flags+3,6
  1749                           
  1750                           ;prog.c: 728: getTemp_flags.ActiveProcess = 1;
  1751  0778  17CB               	bsf	_getTemp_flags+3,7
  1752  0779  0008               	return
  1753  077A                     __end_of_Run_getTemp:	
  1754                           
  1755                           	psect	text5
  1756  07C5                     __ptext5:	
  1757 ;; *************** function _Reset_powerOnInterval *****************
  1758 ;; Defined at:
  1759 ;;		line 83 in file "prog.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg
  1768 ;; Tracked objects:
  1769 ;;		On entry : 300/0
  1770 ;;		On exit  : 300/100
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1773 ;;      Params:         0       0       0       0
  1774 ;;      Locals:         0       0       0       0
  1775 ;;      Temps:          0       0       0       0
  1776 ;;      Totals:         0       0       0       0
  1777 ;;Total ram usage:        0 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    3
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function _Reset_powerOnInterval
  1789  07C5                     _Reset_powerOnInterval:	
  1790                           
  1791                           ;prog.c: 84: powerOnInterval = 700;
  1792                           
  1793                           ;incstack = 0
  1794                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1795  07C5  30BC               	movlw	188
  1796  07C6  1683               	bsf	3,5	;RP0=1, select bank1
  1797  07C7  00D5               	movwf	_powerOnInterval^(0+128)
  1798  07C8  3002               	movlw	2
  1799  07C9  00D6               	movwf	(_powerOnInterval^(0+128)+1)
  1800  07CA  0008               	return
  1801  07CB                     __end_of_Reset_powerOnInterval:	
  1802                           
  1803                           	psect	text6
  1804  0463                     __ptext6:	
  1805 ;; *************** function _FindCell *****************
  1806 ;; Defined at:
  1807 ;;		line 437 in file "prog.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  addressStart    1    wreg     unsigned char 
  1810 ;;  previous        1   19[BANK0 ] unsigned char 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  addressStart    1   30[BANK0 ] unsigned char 
  1813 ;;  i               1   31[BANK0 ] unsigned char 
  1814 ;;  CellsData       8   20[BANK0 ] unsigned char [8]
  1815 ;;  CellIsEmpty     1   29[BANK0 ] unsigned char 
  1816 ;;  address         1   32[BANK0 ] unsigned char 
  1817 ;;  addressNew      1   28[BANK0 ] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      unsigned char 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 300/0
  1824 ;;		On exit  : B00/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1827 ;;      Params:         0       1       0       0
  1828 ;;      Locals:         0      13       0       0
  1829 ;;      Temps:          0       0       0       0
  1830 ;;      Totals:         0      14       0       0
  1831 ;;Total ram usage:       14 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    5
  1834 ;; This function calls:
  1835 ;;		_FillArrayFromEEPROM
  1836 ;;		_waitInterrupt
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           
  1843                           ;psect for function _FindCell
  1844  0463                     _FindCell:	
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1848                           ;FindCell@addressStart stored from wreg
  1849  0463  00BE               	movwf	FindCell@addressStart
  1850                           
  1851                           ;prog.c: 438: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1852  0464  3A80               	xorlw	128
  1853  0465  1D03               	btfss	3,2
  1854  0466  2C6E               	goto	l273
  1855                           
  1856                           ;prog.c: 439: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1857  0467  0833               	movf	FindCell@previous,w
  1858  0468  1903               	btfsc	3,2
  1859  0469  2C6C               	goto	l4049
  1860  046A  01BE               	clrf	FindCell@addressStart
  1861  046B  2C6E               	goto	l273
  1862  046C                     l4049:	
  1863  046C  3078               	movlw	120
  1864  046D  00BE               	movwf	FindCell@addressStart
  1865  046E                     l273:	
  1866                           
  1867                           ;prog.c: 440: }
  1868                           ;prog.c: 441: unsigned char address = addressStart;
  1869  046E  083E               	movf	FindCell@addressStart,w
  1870  046F  00C0               	movwf	FindCell@address
  1871                           
  1872                           ;prog.c: 442: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  1873  0470  3080               	movlw	128
  1874  0471  00BC               	movwf	FindCell@addressNew
  1875  0472                     l4051:	
  1876                           
  1877                           ;prog.c: 445: if (!previous) {
  1878  0472  0833               	movf	FindCell@previous,w
  1879  0473  1D03               	btfss	3,2
  1880  0474  2C7E               	goto	l4059
  1881                           
  1882                           ;prog.c: 446: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  1883  0475  3078               	movlw	120
  1884  0476  0640               	xorwf	FindCell@address,w
  1885  0477  1D03               	btfss	3,2
  1886  0478  2C7B               	goto	l4057
  1887  0479  01C0               	clrf	FindCell@address
  1888  047A  2C86               	goto	l4065
  1889  047B                     l4057:	
  1890  047B  3008               	movlw	8
  1891  047C  07C0               	addwf	FindCell@address,f
  1892  047D  2C86               	goto	l4065
  1893  047E                     l4059:	
  1894                           
  1895                           ;prog.c: 448: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  1896  047E  0840               	movf	FindCell@address,w
  1897  047F  1D03               	btfss	3,2
  1898  0480  2C84               	goto	l4063
  1899  0481  3078               	movlw	120
  1900  0482  00C0               	movwf	FindCell@address
  1901  0483  2C86               	goto	l4065
  1902  0484                     l4063:	
  1903  0484  3008               	movlw	8
  1904  0485  02C0               	subwf	FindCell@address,f
  1905  0486                     l4065:	
  1906                           
  1907                           ;prog.c: 449: }
  1908                           ;prog.c: 451: unsigned char CellsData [(sizeof(DS_Address))];
  1909                           ;prog.c: 452: waitInterrupt();
  1910  0486  27CB               	fcall	_waitInterrupt
  1911                           
  1912                           ;prog.c: 453: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  1913  0487  0840               	movf	FindCell@address,w
  1914  0488  00AE               	movwf	FillArrayFromEEPROM@address_start
  1915  0489  3008               	movlw	8
  1916  048A  00AF               	movwf	FillArrayFromEEPROM@quantity
  1917  048B  3034               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  1918  048C  275A               	fcall	_FillArrayFromEEPROM
  1919                           
  1920                           ;prog.c: 454: unsigned char CellIsEmpty = 1;
  1921  048D  01BD               	clrf	FindCell@CellIsEmpty
  1922  048E  0ABD               	incf	FindCell@CellIsEmpty,f
  1923                           
  1924                           ;prog.c: 455: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  1925  048F  01BF               	clrf	FindCell@i
  1926  0490                     l4077:	
  1927                           
  1928                           ;prog.c: 456: if (CellsData[i] != 0xFF) {
  1929  0490  083F               	movf	FindCell@i,w
  1930  0491  3E34               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  1931  0492  0084               	movwf	4
  1932  0493  1383               	bcf	3,7	;select IRP bank0
  1933  0494  0F00               	incfsz	0,w
  1934                           
  1935                           ;prog.c: 457: CellIsEmpty = 0;
  1936  0495  01BD               	clrf	FindCell@CellIsEmpty
  1937  0496  3008               	movlw	8
  1938  0497  0ABF               	incf	FindCell@i,f
  1939  0498  023F               	subwf	FindCell@i,w
  1940  0499  1C03               	skipc
  1941  049A  2C90               	goto	l4077
  1942                           
  1943                           ;prog.c: 458: }
  1944                           ;prog.c: 459: }
  1945                           ;prog.c: 461: if (CellIsEmpty == 0) {
  1946  049B  083D               	movf	FindCell@CellIsEmpty,w
  1947  049C  1D03               	btfss	3,2
  1948  049D  2CA1               	goto	l4089
  1949                           
  1950                           ;prog.c: 462: addressNew = address;
  1951  049E  0840               	movf	FindCell@address,w
  1952  049F  00BC               	movwf	FindCell@addressNew
  1953                           
  1954                           ;prog.c: 463: break;
  1955  04A0  2CA5               	goto	l4091
  1956  04A1                     l4089:	
  1957                           
  1958                           ;prog.c: 464: }
  1959                           ;prog.c: 465: } while (address != addressStart);
  1960  04A1  0840               	movf	FindCell@address,w
  1961  04A2  063E               	xorwf	FindCell@addressStart,w
  1962  04A3  1D03               	skipz
  1963  04A4  2C72               	goto	l4051
  1964  04A5                     l4091:	
  1965                           
  1966                           ;prog.c: 466: return addressNew;
  1967  04A5  083C               	movf	FindCell@addressNew,w
  1968  04A6  0008               	return
  1969  04A7                     __end_of_FindCell:	
  1970                           
  1971                           	psect	text7
  1972  01FD                     __ptext7:	
  1973 ;; *************** function _EditAddressMemory *****************
  1974 ;; Defined at:
  1975 ;;		line 637 in file "prog.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;  i               1   24[BANK1 ] unsigned char 
  1980 ;;  i               1   25[BANK1 ] unsigned char 
  1981 ;;  CellsData       8   16[BANK1 ] unsigned char [8]
  1982 ;;  CellsData       8    8[BANK1 ] unsigned char [8]
  1983 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  1984 ;;  cell            1   27[BANK1 ] unsigned char 
  1985 ;;  CellIsEmpty     1   26[BANK1 ] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 300/0
  1992 ;;		On exit  : B00/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1995 ;;      Params:         0       0       0       0
  1996 ;;      Locals:         0       0      28       0
  1997 ;;      Temps:          0       1       0       0
  1998 ;;      Totals:         0       1      28       0
  1999 ;;Total ram usage:       29 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    6
  2002 ;; This function calls:
  2003 ;;		_CellToInd
  2004 ;;		_INIT
  2005 ;;		_RX
  2006 ;;		_ReadCell
  2007 ;;		_ShowError
  2008 ;;		_TX
  2009 ;;		_WriteArrayToEEPROM
  2010 ;;		_calc_crc
  2011 ;;		_clrInd
  2012 ;;		_refreshInd
  2013 ;;		_setPoint
  2014 ;;		_waitInterrupt
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           
  2021                           ;psect for function _EditAddressMemory
  2022  01FD                     _EditAddressMemory:	
  2023                           
  2024                           ;prog.c: 638: getTemp_flags.ActiveProcess = 0;
  2025                           
  2026                           ;incstack = 0
  2027                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2028  01FD  13CB               	bcf	_getTemp_flags+3,7
  2029                           
  2030                           ;prog.c: 640: PowerBlocked++;
  2031  01FE  0AD3               	incf	_PowerBlocked,f
  2032                           
  2033                           ;prog.c: 642: clrInd();
  2034  01FF  27A6               	fcall	_clrInd
  2035  0200  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2036                           
  2037                           ;prog.c: 644: unsigned char cell = 0;
  2038  0201  1683               	bsf	3,5	;RP0=1, select bank1
  2039  0202  01BB               	clrf	EditAddressMemory@cell^(0+128)
  2040                           
  2041                           ;prog.c: 645: unsigned char CellIsEmpty = 1;
  2042  0203  01BA               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2043  0204  0ABA               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2044                           
  2045                           ;prog.c: 646: unsigned char CellsData [(sizeof(DS_Address))];
  2046                           ;prog.c: 648: ReadCell(cell, CellsData, &CellIsEmpty);
  2047  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2048  0206  00B3               	movwf	ReadCell@CellsData
  2049  0207  30BA               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2050  0208  00B4               	movwf	ReadCell@CellIsEmpty
  2051  0209  3000               	movlw	0
  2052  020A  25F0               	fcall	_ReadCell
  2053                           
  2054                           ;prog.c: 649: CellToInd(cell);
  2055  020B  3000               	movlw	0
  2056  020C  2544               	fcall	_CellToInd
  2057  020D                     l4165:	
  2058                           
  2059                           ;prog.c: 652: if (KeyCode == 31) {
  2060  020D  301F               	movlw	31
  2061  020E  0652               	xorwf	_KeyCode,w	;volatile
  2062  020F  1D03               	btfss	3,2
  2063  0210  2A20               	goto	l4179
  2064                           
  2065                           ;prog.c: 653: KeyCode = 0;
  2066  0211  01D2               	clrf	_KeyCode	;volatile
  2067                           
  2068                           ;prog.c: 654: if (cell > 0) {
  2069  0212  1683               	bsf	3,5	;RP0=1, select bank1
  2070  0213  083B               	movf	EditAddressMemory@cell^(0+128),w
  2071  0214  1903               	btfsc	3,2
  2072  0215  2A18               	goto	l4173
  2073                           
  2074                           ;prog.c: 655: cell--;
  2075  0216  03BB               	decf	EditAddressMemory@cell^(0+128),f
  2076                           
  2077                           ;prog.c: 656: } else {
  2078  0217  2A1A               	goto	l4175
  2079  0218                     l4173:	
  2080                           
  2081                           ;prog.c: 657: cell = 16 - 1;
  2082  0218  300F               	movlw	15
  2083  0219  00BB               	movwf	EditAddressMemory@cell^(0+128)
  2084  021A                     l4175:	
  2085                           
  2086                           ;prog.c: 658: }
  2087                           ;prog.c: 659: ReadCell(cell, CellsData, &CellIsEmpty);
  2088  021A  22AE               	fcall	PL8	;call to abstracted procedure
  2089  021B  25F0               	fcall	_ReadCell
  2090                           
  2091                           ;prog.c: 660: CellToInd(cell);
  2092  021C  1683               	bsf	3,5	;RP0=1, select bank1
  2093  021D  083B               	movf	EditAddressMemory@cell^(0+128),w
  2094  021E  2544               	fcall	_CellToInd
  2095                           
  2096                           ;prog.c: 661: } else if (KeyCode == 32) {
  2097  021F  2A91               	goto	l375
  2098  0220                     l4179:	
  2099  0220  3020               	movlw	32
  2100  0221  0652               	xorwf	_KeyCode,w	;volatile
  2101  0222  1D03               	btfss	3,2
  2102  0223  2A33               	goto	l4193
  2103                           
  2104                           ;prog.c: 662: KeyCode = 0;
  2105  0224  01D2               	clrf	_KeyCode	;volatile
  2106                           
  2107                           ;prog.c: 663: if (cell < 16 - 1) {
  2108  0225  300F               	movlw	15
  2109  0226  1683               	bsf	3,5	;RP0=1, select bank1
  2110  0227  023B               	subwf	EditAddressMemory@cell^(0+128),w
  2111  0228  1803               	skipnc
  2112  0229  2A2C               	goto	l4187
  2113                           
  2114                           ;prog.c: 664: cell++;
  2115  022A  0ABB               	incf	EditAddressMemory@cell^(0+128),f
  2116                           
  2117                           ;prog.c: 665: } else {
  2118  022B  2A2D               	goto	l4189
  2119  022C                     l4187:	
  2120                           
  2121                           ;prog.c: 666: cell = 0;
  2122  022C  01BB               	clrf	EditAddressMemory@cell^(0+128)
  2123  022D                     l4189:	
  2124                           
  2125                           ;prog.c: 667: }
  2126                           ;prog.c: 668: ReadCell(cell, CellsData, &CellIsEmpty);
  2127  022D  22AE               	fcall	PL8	;call to abstracted procedure
  2128  022E  25F0               	fcall	_ReadCell
  2129                           
  2130                           ;prog.c: 669: CellToInd(cell);
  2131  022F  1683               	bsf	3,5	;RP0=1, select bank1
  2132  0230  083B               	movf	EditAddressMemory@cell^(0+128),w
  2133  0231  2544               	fcall	_CellToInd
  2134                           
  2135                           ;prog.c: 670: } else if (KeyCode == 34) {
  2136  0232  2A91               	goto	l375
  2137  0233                     l4193:	
  2138  0233  3022               	movlw	34
  2139  0234  0652               	xorwf	_KeyCode,w	;volatile
  2140  0235  1D03               	btfss	3,2
  2141  0236  2A3B               	goto	l4203
  2142                           
  2143                           ;prog.c: 671: KeyCode = 0;
  2144  0237  01D2               	clrf	_KeyCode	;volatile
  2145                           
  2146                           ;prog.c: 672: clrInd();
  2147  0238  27A6               	fcall	_clrInd
  2148                           
  2149                           ;prog.c: 673: refreshInd();
  2150  0239  2748               	fcall	_refreshInd
  2151                           
  2152                           ;prog.c: 674: break;
  2153  023A  2A9E               	goto	l4265
  2154  023B                     l4203:	
  2155  023B  3023               	movlw	35
  2156  023C  0652               	xorwf	_KeyCode,w	;volatile
  2157  023D  1D03               	btfss	3,2
  2158  023E  2A6E               	goto	l4243
  2159  023F  1683               	bsf	3,5	;RP0=1, select bank1
  2160  0240  0B3A               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2161  0241  2A6E               	goto	l4243
  2162                           
  2163                           ;prog.c: 676: KeyCode = 0;
  2164  0242  1283               	bcf	3,5	;RP0=0, select bank0
  2165  0243  01D2               	clrf	_KeyCode	;volatile
  2166                           
  2167                           ;prog.c: 677: waitInterrupt();
  2168  0244  27CB               	fcall	_waitInterrupt
  2169                           
  2170                           ;prog.c: 678: if (INIT()) {
  2171  0245  2515               	fcall	_INIT
  2172  0246  1C03               	btfss	3,0
  2173  0247  2A91               	goto	l375
  2174                           
  2175                           ;prog.c: 679: waitInterrupt();
  2176  0248  27CB               	fcall	_waitInterrupt
  2177                           
  2178                           ;prog.c: 680: TX(0x33);
  2179  0249  3033               	movlw	51
  2180  024A  2572               	fcall	_TX
  2181                           
  2182                           ;prog.c: 681: waitInterrupt();
  2183  024B  27CB               	fcall	_waitInterrupt
  2184                           
  2185                           ;prog.c: 682: unsigned char CellsData [(sizeof(DS_Address))];
  2186                           ;prog.c: 683: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2187  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2188  024D  01B8               	clrf	EditAddressMemory@i^(0+128)
  2189  024E                     l4225:	
  2190                           
  2191                           ;prog.c: 684: waitInterrupt();
  2192  024E  27CB               	fcall	_waitInterrupt
  2193                           
  2194                           ;prog.c: 685: CellsData[i] = RX();
  2195  024F  1683               	bsf	3,5	;RP0=1, select bank1
  2196  0250  0838               	movf	EditAddressMemory@i^(0+128),w
  2197  0251  3EB0               	addlw	(low (EditAddressMemory@CellsData_254| 0))& (0+255)
  2198  0252  0084               	movwf	4
  2199  0253  267B               	fcall	_RX
  2200  0254  1383               	bcf	3,7	;select IRP bank1
  2201  0255  0080               	movwf	0
  2202  0256  3008               	movlw	8
  2203  0257  1683               	bsf	3,5	;RP0=1, select bank1
  2204  0258  0AB8               	incf	EditAddressMemory@i^(0+128),f
  2205  0259  0238               	subwf	EditAddressMemory@i^(0+128),w
  2206  025A  1C03               	skipc
  2207  025B  2A4E               	goto	l4225
  2208                           
  2209                           ;prog.c: 686: }
  2210                           ;prog.c: 687: if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_
      +                          Address)) - 1)) {
  2211  025C  3007               	movlw	7
  2212  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2213  025E  00AB               	movwf	calc_crc@len
  2214  025F  30B0               	movlw	(low (EditAddressMemory@CellsData_254| 0))& (0+255)
  2215  0260  265A               	fcall	_calc_crc
  2216  0261  1683               	bsf	3,5	;RP0=1, select bank1
  2217  0262  0637               	xorwf	(EditAddressMemory@CellsData_254^(0+128)+7),w
  2218  0263  1D03               	skipz
  2219  0264  2A6C               	goto	l4241
  2220                           
  2221                           ;prog.c: 688: waitInterrupt();
  2222  0265  27CB               	fcall	_waitInterrupt
  2223                           
  2224                           ;prog.c: 689: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2225  0266  22A0               	fcall	PL2	;call to abstracted procedure
  2226  0267  30B0               	movlw	(low (EditAddressMemory@CellsData_254| 0))& (0+255)
  2227  0268  2723               	fcall	_WriteArrayToEEPROM
  2228                           
  2229                           ;prog.c: 690: waitInterrupt();
  2230  0269  27CB               	fcall	_waitInterrupt
  2231                           
  2232                           ;prog.c: 691: ReadCell(cell, CellsData, &CellIsEmpty);
  2233  026A  30B0               	movlw	(low (EditAddressMemory@CellsData_254| 0))& (0+255)
  2234  026B  2A8B               	goto	L6
  2235  026C                     l4241:	
  2236                           ;prog.c: 692: } else {
  2237                           
  2238                           
  2239                           ;prog.c: 693: ShowError();
  2240  026C  2798               	fcall	_ShowError
  2241  026D  2A91               	goto	l375
  2242  026E                     l4243:	
  2243  026E  3024               	movlw	36
  2244  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0270  0652               	xorwf	_KeyCode,w	;volatile
  2246  0271  1683               	bsf	3,5	;RP0=1, select bank1
  2247  0272  1D03               	btfss	3,2
  2248  0273  2A92               	goto	L7
  2249  0274  083A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2250  0275  1D03               	btfss	3,2
  2251  0276  2A91               	goto	l375
  2252                           
  2253                           ;prog.c: 697: KeyCode = 0;
  2254  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2255  0278  01D2               	clrf	_KeyCode	;volatile
  2256                           
  2257                           ;prog.c: 698: unsigned char CellsData [(sizeof(DS_Address))];
  2258                           ;prog.c: 699: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2259  0279  1683               	bsf	3,5	;RP0=1, select bank1
  2260  027A  01B9               	clrf	EditAddressMemory@i_259^(0+128)
  2261  027B                     l4253:	
  2262                           
  2263                           ;prog.c: 700: CellsData[i] = 0xFF;
  2264  027B  0839               	movf	EditAddressMemory@i_259^(0+128),w
  2265  027C  3EA8               	addlw	(low (EditAddressMemory@CellsData_258| 0))& (0+255)
  2266  027D  0084               	movwf	4
  2267  027E  30FF               	movlw	255
  2268  027F  0080               	movwf	0
  2269  0280  3008               	movlw	8
  2270  0281  0AB9               	incf	EditAddressMemory@i_259^(0+128),f
  2271  0282  0239               	subwf	EditAddressMemory@i_259^(0+128),w
  2272  0283  1C03               	skipc
  2273  0284  2A7B               	goto	l4253
  2274                           
  2275                           ;prog.c: 701: }
  2276                           ;prog.c: 702: waitInterrupt();
  2277  0285  27CB               	fcall	_waitInterrupt
  2278                           
  2279                           ;prog.c: 703: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2280  0286  22A0               	fcall	PL2	;call to abstracted procedure
  2281  0287  30A8               	movlw	(low (EditAddressMemory@CellsData_258| 0))& (0+255)
  2282  0288  2723               	fcall	_WriteArrayToEEPROM
  2283                           
  2284                           ;prog.c: 704: waitInterrupt();
  2285  0289  27CB               	fcall	_waitInterrupt
  2286                           
  2287                           ;prog.c: 705: ReadCell(cell, CellsData, &CellIsEmpty);
  2288  028A  30A8               	movlw	(low (EditAddressMemory@CellsData_258| 0))& (0+255)
  2289  028B                     L6:	
  2290  028B  00B3               	movwf	ReadCell@CellsData
  2291  028C  30BA               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2292  028D  00B4               	movwf	ReadCell@CellIsEmpty
  2293  028E  1683               	bsf	3,5	;RP0=1, select bank1
  2294  028F  083B               	movf	EditAddressMemory@cell^(0+128),w
  2295  0290  25F0               	fcall	_ReadCell
  2296  0291                     l375:	
  2297                           
  2298                           ;prog.c: 706: }
  2299                           ;prog.c: 709: setPoint(1, !CellIsEmpty);
  2300  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2301  0292                     L7:	
  2302  0292  083A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2303  0293  1D03               	btfss	3,2
  2304  0294  2A97               	goto	u4170
  2305  0295  3001               	movlw	1
  2306  0296  2A98               	goto	u4180
  2307  0297                     u4170:	
  2308  0297  3000               	movlw	0
  2309  0298                     u4180:	
  2310  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0299  00AB               	movwf	setPoint@value
  2312  029A  3001               	movlw	1
  2313  029B  277A               	fcall	_setPoint
  2314                           
  2315                           ;prog.c: 711: refreshInd();
  2316  029C  2748               	fcall	_refreshInd
  2317  029D  2A0D               	goto	l4165
  2318  029E                     l4265:	
  2319                           
  2320                           ;prog.c: 712: }
  2321                           ;prog.c: 713: PowerBlocked--;
  2322  029E  03D3               	decf	_PowerBlocked,f
  2323  029F  0008               	return
  2324  02A0                     __end_of_EditAddressMemory:	
  2325  02A0                     PL2:	
  2326  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  2327  02A1  083B               	movf	EditAddressMemory@cell^(0+128),w
  2328  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2329  02A3  00B9               	movwf	??_EditAddressMemory
  2330  02A4  1003               	clrc
  2331  02A5  0DB9               	rlf	??_EditAddressMemory,f
  2332  02A6  1003               	clrc
  2333  02A7  0DB9               	rlf	??_EditAddressMemory,f
  2334  02A8  1003               	clrc
  2335  02A9  0D39               	rlf	??_EditAddressMemory,w
  2336  02AA  00AE               	movwf	WriteArrayToEEPROM@address_start
  2337  02AB  3008               	movlw	8
  2338  02AC  00AF               	movwf	WriteArrayToEEPROM@quantity
  2339  02AD  0008               	return
  2340  02AE                     __end_ofPL2:	
  2341  02AE                     PL8:	
  2342  02AE  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2343  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2344  02B0  00B3               	movwf	ReadCell@CellsData
  2345  02B1  30BA               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2346  02B2  00B4               	movwf	ReadCell@CellIsEmpty
  2347  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  2348  02B4  083B               	movf	EditAddressMemory@cell^(0+128),w
  2349  02B5  0008               	return
  2350  02B6                     __end_ofPL8:	
  2351                           
  2352                           	psect	text8
  2353  077A                     __ptext8:	
  2354 ;; *************** function _setPoint *****************
  2355 ;; Defined at:
  2356 ;;		line 95 in file "prog.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  dignum          1    wreg     unsigned char 
  2359 ;;  value           1   11[BANK0 ] unsigned char 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  dignum          1   12[BANK0 ] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      void 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : 300/0
  2368 ;;		On exit  : B00/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2371 ;;      Params:         0       1       0       0
  2372 ;;      Locals:         0       1       0       0
  2373 ;;      Temps:          0       0       0       0
  2374 ;;      Totals:         0       2       0       0
  2375 ;;Total ram usage:        2 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    3
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_indData
  2382 ;;		_EditAddressMemory
  2383 ;;		_main
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           
  2388                           ;psect for function _setPoint
  2389  077A                     _setPoint:	
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2393                           ;setPoint@dignum stored from wreg
  2394  077A  00AC               	movwf	setPoint@dignum
  2395                           
  2396                           ;prog.c: 96: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 0
      +                          b10111111;
  2397  077B  0B2B               	decfsz	setPoint@value,w
  2398  077C  2F83               	goto	l3783
  2399  077D  082C               	movf	setPoint@dignum,w
  2400  077E  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2401  077F  0084               	movwf	4
  2402  0780  1383               	bcf	3,7	;select IRP bank1
  2403  0781  1700               	bsf	0,6
  2404  0782  0008               	return
  2405  0783                     l3783:	
  2406  0783  082C               	movf	setPoint@dignum,w
  2407  0784  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2408  0785  0084               	movwf	4
  2409  0786  1383               	bcf	3,7	;select IRP bank1
  2410  0787  1300               	bcf	0,6
  2411  0788  0008               	return
  2412  0789                     __end_of_setPoint:	
  2413                           
  2414                           	psect	text9
  2415  065A                     __ptext9:	
  2416 ;; *************** function _calc_crc *****************
  2417 ;; Defined at:
  2418 ;;		line 250 in file "prog.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  mas             1    wreg     PTR unsigned char 
  2421 ;;		 -> EditAddressMemory@CellsData_254(8), DS_ReadData(9), 
  2422 ;;  len             1   11[BANK0 ] unsigned char 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  mas             1   14[BANK0 ] PTR unsigned char 
  2425 ;;		 -> EditAddressMemory@CellsData_254(8), DS_ReadData(9), 
  2426 ;;  fb              1   13[BANK0 ] unsigned char 
  2427 ;;  i               1   15[BANK0 ] unsigned char 
  2428 ;;  dat             1   12[BANK0 ] unsigned char 
  2429 ;;  crc             1   16[BANK0 ] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      unsigned char 
  2432 ;; Registers used:
  2433 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2434 ;; Tracked objects:
  2435 ;;		On entry : B00/0
  2436 ;;		On exit  : B00/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2439 ;;      Params:         0       1       0       0
  2440 ;;      Locals:         0       5       0       0
  2441 ;;      Temps:          0       0       0       0
  2442 ;;      Totals:         0       6       0       0
  2443 ;;Total ram usage:        6 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:    3
  2446 ;; This function calls:
  2447 ;;		Nothing
  2448 ;; This function is called by:
  2449 ;;		_EditAddressMemory
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           
  2454                           ;psect for function _calc_crc
  2455  065A                     _calc_crc:	
  2456                           
  2457                           ;incstack = 0
  2458                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2459                           ;calc_crc@mas stored from wreg
  2460  065A  00AE               	movwf	calc_crc@mas
  2461                           
  2462                           ;prog.c: 251: unsigned char crc = 0;
  2463  065B  01B0               	clrf	calc_crc@crc
  2464                           
  2465                           ;prog.c: 252: while (len--) {
  2466  065C  2E76               	goto	l3879
  2467  065D                     l3859:	
  2468                           
  2469                           ;prog.c: 253: unsigned char dat = *mas++;
  2470  065D  082E               	movf	calc_crc@mas,w
  2471  065E  0084               	movwf	4
  2472  065F  0800               	movf	0,w
  2473  0660  00AC               	movwf	calc_crc@dat
  2474  0661  0AAE               	incf	calc_crc@mas,f
  2475                           
  2476                           ;prog.c: 254: for (unsigned char i = 0; i < 8; i++) {
  2477  0662  01AF               	clrf	calc_crc@i
  2478  0663                     l3869:	
  2479                           
  2480                           ;prog.c: 255: unsigned char fb = (crc ^ dat) & 1;
  2481  0663  0830               	movf	calc_crc@crc,w
  2482  0664  062C               	xorwf	calc_crc@dat,w
  2483  0665  00AD               	movwf	calc_crc@fb
  2484  0666  3001               	movlw	1
  2485  0667  05AD               	andwf	calc_crc@fb,f
  2486                           
  2487                           ;prog.c: 256: crc >>= 1;
  2488  0668  1003               	clrc
  2489  0669  0CB0               	rrf	calc_crc@crc,f
  2490                           
  2491                           ;prog.c: 257: dat >>= 1;
  2492  066A  1003               	clrc
  2493  066B  0CAC               	rrf	calc_crc@dat,f
  2494                           
  2495                           ;prog.c: 258: if (fb) crc ^= 0x8c;
  2496  066C  082D               	movf	calc_crc@fb,w
  2497  066D  1903               	btfsc	3,2
  2498  066E  2E71               	goto	l3877
  2499  066F  308C               	movlw	140
  2500  0670  06B0               	xorwf	calc_crc@crc,f
  2501  0671                     l3877:	
  2502  0671  3008               	movlw	8
  2503  0672  0AAF               	incf	calc_crc@i,f
  2504  0673  022F               	subwf	calc_crc@i,w
  2505  0674  1C03               	skipc
  2506  0675  2E63               	goto	l3869
  2507  0676                     l3879:	
  2508  0676  03AB               	decf	calc_crc@len,f
  2509  0677  0F2B               	incfsz	calc_crc@len,w
  2510  0678  2E5D               	goto	l3859
  2511                           
  2512                           ;prog.c: 259: }
  2513                           ;prog.c: 260: }
  2514                           ;prog.c: 261: return crc;
  2515  0679  0830               	movf	calc_crc@crc,w
  2516  067A  0008               	return
  2517  067B                     __end_of_calc_crc:	
  2518                           
  2519                           	psect	text10
  2520  0723                     __ptext10:	
  2521 ;; *************** function _WriteArrayToEEPROM *****************
  2522 ;; Defined at:
  2523 ;;		line 193 in file "prog.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  container       1    wreg     PTR unsigned char 
  2526 ;;		 -> EditAddressMemory@CellsData_258(8), EditAddressMemory@CellsData_254(8), 
  2527 ;;  address_star    1   14[BANK0 ] unsigned char 
  2528 ;;  quantity        1   15[BANK0 ] unsigned char 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  container       1   17[BANK0 ] PTR unsigned char 
  2531 ;;		 -> EditAddressMemory@CellsData_258(8), EditAddressMemory@CellsData_254(8), 
  2532 ;;  i               1   18[BANK0 ] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 300/0
  2539 ;;		On exit  : 300/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2542 ;;      Params:         0       2       0       0
  2543 ;;      Locals:         0       2       0       0
  2544 ;;      Temps:          0       1       0       0
  2545 ;;      Totals:         0       5       0       0
  2546 ;;Total ram usage:        5 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    4
  2549 ;; This function calls:
  2550 ;;		_EEWR
  2551 ;;		_waitInterrupt
  2552 ;; This function is called by:
  2553 ;;		_EditAddressMemory
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           
  2558                           ;psect for function _WriteArrayToEEPROM
  2559  0723                     _WriteArrayToEEPROM:	
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2563                           ;WriteArrayToEEPROM@container stored from wreg
  2564  0723  00B1               	movwf	WriteArrayToEEPROM@container
  2565                           
  2566                           ;prog.c: 194: for (unsigned char i = 0; i < quantity; i++) {
  2567  0724  01B2               	clrf	WriteArrayToEEPROM@i
  2568  0725                     l3795:	
  2569  0725  082F               	movf	WriteArrayToEEPROM@quantity,w
  2570  0726  0232               	subwf	WriteArrayToEEPROM@i,w
  2571  0727  1803               	btfsc	3,0
  2572  0728  0008               	return
  2573                           
  2574                           ;prog.c: 195: waitInterrupt();
  2575  0729  27CB               	fcall	_waitInterrupt
  2576                           
  2577                           ;prog.c: 196: EEWR(address_start + i, container[i]);
  2578  072A  0832               	movf	WriteArrayToEEPROM@i,w
  2579  072B  0731               	addwf	WriteArrayToEEPROM@container,w
  2580  072C  00B0               	movwf	??_WriteArrayToEEPROM
  2581  072D  0084               	movwf	4
  2582  072E  1383               	bcf	3,7	;select IRP bank0
  2583  072F  0800               	movf	0,w
  2584  0730  00AB               	movwf	EEWR@data
  2585  0731  0832               	movf	WriteArrayToEEPROM@i,w
  2586  0732  072E               	addwf	WriteArrayToEEPROM@address_start,w
  2587  0733  270B               	fcall	_EEWR
  2588  0734  0AB2               	incf	WriteArrayToEEPROM@i,f
  2589  0735  2F25               	goto	l3795
  2590  0736                     __end_of_WriteArrayToEEPROM:	
  2591                           
  2592                           	psect	text11
  2593  07CB                     __ptext11:	
  2594 ;; *************** function _waitInterrupt *****************
  2595 ;; Defined at:
  2596 ;;		line 78 in file "prog.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		None
  2605 ;; Tracked objects:
  2606 ;;		On entry : 200/0
  2607 ;;		On exit  : 300/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2610 ;;      Params:         0       0       0       0
  2611 ;;      Locals:         0       0       0       0
  2612 ;;      Temps:          0       0       0       0
  2613 ;;      Totals:         0       0       0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    3
  2617 ;; This function calls:
  2618 ;;		Nothing
  2619 ;; This function is called by:
  2620 ;;		_WriteArrayToEEPROM
  2621 ;;		_FindCell
  2622 ;;		_EditAddressMemory
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           
  2628                           ;psect for function _waitInterrupt
  2629  07CB                     _waitInterrupt:	
  2630                           
  2631                           ;prog.c: 79: endInterrupt = 0;
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _waitInterrupt: []
  2635  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  2636  07CC  1159               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2637  07CD                     l83:	
  2638                           ;prog.c: 80: while (!endInterrupt);
  2639                           
  2640  07CD  1959               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2641  07CE  0008               	return
  2642  07CF  2FCD               	goto	l83
  2643  07D0                     __end_of_waitInterrupt:	
  2644                           
  2645                           	psect	text12
  2646  070B                     __ptext12:	
  2647 ;; *************** function _EEWR *****************
  2648 ;; Defined at:
  2649 ;;		line 160 in file "prog.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  address         1    wreg     unsigned char 
  2652 ;;  data            1   11[BANK0 ] unsigned char 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  address         1   12[BANK0 ] unsigned char 
  2655 ;;  INTCON_BUP      1   13[BANK0 ] volatile unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg
  2660 ;; Tracked objects:
  2661 ;;		On entry : B00/0
  2662 ;;		On exit  : B00/0
  2663 ;;		Unchanged: 800/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2665 ;;      Params:         0       1       0       0
  2666 ;;      Locals:         0       2       0       0
  2667 ;;      Temps:          0       0       0       0
  2668 ;;      Totals:         0       3       0       0
  2669 ;;Total ram usage:        3 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    3
  2672 ;; This function calls:
  2673 ;;		Nothing
  2674 ;; This function is called by:
  2675 ;;		_WriteArrayToEEPROM
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _EEWR
  2681  070B                     _EEWR:	
  2682                           
  2683                           ;incstack = 0
  2684                           ; Regs used in _EEWR: [wreg]
  2685                           ;EEWR@address stored from wreg
  2686  070B  00AC               	movwf	EEWR@address
  2687                           
  2688                           ;prog.c: 161: volatile unsigned char INTCON_BUP = INTCON;
  2689  070C  080B               	movf	11,w	;volatile
  2690  070D  00AD               	movwf	EEWR@INTCON_BUP	;volatile
  2691                           
  2692                           ;prog.c: 162: INTCONbits.GIE = 0;
  2693  070E  138B               	bcf	11,7	;volatile
  2694                           
  2695                           ;prog.c: 163: EEADR = address;
  2696  070F  082C               	movf	EEWR@address,w
  2697  0710  1683               	bsf	3,5	;RP0=1, select bank1
  2698  0711  009B               	movwf	27	;volatile
  2699                           
  2700                           ;prog.c: 164: EEDATA = data;
  2701  0712  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0713  082B               	movf	EEWR@data,w
  2703  0714  1683               	bsf	3,5	;RP0=1, select bank1
  2704  0715  009A               	movwf	26	;volatile
  2705                           
  2706                           ;prog.c: 165: EECON1bits.WREN = 1;
  2707  0716  151C               	bsf	28,2	;volsfr
  2708                           
  2709                           ;prog.c: 166: EECON2 = 0x55;
  2710  0717  3055               	movlw	85
  2711  0718  009D               	movwf	29	;volsfr
  2712                           
  2713                           ;prog.c: 167: EECON2 = 0xAA;
  2714  0719  30AA               	movlw	170
  2715  071A  009D               	movwf	29	;volsfr
  2716                           
  2717                           ;prog.c: 168: EECON1bits.WR = 1;
  2718  071B  149C               	bsf	28,1	;volsfr
  2719                           
  2720                           ;prog.c: 169: EECON1bits.WREN = 0;
  2721  071C  111C               	bcf	28,2	;volsfr
  2722  071D                     l159:	
  2723                           ;prog.c: 170: while (EECON1bits.WR == 1) {
  2724                           
  2725  071D  189C               	btfsc	28,1	;volsfr
  2726  071E  2F1D               	goto	l159
  2727                           
  2728                           ;prog.c: 171: }
  2729                           ;prog.c: 172: INTCON = INTCON_BUP;
  2730  071F  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0720  082D               	movf	EEWR@INTCON_BUP,w	;volatile
  2732  0721  008B               	movwf	11	;volatile
  2733  0722  0008               	return
  2734  0723                     __end_of_EEWR:	
  2735                           
  2736                           	psect	text13
  2737  0572                     __ptext13:	
  2738 ;; *************** function _TX *****************
  2739 ;; Defined at:
  2740 ;;		line 216 in file "prog.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  cmd             1    wreg     unsigned char 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  cmd             1   12[BANK0 ] unsigned char 
  2745 ;;  i               1   14[BANK0 ] unsigned char 
  2746 ;;  temp            1   13[BANK0 ] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0
  2751 ;; Tracked objects:
  2752 ;;		On entry : 300/0
  2753 ;;		On exit  : 300/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2756 ;;      Params:         0       0       0       0
  2757 ;;      Locals:         0       3       0       0
  2758 ;;      Temps:          0       1       0       0
  2759 ;;      Totals:         0       4       0       0
  2760 ;;Total ram usage:        4 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    3
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_EditAddressMemory
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           
  2772                           ;psect for function _TX
  2773  0572                     _TX:	
  2774                           
  2775                           ;incstack = 0
  2776                           ; Regs used in _TX: [wreg+status,2+status,0]
  2777                           ;TX@cmd stored from wreg
  2778  0572  00AC               	movwf	TX@cmd
  2779                           
  2780                           ;prog.c: 218: unsigned char i = 0;
  2781  0573  01AE               	clrf	TX@i
  2782                           
  2783                           ;prog.c: 219: temp = cmd;
  2784  0574  00AD               	movwf	TX@temp
  2785                           
  2786                           ;prog.c: 220: for (i = 0; i < 8; i++) {
  2787  0575  01AE               	clrf	TX@i
  2788  0576                     l185:	
  2789                           
  2790                           ;prog.c: 221: if (temp & 0x01) {
  2791  0576  1C2D               	btfss	TX@temp,0
  2792  0577  2D86               	goto	l187
  2793                           
  2794                           ;prog.c: 222: TRISA3 = 0;
  2795  0578  1683               	bsf	3,5	;RP0=1, select bank1
  2796  0579  1185               	bcf	5,3	;volatile
  2797                           
  2798                           ;prog.c: 223: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2799  057A  2D7B               	nop2	;2 cycle nop
  2800  057B  2D7C               	nop2	;2 cycle nop
  2801  057C  0000               	nop
  2802                           
  2803                           ;prog.c: 224: TRISA3 = 1;
  2804  057D  1683               	bsf	3,5	;RP0=1, select bank1
  2805  057E  1303               	bcf	3,6	;RP1=0, select bank1
  2806  057F  1585               	bsf	5,3	;volatile
  2807                           
  2808                           ;prog.c: 225: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2809  0580  3017               	movlw	23
  2810  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0582  00AB               	movwf	??_TX
  2812  0583                     u4627:	
  2813  0583  0BAB               	decfsz	??_TX,f
  2814  0584  2D83               	goto	u4627
  2815                           
  2816                           ;prog.c: 226: } else {
  2817  0585  2D93               	goto	l3833
  2818  0586                     l187:	
  2819                           
  2820                           ;prog.c: 227: TRISA3 = 0;
  2821  0586  1683               	bsf	3,5	;RP0=1, select bank1
  2822  0587  1185               	bcf	5,3	;volatile
  2823                           
  2824                           ;prog.c: 228: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2825  0588  3017               	movlw	23
  2826  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2827  058A  00AB               	movwf	??_TX
  2828  058B                     u4637:	
  2829  058B  0BAB               	decfsz	??_TX,f
  2830  058C  2D8B               	goto	u4637
  2831                           
  2832                           ;prog.c: 229: TRISA3 = 1;
  2833  058D  1683               	bsf	3,5	;RP0=1, select bank1
  2834  058E  1303               	bcf	3,6	;RP1=0, select bank1
  2835  058F  1585               	bsf	5,3	;volatile
  2836                           
  2837                           ;prog.c: 230: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2838  0590  2D91               	nop2	;2 cycle nop
  2839  0591  2D92               	nop2	;2 cycle nop
  2840  0592  0000               	nop
  2841  0593                     l3833:	
  2842  0593  3008               	movlw	8
  2843                           
  2844                           ;prog.c: 231: }
  2845                           ;prog.c: 232: temp >>= 1;
  2846  0594  1283               	bcf	3,5	;RP0=0, select bank0
  2847  0595  1303               	bcf	3,6	;RP1=0, select bank0
  2848  0596  1003               	clrc
  2849  0597  0CAD               	rrf	TX@temp,f
  2850  0598  0AAE               	incf	TX@i,f
  2851  0599  022E               	subwf	TX@i,w
  2852  059A  1803               	btfsc	3,0
  2853  059B  0008               	return
  2854  059C  2D76               	goto	l185
  2855  059D                     __end_of_TX:	
  2856                           
  2857                           	psect	text14
  2858  0798                     __ptext14:	
  2859 ;; *************** function _ShowError *****************
  2860 ;; Defined at:
  2861 ;;		line 111 in file "prog.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;		None
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2870 ;; Tracked objects:
  2871 ;;		On entry : 200/0
  2872 ;;		On exit  : B00/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2875 ;;      Params:         0       0       0       0
  2876 ;;      Locals:         0       0       0       0
  2877 ;;      Temps:          0       0       0       0
  2878 ;;      Totals:         0       0       0       0
  2879 ;;Total ram usage:        0 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    4
  2882 ;; This function calls:
  2883 ;;		_clrInd
  2884 ;;		_refreshInd
  2885 ;;		_setDigit
  2886 ;; This function is called by:
  2887 ;;		_EditAddressMemory
  2888 ;;		_main
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _ShowError
  2894  0798                     _ShowError:	
  2895                           
  2896                           ;prog.c: 112: clrInd();
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _ShowError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2900  0798  27A6               	fcall	_clrInd
  2901                           
  2902                           ;prog.c: 113: setDigit(3, 14);
  2903  0799  300E               	movlw	14
  2904  079A  00B3               	movwf	setDigit@data
  2905  079B  3003               	movlw	3
  2906  079C  2736               	fcall	_setDigit
  2907                           
  2908                           ;prog.c: 114: setDigit(2, 24);
  2909  079D  3018               	movlw	24
  2910  079E  00B3               	movwf	setDigit@data
  2911  079F  3002               	movlw	2
  2912  07A0  2736               	fcall	_setDigit
  2913                           
  2914                           ;prog.c: 115: setDigit(1, 24);
  2915  07A1  3018               	movlw	24
  2916  07A2  00B3               	movwf	setDigit@data
  2917  07A3  3001               	movlw	1
  2918  07A4  2736               	fcall	_setDigit
  2919                           
  2920                           ;prog.c: 116: refreshInd();
  2921  07A5  2F48               	ljmp	l3655
  2922  07A6                     __end_of_ShowError:	
  2923                           
  2924                           	psect	text15
  2925  05F0                     __ptext15:	
  2926 ;; *************** function _ReadCell *****************
  2927 ;; Defined at:
  2928 ;;		line 610 in file "prog.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  cell            1    wreg     unsigned char 
  2931 ;;  CellsData       1   19[BANK0 ] PTR unsigned char 
  2932 ;;		 -> EditAddressMemory@CellsData_258(8), EditAddressMemory@CellsData_254(8), EditAddressMemory@CellsData(8), 
  2933 ;;  CellIsEmpty     1   20[BANK0 ] PTR unsigned char 
  2934 ;;		 -> EditAddressMemory@CellIsEmpty(1), 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  cell            1   22[BANK0 ] unsigned char 
  2937 ;;  i               1   24[BANK0 ] unsigned char 
  2938 ;;  _CellIsEmpty    1   23[BANK0 ] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 200/0
  2945 ;;		On exit  : B00/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2948 ;;      Params:         0       2       0       0
  2949 ;;      Locals:         0       3       0       0
  2950 ;;      Temps:          0       1       0       0
  2951 ;;      Totals:         0       6       0       0
  2952 ;;Total ram usage:        6 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    5
  2955 ;; This function calls:
  2956 ;;		_FillArrayFromEEPROM
  2957 ;; This function is called by:
  2958 ;;		_EditAddressMemory
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           
  2963                           ;psect for function _ReadCell
  2964  05F0                     _ReadCell:	
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2968                           ;ReadCell@cell stored from wreg
  2969  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2970  05F1  00B6               	movwf	ReadCell@cell
  2971                           
  2972                           ;prog.c: 611: unsigned char _CellIsEmpty = 1;
  2973  05F2  01B7               	clrf	ReadCell@_CellIsEmpty
  2974  05F3  0AB7               	incf	ReadCell@_CellIsEmpty,f
  2975                           
  2976                           ;prog.c: 612: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  2977  05F4  00B5               	movwf	??_ReadCell
  2978  05F5  1003               	clrc
  2979  05F6  0DB5               	rlf	??_ReadCell,f
  2980  05F7  1003               	clrc
  2981  05F8  0DB5               	rlf	??_ReadCell,f
  2982  05F9  1003               	clrc
  2983  05FA  0D35               	rlf	??_ReadCell,w
  2984  05FB  00AE               	movwf	FillArrayFromEEPROM@address_start
  2985  05FC  3008               	movlw	8
  2986  05FD  00AF               	movwf	FillArrayFromEEPROM@quantity
  2987  05FE  0833               	movf	ReadCell@CellsData,w
  2988  05FF  275A               	fcall	_FillArrayFromEEPROM
  2989                           
  2990                           ;prog.c: 613: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2991  0600  01B8               	clrf	ReadCell@i
  2992  0601                     l3895:	
  2993                           
  2994                           ;prog.c: 614: if (CellsData[i] != 0xFF) {
  2995  0601  0838               	movf	ReadCell@i,w
  2996  0602  0733               	addwf	ReadCell@CellsData,w
  2997  0603  00B5               	movwf	??_ReadCell
  2998  0604  0084               	movwf	4
  2999  0605  1383               	bcf	3,7	;select IRP bank0
  3000  0606  0A00               	incf	0,w
  3001  0607  1903               	btfsc	3,2
  3002  0608  2E0B               	goto	l3899
  3003                           
  3004                           ;prog.c: 615: _CellIsEmpty = 0;
  3005  0609  01B7               	clrf	ReadCell@_CellIsEmpty
  3006                           
  3007                           ;prog.c: 616: break;
  3008  060A  2E10               	goto	l3903
  3009  060B                     l3899:	
  3010  060B  3008               	movlw	8
  3011  060C  0AB8               	incf	ReadCell@i,f
  3012  060D  0238               	subwf	ReadCell@i,w
  3013  060E  1C03               	skipc
  3014  060F  2E01               	goto	l3895
  3015  0610                     l3903:	
  3016                           
  3017                           ;prog.c: 617: }
  3018                           ;prog.c: 618: }
  3019                           ;prog.c: 619: *CellIsEmpty = _CellIsEmpty;
  3020  0610  0834               	movf	ReadCell@CellIsEmpty,w
  3021  0611  0084               	movwf	4
  3022  0612  0837               	movf	ReadCell@_CellIsEmpty,w
  3023  0613  0080               	movwf	0
  3024  0614  0008               	return
  3025  0615                     __end_of_ReadCell:	
  3026                           
  3027                           	psect	text16
  3028  075A                     __ptext16:	
  3029 ;; *************** function _FillArrayFromEEPROM *****************
  3030 ;; Defined at:
  3031 ;;		line 186 in file "prog.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  container       1    wreg     PTR unsigned char 
  3034 ;;		 -> EditAddressMemory@CellsData_258(8), EditAddressMemory@CellsData_254(8), EditAddressMemory@CellsData(8), FindCell
      +@CellsData(8), 
  3035 ;;		 -> DS_Address(8), 
  3036 ;;  address_star    1   14[BANK0 ] unsigned char 
  3037 ;;  quantity        1   15[BANK0 ] unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  container       1   17[BANK0 ] PTR unsigned char 
  3040 ;;		 -> EditAddressMemory@CellsData_258(8), EditAddressMemory@CellsData_254(8), EditAddressMemory@CellsData(8), FindCell
      +@CellsData(8), 
  3041 ;;		 -> DS_Address(8), 
  3042 ;;  i               1   18[BANK0 ] unsigned char 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 300/0
  3049 ;;		On exit  : 300/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3052 ;;      Params:         0       2       0       0
  3053 ;;      Locals:         0       2       0       0
  3054 ;;      Temps:          0       1       0       0
  3055 ;;      Totals:         0       5       0       0
  3056 ;;Total ram usage:        5 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    4
  3059 ;; This function calls:
  3060 ;;		_EERD
  3061 ;; This function is called by:
  3062 ;;		_FindCell
  3063 ;;		_ReadCell
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _FillArrayFromEEPROM
  3070  075A                     _FillArrayFromEEPROM:	
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3074                           ;FillArrayFromEEPROM@container stored from wreg
  3075  075A  00B1               	movwf	FillArrayFromEEPROM@container
  3076                           
  3077                           ;prog.c: 187: for (unsigned char i = 0; i < quantity; i++) {
  3078  075B  01B2               	clrf	FillArrayFromEEPROM@i
  3079  075C                     l3697:	
  3080  075C  082F               	movf	FillArrayFromEEPROM@quantity,w
  3081  075D  0232               	subwf	FillArrayFromEEPROM@i,w
  3082  075E  1803               	btfsc	3,0
  3083  075F  0008               	return
  3084                           
  3085                           ;prog.c: 189: container[i] = EERD(address_start + i);
  3086  0760  0832               	movf	FillArrayFromEEPROM@i,w
  3087  0761  0731               	addwf	FillArrayFromEEPROM@container,w
  3088  0762  00B0               	movwf	??_FillArrayFromEEPROM
  3089  0763  0084               	movwf	4
  3090  0764  0832               	movf	FillArrayFromEEPROM@i,w
  3091  0765  072E               	addwf	FillArrayFromEEPROM@address_start,w
  3092  0766  2789               	fcall	_EERD
  3093  0767  1383               	bcf	3,7	;select IRP bank0
  3094  0768  0080               	movwf	0
  3095  0769  0AB2               	incf	FillArrayFromEEPROM@i,f
  3096  076A  2F5C               	goto	l3697
  3097  076B                     __end_of_FillArrayFromEEPROM:	
  3098                           
  3099                           	psect	text17
  3100  0789                     __ptext17:	
  3101 ;; *************** function _EERD *****************
  3102 ;; Defined at:
  3103 ;;		line 175 in file "prog.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  address         1    wreg     unsigned char 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  address         1   11[BANK0 ] unsigned char 
  3108 ;;  EEDATA_BUP      1   13[BANK0 ] volatile unsigned char 
  3109 ;;  INTCON_BUP      1   12[BANK0 ] volatile unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      unsigned char 
  3112 ;; Registers used:
  3113 ;;		wreg
  3114 ;; Tracked objects:
  3115 ;;		On entry : 300/0
  3116 ;;		On exit  : 300/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3119 ;;      Params:         0       0       0       0
  3120 ;;      Locals:         0       3       0       0
  3121 ;;      Temps:          0       0       0       0
  3122 ;;      Totals:         0       3       0       0
  3123 ;;Total ram usage:        3 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    3
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_FillArrayFromEEPROM
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _EERD
  3135  0789                     _EERD:	
  3136                           
  3137                           ;incstack = 0
  3138                           ; Regs used in _EERD: [wreg]
  3139                           ;EERD@address stored from wreg
  3140  0789  00AB               	movwf	EERD@address
  3141                           
  3142                           ;prog.c: 176: volatile unsigned char INTCON_BUP = INTCON;
  3143  078A  080B               	movf	11,w	;volatile
  3144  078B  00AC               	movwf	EERD@INTCON_BUP	;volatile
  3145                           
  3146                           ;prog.c: 177: volatile unsigned char EEDATA_BUP;
  3147                           ;prog.c: 178: INTCONbits.GIE = 0;
  3148  078C  138B               	bcf	11,7	;volatile
  3149                           
  3150                           ;prog.c: 179: EEADR = address;
  3151  078D  082B               	movf	EERD@address,w
  3152  078E  1683               	bsf	3,5	;RP0=1, select bank1
  3153  078F  009B               	movwf	27	;volatile
  3154                           
  3155                           ;prog.c: 180: EECON1bits.RD = 1;
  3156  0790  141C               	bsf	28,0	;volsfr
  3157                           
  3158                           ;prog.c: 181: EEDATA_BUP = EEDATA;
  3159  0791  081A               	movf	26,w	;volatile
  3160  0792  1283               	bcf	3,5	;RP0=0, select bank0
  3161  0793  00AD               	movwf	EERD@EEDATA_BUP	;volatile
  3162                           
  3163                           ;prog.c: 182: INTCON = INTCON_BUP;
  3164  0794  082C               	movf	EERD@INTCON_BUP,w	;volatile
  3165  0795  008B               	movwf	11	;volatile
  3166                           
  3167                           ;prog.c: 183: return EEDATA_BUP;
  3168  0796  082D               	movf	EERD@EEDATA_BUP,w	;volatile
  3169  0797  0008               	return
  3170  0798                     __end_of_EERD:	
  3171                           
  3172                           	psect	text18
  3173  067B                     __ptext18:	
  3174 ;; *************** function _RX *****************
  3175 ;; Defined at:
  3176 ;;		line 236 in file "prog.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  i               1   13[BANK0 ] unsigned char 
  3181 ;;  d               1   12[BANK0 ] unsigned char 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      unsigned char 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0
  3186 ;; Tracked objects:
  3187 ;;		On entry : 300/100
  3188 ;;		On exit  : 300/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3191 ;;      Params:         0       0       0       0
  3192 ;;      Locals:         0       2       0       0
  3193 ;;      Temps:          0       1       0       0
  3194 ;;      Totals:         0       3       0       0
  3195 ;;Total ram usage:        3 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    3
  3198 ;; This function calls:
  3199 ;;		Nothing
  3200 ;; This function is called by:
  3201 ;;		_EditAddressMemory
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           
  3206                           ;psect for function _RX
  3207  067B                     _RX:	
  3208                           
  3209                           ;prog.c: 237: unsigned char d = 0;
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in _RX: [wreg+status,2+status,0]
  3213  067B  1283               	bcf	3,5	;RP0=0, select bank0
  3214  067C  01AC               	clrf	RX@d
  3215                           
  3216                           ;prog.c: 238: for (unsigned char i = 0; i < 8; i++) {
  3217  067D  01AD               	clrf	RX@i
  3218  067E                     l192:	
  3219                           
  3220                           ;prog.c: 239: TRISA3 = 0;
  3221  067E  1683               	bsf	3,5	;RP0=1, select bank1
  3222  067F  1185               	bcf	5,3	;volatile
  3223                           
  3224                           ;prog.c: 240: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3225  0680  2E81               	nop2	;2 cycle nop
  3226  0681  2E82               	nop2	;2 cycle nop
  3227  0682  2E83               	nop2	;2 cycle nop
  3228                           
  3229                           ;prog.c: 241: TRISA3 = 1;
  3230  0683  1683               	bsf	3,5	;RP0=1, select bank1
  3231  0684  1303               	bcf	3,6	;RP1=0, select bank1
  3232  0685  1585               	bsf	5,3	;volatile
  3233                           
  3234                           ;prog.c: 242: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3235  0686  2E87               	nop2	;2 cycle nop
  3236  0687  2E88               	nop2	;2 cycle nop
  3237                           
  3238                           ;prog.c: 243: d >>= 1;
  3239  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3240  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3241  068A  1003               	clrc
  3242  068B  0CAC               	rrf	RX@d,f
  3243                           
  3244                           ;prog.c: 244: if (RA3 == 1) d |= 0x80;
  3245  068C  1985               	btfsc	5,3	;volatile
  3246  068D  17AC               	bsf	RX@d,7
  3247                           
  3248                           ;prog.c: 245: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3249  068E  3013               	movlw	19
  3250  068F  00AB               	movwf	??_RX
  3251  0690                     u4647:	
  3252  0690  0BAB               	decfsz	??_RX,f
  3253  0691  2E90               	goto	u4647
  3254  0692  2E93               	nop2	;nop
  3255  0693  3008               	movlw	8
  3256  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0695  1303               	bcf	3,6	;RP1=0, select bank0
  3258  0696  0AAD               	incf	RX@i,f
  3259  0697  022D               	subwf	RX@i,w
  3260  0698  1C03               	skipc
  3261  0699  2E7E               	goto	l192
  3262                           
  3263                           ;prog.c: 246: }
  3264                           ;prog.c: 247: return d;
  3265  069A  082C               	movf	RX@d,w
  3266  069B  0008               	return
  3267  069C                     __end_of_RX:	
  3268                           
  3269                           	psect	text19
  3270  0515                     __ptext19:	
  3271 ;; *************** function _INIT *****************
  3272 ;; Defined at:
  3273 ;;		line 201 in file "prog.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;		None
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;		None
  3278 ;; Return value:  Size  Location     Type
  3279 ;;		None               void
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0
  3282 ;; Tracked objects:
  3283 ;;		On entry : 300/0
  3284 ;;		On exit  : 300/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3287 ;;      Params:         0       0       0       0
  3288 ;;      Locals:         0       0       0       0
  3289 ;;      Temps:          0       1       0       0
  3290 ;;      Totals:         0       1       0       0
  3291 ;;Total ram usage:        1 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    3
  3294 ;; This function calls:
  3295 ;;		Nothing
  3296 ;; This function is called by:
  3297 ;;		_EditAddressMemory
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           
  3303                           ;psect for function _INIT
  3304  0515                     _INIT:	
  3305                           
  3306                           ;prog.c: 202: static bit b;
  3307                           ;prog.c: 203: b = 0;
  3308                           
  3309                           ;incstack = 0
  3310                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3311  0515  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  3312                           
  3313                           ;prog.c: 204: TRISA3 = 1;
  3314  0516  1683               	bsf	3,5	;RP0=1, select bank1
  3315  0517  1585               	bsf	5,3	;volatile
  3316                           
  3317                           ;prog.c: 205: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3318  0518  3006               	movlw	6
  3319  0519  1283               	bcf	3,5	;RP0=0, select bank0
  3320  051A  00AB               	movwf	??_INIT
  3321  051B                     u4657:	
  3322  051B  0BAB               	decfsz	??_INIT,f
  3323  051C  2D1B               	goto	u4657
  3324  051D  0000               	nop
  3325                           
  3326                           ;prog.c: 206: TRISA3 = 0;
  3327  051E  1683               	bsf	3,5	;RP0=1, select bank1
  3328  051F  1303               	bcf	3,6	;RP1=0, select bank1
  3329  0520  1185               	bcf	5,3	;volatile
  3330                           
  3331                           ;prog.c: 207: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3332  0521  30A6               	movlw	166
  3333  0522  1283               	bcf	3,5	;RP0=0, select bank0
  3334  0523  00AB               	movwf	??_INIT
  3335  0524                     u4667:	
  3336  0524  0BAB               	decfsz	??_INIT,f
  3337  0525  2D24               	goto	u4667
  3338  0526  0000               	nop
  3339                           
  3340                           ;prog.c: 208: TRISA3 = 1;
  3341  0527  1683               	bsf	3,5	;RP0=1, select bank1
  3342  0528  1303               	bcf	3,6	;RP1=0, select bank1
  3343  0529  1585               	bsf	5,3	;volatile
  3344                           
  3345                           ;prog.c: 209: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3346  052A  3015               	movlw	21
  3347  052B  1283               	bcf	3,5	;RP0=0, select bank0
  3348  052C  00AB               	movwf	??_INIT
  3349  052D                     u4677:	
  3350  052D  0BAB               	decfsz	??_INIT,f
  3351  052E  2D2D               	goto	u4677
  3352  052F  0000               	nop
  3353                           
  3354                           ;prog.c: 210: b = RA3;
  3355  0530  1283               	bcf	3,5	;RP0=0, select bank0
  3356  0531  1303               	bcf	3,6	;RP1=0, select bank0
  3357  0532  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  3358  0533  1985               	btfsc	5,3	;volatile
  3359  0534  1459               	bsf	INIT@b/(0+8),INIT@b& (0+7)
  3360                           
  3361                           ;prog.c: 211: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3362  0535  3095               	movlw	149
  3363  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3364  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3365  0538  00AB               	movwf	??_INIT
  3366  0539                     u4687:	
  3367  0539  0BAB               	decfsz	??_INIT,f
  3368  053A  2D39               	goto	u4687
  3369  053B  2D3C               	nop2	;nop
  3370                           
  3371                           ;prog.c: 213: return !b;
  3372  053C  1283               	bcf	3,5	;RP0=0, select bank0
  3373  053D  1303               	bcf	3,6	;RP1=0, select bank0
  3374  053E  1C59               	btfss	INIT@b/(0+8),INIT@b& (0+7)
  3375  053F  2D42               	goto	l3811
  3376  0540  1003               	clrc
  3377  0541  0008               	return
  3378  0542                     l3811:	
  3379  0542  1403               	setc
  3380  0543  0008               	return
  3381  0544                     __end_of_INIT:	
  3382                           
  3383                           	psect	text20
  3384  0544                     __ptext20:	
  3385 ;; *************** function _CellToInd *****************
  3386 ;; Defined at:
  3387 ;;		line 622 in file "prog.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  cell            1    wreg     unsigned char 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  cell            1   23[BANK0 ] unsigned char 
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      void 
  3394 ;; Registers used:
  3395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 200/0
  3398 ;;		On exit  : B00/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3401 ;;      Params:         0       0       0       0
  3402 ;;      Locals:         0       1       0       0
  3403 ;;      Temps:          0       0       0       0
  3404 ;;      Totals:         0       1       0       0
  3405 ;;Total ram usage:        1 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    4
  3408 ;; This function calls:
  3409 ;;		___awdiv
  3410 ;;		___awmod
  3411 ;;		_clrInd
  3412 ;;		_refreshInd
  3413 ;;		_setDigit
  3414 ;; This function is called by:
  3415 ;;		_EditAddressMemory
  3416 ;;		_main
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _CellToInd
  3422  0544                     _CellToInd:	
  3423                           
  3424                           ;incstack = 0
  3425                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3426                           ;CellToInd@cell stored from wreg
  3427  0544  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0545  00B7               	movwf	CellToInd@cell
  3429                           
  3430                           ;prog.c: 623: clrInd();
  3431  0546  27A6               	fcall	_clrInd
  3432                           
  3433                           ;prog.c: 625: if (cell >= 9) {
  3434  0547  3009               	movlw	9
  3435  0548  0237               	subwf	CellToInd@cell,w
  3436                           
  3437                           ;prog.c: 626: setDigit(3, (1 + cell) / 10);
  3438  0549  0837               	movf	CellToInd@cell,w
  3439  054A  1C03               	skipc
  3440  054B  2D65               	goto	L9
  3441  054C  00AD               	movwf	___awdiv@dividend
  3442  054D  01AE               	clrf	___awdiv@dividend+1
  3443  054E  0AAD               	incf	___awdiv@dividend,f
  3444  054F  1903               	skipnz
  3445  0550  0AAE               	incf	___awdiv@dividend+1,f
  3446  0551  300A               	movlw	10
  3447  0552  00AB               	movwf	___awdiv@divisor
  3448  0553  01AC               	clrf	___awdiv@divisor+1
  3449  0554  23D9               	fcall	___awdiv
  3450  0555  082B               	movf	?___awdiv,w
  3451  0556  00B3               	movwf	setDigit@data
  3452  0557  3003               	movlw	3
  3453  0558  2736               	fcall	_setDigit
  3454                           
  3455                           ;prog.c: 627: setDigit(2, (1 + cell) % 10);
  3456  0559  0837               	movf	CellToInd@cell,w
  3457  055A  00AD               	movwf	___awmod@dividend
  3458  055B  01AE               	clrf	___awmod@dividend+1
  3459  055C  0AAD               	incf	___awmod@dividend,f
  3460  055D  1903               	skipnz
  3461  055E  0AAE               	incf	___awmod@dividend+1,f
  3462  055F  300A               	movlw	10
  3463  0560  00AB               	movwf	___awmod@divisor
  3464  0561  01AC               	clrf	___awmod@divisor+1
  3465  0562  24A7               	fcall	___awmod
  3466  0563  082B               	movf	?___awmod,w
  3467  0564  2D6A               	goto	L8
  3468  0565                     L9:	
  3469                           ;prog.c: 629: setDigit(3, 1 + cell);
  3470                           
  3471                           ;prog.c: 628: } else {
  3472                           
  3473  0565  3E01               	addlw	1
  3474  0566  00B3               	movwf	setDigit@data
  3475  0567  3003               	movlw	3
  3476  0568  2736               	fcall	_setDigit
  3477                           
  3478                           ;prog.c: 630: setDigit(2, 34);
  3479  0569  3022               	movlw	34
  3480  056A                     L8:	
  3481  056A  00B3               	movwf	setDigit@data
  3482  056B  3002               	movlw	2
  3483  056C  2736               	fcall	_setDigit
  3484                           
  3485                           ;prog.c: 631: }
  3486                           ;prog.c: 632: setDigit(1, 34);
  3487  056D  3022               	movlw	34
  3488  056E  00B3               	movwf	setDigit@data
  3489  056F  3001               	movlw	1
  3490  0570  2736               	fcall	_setDigit
  3491                           
  3492                           ;prog.c: 634: refreshInd();
  3493  0571  2F48               	ljmp	l3655
  3494  0572                     __end_of_CellToInd:	
  3495                           
  3496                           	psect	text21
  3497  0736                     __ptext21:	
  3498 ;; *************** function _setDigit *****************
  3499 ;; Defined at:
  3500 ;;		line 91 in file "prog.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  a               1    wreg     unsigned char 
  3503 ;;  data            1   19[BANK0 ] unsigned char 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  a               1   22[BANK0 ] unsigned char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      void 
  3508 ;; Registers used:
  3509 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3510 ;; Tracked objects:
  3511 ;;		On entry : 300/0
  3512 ;;		On exit  : B00/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3515 ;;      Params:         0       1       0       0
  3516 ;;      Locals:         0       1       0       0
  3517 ;;      Temps:          0       2       0       0
  3518 ;;      Totals:         0       4       0       0
  3519 ;;Total ram usage:        4 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    3
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_ShowError
  3526 ;;		_indData
  3527 ;;		_CellToInd
  3528 ;;		_main
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           
  3533                           ;psect for function _setDigit
  3534  0736                     _setDigit:	
  3535                           
  3536                           ;incstack = 0
  3537                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3538                           ;setDigit@a stored from wreg
  3539  0736  00B6               	movwf	setDigit@a
  3540                           
  3541                           ;prog.c: 92: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3542  0737  303F               	movlw	63
  3543  0738  0533               	andwf	setDigit@data,w
  3544  0739  00B4               	movwf	??_setDigit
  3545  073A  0836               	movf	setDigit@a,w
  3546  073B  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3547  073C  0084               	movwf	4
  3548  073D  1383               	bcf	3,7	;select IRP bank1
  3549  073E  0800               	movf	0,w
  3550  073F  39C0               	andlw	192
  3551  0740  0434               	iorwf	??_setDigit,w
  3552  0741  00B5               	movwf	??_setDigit+1
  3553  0742  0836               	movf	setDigit@a,w
  3554  0743  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3555  0744  0084               	movwf	4
  3556  0745  0835               	movf	??_setDigit+1,w
  3557  0746  0080               	movwf	0
  3558  0747  0008               	return
  3559  0748                     __end_of_setDigit:	
  3560                           
  3561                           	psect	text22
  3562  0748                     __ptext22:	
  3563 ;; *************** function _refreshInd *****************
  3564 ;; Defined at:
  3565 ;;		line 99 in file "prog.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  a               1   12[BANK0 ] unsigned char 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3574 ;; Tracked objects:
  3575 ;;		On entry : 300/0
  3576 ;;		On exit  : B00/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3579 ;;      Params:         0       0       0       0
  3580 ;;      Locals:         0       1       0       0
  3581 ;;      Temps:          0       1       0       0
  3582 ;;      Totals:         0       2       0       0
  3583 ;;Total ram usage:        2 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    3
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_ShowError
  3590 ;;		_CellToInd
  3591 ;;		_EditAddressMemory
  3592 ;;		_main
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _refreshInd
  3598  0748                     _refreshInd:	
  3599  0748                     l3655:	
  3600                           ;incstack = 0
  3601                           ; Regs used in _refreshInd: [wreg-fsr0h+status,2+status,0]
  3602                           
  3603                           
  3604                           ;prog.c: 100: for (char a = 0; a < 3; a++) {
  3605  0748  01AC               	clrf	refreshInd@a
  3606  0749                     l3661:	
  3607                           
  3608                           ;prog.c: 101: digits[a] = digits_0[a];
  3609  0749  082C               	movf	refreshInd@a,w
  3610  074A  3ED0               	addlw	(low (_digits_0| 0))& (0+255)
  3611  074B  0084               	movwf	4
  3612  074C  1383               	bcf	3,7	;select IRP bank1
  3613  074D  0800               	movf	0,w
  3614  074E  00AB               	movwf	??_refreshInd
  3615  074F  082C               	movf	refreshInd@a,w
  3616  0750  3ECD               	addlw	(low (_digits| 0))& (0+255)
  3617  0751  0084               	movwf	4
  3618  0752  082B               	movf	??_refreshInd,w
  3619  0753  0080               	movwf	0
  3620  0754  3003               	movlw	3
  3621  0755  0AAC               	incf	refreshInd@a,f
  3622  0756  022C               	subwf	refreshInd@a,w
  3623  0757  1803               	btfsc	3,0
  3624  0758  0008               	return
  3625  0759  2F49               	goto	l3661
  3626  075A                     __end_of_refreshInd:	
  3627                           
  3628                           	psect	text23
  3629  07A6                     __ptext23:	
  3630 ;; *************** function _clrInd *****************
  3631 ;; Defined at:
  3632 ;;		line 105 in file "prog.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  a               1   11[BANK0 ] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 200/100
  3643 ;;		On exit  : B00/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3646 ;;      Params:         0       0       0       0
  3647 ;;      Locals:         0       1       0       0
  3648 ;;      Temps:          0       0       0       0
  3649 ;;      Totals:         0       1       0       0
  3650 ;;Total ram usage:        1 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    3
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_ShowError
  3657 ;;		_CellToInd
  3658 ;;		_EditAddressMemory
  3659 ;;		_main
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           
  3664                           ;psect for function _clrInd
  3665  07A6                     _clrInd:	
  3666                           
  3667                           ;prog.c: 106: for (char a = 0; a < 3; a++) {
  3668                           
  3669                           ;incstack = 0
  3670                           ; Regs used in _clrInd: [wreg-fsr0h+status,2+status,0]
  3671  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3672  07A7  01AB               	clrf	clrInd@a
  3673  07A8                     l3673:	
  3674                           
  3675                           ;prog.c: 107: digits_0[a] = 34;
  3676  07A8  082B               	movf	clrInd@a,w
  3677  07A9  3ED0               	addlw	(low (_digits_0| 0))& (0+255)
  3678  07AA  0084               	movwf	4
  3679  07AB  3022               	movlw	34
  3680  07AC  1383               	bcf	3,7	;select IRP bank1
  3681  07AD  0080               	movwf	0
  3682  07AE  3003               	movlw	3
  3683  07AF  0AAB               	incf	clrInd@a,f
  3684  07B0  022B               	subwf	clrInd@a,w
  3685  07B1  1803               	btfsc	3,0
  3686  07B2  0008               	return
  3687  07B3  2FA8               	goto	l3673
  3688  07B4                     __end_of_clrInd:	
  3689                           
  3690                           	psect	text24
  3691  04A7                     __ptext24:	
  3692 ;; *************** function ___awmod *****************
  3693 ;; Defined at:
  3694 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  divisor         2   11[BANK0 ] int 
  3697 ;;  dividend        2   13[BANK0 ] int 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  sign            1   16[BANK0 ] unsigned char 
  3700 ;;  counter         1   15[BANK0 ] unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  2   11[BANK0 ] int 
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : B00/0
  3707 ;;		On exit  : B00/0
  3708 ;;		Unchanged: 800/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3710 ;;      Params:         0       4       0       0
  3711 ;;      Locals:         0       2       0       0
  3712 ;;      Temps:          0       0       0       0
  3713 ;;      Totals:         0       6       0       0
  3714 ;;Total ram usage:        6 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    3
  3717 ;; This function calls:
  3718 ;;		Nothing
  3719 ;; This function is called by:
  3720 ;;		_CellToInd
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           
  3725                           ;psect for function ___awmod
  3726  04A7                     ___awmod:	
  3727                           
  3728                           ;incstack = 0
  3729                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3730  04A7  01B0               	clrf	___awmod@sign
  3731  04A8  1FAE               	btfss	___awmod@dividend+1,7
  3732  04A9  2CB1               	goto	l3751
  3733  04AA  09AD               	comf	___awmod@dividend,f
  3734  04AB  09AE               	comf	___awmod@dividend+1,f
  3735  04AC  0AAD               	incf	___awmod@dividend,f
  3736  04AD  1903               	skipnz
  3737  04AE  0AAE               	incf	___awmod@dividend+1,f
  3738  04AF  01B0               	clrf	___awmod@sign
  3739  04B0  0AB0               	incf	___awmod@sign,f
  3740  04B1                     l3751:	
  3741  04B1  1FAC               	btfss	___awmod@divisor+1,7
  3742  04B2  2CB8               	goto	l3755
  3743  04B3  09AB               	comf	___awmod@divisor,f
  3744  04B4  09AC               	comf	___awmod@divisor+1,f
  3745  04B5  0AAB               	incf	___awmod@divisor,f
  3746  04B6  1903               	skipnz
  3747  04B7  0AAC               	incf	___awmod@divisor+1,f
  3748  04B8                     l3755:	
  3749  04B8  082B               	movf	___awmod@divisor,w
  3750  04B9  042C               	iorwf	___awmod@divisor+1,w
  3751  04BA  1903               	btfsc	3,2
  3752  04BB  2CD7               	goto	l3771
  3753  04BC  01AF               	clrf	___awmod@counter
  3754  04BD                     L10:	
  3755  04BD  0AAF               	incf	___awmod@counter,f
  3756  04BE  1BAC               	btfsc	___awmod@divisor+1,7
  3757  04BF  2CC4               	goto	l3763
  3758  04C0  1003               	clrc
  3759  04C1  0DAB               	rlf	___awmod@divisor,f
  3760  04C2  0DAC               	rlf	___awmod@divisor+1,f
  3761  04C3  2CBD               	goto	L10
  3762  04C4                     l3763:	
  3763  04C4  082C               	movf	___awmod@divisor+1,w
  3764  04C5  022E               	subwf	___awmod@dividend+1,w
  3765  04C6  1D03               	skipz
  3766  04C7  2CCA               	goto	u3395
  3767  04C8  082B               	movf	___awmod@divisor,w
  3768  04C9  022D               	subwf	___awmod@dividend,w
  3769  04CA                     u3395:	
  3770  04CA  1C03               	skipc
  3771  04CB  2CD3               	goto	L11
  3772  04CC  082B               	movf	___awmod@divisor,w
  3773  04CD  02AD               	subwf	___awmod@dividend,f
  3774  04CE  082C               	movf	___awmod@divisor+1,w
  3775  04CF  1C03               	skipc
  3776  04D0  03AE               	decf	___awmod@dividend+1,f
  3777  04D1  02AE               	subwf	___awmod@dividend+1,f
  3778  04D2  1003               	clrc
  3779  04D3                     L11:	
  3780  04D3  0CAC               	rrf	___awmod@divisor+1,f
  3781  04D4  0CAB               	rrf	___awmod@divisor,f
  3782  04D5  0BAF               	decfsz	___awmod@counter,f
  3783  04D6  2CC4               	goto	l3763
  3784  04D7                     l3771:	
  3785  04D7  0830               	movf	___awmod@sign,w
  3786  04D8  1903               	btfsc	3,2
  3787  04D9  2CDF               	goto	l3775
  3788  04DA  09AD               	comf	___awmod@dividend,f
  3789  04DB  09AE               	comf	___awmod@dividend+1,f
  3790  04DC  0AAD               	incf	___awmod@dividend,f
  3791  04DD  1903               	skipnz
  3792  04DE  0AAE               	incf	___awmod@dividend+1,f
  3793  04DF                     l3775:	
  3794  04DF  082E               	movf	___awmod@dividend+1,w
  3795  04E0  00AC               	movwf	?___awmod+1
  3796  04E1  082D               	movf	___awmod@dividend,w
  3797  04E2  00AB               	movwf	?___awmod
  3798  04E3  0008               	return
  3799  04E4                     __end_of___awmod:	
  3800                           
  3801                           	psect	text25
  3802  03D9                     __ptext25:	
  3803 ;; *************** function ___awdiv *****************
  3804 ;; Defined at:
  3805 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  divisor         2   11[BANK0 ] int 
  3808 ;;  dividend        2   13[BANK0 ] int 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  quotient        2   17[BANK0 ] int 
  3811 ;;  sign            1   16[BANK0 ] unsigned char 
  3812 ;;  counter         1   15[BANK0 ] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  2   11[BANK0 ] int 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : B00/0
  3819 ;;		On exit  : B00/0
  3820 ;;		Unchanged: 800/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3822 ;;      Params:         0       4       0       0
  3823 ;;      Locals:         0       4       0       0
  3824 ;;      Temps:          0       0       0       0
  3825 ;;      Totals:         0       8       0       0
  3826 ;;Total ram usage:        8 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    3
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_CellToInd
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function ___awdiv
  3838  03D9                     ___awdiv:	
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3842  03D9  01B0               	clrf	___awdiv@sign
  3843  03DA  1FAC               	btfss	___awdiv@divisor+1,7
  3844  03DB  2BE3               	goto	l3707
  3845  03DC  09AB               	comf	___awdiv@divisor,f
  3846  03DD  09AC               	comf	___awdiv@divisor+1,f
  3847  03DE  0AAB               	incf	___awdiv@divisor,f
  3848  03DF  1903               	skipnz
  3849  03E0  0AAC               	incf	___awdiv@divisor+1,f
  3850  03E1  01B0               	clrf	___awdiv@sign
  3851  03E2  0AB0               	incf	___awdiv@sign,f
  3852  03E3                     l3707:	
  3853  03E3  1FAE               	btfss	___awdiv@dividend+1,7
  3854  03E4  2BEC               	goto	l3713
  3855  03E5  09AD               	comf	___awdiv@dividend,f
  3856  03E6  09AE               	comf	___awdiv@dividend+1,f
  3857  03E7  0AAD               	incf	___awdiv@dividend,f
  3858  03E8  1903               	skipnz
  3859  03E9  0AAE               	incf	___awdiv@dividend+1,f
  3860  03EA  3001               	movlw	1
  3861  03EB  06B0               	xorwf	___awdiv@sign,f
  3862  03EC                     l3713:	
  3863  03EC  01B1               	clrf	___awdiv@quotient
  3864  03ED  01B2               	clrf	___awdiv@quotient+1
  3865  03EE  082B               	movf	___awdiv@divisor,w
  3866  03EF  042C               	iorwf	___awdiv@divisor+1,w
  3867  03F0  1903               	btfsc	3,2
  3868  03F1  2C11               	goto	l3735
  3869  03F2  01AF               	clrf	___awdiv@counter
  3870  03F3                     L12:	
  3871  03F3  0AAF               	incf	___awdiv@counter,f
  3872  03F4  1BAC               	btfsc	___awdiv@divisor+1,7
  3873  03F5  2BFA               	goto	l3723
  3874  03F6  1003               	clrc
  3875  03F7  0DAB               	rlf	___awdiv@divisor,f
  3876  03F8  0DAC               	rlf	___awdiv@divisor+1,f
  3877  03F9  2BF3               	goto	L12
  3878  03FA                     l3723:	
  3879  03FA  1003               	clrc
  3880  03FB  0DB1               	rlf	___awdiv@quotient,f
  3881  03FC  0DB2               	rlf	___awdiv@quotient+1,f
  3882  03FD  082C               	movf	___awdiv@divisor+1,w
  3883  03FE  022E               	subwf	___awdiv@dividend+1,w
  3884  03FF  1D03               	skipz
  3885  0400  2C03               	goto	u3325
  3886  0401  082B               	movf	___awdiv@divisor,w
  3887  0402  022D               	subwf	___awdiv@dividend,w
  3888  0403                     u3325:	
  3889  0403  1C03               	skipc
  3890  0404  2C0D               	goto	L13
  3891  0405  082B               	movf	___awdiv@divisor,w
  3892  0406  02AD               	subwf	___awdiv@dividend,f
  3893  0407  082C               	movf	___awdiv@divisor+1,w
  3894  0408  1C03               	skipc
  3895  0409  03AE               	decf	___awdiv@dividend+1,f
  3896  040A  02AE               	subwf	___awdiv@dividend+1,f
  3897  040B  1431               	bsf	___awdiv@quotient,0
  3898  040C  1003               	clrc
  3899  040D                     L13:	
  3900  040D  0CAC               	rrf	___awdiv@divisor+1,f
  3901  040E  0CAB               	rrf	___awdiv@divisor,f
  3902  040F  0BAF               	decfsz	___awdiv@counter,f
  3903  0410  2BFA               	goto	l3723
  3904  0411                     l3735:	
  3905  0411  0830               	movf	___awdiv@sign,w
  3906  0412  1903               	btfsc	3,2
  3907  0413  2C19               	goto	l3739
  3908  0414  09B1               	comf	___awdiv@quotient,f
  3909  0415  09B2               	comf	___awdiv@quotient+1,f
  3910  0416  0AB1               	incf	___awdiv@quotient,f
  3911  0417  1903               	skipnz
  3912  0418  0AB2               	incf	___awdiv@quotient+1,f
  3913  0419                     l3739:	
  3914  0419  0832               	movf	___awdiv@quotient+1,w
  3915  041A  00AC               	movwf	?___awdiv+1
  3916  041B  0831               	movf	___awdiv@quotient,w
  3917  041C  00AB               	movwf	?___awdiv
  3918  041D  0008               	return
  3919  041E                     __end_of___awdiv:	
  3920                           
  3921                           	psect	text26
  3922  02B6                     __ptext26:	
  3923 ;; *************** function _F *****************
  3924 ;; Defined at:
  3925 ;;		line 471 in file "prog.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  CurrentKeysS    1   10[BANK0 ] unsigned char 
  3930 ;;  dig             1    9[BANK0 ] unsigned char 
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      void 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 300/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3940 ;;      Params:         0       0       0       0
  3941 ;;      Locals:         0       2       0       0
  3942 ;;      Temps:          0       4       0       0
  3943 ;;      Totals:         0       6       0       0
  3944 ;;Total ram usage:        6 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    2
  3947 ;; This function calls:
  3948 ;;		_convDig
  3949 ;;		_get_temp_Async
  3950 ;; This function is called by:
  3951 ;;		Interrupt level 1
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           
  3956                           ;psect for function _F
  3957  02B6                     _F:	
  3958                           
  3959                           ;prog.c: 472: if (T0IF) {
  3960  02B6  1D0B               	btfss	11,2	;volatile
  3961  02B7  2B54               	goto	i1l342
  3962                           
  3963                           ;prog.c: 474: T0IF = 0;
  3964  02B8  110B               	bcf	11,2	;volatile
  3965                           
  3966                           ;prog.c: 475: TMR0 += TMR0_VALUE;
  3967  02B9  30EB               	movlw	235
  3968  02BA  0781               	addwf	1,f	;volatile
  3969                           
  3970                           ;prog.c: 477: if (DigitNumber > 2)DigitNumber = 0;
  3971  02BB  3003               	movlw	3
  3972  02BC  0251               	subwf	_DigitNumber,w
  3973  02BD  1803               	btfsc	3,0
  3974  02BE  01D1               	clrf	_DigitNumber
  3975                           
  3976                           ;prog.c: 478: digitnum = PortAData[DigitNumber];
  3977  02BF  0851               	movf	_DigitNumber,w
  3978  02C0  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  3979  02C1  0084               	movwf	4
  3980  02C2  27B4               	fcall	stringdir
  3981  02C3  00D5               	movwf	_digitnum
  3982                           
  3983                           ;prog.c: 479: unsigned char dig = digits[DigitNumber];
  3984  02C4  0851               	movf	_DigitNumber,w
  3985  02C5  3ECD               	addlw	(low (_digits| 0))& (0+255)
  3986  02C6  0084               	movwf	4
  3987  02C7  1383               	bcf	3,7	;select IRP bank1
  3988  02C8  0800               	movf	0,w
  3989  02C9  00A9               	movwf	F@dig
  3990                           
  3991                           ;prog.c: 480: digitemp = convDig(0b00111111 & dig);
  3992  02CA  393F               	andlw	63
  3993  02CB  24E4               	fcall	_convDig
  3994  02CC  00D4               	movwf	_digitemp
  3995                           
  3996                           ;prog.c: 484: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  3997  02CD  1F29               	btfss	F@dig,6
  3998  02CE  2AD1               	goto	i1l300
  3999  02CF  1554               	bsf	_digitemp,2
  4000  02D0  2AD2               	goto	i1l4287
  4001  02D1                     i1l300:	
  4002  02D1  1154               	bcf	_digitemp,2
  4003  02D2                     i1l4287:	
  4004                           
  4005                           ;prog.c: 485: DigitNumber++;
  4006  02D2  0AD1               	incf	_DigitNumber,f
  4007                           
  4008                           ;prog.c: 487: PORTB = digitemp;
  4009  02D3  0854               	movf	_digitemp,w
  4010  02D4  0086               	movwf	6	;volatile
  4011                           
  4012                           ;prog.c: 488: PORTA = (PORTA & 0b00110110) | digitnum;
  4013  02D5  0805               	movf	5,w	;volatile
  4014  02D6  3936               	andlw	54
  4015  02D7  0455               	iorwf	_digitnum,w
  4016  02D8  0085               	movwf	5	;volatile
  4017  02D9  30FF               	movlw	-1
  4018                           
  4019                           ;prog.c: 489: endInterrupt = 1;
  4020  02DA  1559               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  4021                           
  4022                           ;prog.c: 490: powerOnInterval--;
  4023  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  4024  02DC  07D5               	addwf	_powerOnInterval^(0+128),f
  4025  02DD  1C03               	skipc
  4026  02DE  03D6               	decf	(_powerOnInterval+1)^(0+128),f
  4027                           
  4028                           ;prog.c: 491: if (powerOnInterval == 0 && PowerBlocked == 0) {
  4029  02DF  0855               	movf	_powerOnInterval^(0+128),w
  4030  02E0  0456               	iorwf	(_powerOnInterval+1)^(0+128),w
  4031                           
  4032                           ;prog.c: 492: powerOff = 1;
  4033  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  4034  02E2  1D03               	btfss	3,2
  4035  02E3  2AE9               	goto	L14
  4036  02E4  0853               	movf	_PowerBlocked,w
  4037                           
  4038                           ;prog.c: 493: TRISA4 = 1;
  4039  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  4040  02E6  1903               	btfsc	3,2
  4041  02E7  1605               	bsf	5,4	;volatile
  4042                           
  4043                           ;prog.c: 494: }
  4044                           ;prog.c: 496: static unsigned int KeyTimeCounter = 0;
  4045                           ;prog.c: 497: static unsigned char LastKeysState = 0;
  4046                           ;prog.c: 498: static unsigned char long_press = 0;
  4047                           ;prog.c: 499: static unsigned char ButtonPressTimeIn1 = 0;
  4048                           ;prog.c: 500: static unsigned char ButtonPressTimeIn2 = 0;
  4049                           ;prog.c: 501: static unsigned char ButtonPressTimeOut = 0;
  4050                           ;prog.c: 502: unsigned char CurrentKeysState = 0;
  4051  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  4052  02E9                     L14:	
  4053  02E9  01AA               	clrf	F@CurrentKeysState
  4054                           
  4055                           ;prog.c: 504: if (ButtonPressTimeOut > 0) {
  4056  02EA  084E               	movf	F@ButtonPressTimeOut,w
  4057  02EB  1903               	btfsc	3,2
  4058  02EC  2AEF               	goto	i1l4303
  4059                           
  4060                           ;prog.c: 505: ButtonPressTimeOut--;
  4061  02ED  03CE               	decf	F@ButtonPressTimeOut,f
  4062                           
  4063                           ;prog.c: 506: } else {
  4064  02EE  2B53               	goto	i1l4383
  4065  02EF                     i1l4303:	
  4066                           
  4067                           ;prog.c: 508: KeyCode = 0;
  4068  02EF  01D2               	clrf	_KeyCode	;volatile
  4069                           
  4070                           ;prog.c: 510: if (RA2) {
  4071  02F0  1D05               	btfss	5,2	;volatile
  4072  02F1  2AF6               	goto	i1l4311
  4073  02F2  3019               	movlw	25
  4074                           
  4075                           ;prog.c: 511: CurrentKeysState = CurrentKeysState | 0b00000001;
  4076  02F3  142A               	bsf	F@CurrentKeysState,0
  4077                           
  4078                           ;prog.c: 512: ButtonPressTimeIn1 = 25;
  4079  02F4  00CC               	movwf	F@ButtonPressTimeIn1
  4080                           
  4081                           ;prog.c: 513: } else {
  4082  02F5  2AFC               	goto	i1l4317
  4083  02F6                     i1l4311:	
  4084                           
  4085                           ;prog.c: 514: if (ButtonPressTimeIn1 == 0) {
  4086  02F6  084C               	movf	F@ButtonPressTimeIn1,w
  4087  02F7  1D03               	btfss	3,2
  4088  02F8  2AFB               	goto	i1l4315
  4089                           
  4090                           ;prog.c: 515: CurrentKeysState = CurrentKeysState & 0b11111110;
  4091  02F9  102A               	bcf	F@CurrentKeysState,0
  4092                           
  4093                           ;prog.c: 516: } else {
  4094  02FA  2AFC               	goto	i1l4317
  4095  02FB                     i1l4315:	
  4096                           
  4097                           ;prog.c: 517: ButtonPressTimeIn1--;
  4098  02FB  03CC               	decf	F@ButtonPressTimeIn1,f
  4099  02FC                     i1l4317:	
  4100                           
  4101                           ;prog.c: 518: }
  4102                           ;prog.c: 519: }
  4103                           ;prog.c: 521: if (RA1) {
  4104  02FC  1C85               	btfss	5,1	;volatile
  4105  02FD  2B02               	goto	i1l4323
  4106  02FE  3019               	movlw	25
  4107                           
  4108                           ;prog.c: 522: CurrentKeysState = CurrentKeysState | 0b00000010;
  4109  02FF  14AA               	bsf	F@CurrentKeysState,1
  4110                           
  4111                           ;prog.c: 523: ButtonPressTimeIn2 = 25;
  4112  0300  00CD               	movwf	F@ButtonPressTimeIn2
  4113                           
  4114                           ;prog.c: 524: } else {
  4115  0301  2B08               	goto	i1l4329
  4116  0302                     i1l4323:	
  4117                           
  4118                           ;prog.c: 525: if (ButtonPressTimeIn2 == 0) {
  4119  0302  084D               	movf	F@ButtonPressTimeIn2,w
  4120  0303  1D03               	btfss	3,2
  4121  0304  2B07               	goto	i1l4327
  4122                           
  4123                           ;prog.c: 526: CurrentKeysState = CurrentKeysState & 0b11111101;
  4124  0305  10AA               	bcf	F@CurrentKeysState,1
  4125                           
  4126                           ;prog.c: 527: } else {
  4127  0306  2B08               	goto	i1l4329
  4128  0307                     i1l4327:	
  4129                           
  4130                           ;prog.c: 528: ButtonPressTimeIn2--;
  4131  0307  03CD               	decf	F@ButtonPressTimeIn2,f
  4132  0308                     i1l4329:	
  4133                           
  4134                           ;prog.c: 529: }
  4135                           ;prog.c: 530: }
  4136                           ;prog.c: 532: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4137  0308  084C               	movf	F@ButtonPressTimeIn1,w
  4138  0309  1903               	btfsc	3,2
  4139  030A  2B0F               	goto	i1l4333
  4140  030B  3019               	movlw	25
  4141  030C  064C               	xorwf	F@ButtonPressTimeIn1,w
  4142  030D  1D03               	btfss	3,2
  4143  030E  2B53               	goto	i1l4383
  4144  030F                     i1l4333:	
  4145  030F  084D               	movf	F@ButtonPressTimeIn2,w
  4146  0310  1903               	btfsc	3,2
  4147  0311  2B16               	goto	i1l4337
  4148  0312  3019               	movlw	25
  4149  0313  064D               	xorwf	F@ButtonPressTimeIn2,w
  4150  0314  1D03               	btfss	3,2
  4151  0315  2B53               	goto	i1l4383
  4152  0316                     i1l4337:	
  4153                           
  4154                           ;prog.c: 533: if (CurrentKeysState > 0) {
  4155  0316  082A               	movf	F@CurrentKeysState,w
  4156  0317  1903               	btfsc	3,2
  4157  0318  2B41               	goto	i1l4363
  4158                           
  4159                           ;prog.c: 534: if (LastKeysState != CurrentKeysState) {
  4160  0319  084F               	movf	F@LastKeysState,w
  4161  031A  062A               	xorwf	F@CurrentKeysState,w
  4162  031B  1903               	skipnz
  4163  031C  2B21               	goto	i1l4345
  4164                           
  4165                           ;prog.c: 535: KeyTimeCounter = 0;
  4166                           
  4167                           ;prog.c: 536: long_press = 0;
  4168  031D  235F               	fcall	PL12	;call to abstracted procedure
  4169                           
  4170                           ;prog.c: 537: LastKeysState = CurrentKeysState;
  4171  031E  082A               	movf	F@CurrentKeysState,w
  4172  031F  00CF               	movwf	F@LastKeysState
  4173                           
  4174                           ;prog.c: 538: } else if (KeyTimeCounter < 150) {
  4175  0320  2B38               	goto	i1l4355
  4176  0321                     i1l4345:	
  4177  0321  3000               	movlw	0
  4178  0322  1683               	bsf	3,5	;RP0=1, select bank1
  4179  0323  0254               	subwf	(F@KeyTimeCounter+1)^(0+128),w
  4180  0324  3096               	movlw	150
  4181  0325  1903               	skipnz
  4182  0326  0253               	subwf	F@KeyTimeCounter^(0+128),w
  4183  0327  1803               	skipnc
  4184  0328  2B2D               	goto	i1l4349
  4185                           
  4186                           ;prog.c: 539: KeyTimeCounter++;
  4187  0329  0AD3               	incf	F@KeyTimeCounter^(0+128),f
  4188  032A  1903               	skipnz
  4189  032B  0AD4               	incf	(F@KeyTimeCounter+1)^(0+128),f
  4190                           
  4191                           ;prog.c: 540: } else if (KeyTimeCounter == 150 && !long_press) {
  4192  032C  2B38               	goto	i1l4355
  4193  032D                     i1l4349:	
  4194  032D  3096               	movlw	150
  4195  032E  0653               	xorwf	F@KeyTimeCounter^(0+128),w
  4196  032F  0454               	iorwf	(F@KeyTimeCounter+1)^(0+128),w
  4197  0330  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0331  1D03               	btfss	3,2
  4199  0332  2B39               	goto	L15
  4200  0333  0850               	movf	F@long_press,w
  4201  0334  1D03               	btfss	3,2
  4202  0335  2B38               	goto	i1l4355
  4203                           
  4204                           ;prog.c: 541: long_press = 1;
  4205  0336  01D0               	clrf	F@long_press
  4206  0337  0AD0               	incf	F@long_press,f
  4207  0338                     i1l4355:	
  4208                           
  4209                           ;prog.c: 542: }
  4210                           ;prog.c: 544: if (long_press == 1) {
  4211  0338  1283               	bcf	3,5	;RP0=0, select bank0
  4212  0339                     L15:	
  4213  0339  0B50               	decfsz	F@long_press,w
  4214  033A  2B53               	goto	i1l4383
  4215                           
  4216                           ;prog.c: 545: KeyCode = 30 + LastKeysState + 3;
  4217  033B  084F               	movf	F@LastKeysState,w
  4218  033C  3E21               	addlw	33
  4219  033D  00D2               	movwf	_KeyCode	;volatile
  4220                           
  4221                           ;prog.c: 546: long_press = 2;
  4222  033E  3002               	movlw	2
  4223  033F  00D0               	movwf	F@long_press
  4224  0340  2B51               	goto	i1l4361
  4225  0341                     i1l4363:	
  4226  0341  084F               	movf	F@LastKeysState,w
  4227  0342  1903               	btfsc	3,2
  4228  0343  2B4B               	goto	i1l4377
  4229  0344  0850               	movf	F@long_press,w
  4230  0345  1D03               	btfss	3,2
  4231  0346  2B4B               	goto	i1l4377
  4232                           
  4233                           ;prog.c: 551: KeyCode = 30 + LastKeysState;
  4234  0347  084F               	movf	F@LastKeysState,w
  4235  0348  3E1E               	addlw	30
  4236  0349  00D2               	movwf	_KeyCode	;volatile
  4237  034A  2B4F               	goto	i1l4379
  4238  034B                     i1l4377:	
  4239                           ;prog.c: 554: long_press = 0;
  4240                           
  4241                           ;prog.c: 553: KeyTimeCounter = 0;
  4242                           
  4243                           ;prog.c: 552: LastKeysState = 0;
  4244                           
  4245  034B  3002               	movlw	2
  4246  034C  0650               	xorwf	F@long_press,w
  4247  034D  1D03               	btfss	3,2
  4248  034E  2B53               	goto	i1l4383
  4249  034F                     i1l4379:	
  4250                           
  4251                           ;prog.c: 558: LastKeysState = 0;
  4252  034F  01CF               	clrf	F@LastKeysState
  4253                           
  4254                           ;prog.c: 559: KeyTimeCounter = 0;
  4255                           
  4256                           ;prog.c: 560: long_press = 0;
  4257  0350  235F               	fcall	PL12	;call to abstracted procedure
  4258  0351                     i1l4361:	
  4259                           
  4260                           ;prog.c: 547: ButtonPressTimeOut = 40;
  4261  0351  3028               	movlw	40
  4262  0352  00CE               	movwf	F@ButtonPressTimeOut
  4263  0353                     i1l4383:	
  4264                           
  4265                           ;prog.c: 562: }
  4266                           ;prog.c: 563: }
  4267                           ;prog.c: 564: }
  4268                           ;prog.c: 566: get_temp_Async();
  4269  0353  2031               	fcall	_get_temp_Async
  4270  0354                     i1l342:	
  4271  0354  0828               	movf	??_F+3,w
  4272  0355  00FF               	movwf	127
  4273  0356  0827               	movf	??_F+2,w
  4274  0357  008A               	movwf	10
  4275  0358  0826               	movf	??_F+1,w
  4276  0359  0084               	movwf	4
  4277  035A  0E25               	swapf	??_F^0,w
  4278  035B  0083               	movwf	3
  4279  035C  0EFE               	swapf	126,f
  4280  035D  0E7E               	swapf	126,w
  4281  035E  0009               	retfie
  4282  035F                     __end_of_F:	
  4283  035F                     PL12:	
  4284  035F  1683               	bsf	3,5	;RP0=1, select bank1
  4285  0360  01D3               	clrf	F@KeyTimeCounter^(0+128)
  4286  0361  01D4               	clrf	(F@KeyTimeCounter+1)^(0+128)
  4287  0362  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0363  01D0               	clrf	F@long_press
  4289  0364  0008               	return
  4290  0365                     __end_ofPL12:	
  4291                           
  4292                           	psect	intentry
  4293  0004                     __pintentry:	
  4294                           ;incstack = 0
  4295                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4296                           
  4297  0004                     interrupt_function:	
  4298  007E                     saved_w	set	btemp
  4299  0004  00FE               	movwf	btemp
  4300  0005  0E03               	swapf	3,w
  4301  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4302  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4303  0008  00A5               	movwf	??_F
  4304  0009  0804               	movf	4,w
  4305  000A  00A6               	movwf	??_F+1
  4306  000B  080A               	movf	10,w
  4307  000C  00A7               	movwf	??_F+2
  4308  000D  087F               	movf	btemp+1,w
  4309  000E  00A8               	movwf	??_F+3
  4310  000F  2AB6               	ljmp	_F
  4311                           
  4312                           	psect	text27
  4313  0031                     __ptext27:	
  4314 ;; *************** function _get_temp_Async *****************
  4315 ;; Defined at:
  4316 ;;		line 341 in file "prog.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  temp2           1    4[BANK0 ] unsigned char 
  4321 ;;  temp1           1    3[BANK0 ] unsigned char 
  4322 ;;  i               1    2[BANK0 ] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 300/0
  4329 ;;		On exit  : 300/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4332 ;;      Params:         0       0       0       0
  4333 ;;      Locals:         0       3       0       0
  4334 ;;      Temps:          0       2       0       0
  4335 ;;      Totals:         0       5       0       0
  4336 ;;Total ram usage:        5 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    1
  4339 ;; This function calls:
  4340 ;;		___wmul
  4341 ;;		i1_INIT
  4342 ;;		i1_RX
  4343 ;;		i1_TX
  4344 ;;		i1___awdiv
  4345 ;;		i1_calc_crc
  4346 ;; This function is called by:
  4347 ;;		_F
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _get_temp_Async
  4353  0031                     _get_temp_Async:	
  4354                           
  4355                           ;prog.c: 343: if (!getTemp_flags.ActiveProcess) {
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4359  0031  1FCB               	btfss	_getTemp_flags+3,7
  4360  0032  0008               	return
  4361                           
  4362                           ;prog.c: 345: }
  4363                           ;prog.c: 348: if (getTemp_flags.Init) {
  4364                           
  4365                           ;prog.c: 344: return;
  4366  0033  1C48               	btfss	_getTemp_flags,0
  4367  0034  2840               	goto	i1l238
  4368                           
  4369                           ;prog.c: 349: if (INIT()) {
  4370  0035  259D               	fcall	i1_INIT
  4371  0036  1C03               	btfss	3,0
  4372  0037  283D               	goto	i1l239
  4373  0038  30C3               	movlw	-61
  4374                           
  4375                           ;prog.c: 350: getTemp_flags.Init = 0;
  4376  0039  1048               	bcf	_getTemp_flags,0
  4377                           
  4378                           ;prog.c: 352: getTemp_flags.Send_Address = 1;
  4379  003A  14C8               	bsf	_getTemp_flags,1
  4380                           
  4381                           ;prog.c: 353: getTemp_flags.CountAddressBytes = 0;
  4382  003B  05C8               	andwf	_getTemp_flags,f
  4383                           
  4384                           ;prog.c: 354: } else {
  4385  003C  0008               	return
  4386  003D                     i1l239:	
  4387                           
  4388                           ;prog.c: 355: getTemp_flags.ActiveProcess = 0;
  4389  003D  13CB               	bcf	_getTemp_flags+3,7
  4390                           
  4391                           ;prog.c: 356: getTemp_flags.Error = 1;
  4392  003E  174B               	bsf	_getTemp_flags+3,6
  4393  003F  0008               	return
  4394  0040                     i1l238:	
  4395                           
  4396                           ;prog.c: 360: if (getTemp_flags.Send_Address) {
  4397  0040  1CC8               	btfss	_getTemp_flags,1
  4398  0041  287D               	goto	i1l242
  4399                           
  4400                           ;prog.c: 361: if (Broadcasting || getTemp_flags.SendConvertTemp) {
  4401  0042  18D9               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4402  0043  2846               	goto	i1l3955
  4403  0044  1F48               	btfss	_getTemp_flags,6
  4404  0045  2850               	goto	i1l3961
  4405  0046                     i1l3955:	
  4406                           
  4407                           ;prog.c: 362: TX(0xCC);
  4408  0046  30CC               	movlw	204
  4409  0047  25C7               	fcall	i1_TX
  4410                           
  4411                           ;prog.c: 363: getTemp_flags.CountAddressBytes = 1;
  4412  0048  1283               	bcf	3,5	;RP0=0, select bank0
  4413  0049  1303               	bcf	3,6	;RP1=0, select bank0
  4414  004A  0848               	movf	_getTemp_flags,w
  4415  004B  39C3               	andlw	-61
  4416  004C  3804               	iorlw	4
  4417  004D  00C8               	movwf	_getTemp_flags
  4418  004E                     i1l3959:	
  4419                           
  4420                           ;prog.c: 364: getTemp_flags.Send_Address = 0;
  4421  004E  10C8               	bcf	_getTemp_flags,1
  4422                           
  4423                           ;prog.c: 365: } else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
  4424  004F  0008               	return
  4425  0050                     i1l3961:	
  4426  0050  0C48               	rrf	_getTemp_flags,w
  4427  0051  00A0               	movwf	??_get_temp_Async
  4428  0052  0C20               	rrf	??_get_temp_Async,w
  4429  0053  390F               	andlw	15
  4430  0054  00A1               	movwf	??_get_temp_Async+1
  4431  0055  3008               	movlw	8
  4432  0056  0221               	subwf	??_get_temp_Async+1,w
  4433  0057  1803               	skipnc
  4434  0058  0008               	return
  4435                           
  4436                           ;prog.c: 366: if (getTemp_flags.CountAddressBytes == 0) {
  4437  0059  0C48               	rrf	_getTemp_flags,w
  4438  005A  00A0               	movwf	??_get_temp_Async
  4439  005B  0C20               	rrf	??_get_temp_Async,w
  4440  005C  390F               	andlw	15
  4441  005D  1D03               	skipz
  4442  005E  2861               	goto	i1l3967
  4443                           
  4444                           ;prog.c: 367: TX(0x55);
  4445  005F  3055               	movlw	85
  4446  0060  25C7               	fcall	i1_TX
  4447  0061                     i1l3967:	
  4448                           
  4449                           ;prog.c: 368: }
  4450                           ;prog.c: 369: TX(DS_Address[getTemp_flags.CountAddressBytes]);
  4451  0061  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0062  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0063  0C48               	rrf	_getTemp_flags,w
  4454  0064  00A0               	movwf	??_get_temp_Async
  4455  0065  0C20               	rrf	??_get_temp_Async,w
  4456  0066  390F               	andlw	15
  4457  0067  3EC5               	addlw	(low (_DS_Address| 0))& (0+255)
  4458  0068  0084               	movwf	4
  4459  0069  1383               	bcf	3,7	;select IRP bank1
  4460  006A  0800               	movf	0,w
  4461  006B  25C7               	fcall	i1_TX
  4462                           
  4463                           ;prog.c: 370: getTemp_flags.CountAddressBytes++;
  4464  006C  1283               	bcf	3,5	;RP0=0, select bank0
  4465  006D  1303               	bcf	3,6	;RP1=0, select bank0
  4466  006E  0C48               	rrf	_getTemp_flags,w
  4467  006F  2119               	fcall	PL10	;call to abstracted procedure
  4468  0070  0848               	movf	_getTemp_flags,w
  4469  0071  0620               	xorwf	??_get_temp_Async,w
  4470  0072  39C3               	andlw	-61
  4471  0073  0620               	xorwf	??_get_temp_Async,w
  4472  0074  00C8               	movwf	_getTemp_flags
  4473                           
  4474                           ;prog.c: 372: if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
  4475  0075  0C48               	rrf	_getTemp_flags,w
  4476  0076  00A0               	movwf	??_get_temp_Async
  4477  0077  0C20               	rrf	??_get_temp_Async,w
  4478  0078  390F               	andlw	15
  4479  0079  3A08               	xorlw	8
  4480  007A  1D03               	skipz
  4481  007B  0008               	return
  4482  007C  284E               	goto	i1l3959
  4483  007D                     i1l242:	
  4484                           
  4485                           ;prog.c: 378: if (getTemp_flags.SendConvertTemp) {
  4486  007D  1F48               	btfss	_getTemp_flags,6
  4487  007E  2885               	goto	i1l3979
  4488                           
  4489                           ;prog.c: 379: TX(0x44);
  4490  007F  3044               	movlw	68
  4491  0080  25C7               	fcall	i1_TX
  4492                           
  4493                           ;prog.c: 380: getTemp_flags.SendConvertTemp = 0;
  4494  0081  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0082  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0083  1348               	bcf	_getTemp_flags,6
  4497                           
  4498                           ;prog.c: 382: } else
  4499  0084  0008               	return
  4500  0085                     i1l3979:	
  4501                           
  4502                           ;prog.c: 384: if (getTemp_flags.PauseValue > 0) {
  4503  0085  0849               	movf	_getTemp_flags+1,w
  4504  0086  044A               	iorwf	_getTemp_flags+2,w
  4505  0087  1903               	btfsc	3,2
  4506  0088  2894               	goto	i1l253
  4507                           
  4508                           ;prog.c: 385: getTemp_flags.PauseValue--;
  4509  0089  3001               	movlw	1
  4510  008A  02C9               	subwf	_getTemp_flags+1,f
  4511  008B  3000               	movlw	0
  4512  008C  1C03               	skipc
  4513  008D  03CA               	decf	_getTemp_flags+2,f
  4514  008E  02CA               	subwf	_getTemp_flags+2,f
  4515                           
  4516                           ;prog.c: 386: if (getTemp_flags.PauseValue == 0) {
  4517  008F  0849               	movf	_getTemp_flags+1,w
  4518  0090  044A               	iorwf	_getTemp_flags+2,w
  4519  0091  1903               	btfsc	3,2
  4520                           
  4521                           ;prog.c: 387: getTemp_flags.Init = 1;
  4522  0092  1448               	bsf	_getTemp_flags,0
  4523  0093  0008               	return
  4524  0094                     i1l253:	
  4525                           
  4526                           ;prog.c: 391: if (getTemp_flags.SendGetTemp) {
  4527  0094  1C4B               	btfss	_getTemp_flags+3,0
  4528  0095  289C               	goto	i1l256
  4529                           
  4530                           ;prog.c: 392: TX(0xBE);
  4531  0096  30BE               	movlw	190
  4532  0097  25C7               	fcall	i1_TX
  4533                           
  4534                           ;prog.c: 393: getTemp_flags.SendGetTemp = 0;
  4535  0098  1283               	bcf	3,5	;RP0=0, select bank0
  4536  0099  1303               	bcf	3,6	;RP1=0, select bank0
  4537  009A  104B               	bcf	_getTemp_flags+3,0
  4538                           
  4539                           ;prog.c: 394: } else
  4540  009B  0008               	return
  4541  009C                     i1l256:	
  4542                           
  4543                           ;prog.c: 396: if (getTemp_flags.ReadData) {
  4544  009C  1CCB               	btfss	_getTemp_flags+3,1
  4545  009D  0008               	return
  4546                           
  4547                           ;prog.c: 397: if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
  4548  009E  2111               	fcall	PL6	;call to abstracted procedure
  4549  009F  1803               	skipnc
  4550  00A0  0008               	return
  4551                           
  4552                           ;prog.c: 398: for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (
      +                          DS_ReadData); i++) {
  4553  00A1  01A2               	clrf	get_temp_Async@i
  4554  00A2  28B9               	goto	i1l4001
  4555  00A3                     i1l4003:	
  4556  00A3  2111               	fcall	PL6	;call to abstracted procedure
  4557  00A4  1803               	btfsc	3,0
  4558  00A5  28BD               	goto	i1l4005
  4559                           
  4560                           ;prog.c: 399: DS_ReadData[getTemp_flags.CountDataBytes] = RX();
  4561  00A6  0C4B               	rrf	_getTemp_flags+3,w
  4562  00A7  00A0               	movwf	??_get_temp_Async
  4563  00A8  0C20               	rrf	??_get_temp_Async,w
  4564  00A9  390F               	andlw	15
  4565  00AA  3EBC               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4566  00AB  0084               	movwf	4
  4567  00AC  269C               	fcall	i1_RX
  4568  00AD  1383               	bcf	3,7	;select IRP bank1
  4569  00AE  0080               	movwf	0
  4570                           
  4571                           ;prog.c: 400: getTemp_flags.CountDataBytes++;
  4572  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  4573  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  4574  00B1  0C4B               	rrf	_getTemp_flags+3,w
  4575  00B2  2119               	fcall	PL10	;call to abstracted procedure
  4576  00B3  084B               	movf	_getTemp_flags+3,w
  4577  00B4  0620               	xorwf	??_get_temp_Async,w
  4578  00B5  39C3               	andlw	-61
  4579  00B6  0620               	xorwf	??_get_temp_Async,w
  4580  00B7  00CB               	movwf	_getTemp_flags+3
  4581  00B8  0AA2               	incf	get_temp_Async@i,f
  4582  00B9                     i1l4001:	
  4583  00B9  3003               	movlw	3
  4584  00BA  0222               	subwf	get_temp_Async@i,w
  4585  00BB  1C03               	btfss	3,0
  4586  00BC  28A3               	goto	i1l4003
  4587  00BD                     i1l4005:	
  4588                           
  4589                           ;prog.c: 401: }
  4590                           ;prog.c: 402: if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
  4591  00BD  0C4B               	rrf	_getTemp_flags+3,w
  4592  00BE  00A0               	movwf	??_get_temp_Async
  4593  00BF  0C20               	rrf	??_get_temp_Async,w
  4594  00C0  390F               	andlw	15
  4595  00C1  3A09               	xorlw	9
  4596  00C2  1D03               	skipz
  4597  00C3  0008               	return
  4598                           
  4599                           ;prog.c: 403: if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof 
      +                          (DS_ReadData) - 1)) {
  4600  00C4  3008               	movlw	8
  4601  00C5  00F0               	movwf	i1calc_crc@len
  4602  00C6  30BC               	movlw	(low (_DS_ReadData| 0))& (0+255)
  4603  00C7  2638               	fcall	i1_calc_crc
  4604  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  4605  00C9  0644               	xorwf	(_DS_ReadData^(0+128)+8),w
  4606  00CA  1903               	skipnz
  4607  00CB  28CF               	goto	i1l4011
  4608                           
  4609                           ;prog.c: 404: getTemp_flags.Error = 1;
  4610  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4611  00CD  174B               	bsf	_getTemp_flags+3,6
  4612                           
  4613                           ;prog.c: 405: } else {
  4614  00CE  290E               	goto	i1l4039
  4615  00CF                     i1l4011:	
  4616                           
  4617                           ;prog.c: 407: unsigned char temp1 = DS_ReadData[0];
  4618  00CF  083C               	movf	_DS_ReadData^(0+128),w
  4619  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  4620  00D1  00A3               	movwf	get_temp_Async@temp1
  4621                           
  4622                           ;prog.c: 408: unsigned char temp2 = DS_ReadData[1];
  4623  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  4624  00D3  083D               	movf	(_DS_ReadData^(0+128)+1),w
  4625  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  4626  00D5  00A4               	movwf	get_temp_Async@temp2
  4627                           
  4628                           ;prog.c: 410: temp_drob = temp1 & 0b00001111;
  4629  00D6  0823               	movf	get_temp_Async@temp1,w
  4630  00D7  00D7               	movwf	_temp_drob
  4631  00D8  300F               	movlw	15
  4632  00D9  05D7               	andwf	_temp_drob,f
  4633                           
  4634                           ;prog.c: 411: temp_drob = ((temp_drob * 6) + 2) / 10;
  4635  00DA  300A               	movlw	10
  4636  00DB  00F6               	movwf	i1___awdiv@divisor
  4637  00DC  01F7               	clrf	i1___awdiv@divisor+1
  4638  00DD  0857               	movf	_temp_drob,w
  4639  00DE  00F0               	movwf	___wmul@multiplier
  4640  00DF  3006               	movlw	6
  4641  00E0  01F1               	clrf	___wmul@multiplier+1
  4642  00E1  00F2               	movwf	___wmul@multiplicand
  4643  00E2  01F3               	clrf	___wmul@multiplicand+1
  4644  00E3  26F2               	fcall	___wmul
  4645  00E4  0870               	movf	?___wmul,w
  4646  00E5  3E02               	addlw	2
  4647  00E6  00F8               	movwf	i1___awdiv@dividend
  4648  00E7  0871               	movf	?___wmul+1,w
  4649  00E8  1803               	skipnc
  4650  00E9  3E01               	addlw	1
  4651  00EA  3E00               	addlw	0
  4652  00EB  00F9               	movwf	i1___awdiv@dividend+1
  4653  00EC  241E               	fcall	i1___awdiv
  4654  00ED  0876               	movf	?i1___awdiv,w
  4655  00EE  00D7               	movwf	_temp_drob
  4656  00EF  300F               	movlw	15
  4657                           
  4658                           ;prog.c: 412: temp1 >>= 4;
  4659  00F0  0EA3               	swapf	get_temp_Async@temp1,f
  4660  00F1  05A3               	andwf	get_temp_Async@temp1,f
  4661                           
  4662                           ;prog.c: 413: sign = temp2 & 0x80;
  4663  00F2  0824               	movf	get_temp_Async@temp2,w
  4664  00F3  00D6               	movwf	_sign
  4665  00F4  3080               	movlw	128
  4666  00F5  05D6               	andwf	_sign,f
  4667  00F6  30F0               	movlw	240
  4668                           
  4669                           ;prog.c: 414: temp2 <<= 4;
  4670  00F7  0EA4               	swapf	get_temp_Async@temp2,f
  4671  00F8  05A4               	andwf	get_temp_Async@temp2,f
  4672                           
  4673                           ;prog.c: 415: temp2 &= 0b01110000;
  4674  00F9  3070               	movlw	112
  4675  00FA  05A4               	andwf	get_temp_Async@temp2,f
  4676                           
  4677                           ;prog.c: 416: temp2 |= temp1;
  4678  00FB  0823               	movf	get_temp_Async@temp1,w
  4679  00FC  04A4               	iorwf	get_temp_Async@temp2,f
  4680                           
  4681                           ;prog.c: 418: if (sign) {
  4682  00FD  0856               	movf	_sign,w
  4683  00FE  1903               	btfsc	3,2
  4684  00FF  290C               	goto	i1l4037
  4685                           
  4686                           ;prog.c: 419: temperature = 127 - temp2;
  4687  0100  0824               	movf	get_temp_Async@temp2,w
  4688  0101  3C7F               	sublw	127
  4689  0102  00D8               	movwf	_temperature
  4690                           
  4691                           ;prog.c: 420: temp_drob = 10 - temp_drob;
  4692  0103  0857               	movf	_temp_drob,w
  4693  0104  3C0A               	sublw	10
  4694  0105  00D7               	movwf	_temp_drob
  4695                           
  4696                           ;prog.c: 421: if (temp_drob == 10) {
  4697  0106  3A0A               	xorlw	10
  4698  0107  1D03               	btfss	3,2
  4699  0108  290E               	goto	i1l4039
  4700                           
  4701                           ;prog.c: 422: temp_drob = 0;
  4702  0109  01D7               	clrf	_temp_drob
  4703                           
  4704                           ;prog.c: 423: temperature++;
  4705  010A  0AD8               	incf	_temperature,f
  4706  010B  290E               	goto	i1l4039
  4707  010C                     i1l4037:	
  4708                           
  4709                           ;prog.c: 426: temperature = temp2;
  4710  010C  0824               	movf	get_temp_Async@temp2,w
  4711  010D  00D8               	movwf	_temperature
  4712  010E                     i1l4039:	
  4713                           
  4714                           ;prog.c: 427: }
  4715                           ;prog.c: 429: }
  4716                           ;prog.c: 430: getTemp_flags.ReadData = 0;
  4717  010E  10CB               	bcf	_getTemp_flags+3,1
  4718                           
  4719                           ;prog.c: 431: getTemp_flags.ActiveProcess = 0;
  4720  010F  13CB               	bcf	_getTemp_flags+3,7
  4721  0110  0008               	return
  4722  0111                     __end_of_get_temp_Async:	
  4723  0111                     PL6:	
  4724  0111  0C4B               	rrf	_getTemp_flags+3,w
  4725  0112  00A0               	movwf	??_get_temp_Async
  4726  0113  0C20               	rrf	??_get_temp_Async,w
  4727  0114  390F               	andlw	15
  4728  0115  00A1               	movwf	??_get_temp_Async+1
  4729  0116  3009               	movlw	9
  4730  0117  0221               	subwf	??_get_temp_Async+1,w
  4731  0118  0008               	return
  4732  0119                     __end_ofPL6:	
  4733  0119                     PL10:	
  4734  0119  00A0               	movwf	??_get_temp_Async
  4735  011A  0C20               	rrf	??_get_temp_Async,w
  4736  011B  390F               	andlw	15
  4737  011C  00A0               	movwf	??_get_temp_Async
  4738  011D  0AA0               	incf	??_get_temp_Async,f
  4739  011E  0DA0               	rlf	??_get_temp_Async,f
  4740  011F  0DA0               	rlf	??_get_temp_Async,f
  4741  0120  0008               	return
  4742  0121                     __end_ofPL10:	
  4743                           
  4744                           	psect	text28
  4745  0638                     __ptext28:	
  4746 ;; *************** function i1_calc_crc *****************
  4747 ;; Defined at:
  4748 ;;		line 250 in file "prog.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  mas             1    wreg     PTR unsigned char 
  4751 ;;		 -> EditAddressMemory@CellsData_254(8), DS_ReadData(9), 
  4752 ;;  len             1    0[COMMON] unsigned char 
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;  mas             1    1[COMMON] PTR unsigned char 
  4755 ;;		 -> EditAddressMemory@CellsData_254(8), DS_ReadData(9), 
  4756 ;;  calc_crc        1    5[COMMON] unsigned char 
  4757 ;;  calc_crc        1    4[COMMON] unsigned char 
  4758 ;;  calc_crc        1    3[COMMON] unsigned char 
  4759 ;;  calc_crc        1    2[COMMON] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      unsigned char 
  4762 ;; Registers used:
  4763 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4764 ;; Tracked objects:
  4765 ;;		On entry : 300/0
  4766 ;;		On exit  : 300/0
  4767 ;;		Unchanged: 300/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4769 ;;      Params:         1       0       0       0
  4770 ;;      Locals:         5       0       0       0
  4771 ;;      Temps:          0       0       0       0
  4772 ;;      Totals:         6       0       0       0
  4773 ;;Total ram usage:        6 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_get_temp_Async
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function i1_calc_crc
  4784  0638                     i1_calc_crc:	
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in i1_calc_crc: [wreg-fsr0h+status,2+status,0]
  4788                           ;i1calc_crc@mas stored from wreg
  4789  0638  00F1               	movwf	i1calc_crc@mas
  4790                           
  4791                           ;prog.c: 251: unsigned char crc = 0;
  4792  0639  01F5               	clrf	i1calc_crc@crc
  4793                           
  4794                           ;prog.c: 252: while (len--) {
  4795  063A  2E55               	goto	i1l3935
  4796  063B                     i1l3915:	
  4797                           
  4798                           ;prog.c: 253: unsigned char dat = *mas++;
  4799  063B  0871               	movf	i1calc_crc@mas,w
  4800  063C  0084               	movwf	4
  4801  063D  1383               	bcf	3,7	;select IRP bank0
  4802  063E  0800               	movf	0,w
  4803  063F  00F2               	movwf	i1calc_crc@dat
  4804  0640  0AF1               	incf	i1calc_crc@mas,f
  4805                           
  4806                           ;prog.c: 254: for (unsigned char i = 0; i < 8; i++) {
  4807  0641  01F4               	clrf	i1calc_crc@i
  4808  0642                     i1l3925:	
  4809                           
  4810                           ;prog.c: 255: unsigned char fb = (crc ^ dat) & 1;
  4811  0642  0875               	movf	i1calc_crc@crc,w
  4812  0643  0672               	xorwf	i1calc_crc@dat,w
  4813  0644  00F3               	movwf	i1calc_crc@fb
  4814  0645  3001               	movlw	1
  4815  0646  05F3               	andwf	i1calc_crc@fb,f
  4816                           
  4817                           ;prog.c: 256: crc >>= 1;
  4818  0647  1003               	clrc
  4819  0648  0CF5               	rrf	i1calc_crc@crc,f
  4820                           
  4821                           ;prog.c: 257: dat >>= 1;
  4822  0649  1003               	clrc
  4823  064A  0CF2               	rrf	i1calc_crc@dat,f
  4824                           
  4825                           ;prog.c: 258: if (fb) crc ^= 0x8c;
  4826  064B  0873               	movf	i1calc_crc@fb,w
  4827  064C  1903               	btfsc	3,2
  4828  064D  2E50               	goto	i1l3933
  4829  064E  308C               	movlw	140
  4830  064F  06F5               	xorwf	i1calc_crc@crc,f
  4831  0650                     i1l3933:	
  4832  0650  3008               	movlw	8
  4833  0651  0AF4               	incf	i1calc_crc@i,f
  4834  0652  0274               	subwf	i1calc_crc@i,w
  4835  0653  1C03               	skipc
  4836  0654  2E42               	goto	i1l3925
  4837  0655                     i1l3935:	
  4838  0655  03F0               	decf	i1calc_crc@len,f
  4839  0656  0F70               	incfsz	i1calc_crc@len,w
  4840  0657  2E3B               	goto	i1l3915
  4841                           
  4842                           ;prog.c: 259: }
  4843                           ;prog.c: 260: }
  4844                           ;prog.c: 261: return crc;
  4845  0658  0875               	movf	i1calc_crc@crc,w
  4846  0659  0008               	return
  4847  065A                     __end_ofi1_calc_crc:	
  4848                           
  4849                           	psect	text29
  4850  041E                     __ptext29:	
  4851 ;; *************** function i1___awdiv *****************
  4852 ;; Defined at:
  4853 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  divisor         2    6[COMMON] int 
  4856 ;;  dividend        2    8[COMMON] int 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  __awdiv         2   12[COMMON] int 
  4859 ;;  __awdiv         1   11[COMMON] unsigned char 
  4860 ;;  __awdiv         1   10[COMMON] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  2    6[COMMON] int 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0
  4865 ;; Tracked objects:
  4866 ;;		On entry : 300/0
  4867 ;;		On exit  : 300/0
  4868 ;;		Unchanged: 300/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4870 ;;      Params:         4       0       0       0
  4871 ;;      Locals:         4       0       0       0
  4872 ;;      Temps:          0       0       0       0
  4873 ;;      Totals:         8       0       0       0
  4874 ;;Total ram usage:        8 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_get_temp_Async
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function i1___awdiv
  4885  041E                     i1___awdiv:	
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4889  041E  01FB               	clrf	i1___awdiv@sign
  4890  041F  1FF7               	btfss	i1___awdiv@divisor+1,7
  4891  0420  2C28               	goto	i1l2819
  4892  0421  09F6               	comf	i1___awdiv@divisor,f
  4893  0422  09F7               	comf	i1___awdiv@divisor+1,f
  4894  0423  0AF6               	incf	i1___awdiv@divisor,f
  4895  0424  1903               	skipnz
  4896  0425  0AF7               	incf	i1___awdiv@divisor+1,f
  4897  0426  01FB               	clrf	i1___awdiv@sign
  4898  0427  0AFB               	incf	i1___awdiv@sign,f
  4899  0428                     i1l2819:	
  4900  0428  1FF9               	btfss	i1___awdiv@dividend+1,7
  4901  0429  2C31               	goto	i1l2825
  4902  042A  09F8               	comf	i1___awdiv@dividend,f
  4903  042B  09F9               	comf	i1___awdiv@dividend+1,f
  4904  042C  0AF8               	incf	i1___awdiv@dividend,f
  4905  042D  1903               	skipnz
  4906  042E  0AF9               	incf	i1___awdiv@dividend+1,f
  4907  042F  3001               	movlw	1
  4908  0430  06FB               	xorwf	i1___awdiv@sign,f
  4909  0431                     i1l2825:	
  4910  0431  01FC               	clrf	i1___awdiv@quotient
  4911  0432  01FD               	clrf	i1___awdiv@quotient+1
  4912  0433  0876               	movf	i1___awdiv@divisor,w
  4913  0434  0477               	iorwf	i1___awdiv@divisor+1,w
  4914  0435  1903               	btfsc	3,2
  4915  0436  2C56               	goto	i1l2847
  4916  0437  01FA               	clrf	i1___awdiv@counter
  4917  0438                     L16:	
  4918  0438  0AFA               	incf	i1___awdiv@counter,f
  4919  0439  1BF7               	btfsc	i1___awdiv@divisor+1,7
  4920  043A  2C3F               	goto	i1l2835
  4921  043B  1003               	clrc
  4922  043C  0DF6               	rlf	i1___awdiv@divisor,f
  4923  043D  0DF7               	rlf	i1___awdiv@divisor+1,f
  4924  043E  2C38               	goto	L16
  4925  043F                     i1l2835:	
  4926  043F  1003               	clrc
  4927  0440  0DFC               	rlf	i1___awdiv@quotient,f
  4928  0441  0DFD               	rlf	i1___awdiv@quotient+1,f
  4929  0442  0877               	movf	i1___awdiv@divisor+1,w
  4930  0443  0279               	subwf	i1___awdiv@dividend+1,w
  4931  0444  1D03               	skipz
  4932  0445  2C48               	goto	u217_25
  4933  0446  0876               	movf	i1___awdiv@divisor,w
  4934  0447  0278               	subwf	i1___awdiv@dividend,w
  4935  0448                     u217_25:	
  4936  0448  1C03               	skipc
  4937  0449  2C52               	goto	L17
  4938  044A  0876               	movf	i1___awdiv@divisor,w
  4939  044B  02F8               	subwf	i1___awdiv@dividend,f
  4940  044C  0877               	movf	i1___awdiv@divisor+1,w
  4941  044D  1C03               	skipc
  4942  044E  03F9               	decf	i1___awdiv@dividend+1,f
  4943  044F  02F9               	subwf	i1___awdiv@dividend+1,f
  4944  0450  147C               	bsf	i1___awdiv@quotient,0
  4945  0451  1003               	clrc
  4946  0452                     L17:	
  4947  0452  0CF7               	rrf	i1___awdiv@divisor+1,f
  4948  0453  0CF6               	rrf	i1___awdiv@divisor,f
  4949  0454  0BFA               	decfsz	i1___awdiv@counter,f
  4950  0455  2C3F               	goto	i1l2835
  4951  0456                     i1l2847:	
  4952  0456  087B               	movf	i1___awdiv@sign,w
  4953  0457  1903               	btfsc	3,2
  4954  0458  2C5E               	goto	i1l2851
  4955  0459  09FC               	comf	i1___awdiv@quotient,f
  4956  045A  09FD               	comf	i1___awdiv@quotient+1,f
  4957  045B  0AFC               	incf	i1___awdiv@quotient,f
  4958  045C  1903               	skipnz
  4959  045D  0AFD               	incf	i1___awdiv@quotient+1,f
  4960  045E                     i1l2851:	
  4961  045E  087D               	movf	i1___awdiv@quotient+1,w
  4962  045F  00F7               	movwf	?i1___awdiv+1
  4963  0460  087C               	movf	i1___awdiv@quotient,w
  4964  0461  00F6               	movwf	?i1___awdiv
  4965  0462  0008               	return
  4966  0463                     __end_ofi1___awdiv:	
  4967                           
  4968                           	psect	text30
  4969  05C7                     __ptext30:	
  4970 ;; *************** function i1_TX *****************
  4971 ;; Defined at:
  4972 ;;		line 216 in file "prog.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  cmd             1    wreg     unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  cmd             1    1[COMMON] unsigned char 
  4977 ;;  TX              1    3[COMMON] unsigned char 
  4978 ;;  TX              1    2[COMMON] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0
  4983 ;; Tracked objects:
  4984 ;;		On entry : 300/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4988 ;;      Params:         0       0       0       0
  4989 ;;      Locals:         3       0       0       0
  4990 ;;      Temps:          1       0       0       0
  4991 ;;      Totals:         4       0       0       0
  4992 ;;Total ram usage:        4 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_get_temp_Async
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function i1_TX
  5003  05C7                     i1_TX:	
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  5007                           ;i1TX@cmd stored from wreg
  5008  05C7  00F1               	movwf	i1TX@cmd
  5009                           
  5010                           ;prog.c: 218: unsigned char i = 0;
  5011  05C8  01F3               	clrf	i1TX@i
  5012                           
  5013                           ;prog.c: 219: temp = cmd;
  5014  05C9  00F2               	movwf	i1TX@temp
  5015                           
  5016                           ;prog.c: 220: for (i = 0; i < 8; i++) {
  5017  05CA  01F3               	clrf	i1TX@i
  5018  05CB                     i1l185:	
  5019                           
  5020                           ;prog.c: 221: if (temp & 0x01) {
  5021  05CB  1C72               	btfss	i1TX@temp,0
  5022  05CC  2DDB               	goto	i1l187
  5023                           
  5024                           ;prog.c: 222: TRISA3 = 0;
  5025  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  5026  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  5027  05CF  1185               	bcf	5,3	;volatile
  5028                           
  5029                           ;prog.c: 223: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5030  05D0  2DD1               	nop2	;2 cycle nop
  5031  05D1  2DD2               	nop2	;2 cycle nop
  5032  05D2  0000               	nop
  5033                           
  5034                           ;prog.c: 224: TRISA3 = 1;
  5035  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  5036  05D4  1303               	bcf	3,6	;RP1=0, select bank1
  5037  05D5  1585               	bsf	5,3	;volatile
  5038                           
  5039                           ;prog.c: 225: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5040  05D6  3017               	movlw	23
  5041  05D7  00F0               	movwf	??i1_TX
  5042  05D8                     u469_27:	
  5043  05D8  0BF0               	decfsz	??i1_TX,f
  5044  05D9  2DD8               	goto	u469_27
  5045                           
  5046                           ;prog.c: 226: } else {
  5047  05DA  2DE8               	goto	i1l2759
  5048  05DB                     i1l187:	
  5049                           
  5050                           ;prog.c: 227: TRISA3 = 0;
  5051  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  5052  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  5053  05DD  1185               	bcf	5,3	;volatile
  5054                           
  5055                           ;prog.c: 228: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5056  05DE  3017               	movlw	23
  5057  05DF  00F0               	movwf	??i1_TX
  5058  05E0                     u470_27:	
  5059  05E0  0BF0               	decfsz	??i1_TX,f
  5060  05E1  2DE0               	goto	u470_27
  5061                           
  5062                           ;prog.c: 229: TRISA3 = 1;
  5063  05E2  1683               	bsf	3,5	;RP0=1, select bank1
  5064  05E3  1303               	bcf	3,6	;RP1=0, select bank1
  5065  05E4  1585               	bsf	5,3	;volatile
  5066                           
  5067                           ;prog.c: 230: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5068  05E5  2DE6               	nop2	;2 cycle nop
  5069  05E6  2DE7               	nop2	;2 cycle nop
  5070  05E7  0000               	nop
  5071  05E8                     i1l2759:	
  5072  05E8  3008               	movlw	8
  5073                           
  5074                           ;prog.c: 231: }
  5075                           ;prog.c: 232: temp >>= 1;
  5076  05E9  1003               	clrc
  5077  05EA  0CF2               	rrf	i1TX@temp,f
  5078  05EB  0AF3               	incf	i1TX@i,f
  5079  05EC  0273               	subwf	i1TX@i,w
  5080  05ED  1803               	btfsc	3,0
  5081  05EE  0008               	return
  5082  05EF  2DCB               	goto	i1l185
  5083  05F0                     __end_ofi1_TX:	
  5084                           
  5085                           	psect	text31
  5086  069C                     __ptext31:	
  5087 ;; *************** function i1_RX *****************
  5088 ;; Defined at:
  5089 ;;		line 236 in file "prog.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;		None
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  RX              1    2[COMMON] unsigned char 
  5094 ;;  RX              1    1[COMMON] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      unsigned char 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0
  5099 ;; Tracked objects:
  5100 ;;		On entry : 300/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5104 ;;      Params:         0       0       0       0
  5105 ;;      Locals:         2       0       0       0
  5106 ;;      Temps:          1       0       0       0
  5107 ;;      Totals:         3       0       0       0
  5108 ;;Total ram usage:        3 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_get_temp_Async
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           
  5118                           ;psect for function i1_RX
  5119  069C                     i1_RX:	
  5120                           
  5121                           ;prog.c: 237: unsigned char d = 0;
  5122                           
  5123                           ;incstack = 0
  5124                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  5125  069C  01F1               	clrf	i1RX@d
  5126                           
  5127                           ;prog.c: 238: for (unsigned char i = 0; i < 8; i++) {
  5128  069D  01F2               	clrf	i1RX@i
  5129  069E                     i1l192:	
  5130                           
  5131                           ;prog.c: 239: TRISA3 = 0;
  5132  069E  1683               	bsf	3,5	;RP0=1, select bank1
  5133  069F  1303               	bcf	3,6	;RP1=0, select bank1
  5134  06A0  1185               	bcf	5,3	;volatile
  5135                           
  5136                           ;prog.c: 240: _delay((unsigned long)((6)*(4000000/4000000.0)));
  5137  06A1  2EA2               	nop2	;2 cycle nop
  5138  06A2  2EA3               	nop2	;2 cycle nop
  5139  06A3  2EA4               	nop2	;2 cycle nop
  5140                           
  5141                           ;prog.c: 241: TRISA3 = 1;
  5142  06A4  1683               	bsf	3,5	;RP0=1, select bank1
  5143  06A5  1303               	bcf	3,6	;RP1=0, select bank1
  5144  06A6  1585               	bsf	5,3	;volatile
  5145                           
  5146                           ;prog.c: 242: _delay((unsigned long)((4)*(4000000/4000000.0)));
  5147  06A7  2EA8               	nop2	;2 cycle nop
  5148  06A8  2EA9               	nop2	;2 cycle nop
  5149                           
  5150                           ;prog.c: 243: d >>= 1;
  5151  06A9  1003               	clrc
  5152  06AA  0CF1               	rrf	i1RX@d,f
  5153                           
  5154                           ;prog.c: 244: if (RA3 == 1) d |= 0x80;
  5155  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  5156  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  5157  06AD  1985               	btfsc	5,3	;volatile
  5158  06AE  17F1               	bsf	i1RX@d,7
  5159                           
  5160                           ;prog.c: 245: _delay((unsigned long)((60)*(4000000/4000000.0)));
  5161  06AF  3013               	movlw	19
  5162  06B0  00F0               	movwf	??i1_RX
  5163  06B1                     u471_27:	
  5164  06B1  0BF0               	decfsz	??i1_RX,f
  5165  06B2  2EB1               	goto	u471_27
  5166  06B3  2EB4               	nop2	;nop
  5167  06B4  3008               	movlw	8
  5168  06B5  0AF2               	incf	i1RX@i,f
  5169  06B6  0272               	subwf	i1RX@i,w
  5170  06B7  1C03               	skipc
  5171  06B8  2E9E               	goto	i1l192
  5172                           
  5173                           ;prog.c: 246: }
  5174                           ;prog.c: 247: return d;
  5175  06B9  0871               	movf	i1RX@d,w
  5176  06BA  0008               	return
  5177  06BB                     __end_ofi1_RX:	
  5178                           
  5179                           	psect	text32
  5180  059D                     __ptext32:	
  5181 ;; *************** function i1_INIT *****************
  5182 ;; Defined at:
  5183 ;;		line 201 in file "prog.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;		None               void
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0
  5192 ;; Tracked objects:
  5193 ;;		On entry : 300/0
  5194 ;;		On exit  : 300/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5197 ;;      Params:         0       0       0       0
  5198 ;;      Locals:         0       0       0       0
  5199 ;;      Temps:          1       0       0       0
  5200 ;;      Totals:         1       0       0       0
  5201 ;;Total ram usage:        1 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_get_temp_Async
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function i1_INIT
  5212  059D                     i1_INIT:	
  5213                           
  5214                           ;prog.c: 202: static bit b;
  5215                           ;prog.c: 203: b = 0;
  5216                           
  5217                           ;incstack = 0
  5218                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  5219  059D  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  5220                           
  5221                           ;prog.c: 204: TRISA3 = 1;
  5222  059E  1683               	bsf	3,5	;RP0=1, select bank1
  5223  059F  1585               	bsf	5,3	;volatile
  5224                           
  5225                           ;prog.c: 205: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5226  05A0  3006               	movlw	6
  5227  05A1  00F0               	movwf	??i1_INIT
  5228  05A2                     u472_27:	
  5229  05A2  0BF0               	decfsz	??i1_INIT,f
  5230  05A3  2DA2               	goto	u472_27
  5231  05A4  0000               	nop
  5232                           
  5233                           ;prog.c: 206: TRISA3 = 0;
  5234  05A5  1683               	bsf	3,5	;RP0=1, select bank1
  5235  05A6  1303               	bcf	3,6	;RP1=0, select bank1
  5236  05A7  1185               	bcf	5,3	;volatile
  5237                           
  5238                           ;prog.c: 207: _delay((unsigned long)((500)*(4000000/4000000.0)));
  5239  05A8  30A6               	movlw	166
  5240  05A9  00F0               	movwf	??i1_INIT
  5241  05AA                     u473_27:	
  5242  05AA  0BF0               	decfsz	??i1_INIT,f
  5243  05AB  2DAA               	goto	u473_27
  5244  05AC  0000               	nop
  5245                           
  5246                           ;prog.c: 208: TRISA3 = 1;
  5247  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  5248  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  5249  05AF  1585               	bsf	5,3	;volatile
  5250                           
  5251                           ;prog.c: 209: _delay((unsigned long)((65)*(4000000/4000000.0)));
  5252  05B0  3015               	movlw	21
  5253  05B1  00F0               	movwf	??i1_INIT
  5254  05B2                     u474_27:	
  5255  05B2  0BF0               	decfsz	??i1_INIT,f
  5256  05B3  2DB2               	goto	u474_27
  5257  05B4  0000               	nop
  5258                           
  5259                           ;prog.c: 210: b = RA3;
  5260  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  5261  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  5262  05B7  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  5263  05B8  1985               	btfsc	5,3	;volatile
  5264  05B9  1459               	bsf	INIT@b/(0+8),INIT@b& (0+7)
  5265                           
  5266                           ;prog.c: 211: _delay((unsigned long)((450)*(4000000/4000000.0)));
  5267  05BA  3095               	movlw	149
  5268  05BB  00F0               	movwf	??i1_INIT
  5269  05BC                     u475_27:	
  5270  05BC  0BF0               	decfsz	??i1_INIT,f
  5271  05BD  2DBC               	goto	u475_27
  5272  05BE  2DBF               	nop2	;nop
  5273                           
  5274                           ;prog.c: 213: return !b;
  5275  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  5276  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  5277  05C1  1C59               	btfss	INIT@b/(0+8),INIT@b& (0+7)
  5278  05C2  2DC5               	goto	i1l2737
  5279  05C3  1003               	clrc
  5280  05C4  0008               	return
  5281  05C5                     i1l2737:	
  5282  05C5  1403               	setc
  5283  05C6  0008               	return
  5284  05C7                     __end_ofi1_INIT:	
  5285                           
  5286                           	psect	text33
  5287  06F2                     __ptext33:	
  5288 ;; *************** function ___wmul *****************
  5289 ;; Defined at:
  5290 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  multiplier      2    0[COMMON] unsigned int 
  5293 ;;  multiplicand    2    2[COMMON] unsigned int 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  product         2    4[COMMON] unsigned int 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2    0[COMMON] unsigned int 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0
  5300 ;; Tracked objects:
  5301 ;;		On entry : 300/0
  5302 ;;		On exit  : 300/0
  5303 ;;		Unchanged: 300/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5305 ;;      Params:         4       0       0       0
  5306 ;;      Locals:         2       0       0       0
  5307 ;;      Temps:          0       0       0       0
  5308 ;;      Totals:         6       0       0       0
  5309 ;;Total ram usage:        6 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_get_temp_Async
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function ___wmul
  5320  06F2                     ___wmul:	
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5324  06F2  01F4               	clrf	___wmul@product
  5325  06F3  01F5               	clrf	___wmul@product+1
  5326  06F4                     i1l2667:	
  5327  06F4  1C70               	btfss	___wmul@multiplier,0
  5328  06F5  2EFC               	goto	i1l2671
  5329  06F6  0872               	movf	___wmul@multiplicand,w
  5330  06F7  07F4               	addwf	___wmul@product,f
  5331  06F8  1803               	skipnc
  5332  06F9  0AF5               	incf	___wmul@product+1,f
  5333  06FA  0873               	movf	___wmul@multiplicand+1,w
  5334  06FB  07F5               	addwf	___wmul@product+1,f
  5335  06FC                     i1l2671:	
  5336  06FC  1003               	clrc
  5337  06FD  0DF2               	rlf	___wmul@multiplicand,f
  5338  06FE  0DF3               	rlf	___wmul@multiplicand+1,f
  5339  06FF  1003               	clrc
  5340  0700  0CF1               	rrf	___wmul@multiplier+1,f
  5341  0701  0CF0               	rrf	___wmul@multiplier,f
  5342  0702  0870               	movf	___wmul@multiplier,w
  5343  0703  0471               	iorwf	___wmul@multiplier+1,w
  5344  0704  1D03               	btfss	3,2
  5345  0705  2EF4               	goto	i1l2667
  5346  0706  0875               	movf	___wmul@product+1,w
  5347  0707  00F1               	movwf	?___wmul+1
  5348  0708  0874               	movf	___wmul@product,w
  5349  0709  00F0               	movwf	?___wmul
  5350  070A  0008               	return
  5351  070B                     __end_of___wmul:	
  5352                           
  5353                           	psect	text34
  5354  04E4                     __ptext34:	
  5355 ;; *************** function _convDig *****************
  5356 ;; Defined at:
  5357 ;;		line 119 in file "prog.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  dig             1    wreg     unsigned char 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  dig             1    0[COMMON] unsigned char 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      unsigned char 
  5364 ;; Registers used:
  5365 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5366 ;; Tracked objects:
  5367 ;;		On entry : B00/0
  5368 ;;		On exit  : B00/0
  5369 ;;		Unchanged: B00/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5371 ;;      Params:         0       0       0       0
  5372 ;;      Locals:         1       0       0       0
  5373 ;;      Temps:          0       0       0       0
  5374 ;;      Totals:         1       0       0       0
  5375 ;;Total ram usage:        1 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; This function calls:
  5378 ;;		Nothing
  5379 ;; This function is called by:
  5380 ;;		_F
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _convDig
  5386  04E4                     _convDig:	
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5390                           ;convDig@dig stored from wreg
  5391  04E4  00F0               	movwf	convDig@dig
  5392                           
  5393                           ;prog.c: 120: switch (dig) {
  5394  04E5  2D09               	goto	i1l3005
  5395  04E6                     i1l2859:	
  5396  04E6  34DB               	retlw	219
  5397  04E7                     i1l2863:	
  5398  04E7  3418               	retlw	24
  5399  04E8                     i1l2867:	
  5400  04E8  34B3               	retlw	179
  5401  04E9                     i1l2871:	
  5402  04E9  34BA               	retlw	186
  5403  04EA                     i1l2875:	
  5404  04EA  3478               	retlw	120
  5405  04EB                     i1l2879:	
  5406  04EB  34EA               	retlw	234
  5407  04EC                     i1l2883:	
  5408  04EC  34EB               	retlw	235
  5409  04ED                     i1l2887:	
  5410  04ED  3498               	retlw	152
  5411  04EE                     i1l2891:	
  5412  04EE  34FB               	retlw	251
  5413  04EF                     i1l2895:	
  5414  04EF  34FA               	retlw	250
  5415  04F0                     i1l2899:	
  5416  04F0  34F9               	retlw	249
  5417  04F1                     i1l2903:	
  5418  04F1  346B               	retlw	107
  5419  04F2                     i1l2907:	
  5420  04F2  34C3               	retlw	195
  5421  04F3                     i1l2911:	
  5422  04F3  343B               	retlw	59
  5423  04F4                     i1l2915:	
  5424  04F4  34E3               	retlw	227
  5425  04F5                     i1l2919:	
  5426  04F5  34E1               	retlw	225
  5427  04F6                     i1l2923:	
  5428  04F6  34F8               	retlw	248
  5429  04F7                     i1l2927:	
  5430  04F7  3469               	retlw	105
  5431  04F8                     i1l2931:	
  5432  04F8  3441               	retlw	65
  5433  04F9                     i1l2935:	
  5434  04F9  341A               	retlw	26
  5435  04FA                     i1l2939:	
  5436  04FA  3443               	retlw	67
  5437  04FB                     i1l2943:	
  5438  04FB  3429               	retlw	41
  5439  04FC                     i1l2947:	
  5440  04FC  342B               	retlw	43
  5441  04FD                     i1l2951:	
  5442  04FD  34F1               	retlw	241
  5443  04FE                     i1l2955:	
  5444  04FE  3421               	retlw	33
  5445  04FF                     i1l2959:	
  5446  04FF  346A               	retlw	106
  5447  0500                     i1l2963:	
  5448  0500  3463               	retlw	99
  5449  0501                     i1l2967:	
  5450  0501  345B               	retlw	91
  5451  0502                     i1l2971:	
  5452  0502  340B               	retlw	11
  5453  0503                     i1l2975:	
  5454  0503  3471               	retlw	113
  5455  0504                     i1l2979:	
  5456  0504  34B1               	retlw	177
  5457  0505                     i1l2983:	
  5458  0505  34F0               	retlw	240
  5459  0506                     i1l2987:	
  5460  0506  3420               	retlw	32
  5461  0507                     i1l2991:	
  5462  0507  3402               	retlw	2
  5463  0508                     i1l2995:	
  5464  0508  3400               	retlw	0
  5465  0509                     i1l3005:	
  5466  0509  0870               	movf	convDig@dig,w
  5467                           
  5468                           ; Switch size 1, requested type "space"
  5469                           ; Number of cases is 35, Range of values is 0 to 34
  5470                           ; switch strategies available:
  5471                           ; Name         Instructions Cycles
  5472                           ; direct_byte           41     6 (fixed)
  5473                           ; simple_byte          106    54 (average)
  5474                           ; jumptable            260     6 (fixed)
  5475                           ;	Chosen strategy is direct_byte
  5476  050A  0084               	movwf	4
  5477  050B  3023               	movlw	35
  5478  050C  0204               	subwf	4,w
  5479  050D  1803               	skipnc
  5480  050E  3400               	retlw	0
  5481  050F  3006               	movlw	high i1S4551
  5482  0510  008A               	movwf	10
  5483  0511  3015               	movlw	low i1S4551
  5484  0512  0704               	addwf	4,w
  5485  0513  0082               	movwf	2
  5486  0514  0008               	return
  5487  0515                     __end_of_convDig:	
  5488  007E                     btemp	set	126	;btemp
  5489  007E                     wtemp	set	126
  5490  007E                     wtemp0	set	126
  5491  0080                     wtemp1	set	128
  5492  0082                     wtemp2	set	130
  5493  0084                     wtemp3	set	132
  5494  0086                     wtemp4	set	134
  5495  0088                     wtemp5	set	136
  5496  007F                     wtemp6	set	127
  5497  007E                     ttemp	set	126
  5498  007E                     ttemp0	set	126
  5499  0081                     ttemp1	set	129
  5500  0084                     ttemp2	set	132
  5501  0087                     ttemp3	set	135
  5502  007F                     ttemp4	set	127
  5503  007E                     ltemp	set	126
  5504  007E                     ltemp0	set	126
  5505  0082                     ltemp1	set	130
  5506  0086                     ltemp2	set	134
  5507  0080                     ltemp3	set	128
  5508                           
  5509                           	psect	swtext1
  5510  0615                     __pswtext1:	
  5511  0615                     i1S4551:	
  5512  0615  2CE6               	ljmp	i1l2859
  5513  0616  2CE7               	ljmp	i1l2863
  5514  0617  2CE8               	ljmp	i1l2867
  5515  0618  2CE9               	ljmp	i1l2871
  5516  0619  2CEA               	ljmp	i1l2875
  5517  061A  2CEB               	ljmp	i1l2879
  5518  061B  2CEC               	ljmp	i1l2883
  5519  061C  2CED               	ljmp	i1l2887
  5520  061D  2CEE               	ljmp	i1l2891
  5521  061E  2CEF               	ljmp	i1l2895
  5522  061F  2CF0               	ljmp	i1l2899
  5523  0620  2CF1               	ljmp	i1l2903
  5524  0621  2CF2               	ljmp	i1l2907
  5525  0622  2CF3               	ljmp	i1l2911
  5526  0623  2CF4               	ljmp	i1l2915
  5527  0624  2CF5               	ljmp	i1l2919
  5528  0625  2CF6               	ljmp	i1l2923
  5529  0626  2CF7               	ljmp	i1l2927
  5530  0627  2CF8               	ljmp	i1l2931
  5531  0628  2CF9               	ljmp	i1l2935
  5532  0629  2CFA               	ljmp	i1l2939
  5533  062A  2CFB               	ljmp	i1l2943
  5534  062B  2CFC               	ljmp	i1l2947
  5535  062C  2CFD               	ljmp	i1l2951
  5536  062D  2CFE               	ljmp	i1l2955
  5537  062E  2CFF               	ljmp	i1l2959
  5538  062F  2D00               	ljmp	i1l2963
  5539  0630  2D01               	ljmp	i1l2967
  5540  0631  2D02               	ljmp	i1l2971
  5541  0632  2D03               	ljmp	i1l2975
  5542  0633  2D04               	ljmp	i1l2979
  5543  0634  2D05               	ljmp	i1l2983
  5544  0635  2D06               	ljmp	i1l2987
  5545  0636  2D07               	ljmp	i1l2991
  5546  0637  2D08               	ljmp	i1l2995


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         25
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      58
    BANK1            80     28      55
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellIsEmpty	PTR unsigned char  size(1) Largest target is 1
		 -> EditAddressMemory@CellIsEmpty(BANK1[1]), 

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData_258(BANK1[8]), EditAddressMemory@CellsData_254(BANK1[8]), EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 9
		 -> EditAddressMemory@CellsData_254(BANK1[8]), DS_ReadData(BANK1[9]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData_258(BANK1[8]), EditAddressMemory@CellsData_254(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData_258(BANK1[8]), EditAddressMemory@CellsData_254(BANK1[8]), EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), 
		 -> DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->i1___awdiv
    i1___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_ReadCell
    _WriteArrayToEEPROM->_EEWR
    _ShowError->_setDigit
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___awdiv

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   24297
                                             33 BANK0      7     7      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
                               _INIT
              _Reset_powerOnInterval
                        _Run_getTemp
                          _ShowError
                                 _TX
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2947
                                             23 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     287
                                             11 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     418
                                             11 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            14    13      1    2032
                                             19 BANK0     14    13      1
                _FillArrayFromEEPROM
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   29    29      0   10484
                                             25 BANK0      1     1      0
                                              0 BANK1     28    28      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                          _ShowError
                                 _TX
                 _WriteArrayToEEPROM
                           _calc_crc
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     324
                                             11 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     463
                                             11 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     739
                                             14 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     173
                                             11 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _TX                                                   4     4      0     142
                                             11 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ShowError                                            0     0      0    1708
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             6     4      2    2256
                                             19 BANK0      6     4      2
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2    1226
                                             14 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             11 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   3     3      0     108
                                             11 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _INIT                                                 1     1      0       0
                                             11 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    3278
                                             23 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1    1479
                                             19 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           2     2      0     130
                                             11 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               1     1      0      99
                                             11 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     618
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     828
                                             11 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    6     6      0    1557
                                              5 BANK0      6     6      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       5     5      0    1362
                                              0 BANK0      5     5      0
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                          i1___awdiv
                         i1_calc_crc
 ---------------------------------------------------------------------------------
 (7) i1_calc_crc                                           6     5      1     313
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (7) i1___awdiv                                            8     4      4     352
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 4     4      0      94
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 3     3      0      71
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     322
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___awdiv
     ___awmod
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___awdiv
       ___awmod
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _ShowError
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _calc_crc
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _waitInterrupt
   _INIT
   _Reset_powerOnInterval
   _Run_getTemp
   _ShowError
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _TX
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___awdiv (ARG)
     ___awmod (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1___awdiv
       ___wmul (ARG)
     i1_calc_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1C      37       7       68.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      3A       3       72.5%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7F      10        0.0%
ABS                  0      0      7F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 27 19:37:07 2016

                               _F 02B6              FindCell@addressStart 003E                                 pc 0002  
                              ?_F 0070                       __CFG_CP$OFF 0000                                PL2 02A0  
                              PL4 01ED                                PL6 0111                                PL8 02AE  
                              l83 07CD                                _RX 067B                                _TX 0572  
                    ___awdiv@sign 0030                                fsr 0004               ___wmul@multiplicand 0072  
                      i1_calc_crc 0638                               ??_F 0025                               PL10 0119  
                             PL12 035F                               PL14 01F8                               ?_RX 0070  
                             ?_TX 0070                               l402 0175                               l159 071D  
                             l192 067E                               l185 0576                               l273 046E  
                             l187 0586                               l419 01DA                               l375 0291  
                             RX@d 002C                               RX@i 002D                               l798 06E3  
                             TX@i 002E                               _RA1 0029                               _RA2 002A  
                             _RA3 002B                      __CFG_CPD$OFF 0000                               fsr0 0004  
                             indf 0000                      ___awmod@sign 0030                       main@address 0047  
                 ?_get_temp_Async 0070                              ??_RX 002B                              ??_TX 002B  
                    __CFG_LVP$OFF 0000                              F@dig 0029                    setPoint@dignum 002C  
                            l4105 0371                              l4203 023B                              l4051 0472  
                            l4107 0372                              l2701 06F0                              l4117 0395  
                            l4063 0484                              l4135 03B7                              l4241 026C  
                            l4225 024E                              l4065 0486                              l4057 047B  
                            l4049 046C                              l4145 03D1                              l4243 026E  
                            l4091 04A5                              l4059 047E                              l4253 027B  
                            l4173 0218                              l4165 020D                              l4077 0490  
                            l2717 06D3                              l2709 06BF                              l4149 03D5  
                            l4501 01BC                              l4175 021A                              l3713 03EC  
                            l4265 029E                              l4193 0233                              l4089 04A1  
                            l4521 01DE                              l4505 01CC                              l3723 03FA  
                            l3707 03E3                              l3811 0542                              l4187 022C  
                            l4179 0220                              l4515 01D6                              l4435 015C  
                            l4427 0156                              l3661 0749                              l4189 022D  
                            l4525 01E4                              l4461 0183                              l4453 0173  
                            l4437 015E                              l3735 0411                              l3751 04B1  
                            l3655 0748                              l3903 0610                              l2687 06DD  
                            l4527 01EA                              l4471 0197                              l4439 015F  
                            l3673 07A8                              l3833 0593                              l4473 019A  
                            l4457 017B                              l3739 0419                              l3763 04C4  
                            l3771 04D7                              l3755 04B8                              l3775 04DF  
                            l3783 0783                              l3697 075C                              l4489 01A8  
                            l3795 0725                              l3859 065D                              l3877 0671  
                            l3869 0663                              l3895 0601                              l3879 0676  
                            l3899 060B                              _EERD 0789                              _T0IF 005A  
                            _EEWR 070B                              u4000 03BD                              u4010 03BE  
                            u3325 0403                              u4170 0297                              u4180 0298  
                            _INIT 0515                              u4520 01A0                              u4530 01A1  
                            u3395 04CA                              u3900 0378                              u3910 0379  
                            u3920 0380                              u3930 0381                              u4627 0583  
                            u4637 058B                              u4647 0690                              u4657 051B  
                            u4667 0524                              u4677 052D                              u4687 0539  
                            i1_RX 069C                              i1_TX 05C7                              _TMR0 0001  
                            _main 0121                              _sign 0056                              btemp 007E  
                            ltemp 007E                              start 0010                              ttemp 007E  
                            wtemp 007E        WriteArrayToEEPROM@quantity 002F                    EEWR@INTCON_BUP 002D  
     WriteArrayToEEPROM@container 0031                     __CFG_MCLRE$ON 0000                       i1calc_crc@i 0074  
    __size_of_FillArrayFromEEPROM 0011                             ?_EERD 0070                             ?_EEWR 002B  
                           ?_INIT 0070                             ?i1_RX 0070                             ?i1_TX 0070  
                           INIT@b 02C8                             ?_main 0070                    i1___awdiv@sign 007B  
                 __end_of___awdiv 041E                   __end_of___lbdiv 06F2                             _EEADR 009B  
                   __CFG_WDTE$OFF 0000                   __end_of___awmod 04E4                   __end_of___lbmod 06D7  
                           _CMCON 001F                   ___awdiv@divisor 002B                             _T2CON 0012  
                           TX@cmd 002C                             i1l300 02D1                             i1l242 007D  
                           i1l253 0094                             i1l238 0040                             i1l342 0354  
                           i1l239 003D                             i1l192 069E                             i1l256 009C  
                           i1l185 05CB                             i1l187 05DB                             i1RX@d 0071  
                           i1RX@i 0072                             i1TX@i 0073                   ___awdiv@counter 002F  
                           _PORTA 0005                             _PORTB 0006                             _TRISA 0085  
                           _TRISB 0086                     __CFG_PWRTE$ON 0000                   __end_of_indData 03D9  
                 __end_of_convDig 0515                    __CFG_BOREN$OFF 0000                             pclath 000A  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                __size_ofi1___awdiv 0045  
                 ___lbdiv@divisor 002B                   ___lbdiv@counter 002D                  __end_of_FindCell 04A7  
                    __end_of_EERD 0798                      __end_of_EEWR 0723                      __end_of_INIT 0544  
                    __end_ofi1_RX 06BB                      __end_ofi1_TX 05F0                   __initialization 0011  
                     _DigitNumber 0051                      __end_of_main 01ED                      i1calc_crc@fb 0073  
              __size_of_CellToInd 002E                    EERD@EEDATA_BUP 002D                  __end_of_ReadCell 0615  
                          ??_EERD 002B                            ??_EEWR 002C                            ??_INIT 002B  
                          ??i1_RX 0070                            ??i1_TX 0070                       ?i1_calc_crc 0070  
                          ??_main 0041           ??_Reset_powerOnInterval 002B                      ReadCell@cell 0036  
                          i1S4551 0615                            _EEDATA 009A                            _EECON2 009D  
                ___awdiv@dividend 002D                 F@CurrentKeysState 002A                            i1l3005 0509  
                          i1l4001 00B9                            i1l4011 00CF                            i1l4003 00A3  
                          i1l4005 00BD                            i1l4037 010C                            i1l4039 010E  
                          i1l4311 02F6                            i1l4303 02EF                            i1l4323 0302  
                          i1l4315 02FB                            i1l4333 030F                            i1l4317 02FC  
                          i1l2911 04F3                            i1l2903 04F1                            i1l2671 06FC  
                          i1l4327 0307                            i1l2737 05C5                            i1l2825 0431  
                          i1l4361 0351                            i1l4345 0321                            i1l4337 0316  
                          i1l4329 0308                            i1l2931 04F8                            i1l2923 04F6  
                          i1l2915 04F4                            i1l2907 04F2                            i1l2667 06F4  
                          i1l2851 045E                            i1l2835 043F                            i1l2819 0428  
                          i1l4355 0338                            i1l4363 0341                            i1l4349 032D  
                          i1l2951 04FD                            i1l2943 04FB                            i1l2935 04F9  
                          i1l2927 04F7                            i1l2919 04F5                            i1l2871 04E9  
                          i1l2863 04E7                            i1l2759 05E8                            i1l2847 0456  
                          i1l4383 0353                            i1l4287 02D2                            i1l4377 034B  
                          i1l2971 0502                            i1l2963 0500                            i1l2955 04FE  
                          i1l2947 04FC                            i1l2939 04FA                            i1l2891 04EE  
                          i1l2883 04EC                            i1l2875 04EA                            i1l2867 04E8  
                          i1l2859 04E6                            i1l3915 063B                            i1l4379 034F  
                          i1l3933 0650                            i1l3925 0642                            i1l2991 0507  
                          i1l2983 0505                            i1l2975 0503                            i1l2967 0501  
                          i1l2959 04FF                            i1l2895 04EF                            i1l2887 04ED  
                          i1l2879 04EB                            i1l3935 0655                            i1l3961 0050  
                          i1l2995 0508                            i1l2987 0506                            i1l2979 0504  
                          i1l2899 04F0                            i1l3955 0046                            i1l3967 0061  
                          i1l3959 004E                            i1l3979 0085                            _INTCON 000B  
                          u217_25 0448                            TX@temp 002D                            i1_INIT 059D  
                          u470_27 05E0                            u471_27 06B1                            u472_27 05A2  
                          u473_27 05AA                            u474_27 05B2                            u475_27 05BC  
                          u469_27 05D8                  __end_of_calc_crc 067B                            _TRISA3 042B  
                          _TRISA4 042C                            ___wmul 06F2                         ??___awdiv 002F  
                       ??___lbdiv 002C                         ??___awmod 002F                         ??___lbmod 002C  
                          _clrInd 07A6                            _digits 00CD                  ___awdiv@quotient 0031  
                 ___awmod@divisor 002B                   ___awmod@counter 002F                         ??_indData 0037  
                __end_of_setDigit 0748                         ??_convDig 0070                __size_of_ShowError 000E  
               __end_ofi1___awdiv 0463                  __end_of_setPoint 0789                            saved_w 007E  
               _EditAddressMemory 01FD                 __end_of_CellToInd 0572                  ___lbdiv@dividend 002C  
              ?_EditAddressMemory 0070                   ___lbmod@divisor 002B           __end_of__initialization 002F  
                  EERD@INTCON_BUP 002C                   ___lbmod@counter 002E               __size_ofi1_calc_crc 0022  
      __end_of_WriteArrayToEEPROM 0736               ??_EditAddressMemory 0039                    __pcstackCOMMON 0070  
                    __pidataBANK1 0000             __end_of_waitInterrupt 07D0                     ??_Run_getTemp 002B  
                   i1calc_crc@dat 0072                     i1calc_crc@crc 0075                     i1calc_crc@len 0070  
                   i1calc_crc@mas 0071                        __end_ofPL2 02AE                        __end_ofPL4 01F8  
                      __end_ofPL6 0119                        __end_ofPL8 02B6                  ___lbdiv@quotient 002E  
                      __end_of_RX 069C                        __end_of_TX 059D                  ??_get_temp_Async 0020  
                     F@long_press 0050        EditAddressMemory@CellsData 00A0         __end_of_EditAddressMemory 02A0  
                       ?_FindCell 0033               _FillArrayFromEEPROM 075A                        __pbssBANK0 0048  
                      __pbssBANK1 00CD                           ?i1_INIT 0070                         ?_ReadCell 0033  
               __end_of_PortAData 07BD                 __end_of_ShowError 07A6                        __pmaintext 0121  
            ReadCell@_CellIsEmpty 0037      EditAddressMemory@CellIsEmpty 00BA                      _endInterrupt 02CA  
            ?_FillArrayFromEEPROM 002E                           ?___wmul 0070                           ?_clrInd 0070  
                      __pintentry 0004                       refreshInd@a 002C                        __size_of_F 00A9  
                       ?_calc_crc 002B                i1___awdiv@dividend 0078               __end_of_Run_getTemp 077A  
                         i1TX@cmd 0071  FillArrayFromEEPROM@address_start 002E                        ??_FindCell 0034  
                      calc_crc@fb 002D                      _Broadcasting 02C9                        __stringtab 07B4  
               ReadCell@CellsData 0033                        ??_ReadCell 0035                   __size_ofi1_INIT 002A  
                         _KeyCode 0052                         ?_setDigit 0033                         ?_setPoint 002B  
             get_temp_Async@temp1 0023               get_temp_Async@temp2 0024                i1___awdiv@quotient 007C  
           ??_FillArrayFromEEPROM 0030                           ___awdiv 03D9                           ___lbdiv 06D7  
                         ___awmod 04A7                           ___lbmod 06BB                   __size_of___wmul 0019  
                 __size_of_clrInd 000E                      ??i1_calc_crc 0071                           __ptext1 0365  
                         __ptext2 06BB                           __ptext3 06D7                           __ptext4 076B  
                         __ptext5 07C5                           __ptext6 0463                           __ptext7 01FD  
                         __ptext8 077A                           __ptext9 065A                           _indData 0365  
                         _convDig 04E4                        ??_calc_crc 002C                  ___awmod@dividend 002D  
                         clrInd@a 002B        __size_of_EditAddressMemory 00A3    __size_of_Reset_powerOnInterval 0006  
   __end_of_Reset_powerOnInterval 07CB                           clrloop0 07BE              end_of_initialization 002F  
                      _refreshInd 0748                __end_ofi1_calc_crc 065A                        ??_setDigit 0034  
                      ??_setPoint 002C                         FindCell@i 003F                       _Run_getTemp 076B  
                FindCell@previous 0033               ReadCell@CellIsEmpty 0034                  ___lbmod@dividend 002D  
             WriteArrayToEEPROM@i 0032                         i1___awdiv 041E                        convDig@dig 0070  
                     ___lbmod@rem 002F                   F@KeyTimeCounter 00D3                         _CellToInd 0544  
                       ReadCell@i 0038                    __end_ofi1_INIT 05C7                     setPoint@value 002B  
                  __end_of___wmul 070B                    __end_of_clrInd 07B4                     __pbitbssBANK0 02C8  
              _WriteArrayToEEPROM 0723                       __end_ofPL10 0121                       __end_ofPL12 0365  
                     __end_ofPL14 01FD               start_initialization 0011   WriteArrayToEEPROM@address_start 002E  
                      ?i1___awdiv 0076               ?_WriteArrayToEEPROM 002E                 __size_of_FindCell 0044  
                     ?_refreshInd 0070                          ??i1_INIT 0070      FillArrayFromEEPROM@container 0031  
                      ?_CellToInd 0070                 __size_of_ReadCell 0025                         _PortAData 07BA  
            ??_WriteArrayToEEPROM 0030                EditAddressMemory@i 00B8                         _ShowError 0798  
                        ??___wmul 0074                          ??_clrInd 002B                       __pdataBANK1 00BC  
                        EEWR@data 002B    EditAddressMemory@CellsData_254 00B0    EditAddressMemory@CellsData_258 00A8  
                    setDigit@data 0033                         ___latbits 0000                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                 __size_of_calc_crc 0021            EditAddressMemory@i_259 00B9  
                       __end_of_F 035F            __size_of_waitInterrupt 0005                         __pnvBANK1 00D5  
               __size_of_setDigit 0012                        ?_ShowError 0070                 __size_of_setPoint 000F  
                        ?___awdiv 002B                          ?___lbdiv 002B                          ?___awmod 002B  
                        ?___lbmod 002B                 i1___awdiv@divisor 0076                 i1___awdiv@counter 007A  
             __size_of_refreshInd 0012                         __pstrings 07B4                         calc_crc@i 002F  
                        ?_indData 0070                         __pswtext1 0615                          ?_convDig 0070  
                     ??i1___awdiv 007A           __size_of_get_temp_Async 00E0                   get_temp_Async@i 0022  
                     __size_of_RX 0021                       __size_of_TX 002B             main@data_on_ind_delay 0044  
               interrupt_function 0004                   FindCell@address 0040                    ___wmul@product 0074  
                     ??_CellToInd 0037       __end_of_FillArrayFromEEPROM 076B                         clear_ram0 07BD  
                        i1TX@temp 0072                         _temp_drob 0057                       calc_crc@dat 002C  
                     calc_crc@crc 0030                       calc_crc@len 002B                       calc_crc@mas 002E  
                       indData@dN 003C                         indData@cd 003B                     _waitInterrupt 07CB  
                    ?_Run_getTemp 0070                FindCell@addressNew 003C                       __stringbase 07B9  
               FindCell@CellsData 0034                 ___wmul@multiplier 0070                   _powerOnInterval 00D5  
                  F@LastKeysState 004F                          _FindCell 0463             _Reset_powerOnInterval 07C5  
                        _ReadCell 05F0                        _EECON1bits 009C              FillArrayFromEEPROM@i 0032  
                  indData@isPoint 0039                       ??_ShowError 0037                    ?_waitInterrupt 0070  
                __size_of___awdiv 0045                  __size_of___lbdiv 001B                  __size_of___awmod 003D  
                __size_of___lbmod 001C                     _getTemp_flags 0048                __end_of__stringtab 07BA  
           EditAddressMemory@cell 00BB       FillArrayFromEEPROM@quantity 002F                          _calc_crc 065A  
                __size_of_indData 0074                  __size_of_convDig 0031                         setDigit@a 0036  
                     EERD@address 002B                          _main$268 0042                          _digits_0 00D0  
                        _digitemp 0054                          _digitnum 0055                          __ptext10 0723  
                        __ptext11 07CB                          __ptext20 0544                          __ptext12 070B  
                        __ptext21 0736                          __ptext13 0572                          __ptext30 05C7  
                        __ptext22 0748                          __ptext14 0798                          __ptext31 069C  
                        __ptext23 07A6                          __ptext15 05F0                          __ptext32 059D  
                        __ptext24 04A7                          __ptext16 075A                          __ptext33 06F2  
                        __ptext25 03D9                          __ptext17 0789                          __ptext34 04E4  
                        __ptext26 02B6                          __ptext18 067B                          __ptext27 0031  
                        __ptext19 0515                          __ptext28 0638                          __ptext29 041E  
                    ??_refreshInd 002B                     __size_of_EERD 000F                     __size_of_EEWR 0018  
                   __size_of_INIT 002F                     __size_ofi1_RX 001F                     __size_ofi1_TX 0029  
                     _DS_ReadData 00BC                     __size_of_main 00CC                          _setDigit 0736  
                        _setPoint 077A                          indData@v 003A                      _PowerBlocked 0053  
                        main@cell 0046                __end_of_refreshInd 075A                        _INTCONbits 000B  
          ?_Reset_powerOnInterval 0070                    _get_temp_Async 0031                          intlevel1 0000  
                      _DS_Address 00C5                         stringcode 07B4                   ??_waitInterrupt 002B  
                     EEWR@address 002C               F@ButtonPressTimeIn1 004C               F@ButtonPressTimeIn2 004D  
     __size_of_WriteArrayToEEPROM 0013               F@ButtonPressTimeOut 004E                     CellToInd@cell 0037  
                    indData@v_239 0038              __size_of_Run_getTemp 000F                        _OPTION_REG 0081  
                     _temperature 0058                          stringdir 07B4                          stringtab 07B4  
          __end_of_get_temp_Async 0111                __CFG_FOSC$INTOSCIO 0000               FindCell@CellIsEmpty 003D  
