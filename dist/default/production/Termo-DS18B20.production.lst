

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec 16 00:25:23 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	swtext1,local,class=CONST,delta=2
    51                           	psect	pa_nodes,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0092                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009F                     	;# 
    90                           
    91                           	psect	idataBANK1
    92  0000                     __pidataBANK1:	
    93                           
    94                           	psect	strings
    95  0782                     __pstrings:	
    96  0782                     stringtab:	
    97  0782                     __stringtab:	
    98  0782                     stringcode:	
    99                           ;	String table - string pointers are 1 byte each
   100                           
   101  0782                     stringdir:	
   102  0782  3007               	movlw	high stringdir
   103  0783  008A               	movwf	10
   104  0784  0804               	movf	4,w
   105  0785  0A84               	incf	4,f
   106  0786  0782               	addwf	2,f
   107  0787                     __stringbase:	
   108  0787  3400               	retlw	0
   109  0788                     __end_of__stringtab:	
   110  0788                     _PortAData:	
   111  0788  3480               	retlw	128
   112  0789  3440               	retlw	64
   113  078A  3401               	retlw	1
   114  078B                     __end_of_PortAData:	
   115                           
   116                           	psect	nvBANK0
   117  005D                     __pnvBANK0:	
   118  005D                     _powerOnInterval:	
   119  005D                     	ds	2
   120  005F                     _KeyCode:	
   121  005F                     	ds	1
   122  001F                     _CMCON	set	31
   123  000B                     _INTCON	set	11
   124  000B                     _INTCONbits	set	11
   125  0005                     _PORTA	set	5
   126  0006                     _PORTB	set	6
   127  0012                     _T2CON	set	18
   128  0001                     _TMR0	set	1
   129  002A                     _RA2	set	42
   130  002D                     _RA5	set	45
   131  005A                     _T0IF	set	90
   132  009B                     _EEADR	set	155
   133  009C                     _EECON1bits	set	156
   134  009D                     _EECON2	set	157
   135  009A                     _EEDATA	set	154
   136  0081                     _OPTION_REG	set	129
   137  0085                     _TRISA	set	133
   138  0086                     _TRISB	set	134
   139  042C                     _TRISA4	set	1068
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  0011                     start_initialization:	
   145  0011                     __initialization:	
   146  0011  30FF               	movlw	255
   147                           
   148                           ; Initialize objects allocated to BANK1
   149  0012  1683               	bsf	3,5	;RP0=1, select bank1
   150                           
   151                           ;initializer for _DS_ReadData
   152  0013  00B6               	movwf	__pdataBANK1& (0+127)
   153  0014  00B7               	movwf	(__pdataBANK1+1)& (0+127)
   154  0015  00B8               	movwf	(__pdataBANK1+2)& (0+127)
   155  0016  00B9               	movwf	(__pdataBANK1+3)& (0+127)
   156  0017  00BA               	movwf	(__pdataBANK1+4)& (0+127)
   157  0018  00BB               	movwf	(__pdataBANK1+5)& (0+127)
   158  0019  00BC               	movwf	(__pdataBANK1+6)& (0+127)
   159  001A  00BD               	movwf	(__pdataBANK1+7)& (0+127)
   160  001B  00BE               	movwf	(__pdataBANK1+8)& (0+127)
   161                           
   162                           ;initializer for _DS_Address
   163  001C  00BF               	movwf	(__pdataBANK1+9)& (0+127)
   164  001D  00C0               	movwf	(__pdataBANK1+10)& (0+127)
   165  001E  00C1               	movwf	(__pdataBANK1+11)& (0+127)
   166  001F  00C2               	movwf	(__pdataBANK1+12)& (0+127)
   167  0020  00C3               	movwf	(__pdataBANK1+13)& (0+127)
   168  0021  00C4               	movwf	(__pdataBANK1+14)& (0+127)
   169  0022  00C5               	movwf	(__pdataBANK1+15)& (0+127)
   170  0023  00C6               	movwf	(__pdataBANK1+16)& (0+127)
   171  0024  3044               	movlw	low __pbssBANK0
   172                           
   173                           ; Clear objects allocated to BANK0
   174  0025  1383               	bcf	3,7	;select IRP bank0
   175  0026  0084               	movwf	4
   176  0027  305D               	movlw	low (__pbssBANK0+25)
   177  0028  278B               	fcall	clear_ram0
   178                           
   179                           ; Clear objects allocated to BITBANK0
   180  0029  1283               	bcf	3,5	;RP0=0, select bank0
   181  002A  01E0               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   182  002B                     end_of_initialization:	
   183                           ;End of C runtime variable initialization code
   184                           
   185  002B                     __end_of__initialization:	
   186  002B  0183               	clrf	3
   187  002C  282D               	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	bssBANK0
   190  0044                     __pbssBANK0:	
   191  0044                     _getTemp_flags:	
   192  0044                     	ds	6
   193  004A                     _digits:	
   194  004A                     	ds	3
   195  004D                     _digits_0:	
   196  004D                     	ds	3
   197  0050                     F@KeyTimeCounter:	
   198  0050                     	ds	2
   199  0052                     F@ButtonPressTimeIn1:	
   200  0052                     	ds	1
   201  0053                     F@ButtonPressTimeIn2:	
   202  0053                     	ds	1
   203  0054                     F@ButtonPressTimeOut:	
   204  0054                     	ds	1
   205  0055                     F@DigitNumber:	
   206  0055                     	ds	1
   207  0056                     F@LastKeysState:	
   208  0056                     	ds	1
   209  0057                     F@long_press:	
   210  0057                     	ds	1
   211  0058                     _PowerBlocked:	
   212  0058                     	ds	1
   213  0059                     _digitemp:	
   214  0059                     	ds	1
   215  005A                     _sign:	
   216  005A                     	ds	1
   217  005B                     _temp_drob:	
   218  005B                     	ds	1
   219  005C                     _temperature:	
   220  005C                     	ds	1
   221                           
   222                           	psect	bitbssBANK0
   223  0300                     __pbitbssBANK0:	
   224  0300                     _Broadcasting:	
   225  0300                     	ds	1
   226  0301                     _endInterrupt:	
   227  0301                     	ds	1
   228                           
   229                           	psect	dataBANK1
   230  00B6                     __pdataBANK1:	
   231  00B6                     _DS_ReadData:	
   232  00B6                     	ds	9
   233  00BF                     _DS_Address:	
   234  00BF                     	ds	8
   235                           
   236                           	psect	clrtext
   237  078B                     clear_ram0:	
   238                           ;	Called with FSR containing the base address, and
   239                           ;	W with the last address+1
   240                           
   241  078B  0064               	clrwdt	;clear the watchdog before getting into this loop
   242  078C                     clrloop0:	
   243  078C  0180               	clrf	0	;clear RAM location pointed to by FSR
   244  078D  0A84               	incf	4,f	;increment pointer
   245  078E  0604               	xorwf	4,w	;XOR with final address
   246  078F  1903               	btfsc	3,2	;have we reached the end yet?
   247  0790  3400               	retlw	0	;all done for this memory range, return
   248  0791  0604               	xorwf	4,w	;XOR again to restore value
   249  0792  2F8C               	goto	clrloop0	;do the next byte
   250                           
   251                           	psect	cstackBANK1
   252  00A0                     __pcstackBANK1:	
   253  00A0                     EditAddressMemory@CellsData:	
   254                           
   255                           ; 8 bytes @ 0x0
   256  00A0                     	ds	8
   257  00A8                     EditAddressMemory@ErrorShowed:	
   258                           
   259                           ; 1 bytes @ 0x8
   260  00A8                     	ds	1
   261  00A9                     EditAddressMemory@RereadCell:	
   262                           
   263                           ; 1 bytes @ 0x9
   264  00A9                     	ds	1
   265  00AA                     EditAddressMemory@CellIsEmpty:	
   266                           
   267                           ; 1 bytes @ 0xA
   268  00AA                     	ds	1
   269  00AB                     EditAddressMemory@i:	
   270                           
   271                           ; 1 bytes @ 0xB
   272  00AB                     	ds	1
   273  00AC                     EditAddressMemory@i_256:	
   274                           
   275                           ; 1 bytes @ 0xC
   276  00AC                     	ds	1
   277  00AD                     EditAddressMemory@cell:	
   278                           
   279                           ; 1 bytes @ 0xD
   280  00AD                     	ds	1
   281  00AE                     main@point_on_ind_delay:	
   282                           
   283                           ; 2 bytes @ 0xE
   284  00AE                     	ds	2
   285  00B0                     _main$272:	
   286                           
   287                           ; 2 bytes @ 0x10
   288  00B0                     	ds	2
   289  00B2                     main@cell:	
   290                           
   291                           ; 1 bytes @ 0x12
   292  00B2                     	ds	1
   293  00B3                     main@TheStart:	
   294                           
   295                           ; 1 bytes @ 0x13
   296  00B3                     	ds	1
   297  00B4                     main@address:	
   298                           
   299                           ; 1 bytes @ 0x14
   300  00B4                     	ds	1
   301  00B5                     main@line:	
   302                           
   303                           ; 1 bytes @ 0x15
   304  00B5                     	ds	1
   305                           
   306                           	psect	cstackCOMMON
   307  0070                     __pcstackCOMMON:	
   308  0070                     ?_waitInterrupt:	
   309  0070                     ?_Reset_powerOnInterval:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_refreshInd:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_clrInd:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_ShowError:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_convDig:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ??_convDig:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_EERD:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_INIT:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_RX:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_get_temp_Async:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_F:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_indData:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_CellToInd:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_EditAddressMemory:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_Run_getTemp:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_Run_getInit:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_main:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?i1_INIT:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ??i1_INIT:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?i1_TX:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?i1_RX:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ??i1_RX:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?i1_calc_crc:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?___wmul:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     convDig@dig:	
   382                           ; 2 bytes @ 0x0
   383                           
   384  0070                     i1TX@line:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     i1calc_crc@len:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ___wmul@multiplier:	
   391                           ; 1 bytes @ 0x0
   392                           
   393                           
   394                           ; 2 bytes @ 0x0
   395  0070                     	ds	1
   396  0071                     ??i1_TX:	
   397  0071                     ??i1_calc_crc:	
   398                           ; 1 bytes @ 0x1
   399                           
   400  0071                     i1INIT@line:	
   401                           ; 1 bytes @ 0x1
   402                           
   403  0071                     i1RX@line:	
   404                           ; 1 bytes @ 0x1
   405                           
   406  0071                     i1calc_crc@mas:	
   407                           ; 1 bytes @ 0x1
   408                           
   409                           
   410                           ; 1 bytes @ 0x1
   411  0071                     	ds	1
   412  0072                     i1INIT@Zero:	
   413  0072                     i1TX@cmd:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0072                     i1RX@Zero:	
   417                           ; 1 bytes @ 0x2
   418                           
   419  0072                     i1calc_crc@dat:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0072                     ___wmul@multiplicand:	
   423                           ; 1 bytes @ 0x2
   424                           
   425                           
   426                           ; 2 bytes @ 0x2
   427  0072                     	ds	1
   428  0073                     i1INIT@b:	
   429  0073                     i1TX@temp:	
   430                           ; 1 bytes @ 0x3
   431                           
   432  0073                     i1RX@d:	
   433                           ; 1 bytes @ 0x3
   434                           
   435  0073                     i1calc_crc@fb:	
   436                           ; 1 bytes @ 0x3
   437                           
   438                           
   439                           ; 1 bytes @ 0x3
   440  0073                     	ds	1
   441  0074                     ??___wmul:	
   442  0074                     i1INIT@One:	
   443                           ; 1 bytes @ 0x4
   444                           
   445  0074                     i1TX@Zero:	
   446                           ; 1 bytes @ 0x4
   447                           
   448  0074                     i1RX@i:	
   449                           ; 1 bytes @ 0x4
   450                           
   451  0074                     i1calc_crc@i:	
   452                           ; 1 bytes @ 0x4
   453                           
   454  0074                     ___wmul@product:	
   455                           ; 1 bytes @ 0x4
   456                           
   457                           
   458                           ; 2 bytes @ 0x4
   459  0074                     	ds	1
   460  0075                     i1TX@i:	
   461  0075                     i1RX@One:	
   462                           ; 1 bytes @ 0x5
   463                           
   464  0075                     i1calc_crc@crc:	
   465                           ; 1 bytes @ 0x5
   466                           
   467                           
   468                           ; 1 bytes @ 0x5
   469  0075                     	ds	1
   470  0076                     ?___awdiv:	
   471  0076                     i1TX@One:	
   472                           ; 2 bytes @ 0x6
   473                           
   474  0076                     ___awdiv@divisor:	
   475                           ; 1 bytes @ 0x6
   476                           
   477                           
   478                           ; 2 bytes @ 0x6
   479  0076                     	ds	2
   480  0078                     ___awdiv@dividend:	
   481                           
   482                           ; 2 bytes @ 0x8
   483  0078                     	ds	2
   484  007A                     ??___awdiv:	
   485  007A                     ___awdiv@counter:	
   486                           ; 1 bytes @ 0xA
   487                           
   488                           
   489                           ; 1 bytes @ 0xA
   490  007A                     	ds	1
   491  007B                     ___awdiv@sign:	
   492                           
   493                           ; 1 bytes @ 0xB
   494  007B                     	ds	1
   495  007C                     ___awdiv@quotient:	
   496                           
   497                           ; 2 bytes @ 0xC
   498  007C                     	ds	2
   499                           
   500                           	psect	cstackBANK0
   501  0020                     __pcstackBANK0:	
   502  0020                     ??_get_temp_Async:	
   503                           
   504                           ; 1 bytes @ 0x0
   505  0020                     	ds	2
   506  0022                     get_temp_Async@i:	
   507                           
   508                           ; 1 bytes @ 0x2
   509  0022                     	ds	1
   510  0023                     get_temp_Async@temp1:	
   511                           
   512                           ; 1 bytes @ 0x3
   513  0023                     	ds	1
   514  0024                     get_temp_Async@temp2:	
   515                           
   516                           ; 1 bytes @ 0x4
   517  0024                     	ds	1
   518  0025                     get_temp_Async@line:	
   519                           
   520                           ; 1 bytes @ 0x5
   521  0025                     	ds	1
   522  0026                     ??_F:	
   523                           
   524                           ; 1 bytes @ 0x6
   525  0026                     	ds	5
   526  002B                     F@dig:	
   527                           
   528                           ; 1 bytes @ 0xB
   529  002B                     	ds	1
   530  002C                     F@CurrentKeysState:	
   531                           
   532                           ; 1 bytes @ 0xC
   533  002C                     	ds	1
   534  002D                     ??_waitInterrupt:	
   535  002D                     ??_Reset_powerOnInterval:	
   536                           ; 1 bytes @ 0xD
   537                           
   538  002D                     ?_setPoint:	
   539                           ; 1 bytes @ 0xD
   540                           
   541  002D                     ??_refreshInd:	
   542                           ; 1 bytes @ 0xD
   543                           
   544  002D                     ??_clrInd:	
   545                           ; 1 bytes @ 0xD
   546                           
   547  002D                     ?_EEWR:	
   548                           ; 1 bytes @ 0xD
   549                           
   550  002D                     ??_EERD:	
   551                           ; 1 bytes @ 0xD
   552                           
   553  002D                     ??_INIT:	
   554                           ; 1 bytes @ 0xD
   555                           
   556  002D                     ?_TX:	
   557                           ; 1 bytes @ 0xD
   558                           
   559  002D                     ??_RX:	
   560                           ; 1 bytes @ 0xD
   561                           
   562  002D                     ?_calc_crc:	
   563                           ; 1 bytes @ 0xD
   564                           
   565  002D                     ??_Run_getTemp:	
   566                           ; 1 bytes @ 0xD
   567                           
   568  002D                     ??_Run_getInit:	
   569                           ; 1 bytes @ 0xD
   570                           
   571  002D                     ?___lbdiv:	
   572                           ; 1 bytes @ 0xD
   573                           
   574  002D                     ?___lbmod:	
   575                           ; 1 bytes @ 0xD
   576                           
   577  002D                     setPoint@value:	
   578                           ; 1 bytes @ 0xD
   579                           
   580  002D                     EEWR@data:	
   581                           ; 1 bytes @ 0xD
   582                           
   583  002D                     EERD@address:	
   584                           ; 1 bytes @ 0xD
   585                           
   586  002D                     TX@line:	
   587                           ; 1 bytes @ 0xD
   588                           
   589  002D                     calc_crc@len:	
   590                           ; 1 bytes @ 0xD
   591                           
   592  002D                     Run_getTemp@line:	
   593                           ; 1 bytes @ 0xD
   594                           
   595  002D                     Run_getInit@line:	
   596                           ; 1 bytes @ 0xD
   597                           
   598  002D                     ___lbdiv@divisor:	
   599                           ; 1 bytes @ 0xD
   600                           
   601  002D                     ___lbmod@divisor:	
   602                           ; 1 bytes @ 0xD
   603                           
   604                           
   605                           ; 1 bytes @ 0xD
   606  002D                     	ds	1
   607  002E                     ??_setPoint:	
   608  002E                     ??_EEWR:	
   609                           ; 1 bytes @ 0xE
   610                           
   611  002E                     ??_TX:	
   612                           ; 1 bytes @ 0xE
   613                           
   614  002E                     ??_calc_crc:	
   615                           ; 1 bytes @ 0xE
   616                           
   617  002E                     ??___lbdiv:	
   618                           ; 1 bytes @ 0xE
   619                           
   620  002E                     ??___lbmod:	
   621                           ; 1 bytes @ 0xE
   622                           
   623  002E                     setPoint@dignum:	
   624                           ; 1 bytes @ 0xE
   625                           
   626  002E                     EEWR@address:	
   627                           ; 1 bytes @ 0xE
   628                           
   629  002E                     EERD@INTCON_BUP:	
   630                           ; 1 bytes @ 0xE
   631                           
   632  002E                     INIT@line:	
   633                           ; 1 bytes @ 0xE
   634                           
   635  002E                     RX@line:	
   636                           ; 1 bytes @ 0xE
   637                           
   638  002E                     calc_crc@dat:	
   639                           ; 1 bytes @ 0xE
   640                           
   641  002E                     ___lbdiv@dividend:	
   642                           ; 1 bytes @ 0xE
   643                           
   644                           
   645                           ; 1 bytes @ 0xE
   646  002E                     	ds	1
   647  002F                     EEWR@INTCON_BUP:	
   648  002F                     EERD@EEDATA_BUP:	
   649                           ; 1 bytes @ 0xF
   650                           
   651  002F                     INIT@Zero:	
   652                           ; 1 bytes @ 0xF
   653                           
   654  002F                     TX@cmd:	
   655                           ; 1 bytes @ 0xF
   656                           
   657  002F                     RX@Zero:	
   658                           ; 1 bytes @ 0xF
   659                           
   660  002F                     calc_crc@fb:	
   661                           ; 1 bytes @ 0xF
   662                           
   663  002F                     ___lbdiv@counter:	
   664                           ; 1 bytes @ 0xF
   665                           
   666  002F                     ___lbmod@dividend:	
   667                           ; 1 bytes @ 0xF
   668                           
   669                           
   670                           ; 1 bytes @ 0xF
   671  002F                     	ds	1
   672  0030                     ?_FillArrayFromEEPROM:	
   673  0030                     ?_WriteArrayToEEPROM:	
   674                           ; 1 bytes @ 0x10
   675                           
   676  0030                     FillArrayFromEEPROM@address_start:	
   677                           ; 1 bytes @ 0x10
   678                           
   679  0030                     WriteArrayToEEPROM@address_start:	
   680                           ; 1 bytes @ 0x10
   681                           
   682  0030                     INIT@b:	
   683                           ; 1 bytes @ 0x10
   684                           
   685  0030                     TX@temp:	
   686                           ; 1 bytes @ 0x10
   687                           
   688  0030                     RX@d:	
   689                           ; 1 bytes @ 0x10
   690                           
   691  0030                     calc_crc@mas:	
   692                           ; 1 bytes @ 0x10
   693                           
   694  0030                     ___lbdiv@quotient:	
   695                           ; 1 bytes @ 0x10
   696                           
   697  0030                     ___lbmod@counter:	
   698                           ; 1 bytes @ 0x10
   699                           
   700                           
   701                           ; 1 bytes @ 0x10
   702  0030                     	ds	1
   703  0031                     FillArrayFromEEPROM@quantity:	
   704  0031                     WriteArrayToEEPROM@quantity:	
   705                           ; 1 bytes @ 0x11
   706                           
   707  0031                     INIT@One:	
   708                           ; 1 bytes @ 0x11
   709                           
   710  0031                     TX@Zero:	
   711                           ; 1 bytes @ 0x11
   712                           
   713  0031                     RX@i:	
   714                           ; 1 bytes @ 0x11
   715                           
   716  0031                     calc_crc@i:	
   717                           ; 1 bytes @ 0x11
   718                           
   719  0031                     ___lbmod@rem:	
   720                           ; 1 bytes @ 0x11
   721                           
   722                           
   723                           ; 1 bytes @ 0x11
   724  0031                     	ds	1
   725  0032                     ?_setDigit:	
   726  0032                     ??_FillArrayFromEEPROM:	
   727                           ; 1 bytes @ 0x12
   728                           
   729  0032                     ??_WriteArrayToEEPROM:	
   730                           ; 1 bytes @ 0x12
   731                           
   732  0032                     setDigit@data:	
   733                           ; 1 bytes @ 0x12
   734                           
   735  0032                     TX@i:	
   736                           ; 1 bytes @ 0x12
   737                           
   738  0032                     RX@One:	
   739                           ; 1 bytes @ 0x12
   740                           
   741  0032                     calc_crc@crc:	
   742                           ; 1 bytes @ 0x12
   743                           
   744                           
   745                           ; 1 bytes @ 0x12
   746  0032                     	ds	1
   747  0033                     ??_setDigit:	
   748  0033                     FillArrayFromEEPROM@container:	
   749                           ; 1 bytes @ 0x13
   750                           
   751  0033                     WriteArrayToEEPROM@container:	
   752                           ; 1 bytes @ 0x13
   753                           
   754  0033                     TX@One:	
   755                           ; 1 bytes @ 0x13
   756                           
   757                           
   758                           ; 1 bytes @ 0x13
   759  0033                     	ds	1
   760  0034                     FillArrayFromEEPROM@i:	
   761  0034                     WriteArrayToEEPROM@i:	
   762                           ; 1 bytes @ 0x14
   763                           
   764                           
   765                           ; 1 bytes @ 0x14
   766  0034                     	ds	1
   767  0035                     ?_FindCell:	
   768  0035                     ?_ReadCell:	
   769                           ; 1 bytes @ 0x15
   770                           
   771  0035                     setDigit@a:	
   772                           ; 1 bytes @ 0x15
   773                           
   774  0035                     FindCell@previous:	
   775                           ; 1 bytes @ 0x15
   776                           
   777  0035                     ReadCell@CellsData:	
   778                           ; 1 bytes @ 0x15
   779                           
   780                           
   781                           ; 1 bytes @ 0x15
   782  0035                     	ds	1
   783  0036                     ??_ShowError:	
   784  0036                     ??_FindCell:	
   785                           ; 1 bytes @ 0x16
   786                           
   787  0036                     ??_indData:	
   788                           ; 1 bytes @ 0x16
   789                           
   790  0036                     ??_ReadCell:	
   791                           ; 1 bytes @ 0x16
   792                           
   793  0036                     ??_CellToInd:	
   794                           ; 1 bytes @ 0x16
   795                           
   796  0036                     CellToInd@cell:	
   797                           ; 1 bytes @ 0x16
   798                           
   799  0036                     FindCell@CellsData:	
   800                           ; 1 bytes @ 0x16
   801                           
   802                           
   803                           ; 8 bytes @ 0x16
   804  0036                     	ds	1
   805  0037                     indData@v_240:	
   806  0037                     ReadCell@cell:	
   807                           ; 1 bytes @ 0x17
   808                           
   809                           
   810                           ; 1 bytes @ 0x17
   811  0037                     	ds	1
   812  0038                     indData@isPoint:	
   813  0038                     ReadCell@i:	
   814                           ; 1 bytes @ 0x18
   815                           
   816                           
   817                           ; 1 bytes @ 0x18
   818  0038                     	ds	1
   819  0039                     ??_EditAddressMemory:	
   820  0039                     indData@v:	
   821                           ; 1 bytes @ 0x19
   822                           
   823                           
   824                           ; 1 bytes @ 0x19
   825  0039                     	ds	1
   826  003A                     indData@dN:	
   827                           
   828                           ; 1 bytes @ 0x1A
   829  003A                     	ds	1
   830  003B                     indData@cd:	
   831                           
   832                           ; 1 bytes @ 0x1B
   833  003B                     	ds	3
   834  003E                     FindCell@addressNew:	
   835                           
   836                           ; 1 bytes @ 0x1E
   837  003E                     	ds	1
   838  003F                     FindCell@CellIsEmpty:	
   839                           
   840                           ; 1 bytes @ 0x1F
   841  003F                     	ds	1
   842  0040                     FindCell@addressStart:	
   843                           
   844                           ; 1 bytes @ 0x20
   845  0040                     	ds	1
   846  0041                     FindCell@i:	
   847                           
   848                           ; 1 bytes @ 0x21
   849  0041                     	ds	1
   850  0042                     FindCell@address:	
   851                           
   852                           ; 1 bytes @ 0x22
   853  0042                     	ds	1
   854  0043                     ??_main:	
   855                           
   856                           ; 1 bytes @ 0x23
   857  0043                     	ds	1
   858                           
   859                           	psect	maintext
   860  002D                     __pmaintext:	
   861 ;;
   862 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   863 ;;
   864 ;; *************** function _main *****************
   865 ;; Defined at:
   866 ;;		line 724 in file "prog.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  point_on_ind    2   14[BANK1 ] unsigned int 
   871 ;;  line            1   21[BANK1 ] unsigned char 
   872 ;;  address         1   20[BANK1 ] unsigned char 
   873 ;;  TheStart        1   19[BANK1 ] unsigned char 
   874 ;;  cell            1   18[BANK1 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : B00/0
   881 ;;		On exit  : 300/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   884 ;;      Params:         0       0       0       0
   885 ;;      Locals:         0       0       8       0
   886 ;;      Temps:          0       1       0       0
   887 ;;      Totals:         0       1       8       0
   888 ;;Total ram usage:        9 bytes
   889 ;; Hardware stack levels required when called:    7
   890 ;; This function calls:
   891 ;;		_CellToInd
   892 ;;		_EditAddressMemory
   893 ;;		_FillArrayFromEEPROM
   894 ;;		_FindCell
   895 ;;		_Reset_powerOnInterval
   896 ;;		_Run_getInit
   897 ;;		_Run_getTemp
   898 ;;		_ShowError
   899 ;;		_clrInd
   900 ;;		_indData
   901 ;;		_refreshInd
   902 ;;		_setDigit
   903 ;;		_setPoint
   904 ;;		_waitInterrupt
   905 ;; This function is called by:
   906 ;;		Startup code after reset
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           
   911                           ;psect for function _main
   912  002D                     _main:	
   913                           
   914                           ;prog.c: 726: INTCON = 0;
   915                           
   916                           ;incstack = 0
   917                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   918  002D  018B               	clrf	11	;volatile
   919                           
   920                           ;prog.c: 727: OPTION_REG = 0b00000111;
   921  002E  3007               	movlw	7
   922  002F  1683               	bsf	3,5	;RP0=1, select bank1
   923  0030  0081               	movwf	1	;volatile
   924                           
   925                           ;prog.c: 728: TRISA = 0b00101110;
   926  0031  302E               	movlw	46
   927  0032  0085               	movwf	5	;volatile
   928                           
   929                           ;prog.c: 729: TRISB = 0b00000000;
   930  0033  0186               	clrf	6	;volatile
   931                           
   932                           ;prog.c: 730: PORTA = 0b00000000;
   933  0034  1283               	bcf	3,5	;RP0=0, select bank0
   934  0035  0185               	clrf	5	;volatile
   935                           
   936                           ;prog.c: 731: PORTB = 0b00000000;
   937  0036  0186               	clrf	6	;volatile
   938                           
   939                           ;prog.c: 732: TMR0 = TMR0_VALUE;
   940  0037  30EB               	movlw	235
   941  0038  0081               	movwf	1	;volatile
   942                           
   943                           ;prog.c: 733: T2CON = 0b00000100;
   944  0039  3004               	movlw	4
   945  003A  0092               	movwf	18	;volatile
   946                           
   947                           ;prog.c: 734: CMCON = 0b00000111;
   948  003B  3007               	movlw	7
   949  003C  009F               	movwf	31	;volatile
   950                           
   951                           ;prog.c: 736: clrInd();
   952  003D  27A1               	fcall	_clrInd
   953                           
   954                           ;prog.c: 737: refreshInd();
   955  003E  2793               	fcall	_refreshInd
   956                           
   957                           ;prog.c: 739: INTCON = 0b10100000;
   958  003F  30A0               	movlw	160
   959  0040  008B               	movwf	11	;volatile
   960                           
   961                           ;prog.c: 741: Reset_powerOnInterval();
   962  0041  279B               	fcall	_Reset_powerOnInterval
   963  0042  3008               	movlw	8
   964                           
   965                           ;prog.c: 743: unsigned char cell = 0;
   966  0043  1683               	bsf	3,5	;RP0=1, select bank1
   967  0044  01B2               	clrf	main@cell^(0+128)
   968                           
   969                           ;prog.c: 744: unsigned char address;
   970                           ;prog.c: 745: unsigned int point_on_ind_delay = 0;
   971  0045  01AE               	clrf	main@point_on_ind_delay^(0+128)
   972  0046  01AF               	clrf	(main@point_on_ind_delay+1)^(0+128)
   973                           
   974                           ;prog.c: 746: unsigned char TheStart = 1;
   975  0047  01B3               	clrf	main@TheStart^(0+128)
   976  0048  0AB3               	incf	main@TheStart^(0+128),f
   977                           
   978                           ;prog.c: 747: unsigned char line = 0b00001000;
   979  0049  00B5               	movwf	main@line^(0+128)
   980                           
   981                           ;prog.c: 749: KeyCode = 36;
   982  004A  3024               	movlw	36
   983  004B  1283               	bcf	3,5	;RP0=0, select bank0
   984  004C  00DF               	movwf	_KeyCode	;volatile
   985  004D                     l4099:	
   986                           
   987                           ;prog.c: 753: if (KeyCode == 33) {
   988  004D  3021               	movlw	33
   989  004E  1283               	bcf	3,5	;RP0=0, select bank0
   990  004F  065F               	xorwf	_KeyCode,w	;volatile
   991  0050  1D03               	btfss	3,2
   992  0051  2862               	goto	l4111
   993                           
   994                           ;prog.c: 754: KeyCode = 0;
   995  0052  01DF               	clrf	_KeyCode	;volatile
   996                           
   997                           ;prog.c: 755: if (PowerBlocked != 1) {
   998  0053  0358               	decf	_PowerBlocked,w
   999  0054  1903               	btfsc	3,2
  1000  0055  285E               	goto	l4109
  1001  0056  30A0               	movlw	160
  1002                           
  1003                           ;prog.c: 756: PowerBlocked = 1;
  1004  0057  01D8               	clrf	_PowerBlocked
  1005  0058  0AD8               	incf	_PowerBlocked,f
  1006                           
  1007                           ;prog.c: 757: point_on_ind_delay = 4000;
  1008  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1009  005A  00AE               	movwf	main@point_on_ind_delay^(0+128)
  1010  005B  300F               	movlw	15
  1011  005C  00AF               	movwf	(main@point_on_ind_delay^(0+128)+1)
  1012                           
  1013                           ;prog.c: 758: } else {
  1014  005D  28FC               	goto	l4223
  1015  005E                     l4109:	
  1016                           
  1017                           ;prog.c: 759: powerOnInterval = 0;
  1018  005E  01DD               	clrf	_powerOnInterval
  1019  005F  01DE               	clrf	_powerOnInterval+1
  1020                           
  1021                           ;prog.c: 760: PowerBlocked = 0;
  1022  0060  01D8               	clrf	_PowerBlocked
  1023  0061  28FC               	goto	l4223
  1024  0062                     l4111:	
  1025  0062  301F               	movlw	31
  1026  0063  065F               	xorwf	_KeyCode,w	;volatile
  1027  0064  1903               	btfsc	3,2
  1028  0065  286E               	goto	l4117
  1029  0066  3020               	movlw	32
  1030  0067  065F               	xorwf	_KeyCode,w	;volatile
  1031  0068  1903               	btfsc	3,2
  1032  0069  286E               	goto	l4117
  1033  006A  3022               	movlw	34
  1034  006B  065F               	xorwf	_KeyCode,w	;volatile
  1035  006C  1D03               	btfss	3,2
  1036  006D  28CB               	goto	l4177
  1037  006E                     l4117:	
  1038                           
  1039                           ;prog.c: 763: Reset_powerOnInterval();
  1040  006E  279B               	fcall	_Reset_powerOnInterval
  1041                           
  1042                           ;prog.c: 765: if (Broadcasting && KeyCode != 34) {
  1043  006F  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1044  0070  2895               	goto	l351
  1045  0071  3022               	movlw	34
  1046  0072  065F               	xorwf	_KeyCode,w	;volatile
  1047  0073  1903               	btfsc	3,2
  1048  0074  2895               	goto	l351
  1049                           
  1050                           ;prog.c: 767: if (KeyCode == 31 && line != 0b00001000) {
  1051  0075  301F               	movlw	31
  1052  0076  065F               	xorwf	_KeyCode,w	;volatile
  1053  0077  1D03               	btfss	3,2
  1054  0078  2880               	goto	l4131
  1055  0079  3008               	movlw	8
  1056  007A  1683               	bsf	3,5	;RP0=1, select bank1
  1057  007B  0635               	xorwf	main@line^(0+128),w
  1058  007C  1903               	btfsc	3,2
  1059  007D  2880               	goto	l4131
  1060  007E  3008               	movlw	8
  1061  007F  288B               	goto	L6
  1062  0080                     l4131:	
  1063                           ;prog.c: 770: } else if (KeyCode == 32 && line != 0b00000010) {
  1064                           
  1065                           ;prog.c: 769: line = 0b00001000;
  1066                           
  1067                           ;prog.c: 768: TheStart = 1;
  1068                           
  1069  0080  3020               	movlw	32
  1070  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0082  065F               	xorwf	_KeyCode,w	;volatile
  1072  0083  1D03               	btfss	3,2
  1073  0084  284D               	goto	l4099
  1074  0085  3002               	movlw	2
  1075  0086  1683               	bsf	3,5	;RP0=1, select bank1
  1076  0087  0635               	xorwf	main@line^(0+128),w
  1077  0088  1903               	btfsc	3,2
  1078  0089  284D               	goto	l4099
  1079  008A  3002               	movlw	2
  1080  008B                     L6:	
  1081                           
  1082                           ;prog.c: 771: TheStart = 1;
  1083  008B  01B3               	clrf	main@TheStart^(0+128)
  1084  008C  0AB3               	incf	main@TheStart^(0+128),f
  1085                           
  1086                           ;prog.c: 772: line = 0b00000010;
  1087  008D  00B5               	movwf	main@line^(0+128)
  1088                           
  1089                           ;prog.c: 775: }
  1090                           ;prog.c: 776: KeyCode = 0;
  1091                           
  1092                           ;prog.c: 773: } else {
  1093  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1094  008F  01DF               	clrf	_KeyCode	;volatile
  1095                           
  1096                           ;prog.c: 777: getTemp_flags.ActiveProcess = 0;
  1097  0090  1048               	bcf	_getTemp_flags+4,0
  1098                           
  1099                           ;prog.c: 778: waitInterrupt();
  1100  0091  27A7               	fcall	_waitInterrupt
  1101                           
  1102                           ;prog.c: 779: Run_getTemp(line);
  1103  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1104  0093  0835               	movf	main@line^(0+128),w
  1105  0094  28FB               	goto	L2
  1106  0095                     l351:	
  1107                           ;prog.c: 781: } else {
  1108                           
  1109  0095  3022               	movlw	34
  1110                           
  1111                           ;prog.c: 782: getTemp_flags.ActiveProcess = 0;
  1112  0096  1048               	bcf	_getTemp_flags+4,0
  1113                           
  1114                           ;prog.c: 784: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1115  0097  065F               	xorwf	_KeyCode,w	;volatile
  1116  0098  1903               	btfsc	3,2
  1117  0099  28A8               	goto	l4153
  1118  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1119  009B  0832               	movf	main@cell^(0+128),w
  1120  009C  00B0               	movwf	_main$272^(0+128)
  1121  009D  01B1               	clrf	(_main$272+1)^(0+128)
  1122  009E  1003               	clrc
  1123  009F  0DB0               	rlf	_main$272^(0+128),f
  1124  00A0  0DB1               	rlf	(_main$272+1)^(0+128),f
  1125  00A1  1003               	clrc
  1126  00A2  0DB0               	rlf	_main$272^(0+128),f
  1127  00A3  0DB1               	rlf	(_main$272+1)^(0+128),f
  1128  00A4  1003               	clrc
  1129  00A5  0DB0               	rlf	_main$272^(0+128),f
  1130  00A6  0DB1               	rlf	(_main$272+1)^(0+128),f
  1131  00A7  28AC               	goto	l4155
  1132  00A8                     l4153:	
  1133  00A8  3080               	movlw	128
  1134  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1135  00AA  00B0               	movwf	_main$272^(0+128)
  1136  00AB  01B1               	clrf	(_main$272+1)^(0+128)
  1137  00AC                     l4155:	
  1138  00AC  301F               	movlw	31
  1139  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1140  00AE  065F               	xorwf	_KeyCode,w	;volatile
  1141  00AF  1D03               	btfss	3,2
  1142  00B0  28B3               	goto	u4520
  1143  00B1  3001               	movlw	1
  1144  00B2  28B4               	goto	u4530
  1145  00B3                     u4520:	
  1146  00B3  3000               	movlw	0
  1147  00B4                     u4530:	
  1148  00B4  00B5               	movwf	FindCell@previous
  1149  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1150  00B6  0830               	movf	_main$272^(0+128),w
  1151  00B7  2433               	fcall	_FindCell
  1152                           
  1153                           ;prog.c: 785: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1154  00B8  214B               	fcall	PL4	;call to abstracted procedure
  1155                           
  1156                           ;prog.c: 786: KeyCode = 0;
  1157  00B9  01DF               	clrf	_KeyCode	;volatile
  1158                           
  1159                           ;prog.c: 787: if (Broadcasting) {
  1160  00BA  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1161  00BB  28C0               	goto	l4165
  1162                           
  1163                           ;prog.c: 788: TheStart = 1;
  1164  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  1165  00BD  01B3               	clrf	main@TheStart^(0+128)
  1166  00BE  0AB3               	incf	main@TheStart^(0+128),f
  1167                           
  1168                           ;prog.c: 789: } else {
  1169  00BF  28C4               	goto	l4171
  1170  00C0                     l4165:	
  1171                           
  1172                           ;prog.c: 790: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1173  00C0  2156               	fcall	PL6	;call to abstracted procedure
  1174  00C1  2745               	fcall	_FillArrayFromEEPROM
  1175                           
  1176                           ;prog.c: 791: cell = address / (sizeof(DS_Address));
  1177                           
  1178                           ;prog.c: 792: CellToInd(cell);
  1179  00C2  213C               	fcall	PL2	;call to abstracted procedure
  1180  00C3  2693               	fcall	_CellToInd
  1181  00C4                     l4171:	
  1182                           
  1183                           ;prog.c: 793: }
  1184                           ;prog.c: 794: line = 0b00001000;
  1185  00C4  3008               	movlw	8
  1186  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  1187  00C6  00B5               	movwf	main@line^(0+128)
  1188                           
  1189                           ;prog.c: 795: Run_getInit(line);
  1190  00C7  2721               	fcall	_Run_getInit
  1191  00C8                     l364:	
  1192                           ;prog.c: 796: while(getTemp_flags.ActiveProcess);
  1193                           
  1194  00C8  1848               	btfsc	_getTemp_flags+4,0
  1195  00C9  28C8               	goto	l364
  1196  00CA  28FA               	goto	L3
  1197  00CB                     l4177:	
  1198                           ;prog.c: 797: Run_getTemp(line);
  1199                           
  1200  00CB  3023               	movlw	35
  1201  00CC  065F               	xorwf	_KeyCode,w	;volatile
  1202  00CD  1D03               	btfss	3,2
  1203  00CE  28DE               	goto	l4195
  1204                           
  1205                           ;prog.c: 801: Reset_powerOnInterval();
  1206  00CF  279B               	fcall	_Reset_powerOnInterval
  1207                           
  1208                           ;prog.c: 802: KeyCode = 0;
  1209  00D0  01DF               	clrf	_KeyCode	;volatile
  1210  00D1  3002               	movlw	2
  1211                           
  1212                           ;prog.c: 803: Broadcasting = 1;
  1213  00D2  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1214                           
  1215                           ;prog.c: 804: line = 0b00000010;
  1216  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1217  00D4  00B5               	movwf	main@line^(0+128)
  1218                           
  1219                           ;prog.c: 805: getTemp_flags.ActiveProcess = 0;
  1220  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1221  00D6  1048               	bcf	_getTemp_flags+4,0
  1222                           
  1223                           ;prog.c: 806: waitInterrupt();
  1224  00D7  27A7               	fcall	_waitInterrupt
  1225                           
  1226                           ;prog.c: 807: Run_getTemp(line);
  1227  00D8  3002               	movlw	2
  1228  00D9  26FA               	fcall	_Run_getTemp
  1229                           
  1230                           ;prog.c: 808: TheStart = 1;
  1231  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  1232  00DB  01B3               	clrf	main@TheStart^(0+128)
  1233  00DC  0AB3               	incf	main@TheStart^(0+128),f
  1234                           
  1235                           ;prog.c: 809: } else if (KeyCode == 36) {
  1236  00DD  28FC               	goto	l4223
  1237  00DE                     l4195:	
  1238  00DE  3024               	movlw	36
  1239  00DF  065F               	xorwf	_KeyCode,w	;volatile
  1240  00E0  1D03               	btfss	3,2
  1241  00E1  28FC               	goto	l4223
  1242                           
  1243                           ;prog.c: 810: KeyCode = 0;
  1244  00E2  01DF               	clrf	_KeyCode	;volatile
  1245                           
  1246                           ;prog.c: 811: if (!TheStart) {
  1247  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1248  00E4  0833               	movf	main@TheStart^(0+128),w
  1249  00E5  1D03               	btfss	3,2
  1250  00E6  28E8               	goto	l4203
  1251                           
  1252                           ;prog.c: 812: EditAddressMemory();
  1253  00E7  225F               	fcall	_EditAddressMemory
  1254  00E8                     l4203:	
  1255                           
  1256                           ;prog.c: 813: }
  1257                           ;prog.c: 815: Reset_powerOnInterval();
  1258  00E8  279B               	fcall	_Reset_powerOnInterval
  1259  00E9  3080               	movlw	128
  1260                           
  1261                           ;prog.c: 816: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1262  00EA  01B5               	clrf	FindCell@previous
  1263  00EB  2433               	fcall	_FindCell
  1264                           
  1265                           ;prog.c: 817: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1266  00EC  214B               	fcall	PL4	;call to abstracted procedure
  1267                           
  1268                           ;prog.c: 818: if (Broadcasting) {
  1269  00ED  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1270  00EE  28F3               	goto	l4213
  1271                           
  1272                           ;prog.c: 819: TheStart = 1;
  1273  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1274  00F0  01B3               	clrf	main@TheStart^(0+128)
  1275  00F1  0AB3               	incf	main@TheStart^(0+128),f
  1276                           
  1277                           ;prog.c: 820: } else {
  1278  00F2  28F7               	goto	l4219
  1279  00F3                     l4213:	
  1280                           
  1281                           ;prog.c: 821: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1282  00F3  2156               	fcall	PL6	;call to abstracted procedure
  1283  00F4  2745               	fcall	_FillArrayFromEEPROM
  1284                           
  1285                           ;prog.c: 822: cell = address / (sizeof(DS_Address));
  1286                           
  1287                           ;prog.c: 824: CellToInd(cell);
  1288  00F5  213C               	fcall	PL2	;call to abstracted procedure
  1289  00F6  2693               	fcall	_CellToInd
  1290  00F7                     l4219:	
  1291                           
  1292                           ;prog.c: 825: }
  1293                           ;prog.c: 826: line = 0b00001000;
  1294  00F7  3008               	movlw	8
  1295  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  1296  00F9  00B5               	movwf	main@line^(0+128)
  1297  00FA                     L3:	
  1298                           
  1299                           ;prog.c: 827: Run_getTemp(line);
  1300  00FA  3008               	movlw	8
  1301  00FB                     L2:	
  1302  00FB  26FA               	fcall	_Run_getTemp
  1303  00FC                     l4223:	
  1304                           
  1305                           ;prog.c: 828: }
  1306                           ;prog.c: 830: if (getTemp_flags.Error) {
  1307  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1308  00FD  1FC7               	btfss	_getTemp_flags+3,7
  1309  00FE  290F               	goto	l374
  1310                           
  1311                           ;prog.c: 831: if (Broadcasting && line == 0b00000010) {
  1312  00FF  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1313  0100  2909               	goto	l4231
  1314  0101  3002               	movlw	2
  1315  0102  1683               	bsf	3,5	;RP0=1, select bank1
  1316  0103  0635               	xorwf	main@line^(0+128),w
  1317  0104  1D03               	btfss	3,2
  1318  0105  2909               	goto	l4231
  1319                           
  1320                           ;prog.c: 832: line = 0b00001000;
  1321  0106  3008               	movlw	8
  1322  0107  00B5               	movwf	main@line^(0+128)
  1323                           
  1324                           ;prog.c: 833: } else {
  1325  0108  290B               	goto	l4235
  1326  0109                     l4231:	
  1327                           
  1328                           ;prog.c: 834: clrInd();
  1329  0109  27A1               	fcall	_clrInd
  1330                           
  1331                           ;prog.c: 835: ShowError();
  1332  010A  2774               	fcall	_ShowError
  1333  010B                     l4235:	
  1334                           
  1335                           ;prog.c: 836: }
  1336                           ;prog.c: 837: Run_getTemp(line);
  1337  010B  1683               	bsf	3,5	;RP0=1, select bank1
  1338  010C  0835               	movf	main@line^(0+128),w
  1339  010D  26FA               	fcall	_Run_getTemp
  1340                           
  1341                           ;prog.c: 838: } else if (getTemp_flags.DataIsRead) {
  1342  010E  2929               	goto	l4255
  1343  010F                     l374:	
  1344  010F  1F47               	btfss	_getTemp_flags+3,6
  1345  0110  2917               	goto	l4243
  1346                           
  1347                           ;prog.c: 839: clrInd();
  1348  0111  27A1               	fcall	_clrInd
  1349                           
  1350                           ;prog.c: 840: indData();
  1351  0112  23C8               	fcall	_indData
  1352                           
  1353                           ;prog.c: 841: Run_getTemp(line);
  1354  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1355  0114  0835               	movf	main@line^(0+128),w
  1356  0115  26FA               	fcall	_Run_getTemp
  1357                           
  1358                           ;prog.c: 842: } else if (TheStart) {
  1359  0116  2929               	goto	l4255
  1360  0117                     l4243:	
  1361  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1362  0118  0833               	movf	main@TheStart^(0+128),w
  1363  0119  1903               	btfsc	3,2
  1364  011A  2929               	goto	l4255
  1365                           
  1366                           ;prog.c: 843: TheStart = 0;
  1367  011B  01B3               	clrf	main@TheStart^(0+128)
  1368                           
  1369                           ;prog.c: 844: clrInd();
  1370  011C  27A1               	fcall	_clrInd
  1371                           
  1372                           ;prog.c: 845: setDigit(1, 32);
  1373  011D  3020               	movlw	32
  1374  011E  00B2               	movwf	setDigit@data
  1375  011F  3001               	movlw	1
  1376  0120  2733               	fcall	_setDigit
  1377                           
  1378                           ;prog.c: 846: setDigit(2, 32);
  1379  0121  3020               	movlw	32
  1380  0122  00B2               	movwf	setDigit@data
  1381  0123  3002               	movlw	2
  1382  0124  2733               	fcall	_setDigit
  1383                           
  1384                           ;prog.c: 847: setDigit(3, 32);
  1385  0125  3020               	movlw	32
  1386  0126  00B2               	movwf	setDigit@data
  1387  0127  3003               	movlw	3
  1388  0128  2733               	fcall	_setDigit
  1389  0129                     l4255:	
  1390                           
  1391                           ;prog.c: 848: }
  1392                           ;prog.c: 850: if (point_on_ind_delay > 0) {
  1393  0129  1683               	bsf	3,5	;RP0=1, select bank1
  1394  012A  082E               	movf	main@point_on_ind_delay^(0+128),w
  1395  012B  042F               	iorwf	(main@point_on_ind_delay+1)^(0+128),w
  1396  012C  1903               	btfsc	3,2
  1397  012D  293A               	goto	l4261
  1398  012E  3001               	movlw	1
  1399                           
  1400                           ;prog.c: 851: setPoint(1, 1);
  1401  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0130  01AD               	clrf	setPoint@value
  1403  0131  0AAD               	incf	setPoint@value,f
  1404  0132  2756               	fcall	_setPoint
  1405                           
  1406                           ;prog.c: 852: point_on_ind_delay--;
  1407  0133  3001               	movlw	1
  1408  0134  1683               	bsf	3,5	;RP0=1, select bank1
  1409  0135  02AE               	subwf	main@point_on_ind_delay^(0+128),f
  1410  0136  3000               	movlw	0
  1411  0137  1C03               	skipc
  1412  0138  03AF               	decf	(main@point_on_ind_delay+1)^(0+128),f
  1413  0139  02AF               	subwf	(main@point_on_ind_delay+1)^(0+128),f
  1414  013A                     l4261:	
  1415                           
  1416                           ;prog.c: 853: }
  1417                           ;prog.c: 855: refreshInd();
  1418  013A  2793               	fcall	_refreshInd
  1419  013B  284D               	goto	l4099
  1420  013C                     __end_of_main:	
  1421  013C                     PL2:	
  1422  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1423  013D  0834               	movf	main@address^(0+128),w
  1424  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1425  013F  00C3               	movwf	??_main
  1426  0140  1003               	clrc
  1427  0141  0CC3               	rrf	??_main,f
  1428  0142  1003               	clrc
  1429  0143  0CC3               	rrf	??_main,f
  1430  0144  1003               	clrc
  1431  0145  0CC3               	rrf	??_main,f
  1432  0146  0843               	movf	??_main,w
  1433  0147  1683               	bsf	3,5	;RP0=1, select bank1
  1434  0148  00B2               	movwf	main@cell^(0+128)
  1435  0149  0832               	movf	main@cell^(0+128),w
  1436  014A  0008               	return
  1437  014B                     __end_ofPL2:	
  1438  014B                     PL4:	
  1439  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1440  014C  00B4               	movwf	main@address^(0+128)
  1441  014D  3A80               	xorlw	128
  1442  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1443  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0150  1D03               	btfss	3,2
  1445  0151  2954               	goto	L4
  1446  0152  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1447  0153  0008               	return
  1448  0154                     L4:	
  1449  0154  1060               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1450  0155  0008               	return
  1451  0156                     __end_ofPL4:	
  1452  0156                     PL6:	
  1453  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1454  0157  0834               	movf	main@address^(0+128),w
  1455  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1456  0159  00B0               	movwf	FillArrayFromEEPROM@address_start
  1457  015A  3008               	movlw	8
  1458  015B  00B1               	movwf	FillArrayFromEEPROM@quantity
  1459  015C  34BF               	retlw	(low (_DS_Address| 0))& (0+255)
  1460  015D                     __end_ofPL6:	
  1461                           
  1462                           	psect	text1
  1463  03C8                     __ptext1:	
  1464 ;; *************** function _indData *****************
  1465 ;; Defined at:
  1466 ;;		line 537 in file "prog.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;		None
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  v               1   23[BANK0 ] unsigned char 
  1471 ;;  v               1   25[BANK0 ] unsigned char 
  1472 ;;  cd              1   27[BANK0 ] unsigned char 
  1473 ;;  dN              1   26[BANK0 ] unsigned char 
  1474 ;;  isPoint         1   24[BANK0 ] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 300/0
  1481 ;;		On exit  : 300/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1484 ;;      Params:         0       0       0       0
  1485 ;;      Locals:         0       5       0       0
  1486 ;;      Temps:          0       1       0       0
  1487 ;;      Totals:         0       6       0       0
  1488 ;;Total ram usage:        6 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    4
  1491 ;; This function calls:
  1492 ;;		___lbdiv
  1493 ;;		___lbmod
  1494 ;;		_setDigit
  1495 ;;		_setPoint
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _indData
  1503  03C8                     _indData:	
  1504                           
  1505                           ;prog.c: 539: unsigned char cd = 3;
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1509  03C8  3003               	movlw	3
  1510  03C9  00BB               	movwf	indData@cd
  1511                           
  1512                           ;prog.c: 540: unsigned char dN = 3;
  1513  03CA  00BA               	movwf	indData@dN
  1514                           
  1515                           ;prog.c: 542: if (sign != 0) {
  1516  03CB  085A               	movf	_sign,w
  1517  03CC  1903               	btfsc	3,2
  1518  03CD  2BD3               	goto	l3721
  1519                           
  1520                           ;prog.c: 543: setDigit(cd, 32);
  1521  03CE  3020               	movlw	32
  1522  03CF  00B2               	movwf	setDigit@data
  1523  03D0  3003               	movlw	3
  1524  03D1  2733               	fcall	_setDigit
  1525  03D2  2BD7               	goto	l3723
  1526  03D3                     l3721:	
  1527                           ;prog.c: 546: } else if (temperature < 10) {
  1528                           
  1529                           ;prog.c: 545: dN--;
  1530                           
  1531                           ;prog.c: 544: cd--;
  1532                           
  1533  03D3  300A               	movlw	10
  1534  03D4  025C               	subwf	_temperature,w
  1535  03D5  1803               	skipnc
  1536  03D6  2BD9               	goto	l3725
  1537  03D7                     l3723:	
  1538                           
  1539                           ;prog.c: 547: cd--;
  1540  03D7  03BB               	decf	indData@cd,f
  1541                           
  1542                           ;prog.c: 548: dN--;
  1543  03D8  03BA               	decf	indData@dN,f
  1544  03D9                     l3725:	
  1545                           
  1546                           ;prog.c: 549: }
  1547                           ;prog.c: 551: unsigned char isPoint = 0;
  1548  03D9  01B8               	clrf	indData@isPoint
  1549                           
  1550                           ;prog.c: 552: if(sign && temperature > 9 || temperature > 99){
  1551  03DA  085A               	movf	_sign,w
  1552  03DB  1903               	btfsc	3,2
  1553  03DC  2BE1               	goto	l3731
  1554  03DD  300A               	movlw	10
  1555  03DE  025C               	subwf	_temperature,w
  1556  03DF  1803               	skipnc
  1557  03E0  2BE5               	goto	l286
  1558  03E1                     l3731:	
  1559  03E1  3064               	movlw	100
  1560  03E2  025C               	subwf	_temperature,w
  1561  03E3  1C03               	skipc
  1562  03E4  2BE7               	goto	l3733
  1563  03E5                     l286:	
  1564                           
  1565                           ;prog.c: 553: isPoint = 1;
  1566  03E5  01B8               	clrf	indData@isPoint
  1567  03E6  0AB8               	incf	indData@isPoint,f
  1568  03E7                     l3733:	
  1569                           
  1570                           ;prog.c: 557: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1571  03E7  3064               	movlw	100
  1572  03E8  025C               	subwf	_temperature,w
  1573  03E9  1C03               	btfss	3,0
  1574  03EA  2BED               	goto	u3880
  1575  03EB  3001               	movlw	1
  1576  03EC  2BEE               	goto	u3890
  1577  03ED                     u3880:	
  1578  03ED  3000               	movlw	0
  1579  03EE                     u3890:	
  1580  03EE  00B6               	movwf	??_indData
  1581  03EF  300A               	movlw	10
  1582  03F0  025C               	subwf	_temperature,w
  1583  03F1  1C03               	btfss	3,0
  1584  03F2  2BF5               	goto	u3900
  1585  03F3  3001               	movlw	1
  1586  03F4  2BF6               	goto	u3910
  1587  03F5                     u3900:	
  1588  03F5  3000               	movlw	0
  1589  03F6                     u3910:	
  1590  03F6  0736               	addwf	??_indData,w
  1591  03F7  00B9               	movwf	indData@v
  1592                           
  1593                           ;prog.c: 558: setDigit(cd - v, temperature % 10);
  1594  03F8  300A               	movlw	10
  1595  03F9  00AD               	movwf	___lbmod@divisor
  1596  03FA  085C               	movf	_temperature,w
  1597  03FB  265B               	fcall	___lbmod
  1598  03FC  00B2               	movwf	setDigit@data
  1599  03FD  0839               	movf	indData@v,w
  1600  03FE  023B               	subwf	indData@cd,w
  1601  03FF  2733               	fcall	_setDigit
  1602                           
  1603                           ;prog.c: 559: if (!isPoint) {
  1604  0400  0838               	movf	indData@isPoint,w
  1605  0401  1D03               	btfss	3,2
  1606  0402  2C0A               	goto	l3743
  1607                           
  1608                           ;prog.c: 560: setPoint(cd - v, 1);
  1609  0403  01AD               	clrf	setPoint@value
  1610  0404  0AAD               	incf	setPoint@value,f
  1611  0405  0839               	movf	indData@v,w
  1612  0406  023B               	subwf	indData@cd,w
  1613  0407  2756               	fcall	_setPoint
  1614                           
  1615                           ;prog.c: 561: isPoint = 1;
  1616  0408  01B8               	clrf	indData@isPoint
  1617  0409  0AB8               	incf	indData@isPoint,f
  1618  040A                     l3743:	
  1619                           
  1620                           ;prog.c: 562: }
  1621                           ;prog.c: 563: temperature /= 10;
  1622  040A  300A               	movlw	10
  1623  040B  00AD               	movwf	___lbdiv@divisor
  1624  040C  085C               	movf	_temperature,w
  1625  040D  26AE               	fcall	___lbdiv
  1626  040E  00DC               	movwf	_temperature
  1627                           
  1628                           ;prog.c: 564: dN--;
  1629  040F  03BA               	decf	indData@dN,f
  1630                           
  1631                           ;prog.c: 565: } while (temperature > 0);
  1632  0410  085C               	movf	_temperature,w
  1633  0411  1D03               	btfss	3,2
  1634  0412  2BE7               	goto	l3733
  1635                           
  1636                           ;prog.c: 567: if (dN > 0) {
  1637  0413  083A               	movf	indData@dN,w
  1638  0414  1903               	btfsc	3,2
  1639  0415  0008               	return
  1640                           
  1641                           ;prog.c: 568: cd = dN;
  1642  0416  083A               	movf	indData@dN,w
  1643  0417  00BB               	movwf	indData@cd
  1644                           
  1645                           ;prog.c: 569: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1646  0418  300A               	movlw	10
  1647  0419  025B               	subwf	_temp_drob,w
  1648  041A  1C03               	skipc
  1649  041B  2C23               	goto	l3757
  1650  041C  0B3A               	decfsz	indData@dN,w
  1651  041D  2C23               	goto	l3757
  1652  041E  300A               	movlw	10
  1653  041F  00AD               	movwf	___lbdiv@divisor
  1654  0420  085B               	movf	_temp_drob,w
  1655  0421  26AE               	fcall	___lbdiv
  1656  0422  00DB               	movwf	_temp_drob
  1657  0423                     l3757:	
  1658                           
  1659                           ;prog.c: 571: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1660  0423  300A               	movlw	10
  1661  0424  025B               	subwf	_temp_drob,w
  1662  0425  1C03               	btfss	3,0
  1663  0426  2C29               	goto	u3970
  1664  0427  3001               	movlw	1
  1665  0428  2C2A               	goto	u3980
  1666  0429                     u3970:	
  1667  0429  3000               	movlw	0
  1668  042A                     u3980:	
  1669  042A  00B7               	movwf	indData@v_240
  1670                           
  1671                           ;prog.c: 572: setDigit(cd - v, temp_drob % 10);
  1672  042B  300A               	movlw	10
  1673  042C  00AD               	movwf	___lbmod@divisor
  1674  042D  085B               	movf	_temp_drob,w
  1675  042E  265B               	fcall	___lbmod
  1676  042F  00B2               	movwf	setDigit@data
  1677  0430  0837               	movf	indData@v_240,w
  1678  0431  023B               	subwf	indData@cd,w
  1679  0432  2F33               	ljmp	_setDigit
  1680  0433                     __end_of_indData:	
  1681                           
  1682                           	psect	text2
  1683  06FA                     __ptext2:	
  1684 ;; *************** function _Run_getTemp *****************
  1685 ;; Defined at:
  1686 ;;		line 688 in file "prog.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  line            1    wreg     unsigned char 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  line            1   13[BANK0 ] unsigned char 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  1    wreg      void 
  1693 ;; Registers used:
  1694 ;;		wreg, status,2, status,0
  1695 ;; Tracked objects:
  1696 ;;		On entry : 200/100
  1697 ;;		On exit  : 300/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1700 ;;      Params:         0       0       0       0
  1701 ;;      Locals:         0       1       0       0
  1702 ;;      Temps:          0       0       0       0
  1703 ;;      Totals:         0       1       0       0
  1704 ;;Total ram usage:        1 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    3
  1707 ;; This function calls:
  1708 ;;		Nothing
  1709 ;; This function is called by:
  1710 ;;		_main
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           
  1715                           ;psect for function _Run_getTemp
  1716  06FA                     _Run_getTemp:	
  1717                           
  1718                           ;incstack = 0
  1719                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1720                           ;Run_getTemp@line stored from wreg
  1721  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  1722  06FB  00AD               	movwf	Run_getTemp@line
  1723  06FC  30C3               	movlw	-61
  1724                           
  1725                           ;prog.c: 690: getTemp_flags.Init = 1;
  1726  06FD  1444               	bsf	_getTemp_flags,0
  1727                           
  1728                           ;prog.c: 691: getTemp_flags.Send_Address = 1;
  1729  06FE  14C4               	bsf	_getTemp_flags,1
  1730                           
  1731                           ;prog.c: 692: getTemp_flags.CountAddressBytes = 0;
  1732  06FF  05C4               	andwf	_getTemp_flags,f
  1733  0700  3078               	movlw	120
  1734                           
  1735                           ;prog.c: 693: getTemp_flags.SendConvertTemp = 1;
  1736  0701  1744               	bsf	_getTemp_flags,6
  1737                           
  1738                           ;prog.c: 694: getTemp_flags.PauseValue = 120;
  1739  0702  00C5               	movwf	_getTemp_flags+1
  1740  0703  30C3               	movlw	-61
  1741  0704  01C6               	clrf	_getTemp_flags+2
  1742                           
  1743                           ;prog.c: 695: getTemp_flags.SendGetTemp = 1;
  1744  0705  1447               	bsf	_getTemp_flags+3,0
  1745                           
  1746                           ;prog.c: 696: getTemp_flags.ReadData = 1;
  1747  0706  14C7               	bsf	_getTemp_flags+3,1
  1748                           
  1749                           ;prog.c: 697: getTemp_flags.CountDataBytes = 0;
  1750  0707  05C7               	andwf	_getTemp_flags+3,f
  1751                           
  1752                           ;prog.c: 698: getTemp_flags.Error = 0;
  1753  0708  13C7               	bcf	_getTemp_flags+3,7
  1754                           
  1755                           ;prog.c: 699: getTemp_flags.DataIsRead = 0;
  1756  0709  1347               	bcf	_getTemp_flags+3,6
  1757                           
  1758                           ;prog.c: 700: getTemp_flags.Line = line;
  1759  070A  082D               	movf	Run_getTemp@line,w
  1760  070B  00C9               	movwf	_getTemp_flags+5
  1761                           
  1762                           ;prog.c: 702: getTemp_flags.ActiveProcess = 1;
  1763  070C  1448               	bsf	_getTemp_flags+4,0
  1764  070D  0008               	return
  1765  070E                     __end_of_Run_getTemp:	
  1766                           
  1767                           	psect	text3
  1768  0721                     __ptext3:	
  1769 ;; *************** function _Run_getInit *****************
  1770 ;; Defined at:
  1771 ;;		line 706 in file "prog.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  line            1    wreg     unsigned char 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  line            1   13[BANK0 ] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, status,2, status,0
  1780 ;; Tracked objects:
  1781 ;;		On entry : 300/100
  1782 ;;		On exit  : 300/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1785 ;;      Params:         0       0       0       0
  1786 ;;      Locals:         0       1       0       0
  1787 ;;      Temps:          0       0       0       0
  1788 ;;      Totals:         0       1       0       0
  1789 ;;Total ram usage:        1 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    3
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_main
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           
  1800                           ;psect for function _Run_getInit
  1801  0721                     _Run_getInit:	
  1802                           
  1803                           ;incstack = 0
  1804                           ; Regs used in _Run_getInit: [wreg+status,2+status,0]
  1805                           ;Run_getInit@line stored from wreg
  1806  0721  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0722  00AD               	movwf	Run_getInit@line
  1808  0723  30C3               	movlw	-61
  1809                           
  1810                           ;prog.c: 708: getTemp_flags.Init = 1;
  1811  0724  1444               	bsf	_getTemp_flags,0
  1812                           
  1813                           ;prog.c: 709: getTemp_flags.Send_Address = 0;
  1814  0725  10C4               	bcf	_getTemp_flags,1
  1815                           
  1816                           ;prog.c: 710: getTemp_flags.CountAddressBytes = 0;
  1817  0726  05C4               	andwf	_getTemp_flags,f
  1818                           
  1819                           ;prog.c: 711: getTemp_flags.SendConvertTemp = 0;
  1820  0727  1344               	bcf	_getTemp_flags,6
  1821                           
  1822                           ;prog.c: 712: getTemp_flags.PauseValue = 0;
  1823  0728  01C5               	clrf	_getTemp_flags+1
  1824  0729  01C6               	clrf	_getTemp_flags+2
  1825                           
  1826                           ;prog.c: 713: getTemp_flags.SendGetTemp = 0;
  1827  072A  1047               	bcf	_getTemp_flags+3,0
  1828                           
  1829                           ;prog.c: 714: getTemp_flags.ReadData = 0;
  1830  072B  10C7               	bcf	_getTemp_flags+3,1
  1831                           
  1832                           ;prog.c: 715: getTemp_flags.CountDataBytes = 0;
  1833  072C  05C7               	andwf	_getTemp_flags+3,f
  1834                           
  1835                           ;prog.c: 716: getTemp_flags.Error = 0;
  1836  072D  13C7               	bcf	_getTemp_flags+3,7
  1837                           
  1838                           ;prog.c: 717: getTemp_flags.DataIsRead = 0;
  1839  072E  1347               	bcf	_getTemp_flags+3,6
  1840                           
  1841                           ;prog.c: 718: getTemp_flags.Line = line;
  1842  072F  082D               	movf	Run_getInit@line,w
  1843  0730  00C9               	movwf	_getTemp_flags+5
  1844                           
  1845                           ;prog.c: 720: getTemp_flags.ActiveProcess = 1;
  1846  0731  1448               	bsf	_getTemp_flags+4,0
  1847  0732  0008               	return
  1848  0733                     __end_of_Run_getInit:	
  1849                           
  1850                           	psect	text4
  1851  079B                     __ptext4:	
  1852 ;; *************** function _Reset_powerOnInterval *****************
  1853 ;; Defined at:
  1854 ;;		line 98 in file "prog.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg
  1863 ;; Tracked objects:
  1864 ;;		On entry : 200/0
  1865 ;;		On exit  : 300/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1868 ;;      Params:         0       0       0       0
  1869 ;;      Locals:         0       0       0       0
  1870 ;;      Temps:          0       0       0       0
  1871 ;;      Totals:         0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    3
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function _Reset_powerOnInterval
  1884  079B                     _Reset_powerOnInterval:	
  1885                           
  1886                           ;prog.c: 99: powerOnInterval = 700;
  1887                           
  1888                           ;incstack = 0
  1889                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1890  079B  30BC               	movlw	188
  1891  079C  1283               	bcf	3,5	;RP0=0, select bank0
  1892  079D  00DD               	movwf	_powerOnInterval
  1893  079E  3002               	movlw	2
  1894  079F  00DE               	movwf	_powerOnInterval+1
  1895  07A0  0008               	return
  1896  07A1                     __end_of_Reset_powerOnInterval:	
  1897                           
  1898                           	psect	text5
  1899  0433                     __ptext5:	
  1900 ;; *************** function _FindCell *****************
  1901 ;; Defined at:
  1902 ;;		line 396 in file "prog.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  addressStart    1    wreg     unsigned char 
  1905 ;;  previous        1   21[BANK0 ] unsigned char 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  addressStart    1   32[BANK0 ] unsigned char 
  1908 ;;  i               1   33[BANK0 ] unsigned char 
  1909 ;;  CellsData       8   22[BANK0 ] unsigned char [8]
  1910 ;;  CellIsEmpty     1   31[BANK0 ] unsigned char 
  1911 ;;  address         1   34[BANK0 ] unsigned char 
  1912 ;;  addressNew      1   30[BANK0 ] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      unsigned char 
  1915 ;; Registers used:
  1916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 200/100
  1919 ;;		On exit  : B00/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1922 ;;      Params:         0       1       0       0
  1923 ;;      Locals:         0      13       0       0
  1924 ;;      Temps:          0       0       0       0
  1925 ;;      Totals:         0      14       0       0
  1926 ;;Total ram usage:       14 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    5
  1929 ;; This function calls:
  1930 ;;		_FillArrayFromEEPROM
  1931 ;;		_waitInterrupt
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function _FindCell
  1939  0433                     _FindCell:	
  1940                           
  1941                           ;incstack = 0
  1942                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1943                           ;FindCell@addressStart stored from wreg
  1944  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0434  00C0               	movwf	FindCell@addressStart
  1946                           
  1947                           ;prog.c: 397: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1948  0435  3A80               	xorlw	128
  1949  0436  1D03               	btfss	3,2
  1950  0437  2C3F               	goto	l205
  1951                           
  1952                           ;prog.c: 398: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1953  0438  0835               	movf	FindCell@previous,w
  1954  0439  1903               	btfsc	3,2
  1955  043A  2C3D               	goto	l3665
  1956  043B  01C0               	clrf	FindCell@addressStart
  1957  043C  2C3F               	goto	l205
  1958  043D                     l3665:	
  1959  043D  3078               	movlw	120
  1960  043E  00C0               	movwf	FindCell@addressStart
  1961  043F                     l205:	
  1962                           
  1963                           ;prog.c: 399: }
  1964                           ;prog.c: 400: unsigned char address = addressStart;
  1965  043F  0840               	movf	FindCell@addressStart,w
  1966  0440  00C2               	movwf	FindCell@address
  1967                           
  1968                           ;prog.c: 401: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  1969  0441  3080               	movlw	128
  1970  0442  00BE               	movwf	FindCell@addressNew
  1971  0443                     l3667:	
  1972                           
  1973                           ;prog.c: 404: if (!previous) {
  1974  0443  0835               	movf	FindCell@previous,w
  1975  0444  1D03               	btfss	3,2
  1976  0445  2C4F               	goto	l3675
  1977                           
  1978                           ;prog.c: 405: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  1979  0446  3078               	movlw	120
  1980  0447  0642               	xorwf	FindCell@address,w
  1981  0448  1D03               	btfss	3,2
  1982  0449  2C4C               	goto	l3673
  1983  044A  01C2               	clrf	FindCell@address
  1984  044B  2C57               	goto	l3681
  1985  044C                     l3673:	
  1986  044C  3008               	movlw	8
  1987  044D  07C2               	addwf	FindCell@address,f
  1988  044E  2C57               	goto	l3681
  1989  044F                     l3675:	
  1990                           
  1991                           ;prog.c: 407: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  1992  044F  0842               	movf	FindCell@address,w
  1993  0450  1D03               	btfss	3,2
  1994  0451  2C55               	goto	l3679
  1995  0452  3078               	movlw	120
  1996  0453  00C2               	movwf	FindCell@address
  1997  0454  2C57               	goto	l3681
  1998  0455                     l3679:	
  1999  0455  3008               	movlw	8
  2000  0456  02C2               	subwf	FindCell@address,f
  2001  0457                     l3681:	
  2002                           
  2003                           ;prog.c: 408: }
  2004                           ;prog.c: 410: unsigned char CellsData [(sizeof(DS_Address))];
  2005                           ;prog.c: 411: waitInterrupt();
  2006  0457  27A7               	fcall	_waitInterrupt
  2007                           
  2008                           ;prog.c: 412: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  2009  0458  0842               	movf	FindCell@address,w
  2010  0459  00B0               	movwf	FillArrayFromEEPROM@address_start
  2011  045A  3008               	movlw	8
  2012  045B  00B1               	movwf	FillArrayFromEEPROM@quantity
  2013  045C  3036               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  2014  045D  2745               	fcall	_FillArrayFromEEPROM
  2015                           
  2016                           ;prog.c: 413: unsigned char CellIsEmpty = 1;
  2017  045E  01BF               	clrf	FindCell@CellIsEmpty
  2018  045F  0ABF               	incf	FindCell@CellIsEmpty,f
  2019                           
  2020                           ;prog.c: 414: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2021  0460  01C1               	clrf	FindCell@i
  2022  0461                     l3693:	
  2023                           
  2024                           ;prog.c: 415: if (CellsData[i] != 0xFF) {
  2025  0461  0841               	movf	FindCell@i,w
  2026  0462  3E36               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  2027  0463  0084               	movwf	4
  2028  0464  1383               	bcf	3,7	;select IRP bank0
  2029  0465  0F00               	incfsz	0,w
  2030                           
  2031                           ;prog.c: 416: CellIsEmpty = 0;
  2032  0466  01BF               	clrf	FindCell@CellIsEmpty
  2033  0467  3008               	movlw	8
  2034  0468  0AC1               	incf	FindCell@i,f
  2035  0469  0241               	subwf	FindCell@i,w
  2036  046A  1C03               	skipc
  2037  046B  2C61               	goto	l3693
  2038                           
  2039                           ;prog.c: 417: }
  2040                           ;prog.c: 418: }
  2041                           ;prog.c: 420: if (CellIsEmpty == 0) {
  2042  046C  083F               	movf	FindCell@CellIsEmpty,w
  2043  046D  1D03               	btfss	3,2
  2044  046E  2C72               	goto	l3705
  2045                           
  2046                           ;prog.c: 421: addressNew = address;
  2047  046F  0842               	movf	FindCell@address,w
  2048  0470  00BE               	movwf	FindCell@addressNew
  2049                           
  2050                           ;prog.c: 422: break;
  2051  0471  2C76               	goto	l3707
  2052  0472                     l3705:	
  2053                           
  2054                           ;prog.c: 423: }
  2055                           ;prog.c: 424: } while (address != addressStart);
  2056  0472  0842               	movf	FindCell@address,w
  2057  0473  0640               	xorwf	FindCell@addressStart,w
  2058  0474  1D03               	skipz
  2059  0475  2C43               	goto	l3667
  2060  0476                     l3707:	
  2061                           
  2062                           ;prog.c: 425: return addressNew;
  2063  0476  083E               	movf	FindCell@addressNew,w
  2064  0477  0008               	return
  2065  0478                     __end_of_FindCell:	
  2066                           
  2067                           	psect	text6
  2068  025F                     __ptext6:	
  2069 ;; *************** function _EditAddressMemory *****************
  2070 ;; Defined at:
  2071 ;;		line 600 in file "prog.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  i               1   11[BANK1 ] unsigned char 
  2076 ;;  i               1   12[BANK1 ] unsigned char 
  2077 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  2078 ;;  cell            1   13[BANK1 ] unsigned char 
  2079 ;;  CellIsEmpty     1   10[BANK1 ] unsigned char 
  2080 ;;  RereadCell      1    9[BANK1 ] unsigned char 
  2081 ;;  ErrorShowed     1    8[BANK1 ] unsigned char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 300/100
  2088 ;;		On exit  : 300/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2091 ;;      Params:         0       0       0       0
  2092 ;;      Locals:         0       0      14       0
  2093 ;;      Temps:          0       1       0       0
  2094 ;;      Totals:         0       1      14       0
  2095 ;;Total ram usage:       15 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    6
  2098 ;; This function calls:
  2099 ;;		_CellToInd
  2100 ;;		_INIT
  2101 ;;		_RX
  2102 ;;		_ReadCell
  2103 ;;		_ShowError
  2104 ;;		_TX
  2105 ;;		_WriteArrayToEEPROM
  2106 ;;		_calc_crc
  2107 ;;		_clrInd
  2108 ;;		_refreshInd
  2109 ;;		_setPoint
  2110 ;;		_waitInterrupt
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           
  2117                           ;psect for function _EditAddressMemory
  2118  025F                     _EditAddressMemory:	
  2119                           
  2120                           ;prog.c: 601: getTemp_flags.ActiveProcess = 0;
  2121                           
  2122                           ;incstack = 0
  2123                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2124  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0260  1048               	bcf	_getTemp_flags+4,0
  2126                           
  2127                           ;prog.c: 603: PowerBlocked++;
  2128  0261  0AD8               	incf	_PowerBlocked,f
  2129                           
  2130                           ;prog.c: 605: clrInd();
  2131  0262  27A1               	fcall	_clrInd
  2132                           
  2133                           ;prog.c: 607: unsigned char cell = 0;
  2134  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2135  0264  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2136                           
  2137                           ;prog.c: 608: unsigned char CellIsEmpty = 1;
  2138  0265  01AA               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2139  0266  0AAA               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2140                           
  2141                           ;prog.c: 609: unsigned char CellsData [(sizeof(DS_Address))];
  2142                           ;prog.c: 611: unsigned char ErrorShowed = 0;
  2143  0267  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2144                           
  2145                           ;prog.c: 612: unsigned char RereadCell = 1;
  2146  0268  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2147  0269  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2148  026A                     l3775:	
  2149                           
  2150                           ;prog.c: 615: if (KeyCode != 0 && ErrorShowed) {
  2151  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2152  026B  085F               	movf	_KeyCode,w	;volatile
  2153  026C  1903               	btfsc	3,2
  2154  026D  2A78               	goto	l3783
  2155  026E  1683               	bsf	3,5	;RP0=1, select bank1
  2156  026F  0828               	movf	EditAddressMemory@ErrorShowed^(0+128),w
  2157  0270  1903               	btfsc	3,2
  2158  0271  2A78               	goto	l3783
  2159                           
  2160                           ;prog.c: 616: KeyCode = 0;
  2161  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0273  01DF               	clrf	_KeyCode	;volatile
  2163                           
  2164                           ;prog.c: 617: ErrorShowed = 0;
  2165  0274  1683               	bsf	3,5	;RP0=1, select bank1
  2166  0275  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2167                           
  2168                           ;prog.c: 618: RereadCell = 1;
  2169  0276  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2170  0277  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2171  0278                     l3783:	
  2172                           
  2173                           ;prog.c: 619: }
  2174                           ;prog.c: 621: if (KeyCode == 31) {
  2175  0278  301F               	movlw	31
  2176  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2177  027A  065F               	xorwf	_KeyCode,w	;volatile
  2178  027B  1D03               	btfss	3,2
  2179  027C  2A8A               	goto	l3795
  2180                           
  2181                           ;prog.c: 622: KeyCode = 0;
  2182  027D  01DF               	clrf	_KeyCode	;volatile
  2183                           
  2184                           ;prog.c: 623: if (cell > 0) {
  2185  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2186  027F  082D               	movf	EditAddressMemory@cell^(0+128),w
  2187  0280  1903               	btfsc	3,2
  2188  0281  2A84               	goto	l3791
  2189                           
  2190                           ;prog.c: 624: cell--;
  2191  0282  03AD               	decf	EditAddressMemory@cell^(0+128),f
  2192                           
  2193                           ;prog.c: 625: } else {
  2194  0283  2A86               	goto	l3793
  2195  0284                     l3791:	
  2196                           
  2197                           ;prog.c: 626: cell = 16 - 1;
  2198  0284  300F               	movlw	15
  2199  0285  00AD               	movwf	EditAddressMemory@cell^(0+128)
  2200  0286                     l3793:	
  2201                           
  2202                           ;prog.c: 627: }
  2203                           ;prog.c: 628: RereadCell = 1;
  2204  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2205  0287  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2206  0288  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2207                           
  2208                           ;prog.c: 629: } else if (KeyCode == 32) {
  2209  0289  2AFE               	goto	l3887
  2210  028A                     l3795:	
  2211  028A  3020               	movlw	32
  2212  028B  065F               	xorwf	_KeyCode,w	;volatile
  2213  028C  1D03               	btfss	3,2
  2214  028D  2A98               	goto	l3807
  2215                           
  2216                           ;prog.c: 630: KeyCode = 0;
  2217  028E  01DF               	clrf	_KeyCode	;volatile
  2218                           
  2219                           ;prog.c: 631: if (cell < 16 - 1) {
  2220  028F  300F               	movlw	15
  2221  0290  1683               	bsf	3,5	;RP0=1, select bank1
  2222  0291  022D               	subwf	EditAddressMemory@cell^(0+128),w
  2223  0292  1803               	skipnc
  2224  0293  2A96               	goto	l3803
  2225                           
  2226                           ;prog.c: 632: cell++;
  2227  0294  0AAD               	incf	EditAddressMemory@cell^(0+128),f
  2228                           
  2229                           ;prog.c: 633: } else {
  2230  0295  2A86               	goto	l3793
  2231  0296                     l3803:	
  2232                           
  2233                           ;prog.c: 634: cell = 0;
  2234  0296  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2235  0297  2A86               	goto	l3793
  2236  0298                     l3807:	
  2237  0298  3022               	movlw	34
  2238  0299  065F               	xorwf	_KeyCode,w	;volatile
  2239  029A  1D03               	btfss	3,2
  2240  029B  2AA0               	goto	l3817
  2241                           
  2242                           ;prog.c: 638: KeyCode = 0;
  2243  029C  01DF               	clrf	_KeyCode	;volatile
  2244                           
  2245                           ;prog.c: 639: clrInd();
  2246  029D  27A1               	fcall	_clrInd
  2247                           
  2248                           ;prog.c: 640: refreshInd();
  2249  029E  2793               	fcall	_refreshInd
  2250                           
  2251                           ;prog.c: 641: break;
  2252  029F  2B1A               	goto	l3899
  2253  02A0                     l3817:	
  2254  02A0  3023               	movlw	35
  2255  02A1  065F               	xorwf	_KeyCode,w	;volatile
  2256  02A2  1D03               	btfss	3,2
  2257  02A3  2AE5               	goto	l3863
  2258  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  2259  02A5  0B2A               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2260  02A6  2AE5               	goto	l3863
  2261                           
  2262                           ;prog.c: 643: KeyCode = 0;
  2263  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2264  02A8  01DF               	clrf	_KeyCode	;volatile
  2265                           
  2266                           ;prog.c: 644: waitInterrupt();
  2267  02A9  27A7               	fcall	_waitInterrupt
  2268                           
  2269                           ;prog.c: 645: if (INIT(0b00000010)) {
  2270  02AA  3002               	movlw	2
  2271  02AB  24BD               	fcall	_INIT
  2272  02AC  3A00               	xorlw	0
  2273  02AD  1903               	skipnz
  2274  02AE  2AE0               	goto	l3855
  2275                           
  2276                           ;prog.c: 646: waitInterrupt();
  2277  02AF  27A7               	fcall	_waitInterrupt
  2278                           
  2279                           ;prog.c: 647: TX(0x33, 0b00000010);
  2280  02B0  3002               	movlw	2
  2281  02B1  00AD               	movwf	TX@line
  2282  02B2  3033               	movlw	51
  2283  02B3  24F5               	fcall	_TX
  2284                           
  2285                           ;prog.c: 648: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2286  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2287  02B5  01AB               	clrf	EditAddressMemory@i^(0+128)
  2288  02B6                     l3837:	
  2289                           
  2290                           ;prog.c: 649: waitInterrupt();
  2291  02B6  27A7               	fcall	_waitInterrupt
  2292                           
  2293                           ;prog.c: 650: CellsData[i] = RX(0b00000010);
  2294  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2295  02B8  082B               	movf	EditAddressMemory@i^(0+128),w
  2296  02B9  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2297  02BA  0084               	movwf	4
  2298  02BB  3002               	movlw	2
  2299  02BC  258A               	fcall	_RX
  2300  02BD  1383               	bcf	3,7	;select IRP bank1
  2301  02BE  0080               	movwf	0
  2302  02BF  3008               	movlw	8
  2303  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  2304  02C1  0AAB               	incf	EditAddressMemory@i^(0+128),f
  2305  02C2  022B               	subwf	EditAddressMemory@i^(0+128),w
  2306  02C3  1C03               	skipc
  2307  02C4  2AB6               	goto	l3837
  2308                           
  2309                           ;prog.c: 651: }
  2310                           ;prog.c: 652: if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_
      +                          Address)) - 1)) {
  2311  02C5  3007               	movlw	7
  2312  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2313  02C7  00AD               	movwf	calc_crc@len
  2314  02C8  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2315  02C9  25FD               	fcall	_calc_crc
  2316  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2317  02CB  0627               	xorwf	(EditAddressMemory@CellsData^(0+128)+7),w
  2318  02CC  1D03               	skipz
  2319  02CD  2AE0               	goto	l3855
  2320  02CE                     l3847:	
  2321                           
  2322                           ;prog.c: 653: waitInterrupt();
  2323  02CE  27A7               	fcall	_waitInterrupt
  2324                           
  2325                           ;prog.c: 654: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2326  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2327  02D0  082D               	movf	EditAddressMemory@cell^(0+128),w
  2328  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2329  02D2  00B9               	movwf	??_EditAddressMemory
  2330  02D3  1003               	clrc
  2331  02D4  0DB9               	rlf	??_EditAddressMemory,f
  2332  02D5  1003               	clrc
  2333  02D6  0DB9               	rlf	??_EditAddressMemory,f
  2334  02D7  1003               	clrc
  2335  02D8  0D39               	rlf	??_EditAddressMemory,w
  2336  02D9  00B0               	movwf	WriteArrayToEEPROM@address_start
  2337  02DA  3008               	movlw	8
  2338  02DB  00B1               	movwf	WriteArrayToEEPROM@quantity
  2339  02DC  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2340  02DD  270E               	fcall	_WriteArrayToEEPROM
  2341                           
  2342                           ;prog.c: 655: waitInterrupt();
  2343  02DE  27A7               	fcall	_waitInterrupt
  2344  02DF  2A86               	goto	l3793
  2345  02E0                     l3855:	
  2346                           
  2347                           ;prog.c: 658: ShowError();
  2348  02E0  2774               	fcall	_ShowError
  2349                           
  2350                           ;prog.c: 659: ErrorShowed = 1;
  2351  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  2352  02E2  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2353  02E3  0AA8               	incf	EditAddressMemory@ErrorShowed^(0+128),f
  2354  02E4  2AFE               	goto	l3887
  2355  02E5                     l3863:	
  2356  02E5  3024               	movlw	36
  2357  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2358  02E7  065F               	xorwf	_KeyCode,w	;volatile
  2359  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2360  02E9  1D03               	btfss	3,2
  2361  02EA  2AFF               	goto	L7
  2362  02EB  082A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2363  02EC  1D03               	btfss	3,2
  2364  02ED  2AFE               	goto	l3887
  2365                           
  2366                           ;prog.c: 666: KeyCode = 0;
  2367  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2368  02EF  01DF               	clrf	_KeyCode	;volatile
  2369                           
  2370                           ;prog.c: 667: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2371  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2372  02F1  01AC               	clrf	EditAddressMemory@i_256^(0+128)
  2373  02F2                     l3873:	
  2374                           
  2375                           ;prog.c: 668: CellsData[i] = 0xFF;
  2376  02F2  082C               	movf	EditAddressMemory@i_256^(0+128),w
  2377  02F3  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2378  02F4  0084               	movwf	4
  2379  02F5  30FF               	movlw	255
  2380  02F6  1383               	bcf	3,7	;select IRP bank1
  2381  02F7  0080               	movwf	0
  2382  02F8  3008               	movlw	8
  2383  02F9  0AAC               	incf	EditAddressMemory@i_256^(0+128),f
  2384  02FA  022C               	subwf	EditAddressMemory@i_256^(0+128),w
  2385  02FB  1C03               	skipc
  2386  02FC  2AF2               	goto	l3873
  2387  02FD  2ACE               	goto	l3847
  2388  02FE                     l3887:	
  2389                           ;prog.c: 671: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2390                           
  2391                           ;prog.c: 669: }
  2392                           ;prog.c: 670: waitInterrupt();
  2393                           
  2394                           
  2395                           ;prog.c: 674: }
  2396                           ;prog.c: 676: if (RereadCell) {
  2397  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  2398  02FF                     L7:	
  2399  02FF  0829               	movf	EditAddressMemory@RereadCell^(0+128),w
  2400  0300  1903               	btfsc	3,2
  2401  0301  2A6A               	goto	l3775
  2402  0302  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2403                           
  2404                           ;prog.c: 677: RereadCell = 0;
  2405  0303  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2406                           
  2407                           ;prog.c: 678: CellIsEmpty = ReadCell(cell, CellsData);
  2408  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0305  00B5               	movwf	ReadCell@CellsData
  2410  0306  1683               	bsf	3,5	;RP0=1, select bank1
  2411  0307  082D               	movf	EditAddressMemory@cell^(0+128),w
  2412  0308  263F               	fcall	_ReadCell
  2413  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2414  030A  00AA               	movwf	EditAddressMemory@CellIsEmpty^(0+128)
  2415                           
  2416                           ;prog.c: 679: CellToInd(cell);
  2417  030B  082D               	movf	EditAddressMemory@cell^(0+128),w
  2418  030C  2693               	fcall	_CellToInd
  2419                           
  2420                           ;prog.c: 680: setPoint(1, !CellIsEmpty);
  2421  030D  1683               	bsf	3,5	;RP0=1, select bank1
  2422  030E  082A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2423  030F  1D03               	btfss	3,2
  2424  0310  2B13               	goto	u4150
  2425  0311  3001               	movlw	1
  2426  0312  2B14               	goto	u4160
  2427  0313                     u4150:	
  2428  0313  3000               	movlw	0
  2429  0314                     u4160:	
  2430  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0315  00AD               	movwf	setPoint@value
  2432  0316  3001               	movlw	1
  2433  0317  2756               	fcall	_setPoint
  2434                           
  2435                           ;prog.c: 681: refreshInd();
  2436  0318  2793               	fcall	_refreshInd
  2437  0319  2A6A               	goto	l3775
  2438  031A                     l3899:	
  2439                           
  2440                           ;prog.c: 682: }
  2441                           ;prog.c: 683: }
  2442                           ;prog.c: 684: waitInterrupt();
  2443  031A  27A7               	fcall	_waitInterrupt
  2444                           
  2445                           ;prog.c: 685: PowerBlocked--;
  2446  031B  03D8               	decf	_PowerBlocked,f
  2447  031C  0008               	return
  2448  031D                     __end_of_EditAddressMemory:	
  2449                           
  2450                           	psect	text7
  2451  0756                     __ptext7:	
  2452 ;; *************** function _setPoint *****************
  2453 ;; Defined at:
  2454 ;;		line 110 in file "prog.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  dignum          1    wreg     unsigned char 
  2457 ;;  value           1   13[BANK0 ] unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  dignum          1   14[BANK0 ] unsigned char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 300/0
  2466 ;;		On exit  : B00/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2469 ;;      Params:         0       1       0       0
  2470 ;;      Locals:         0       1       0       0
  2471 ;;      Temps:          0       0       0       0
  2472 ;;      Totals:         0       2       0       0
  2473 ;;Total ram usage:        2 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    3
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_indData
  2480 ;;		_EditAddressMemory
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _setPoint
  2487  0756                     _setPoint:	
  2488                           
  2489                           ;incstack = 0
  2490                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2491                           ;setPoint@dignum stored from wreg
  2492  0756  00AE               	movwf	setPoint@dignum
  2493                           
  2494                           ;prog.c: 111: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 
      +                          0b10111111;
  2495  0757  0B2D               	decfsz	setPoint@value,w
  2496  0758  2F5F               	goto	l3357
  2497  0759  082E               	movf	setPoint@dignum,w
  2498  075A  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2499  075B  0084               	movwf	4
  2500  075C  1383               	bcf	3,7	;select IRP bank0
  2501  075D  1700               	bsf	0,6
  2502  075E  0008               	return
  2503  075F                     l3357:	
  2504  075F  082E               	movf	setPoint@dignum,w
  2505  0760  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2506  0761  0084               	movwf	4
  2507  0762  1383               	bcf	3,7	;select IRP bank0
  2508  0763  1300               	bcf	0,6
  2509  0764  0008               	return
  2510  0765                     __end_of_setPoint:	
  2511                           
  2512                           	psect	text8
  2513  05FD                     __ptext8:	
  2514 ;; *************** function _calc_crc *****************
  2515 ;; Defined at:
  2516 ;;		line 281 in file "prog.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  mas             1    wreg     PTR unsigned char 
  2519 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2520 ;;  len             1   13[BANK0 ] unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  mas             1   16[BANK0 ] PTR unsigned char 
  2523 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2524 ;;  fb              1   15[BANK0 ] unsigned char 
  2525 ;;  i               1   17[BANK0 ] unsigned char 
  2526 ;;  dat             1   14[BANK0 ] unsigned char 
  2527 ;;  crc             1   18[BANK0 ] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      unsigned char 
  2530 ;; Registers used:
  2531 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : B00/0
  2534 ;;		On exit  : B00/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2537 ;;      Params:         0       1       0       0
  2538 ;;      Locals:         0       5       0       0
  2539 ;;      Temps:          0       0       0       0
  2540 ;;      Totals:         0       6       0       0
  2541 ;;Total ram usage:        6 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    3
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_EditAddressMemory
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           
  2552                           ;psect for function _calc_crc
  2553  05FD                     _calc_crc:	
  2554                           
  2555                           ;incstack = 0
  2556                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2557                           ;calc_crc@mas stored from wreg
  2558  05FD  00B0               	movwf	calc_crc@mas
  2559                           
  2560                           ;prog.c: 282: unsigned char crc = 0;
  2561  05FE  01B2               	clrf	calc_crc@crc
  2562                           
  2563                           ;prog.c: 283: while (len--) {
  2564  05FF  2E19               	goto	l3483
  2565  0600                     l3463:	
  2566                           
  2567                           ;prog.c: 284: unsigned char dat = *mas++;
  2568  0600  0830               	movf	calc_crc@mas,w
  2569  0601  0084               	movwf	4
  2570  0602  0800               	movf	0,w
  2571  0603  00AE               	movwf	calc_crc@dat
  2572  0604  0AB0               	incf	calc_crc@mas,f
  2573                           
  2574                           ;prog.c: 285: for (unsigned char i = 0; i < 8; i++) {
  2575  0605  01B1               	clrf	calc_crc@i
  2576  0606                     l3473:	
  2577                           
  2578                           ;prog.c: 286: unsigned char fb = (crc ^ dat) & 1;
  2579  0606  0832               	movf	calc_crc@crc,w
  2580  0607  062E               	xorwf	calc_crc@dat,w
  2581  0608  00AF               	movwf	calc_crc@fb
  2582  0609  3001               	movlw	1
  2583  060A  05AF               	andwf	calc_crc@fb,f
  2584                           
  2585                           ;prog.c: 287: crc >>= 1;
  2586  060B  1003               	clrc
  2587  060C  0CB2               	rrf	calc_crc@crc,f
  2588                           
  2589                           ;prog.c: 288: dat >>= 1;
  2590  060D  1003               	clrc
  2591  060E  0CAE               	rrf	calc_crc@dat,f
  2592                           
  2593                           ;prog.c: 289: if (fb) crc ^= 0x8c;
  2594  060F  082F               	movf	calc_crc@fb,w
  2595  0610  1903               	btfsc	3,2
  2596  0611  2E14               	goto	l3481
  2597  0612  308C               	movlw	140
  2598  0613  06B2               	xorwf	calc_crc@crc,f
  2599  0614                     l3481:	
  2600  0614  3008               	movlw	8
  2601  0615  0AB1               	incf	calc_crc@i,f
  2602  0616  0231               	subwf	calc_crc@i,w
  2603  0617  1C03               	skipc
  2604  0618  2E06               	goto	l3473
  2605  0619                     l3483:	
  2606  0619  03AD               	decf	calc_crc@len,f
  2607  061A  0F2D               	incfsz	calc_crc@len,w
  2608  061B  2E00               	goto	l3463
  2609                           
  2610                           ;prog.c: 290: }
  2611                           ;prog.c: 291: }
  2612                           ;prog.c: 292: return crc;
  2613  061C  0832               	movf	calc_crc@crc,w
  2614  061D  0008               	return
  2615  061E                     __end_of_calc_crc:	
  2616                           
  2617                           	psect	text9
  2618  070E                     __ptext9:	
  2619 ;; *************** function _WriteArrayToEEPROM *****************
  2620 ;; Defined at:
  2621 ;;		line 213 in file "prog.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  container       1    wreg     PTR unsigned char 
  2624 ;;		 -> EditAddressMemory@CellsData(8), 
  2625 ;;  address_star    1   16[BANK0 ] unsigned char 
  2626 ;;  quantity        1   17[BANK0 ] unsigned char 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  container       1   19[BANK0 ] PTR unsigned char 
  2629 ;;		 -> EditAddressMemory@CellsData(8), 
  2630 ;;  i               1   20[BANK0 ] unsigned char 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 300/0
  2637 ;;		On exit  : 300/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2640 ;;      Params:         0       2       0       0
  2641 ;;      Locals:         0       2       0       0
  2642 ;;      Temps:          0       1       0       0
  2643 ;;      Totals:         0       5       0       0
  2644 ;;Total ram usage:        5 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    4
  2647 ;; This function calls:
  2648 ;;		_EEWR
  2649 ;;		_waitInterrupt
  2650 ;; This function is called by:
  2651 ;;		_EditAddressMemory
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function _WriteArrayToEEPROM
  2657  070E                     _WriteArrayToEEPROM:	
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2661                           ;WriteArrayToEEPROM@container stored from wreg
  2662  070E  00B3               	movwf	WriteArrayToEEPROM@container
  2663                           
  2664                           ;prog.c: 214: for (unsigned char i = 0; i < quantity; i++) {
  2665  070F  01B4               	clrf	WriteArrayToEEPROM@i
  2666  0710                     l3377:	
  2667  0710  0831               	movf	WriteArrayToEEPROM@quantity,w
  2668  0711  0234               	subwf	WriteArrayToEEPROM@i,w
  2669  0712  1803               	btfsc	3,0
  2670  0713  0008               	return
  2671                           
  2672                           ;prog.c: 215: waitInterrupt();
  2673  0714  27A7               	fcall	_waitInterrupt
  2674                           
  2675                           ;prog.c: 216: EEWR(address_start + i, container[i]);
  2676  0715  0834               	movf	WriteArrayToEEPROM@i,w
  2677  0716  0733               	addwf	WriteArrayToEEPROM@container,w
  2678  0717  00B2               	movwf	??_WriteArrayToEEPROM
  2679  0718  0084               	movwf	4
  2680  0719  1383               	bcf	3,7	;select IRP bank0
  2681  071A  0800               	movf	0,w
  2682  071B  00AD               	movwf	EEWR@data
  2683  071C  0834               	movf	WriteArrayToEEPROM@i,w
  2684  071D  0730               	addwf	WriteArrayToEEPROM@address_start,w
  2685  071E  26E2               	fcall	_EEWR
  2686  071F  0AB4               	incf	WriteArrayToEEPROM@i,f
  2687  0720  2F10               	goto	l3377
  2688  0721                     __end_of_WriteArrayToEEPROM:	
  2689                           
  2690                           	psect	text10
  2691  07A7                     __ptext10:	
  2692 ;; *************** function _waitInterrupt *****************
  2693 ;; Defined at:
  2694 ;;		line 93 in file "prog.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		None
  2703 ;; Tracked objects:
  2704 ;;		On entry : 200/0
  2705 ;;		On exit  : 300/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2708 ;;      Params:         0       0       0       0
  2709 ;;      Locals:         0       0       0       0
  2710 ;;      Temps:          0       0       0       0
  2711 ;;      Totals:         0       0       0       0
  2712 ;;Total ram usage:        0 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    3
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_WriteArrayToEEPROM
  2719 ;;		_FindCell
  2720 ;;		_EditAddressMemory
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           
  2726                           ;psect for function _waitInterrupt
  2727  07A7                     _waitInterrupt:	
  2728                           
  2729                           ;prog.c: 94: endInterrupt = 0;
  2730                           
  2731                           ;incstack = 0
  2732                           ; Regs used in _waitInterrupt: []
  2733  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  2734  07A8  10E0               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2735  07A9                     l73:	
  2736                           ;prog.c: 95: while (!endInterrupt);
  2737                           
  2738  07A9  18E0               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2739  07AA  0008               	return
  2740  07AB  2FA9               	goto	l73
  2741  07AC                     __end_of_waitInterrupt:	
  2742                           
  2743                           	psect	text11
  2744  06E2                     __ptext11:	
  2745 ;; *************** function _EEWR *****************
  2746 ;; Defined at:
  2747 ;;		line 181 in file "prog.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  address         1    wreg     unsigned char 
  2750 ;;  data            1   13[BANK0 ] unsigned char 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  address         1   14[BANK0 ] unsigned char 
  2753 ;;  INTCON_BUP      1   15[BANK0 ] volatile unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg
  2758 ;; Tracked objects:
  2759 ;;		On entry : B00/0
  2760 ;;		On exit  : B00/0
  2761 ;;		Unchanged: 800/0
  2762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2763 ;;      Params:         0       1       0       0
  2764 ;;      Locals:         0       2       0       0
  2765 ;;      Temps:          0       0       0       0
  2766 ;;      Totals:         0       3       0       0
  2767 ;;Total ram usage:        3 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    3
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_WriteArrayToEEPROM
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           
  2778                           ;psect for function _EEWR
  2779  06E2                     _EEWR:	
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _EEWR: [wreg]
  2783                           ;EEWR@address stored from wreg
  2784  06E2  00AE               	movwf	EEWR@address
  2785                           
  2786                           ;prog.c: 182: volatile unsigned char INTCON_BUP = INTCON;
  2787  06E3  080B               	movf	11,w	;volatile
  2788  06E4  00AF               	movwf	EEWR@INTCON_BUP	;volatile
  2789                           
  2790                           ;prog.c: 183: INTCONbits.GIE = 0;
  2791  06E5  138B               	bcf	11,7	;volatile
  2792                           
  2793                           ;prog.c: 184: EEADR = address;
  2794  06E6  082E               	movf	EEWR@address,w
  2795  06E7  1683               	bsf	3,5	;RP0=1, select bank1
  2796  06E8  009B               	movwf	27	;volatile
  2797                           
  2798                           ;prog.c: 185: EEDATA = data;
  2799  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  2800  06EA  082D               	movf	EEWR@data,w
  2801  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  2802  06EC  009A               	movwf	26	;volatile
  2803                           
  2804                           ;prog.c: 186: EECON1bits.WREN = 1;
  2805  06ED  151C               	bsf	28,2	;volsfr
  2806                           
  2807                           ;prog.c: 187: EECON2 = 0x55;
  2808  06EE  3055               	movlw	85
  2809  06EF  009D               	movwf	29	;volsfr
  2810                           
  2811                           ;prog.c: 188: EECON2 = 0xAA;
  2812  06F0  30AA               	movlw	170
  2813  06F1  009D               	movwf	29	;volsfr
  2814                           
  2815                           ;prog.c: 189: EECON1bits.WR = 1;
  2816  06F2  149C               	bsf	28,1	;volsfr
  2817                           
  2818                           ;prog.c: 190: EECON1bits.WREN = 0;
  2819  06F3  111C               	bcf	28,2	;volsfr
  2820  06F4                     l123:	
  2821                           ;prog.c: 191: while (EECON1bits.WR == 1) {
  2822                           
  2823  06F4  189C               	btfsc	28,1	;volsfr
  2824  06F5  2EF4               	goto	l123
  2825                           
  2826                           ;prog.c: 192: }
  2827                           ;prog.c: 193: INTCON = INTCON_BUP;
  2828  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  2829  06F7  082F               	movf	EEWR@INTCON_BUP,w	;volatile
  2830  06F8  008B               	movwf	11	;volatile
  2831  06F9  0008               	return
  2832  06FA                     __end_of_EEWR:	
  2833                           
  2834                           	psect	text12
  2835  04F5                     __ptext12:	
  2836 ;; *************** function _TX *****************
  2837 ;; Defined at:
  2838 ;;		line 239 in file "prog.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  cmd             1    wreg     unsigned char 
  2841 ;;  line            1   13[BANK0 ] unsigned char 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  cmd             1   15[BANK0 ] unsigned char 
  2844 ;;  One             1   19[BANK0 ] unsigned char 
  2845 ;;  i               1   18[BANK0 ] unsigned char 
  2846 ;;  Zero            1   17[BANK0 ] unsigned char 
  2847 ;;  temp            1   16[BANK0 ] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 300/0
  2854 ;;		On exit  : 300/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2857 ;;      Params:         0       1       0       0
  2858 ;;      Locals:         0       5       0       0
  2859 ;;      Temps:          0       1       0       0
  2860 ;;      Totals:         0       7       0       0
  2861 ;;Total ram usage:        7 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    3
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_EditAddressMemory
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           
  2872                           ;psect for function _TX
  2873  04F5                     _TX:	
  2874                           
  2875                           ;incstack = 0
  2876                           ; Regs used in _TX: [wreg+status,2+status,0]
  2877                           ;TX@cmd stored from wreg
  2878  04F5  00AF               	movwf	TX@cmd
  2879                           
  2880                           ;prog.c: 240: unsigned char One = line;
  2881  04F6  082D               	movf	TX@line,w
  2882  04F7  00B3               	movwf	TX@One
  2883                           
  2884                           ;prog.c: 241: unsigned char Zero = One ^ 0b11111111;
  2885  04F8  0933               	comf	TX@One,w
  2886  04F9  00B1               	movwf	TX@Zero
  2887                           
  2888                           ;prog.c: 244: unsigned char i = 0;
  2889  04FA  01B2               	clrf	TX@i
  2890                           
  2891                           ;prog.c: 245: temp = cmd;
  2892  04FB  082F               	movf	TX@cmd,w
  2893  04FC  00B0               	movwf	TX@temp
  2894                           
  2895                           ;prog.c: 246: for (i = 0; i < 8; i++) {
  2896  04FD  01B2               	clrf	TX@i
  2897  04FE                     l147:	
  2898                           
  2899                           ;prog.c: 247: if (temp & 0x01) {
  2900  04FE  1C30               	btfss	TX@temp,0
  2901  04FF  2D0D               	goto	l3419
  2902                           
  2903                           ;prog.c: 248: TRISA &= Zero;
  2904  0500  0831               	movf	TX@Zero,w
  2905  0501  1683               	bsf	3,5	;RP0=1, select bank1
  2906  0502  0585               	andwf	5,f	;volatile
  2907                           
  2908                           ;prog.c: 249: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2909  0503  2D04               	nop2	;2 cycle nop
  2910  0504  2D05               	nop2	;2 cycle nop
  2911  0505  0000               	nop
  2912                           
  2913                           ;prog.c: 250: TRISA |= One;
  2914  0506  2523               	fcall	PL12	;call to abstracted procedure
  2915                           
  2916                           ;prog.c: 251: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2917  0507  3017               	movlw	23
  2918  0508  1283               	bcf	3,5	;RP0=0, select bank0
  2919  0509  00AE               	movwf	??_TX
  2920  050A                     u4707:	
  2921  050A  0BAE               	decfsz	??_TX,f
  2922  050B  2D0A               	goto	u4707
  2923                           
  2924                           ;prog.c: 252: } else {
  2925  050C  2D19               	goto	l3427
  2926  050D                     l3419:	
  2927                           
  2928                           ;prog.c: 253: TRISA &= Zero;
  2929  050D  0831               	movf	TX@Zero,w
  2930  050E  1683               	bsf	3,5	;RP0=1, select bank1
  2931  050F  0585               	andwf	5,f	;volatile
  2932                           
  2933                           ;prog.c: 254: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2934  0510  3017               	movlw	23
  2935  0511  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0512  00AE               	movwf	??_TX
  2937  0513                     u4717:	
  2938  0513  0BAE               	decfsz	??_TX,f
  2939  0514  2D13               	goto	u4717
  2940                           
  2941                           ;prog.c: 255: TRISA |= One;
  2942  0515  2523               	fcall	PL12	;call to abstracted procedure
  2943                           
  2944                           ;prog.c: 256: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2945  0516  2D17               	nop2	;2 cycle nop
  2946  0517  2D18               	nop2	;2 cycle nop
  2947  0518  0000               	nop
  2948  0519                     l3427:	
  2949  0519  3008               	movlw	8
  2950                           
  2951                           ;prog.c: 257: }
  2952                           ;prog.c: 258: temp >>= 1;
  2953  051A  1283               	bcf	3,5	;RP0=0, select bank0
  2954  051B  1303               	bcf	3,6	;RP1=0, select bank0
  2955  051C  1003               	clrc
  2956  051D  0CB0               	rrf	TX@temp,f
  2957  051E  0AB2               	incf	TX@i,f
  2958  051F  0232               	subwf	TX@i,w
  2959  0520  1803               	btfsc	3,0
  2960  0521  0008               	return
  2961  0522  2CFE               	goto	l147
  2962  0523                     __end_of_TX:	
  2963  0523                     PL12:	
  2964  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2966  0525  0833               	movf	TX@One,w
  2967  0526  1683               	bsf	3,5	;RP0=1, select bank1
  2968  0527  0485               	iorwf	5,f	;volatile
  2969  0528  0008               	return
  2970  0529                     __end_ofPL12:	
  2971                           
  2972                           	psect	text13
  2973  0774                     __ptext13:	
  2974 ;; *************** function _ShowError *****************
  2975 ;; Defined at:
  2976 ;;		line 126 in file "prog.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 200/0
  2987 ;;		On exit  : 300/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2990 ;;      Params:         0       0       0       0
  2991 ;;      Locals:         0       0       0       0
  2992 ;;      Temps:          0       0       0       0
  2993 ;;      Totals:         0       0       0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    4
  2997 ;; This function calls:
  2998 ;;		_clrInd
  2999 ;;		_refreshInd
  3000 ;;		_setDigit
  3001 ;; This function is called by:
  3002 ;;		_EditAddressMemory
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _ShowError
  3009  0774                     _ShowError:	
  3010                           
  3011                           ;prog.c: 127: clrInd();
  3012                           
  3013                           ;incstack = 0
  3014                           ; Regs used in _ShowError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3015  0774  27A1               	fcall	_clrInd
  3016                           
  3017                           ;prog.c: 128: setDigit(3, 14);
  3018  0775  300E               	movlw	14
  3019  0776  00B2               	movwf	setDigit@data
  3020  0777  3003               	movlw	3
  3021  0778  2733               	fcall	_setDigit
  3022                           
  3023                           ;prog.c: 129: setDigit(2, 24);
  3024  0779  3018               	movlw	24
  3025  077A  00B2               	movwf	setDigit@data
  3026  077B  3002               	movlw	2
  3027  077C  2733               	fcall	_setDigit
  3028                           
  3029                           ;prog.c: 130: setDigit(1, 24);
  3030  077D  3018               	movlw	24
  3031  077E  00B2               	movwf	setDigit@data
  3032  077F  3001               	movlw	1
  3033  0780  2733               	fcall	_setDigit
  3034                           
  3035                           ;prog.c: 131: refreshInd();
  3036  0781  2F93               	ljmp	l3287
  3037  0782                     __end_of_ShowError:	
  3038                           
  3039                           	psect	text14
  3040  063F                     __ptext14:	
  3041 ;; *************** function _ReadCell *****************
  3042 ;; Defined at:
  3043 ;;		line 576 in file "prog.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  cell            1    wreg     unsigned char 
  3046 ;;  CellsData       1   21[BANK0 ] PTR unsigned char 
  3047 ;;		 -> EditAddressMemory@CellsData(8), 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  cell            1   23[BANK0 ] unsigned char 
  3050 ;;  i               1   24[BANK0 ] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      unsigned char 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 300/100
  3057 ;;		On exit  : B00/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3060 ;;      Params:         0       1       0       0
  3061 ;;      Locals:         0       2       0       0
  3062 ;;      Temps:          0       1       0       0
  3063 ;;      Totals:         0       4       0       0
  3064 ;;Total ram usage:        4 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    5
  3067 ;; This function calls:
  3068 ;;		_FillArrayFromEEPROM
  3069 ;; This function is called by:
  3070 ;;		_EditAddressMemory
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           
  3075                           ;psect for function _ReadCell
  3076  063F                     _ReadCell:	
  3077                           
  3078                           ;incstack = 0
  3079                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3080                           ;ReadCell@cell stored from wreg
  3081  063F  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0640  00B7               	movwf	ReadCell@cell
  3083                           
  3084                           ;prog.c: 577: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  3085  0641  00B6               	movwf	??_ReadCell
  3086  0642  1003               	clrc
  3087  0643  0DB6               	rlf	??_ReadCell,f
  3088  0644  1003               	clrc
  3089  0645  0DB6               	rlf	??_ReadCell,f
  3090  0646  1003               	clrc
  3091  0647  0D36               	rlf	??_ReadCell,w
  3092  0648  00B0               	movwf	FillArrayFromEEPROM@address_start
  3093  0649  3008               	movlw	8
  3094  064A  00B1               	movwf	FillArrayFromEEPROM@quantity
  3095  064B  0835               	movf	ReadCell@CellsData,w
  3096  064C  2745               	fcall	_FillArrayFromEEPROM
  3097                           
  3098                           ;prog.c: 578: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  3099  064D  01B8               	clrf	ReadCell@i
  3100  064E                     l3497:	
  3101                           
  3102                           ;prog.c: 579: if (CellsData[i] != 0xFF) {
  3103  064E  0838               	movf	ReadCell@i,w
  3104  064F  0735               	addwf	ReadCell@CellsData,w
  3105  0650  00B6               	movwf	??_ReadCell
  3106  0651  0084               	movwf	4
  3107  0652  1383               	bcf	3,7	;select IRP bank0
  3108  0653  0F00               	incfsz	0,w
  3109                           
  3110                           ;prog.c: 580: return 0;
  3111  0654  3400               	retlw	0
  3112  0655  3008               	movlw	8
  3113  0656  0AB8               	incf	ReadCell@i,f
  3114  0657  0238               	subwf	ReadCell@i,w
  3115  0658  1803               	btfsc	3,0
  3116                           
  3117                           ;prog.c: 581: }
  3118                           ;prog.c: 582: }
  3119                           ;prog.c: 583: return 1;
  3120  0659  3401               	retlw	1
  3121  065A  2E4E               	goto	l3497
  3122  065B                     __end_of_ReadCell:	
  3123                           
  3124                           	psect	text15
  3125  0745                     __ptext15:	
  3126 ;; *************** function _FillArrayFromEEPROM *****************
  3127 ;; Defined at:
  3128 ;;		line 207 in file "prog.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  container       1    wreg     PTR unsigned char 
  3131 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3132 ;;  address_star    1   16[BANK0 ] unsigned char 
  3133 ;;  quantity        1   17[BANK0 ] unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  container       1   19[BANK0 ] PTR unsigned char 
  3136 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3137 ;;  i               1   20[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 300/0
  3144 ;;		On exit  : 300/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3147 ;;      Params:         0       2       0       0
  3148 ;;      Locals:         0       2       0       0
  3149 ;;      Temps:          0       1       0       0
  3150 ;;      Totals:         0       5       0       0
  3151 ;;Total ram usage:        5 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    4
  3154 ;; This function calls:
  3155 ;;		_EERD
  3156 ;; This function is called by:
  3157 ;;		_FindCell
  3158 ;;		_ReadCell
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _FillArrayFromEEPROM
  3165  0745                     _FillArrayFromEEPROM:	
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3169                           ;FillArrayFromEEPROM@container stored from wreg
  3170  0745  00B3               	movwf	FillArrayFromEEPROM@container
  3171                           
  3172                           ;prog.c: 208: for (unsigned char i = 0; i < quantity; i++) {
  3173  0746  01B4               	clrf	FillArrayFromEEPROM@i
  3174  0747                     l3309:	
  3175  0747  0831               	movf	FillArrayFromEEPROM@quantity,w
  3176  0748  0234               	subwf	FillArrayFromEEPROM@i,w
  3177  0749  1803               	btfsc	3,0
  3178  074A  0008               	return
  3179                           
  3180                           ;prog.c: 209: container[i] = EERD(address_start + i);
  3181  074B  0834               	movf	FillArrayFromEEPROM@i,w
  3182  074C  0733               	addwf	FillArrayFromEEPROM@container,w
  3183  074D  00B2               	movwf	??_FillArrayFromEEPROM
  3184  074E  0084               	movwf	4
  3185  074F  0834               	movf	FillArrayFromEEPROM@i,w
  3186  0750  0730               	addwf	FillArrayFromEEPROM@address_start,w
  3187  0751  2765               	fcall	_EERD
  3188  0752  1383               	bcf	3,7	;select IRP bank0
  3189  0753  0080               	movwf	0
  3190  0754  0AB4               	incf	FillArrayFromEEPROM@i,f
  3191  0755  2F47               	goto	l3309
  3192  0756                     __end_of_FillArrayFromEEPROM:	
  3193                           
  3194                           	psect	text16
  3195  0765                     __ptext16:	
  3196 ;; *************** function _EERD *****************
  3197 ;; Defined at:
  3198 ;;		line 196 in file "prog.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  address         1    wreg     unsigned char 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  address         1   13[BANK0 ] unsigned char 
  3203 ;;  EEDATA_BUP      1   15[BANK0 ] volatile unsigned char 
  3204 ;;  INTCON_BUP      1   14[BANK0 ] volatile unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      unsigned char 
  3207 ;; Registers used:
  3208 ;;		wreg
  3209 ;; Tracked objects:
  3210 ;;		On entry : 300/0
  3211 ;;		On exit  : 300/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3214 ;;      Params:         0       0       0       0
  3215 ;;      Locals:         0       3       0       0
  3216 ;;      Temps:          0       0       0       0
  3217 ;;      Totals:         0       3       0       0
  3218 ;;Total ram usage:        3 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    3
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_FillArrayFromEEPROM
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           
  3229                           ;psect for function _EERD
  3230  0765                     _EERD:	
  3231                           
  3232                           ;incstack = 0
  3233                           ; Regs used in _EERD: [wreg]
  3234                           ;EERD@address stored from wreg
  3235  0765  00AD               	movwf	EERD@address
  3236                           
  3237                           ;prog.c: 197: volatile unsigned char INTCON_BUP = INTCON;
  3238  0766  080B               	movf	11,w	;volatile
  3239  0767  00AE               	movwf	EERD@INTCON_BUP	;volatile
  3240                           
  3241                           ;prog.c: 198: volatile unsigned char EEDATA_BUP;
  3242                           ;prog.c: 199: INTCONbits.GIE = 0;
  3243  0768  138B               	bcf	11,7	;volatile
  3244                           
  3245                           ;prog.c: 200: EEADR = address;
  3246  0769  082D               	movf	EERD@address,w
  3247  076A  1683               	bsf	3,5	;RP0=1, select bank1
  3248  076B  009B               	movwf	27	;volatile
  3249                           
  3250                           ;prog.c: 201: EECON1bits.RD = 1;
  3251  076C  141C               	bsf	28,0	;volsfr
  3252                           
  3253                           ;prog.c: 202: EEDATA_BUP = EEDATA;
  3254  076D  081A               	movf	26,w	;volatile
  3255  076E  1283               	bcf	3,5	;RP0=0, select bank0
  3256  076F  00AF               	movwf	EERD@EEDATA_BUP	;volatile
  3257                           
  3258                           ;prog.c: 203: INTCON = INTCON_BUP;
  3259  0770  082E               	movf	EERD@INTCON_BUP,w	;volatile
  3260  0771  008B               	movwf	11	;volatile
  3261                           
  3262                           ;prog.c: 204: return EEDATA_BUP;
  3263  0772  082F               	movf	EERD@EEDATA_BUP,w	;volatile
  3264  0773  0008               	return
  3265  0774                     __end_of_EERD:	
  3266                           
  3267                           	psect	text17
  3268  058A                     __ptext17:	
  3269 ;; *************** function _RX *****************
  3270 ;; Defined at:
  3271 ;;		line 262 in file "prog.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  line            1    wreg     unsigned char 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  line            1   14[BANK0 ] unsigned char 
  3276 ;;  i               1   17[BANK0 ] unsigned char 
  3277 ;;  One             1   18[BANK0 ] unsigned char 
  3278 ;;  d               1   16[BANK0 ] unsigned char 
  3279 ;;  Zero            1   15[BANK0 ] unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      unsigned char 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0
  3284 ;; Tracked objects:
  3285 ;;		On entry : 300/100
  3286 ;;		On exit  : 300/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3289 ;;      Params:         0       0       0       0
  3290 ;;      Locals:         0       5       0       0
  3291 ;;      Temps:          0       1       0       0
  3292 ;;      Totals:         0       6       0       0
  3293 ;;Total ram usage:        6 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    3
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_EditAddressMemory
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           
  3304                           ;psect for function _RX
  3305  058A                     _RX:	
  3306                           
  3307                           ;incstack = 0
  3308                           ; Regs used in _RX: [wreg+status,2+status,0]
  3309                           ;RX@line stored from wreg
  3310  058A  1283               	bcf	3,5	;RP0=0, select bank0
  3311  058B  00AE               	movwf	RX@line
  3312                           
  3313                           ;prog.c: 263: unsigned char One = line;
  3314  058C  00B2               	movwf	RX@One
  3315                           
  3316                           ;prog.c: 264: unsigned char Zero = One ^ 0b11111111;
  3317  058D  0932               	comf	RX@One,w
  3318  058E  00AF               	movwf	RX@Zero
  3319                           
  3320                           ;prog.c: 266: unsigned char d = 0;
  3321  058F  01B0               	clrf	RX@d
  3322                           
  3323                           ;prog.c: 267: for (unsigned char i = 0; i < 8; i++) {
  3324  0590  01B1               	clrf	RX@i
  3325  0591                     l3441:	
  3326                           
  3327                           ;prog.c: 268: TRISA &= Zero;
  3328  0591  082F               	movf	RX@Zero,w
  3329  0592  1683               	bsf	3,5	;RP0=1, select bank1
  3330  0593  0585               	andwf	5,f	;volatile
  3331                           
  3332                           ;prog.c: 269: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3333  0594  2D95               	nop2	;2 cycle nop
  3334  0595  2D96               	nop2	;2 cycle nop
  3335  0596  2D97               	nop2	;2 cycle nop
  3336                           
  3337                           ;prog.c: 270: TRISA |= One;
  3338  0597  1283               	bcf	3,5	;RP0=0, select bank0
  3339  0598  1303               	bcf	3,6	;RP1=0, select bank0
  3340  0599  0832               	movf	RX@One,w
  3341  059A  1683               	bsf	3,5	;RP0=1, select bank1
  3342  059B  0485               	iorwf	5,f	;volatile
  3343                           
  3344                           ;prog.c: 271: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3345  059C  2D9D               	nop2	;2 cycle nop
  3346  059D  2D9E               	nop2	;2 cycle nop
  3347                           
  3348                           ;prog.c: 272: d >>= 1;
  3349  059E  1283               	bcf	3,5	;RP0=0, select bank0
  3350  059F  1303               	bcf	3,6	;RP1=0, select bank0
  3351  05A0  1003               	clrc
  3352  05A1  0CB0               	rrf	RX@d,f
  3353                           
  3354                           ;prog.c: 273: if ((PORTA & One) > 0) {
  3355  05A2  0805               	movf	5,w	;volatile
  3356  05A3  0532               	andwf	RX@One,w
  3357  05A4  1D03               	btfss	3,2
  3358                           
  3359                           ;prog.c: 274: d |= 0x80;
  3360  05A5  17B0               	bsf	RX@d,7
  3361                           
  3362                           ;prog.c: 275: }
  3363                           ;prog.c: 276: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3364  05A6  3013               	movlw	19
  3365  05A7  00AD               	movwf	??_RX
  3366  05A8                     u4727:	
  3367  05A8  0BAD               	decfsz	??_RX,f
  3368  05A9  2DA8               	goto	u4727
  3369  05AA  2DAB               	nop2	;nop
  3370  05AB  3008               	movlw	8
  3371  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  3372  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  3373  05AE  0AB1               	incf	RX@i,f
  3374  05AF  0231               	subwf	RX@i,w
  3375  05B0  1C03               	skipc
  3376  05B1  2D91               	goto	l3441
  3377                           
  3378                           ;prog.c: 277: }
  3379                           ;prog.c: 278: return d;
  3380  05B2  0830               	movf	RX@d,w
  3381  05B3  0008               	return
  3382  05B4                     __end_of_RX:	
  3383                           
  3384                           	psect	text18
  3385  04BD                     __ptext18:	
  3386 ;; *************** function _INIT *****************
  3387 ;; Defined at:
  3388 ;;		line 221 in file "prog.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  line            1    wreg     unsigned char 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  line            1   14[BANK0 ] unsigned char 
  3393 ;;  One             1   17[BANK0 ] unsigned char 
  3394 ;;  b               1   16[BANK0 ] unsigned char 
  3395 ;;  Zero            1   15[BANK0 ] unsigned char 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      unsigned char 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : 300/0
  3402 ;;		On exit  : 300/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3405 ;;      Params:         0       0       0       0
  3406 ;;      Locals:         0       4       0       0
  3407 ;;      Temps:          0       1       0       0
  3408 ;;      Totals:         0       5       0       0
  3409 ;;Total ram usage:        5 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    3
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_EditAddressMemory
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _INIT
  3421  04BD                     _INIT:	
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3425                           ;INIT@line stored from wreg
  3426  04BD  00AE               	movwf	INIT@line
  3427                           
  3428                           ;prog.c: 222: unsigned char One = line;
  3429  04BE  00B1               	movwf	INIT@One
  3430                           
  3431                           ;prog.c: 223: unsigned char Zero = One ^ 0b11111111;
  3432  04BF  0931               	comf	INIT@One,w
  3433  04C0  00AF               	movwf	INIT@Zero
  3434                           
  3435                           ;prog.c: 227: TRISA |= One;
  3436  04C1  0831               	movf	INIT@One,w
  3437  04C2  1683               	bsf	3,5	;RP0=1, select bank1
  3438  04C3  0485               	iorwf	5,f	;volatile
  3439                           
  3440                           ;prog.c: 228: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3441  04C4  3006               	movlw	6
  3442  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  3443  04C6  00AD               	movwf	??_INIT
  3444  04C7                     u4737:	
  3445  04C7  0BAD               	decfsz	??_INIT,f
  3446  04C8  2CC7               	goto	u4737
  3447  04C9  0000               	nop
  3448                           
  3449                           ;prog.c: 229: TRISA &= Zero;
  3450  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  3451  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  3452  04CC  082F               	movf	INIT@Zero,w
  3453  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  3454  04CE  0585               	andwf	5,f	;volatile
  3455                           
  3456                           ;prog.c: 230: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3457  04CF  30A6               	movlw	166
  3458  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  3459  04D1  00AD               	movwf	??_INIT
  3460  04D2                     u4747:	
  3461  04D2  0BAD               	decfsz	??_INIT,f
  3462  04D3  2CD2               	goto	u4747
  3463  04D4  0000               	nop
  3464                           
  3465                           ;prog.c: 231: TRISA |= One;
  3466  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  3467  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  3468  04D7  0831               	movf	INIT@One,w
  3469  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  3470  04D9  0485               	iorwf	5,f	;volatile
  3471                           
  3472                           ;prog.c: 232: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3473  04DA  3015               	movlw	21
  3474  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3475  04DC  00AD               	movwf	??_INIT
  3476  04DD                     u4757:	
  3477  04DD  0BAD               	decfsz	??_INIT,f
  3478  04DE  2CDD               	goto	u4757
  3479  04DF  0000               	nop
  3480                           
  3481                           ;prog.c: 233: b = (PORTA & One) > 0;
  3482  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  3483  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  3484  04E2  0805               	movf	5,w	;volatile
  3485  04E3  0531               	andwf	INIT@One,w
  3486  04E4  1903               	btfsc	3,2
  3487  04E5  2CE8               	goto	u3370
  3488  04E6  3001               	movlw	1
  3489  04E7  2CE9               	goto	u3380
  3490  04E8                     u3370:	
  3491  04E8  3000               	movlw	0
  3492  04E9                     u3380:	
  3493  04E9  00B0               	movwf	INIT@b
  3494                           
  3495                           ;prog.c: 234: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3496  04EA  3095               	movlw	149
  3497  04EB  00AD               	movwf	??_INIT
  3498  04EC                     u4767:	
  3499  04EC  0BAD               	decfsz	??_INIT,f
  3500  04ED  2CEC               	goto	u4767
  3501  04EE  2CEF               	nop2	;nop
  3502                           
  3503                           ;prog.c: 236: return !b;
  3504  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3505  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  3506  04F1  0830               	movf	INIT@b,w
  3507  04F2  1903               	btfsc	3,2
  3508  04F3  3401               	retlw	1
  3509  04F4  3400               	retlw	0
  3510  04F5                     __end_of_INIT:	
  3511                           
  3512                           	psect	text19
  3513  0693                     __ptext19:	
  3514 ;; *************** function _CellToInd *****************
  3515 ;; Defined at:
  3516 ;;		line 586 in file "prog.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  cell            1    wreg     unsigned char 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  cell            1   22[BANK0 ] unsigned char 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3525 ;; Tracked objects:
  3526 ;;		On entry : 300/100
  3527 ;;		On exit  : 300/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3530 ;;      Params:         0       0       0       0
  3531 ;;      Locals:         0       1       0       0
  3532 ;;      Temps:          0       0       0       0
  3533 ;;      Totals:         0       1       0       0
  3534 ;;Total ram usage:        1 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    4
  3537 ;; This function calls:
  3538 ;;		___lbdiv
  3539 ;;		___lbmod
  3540 ;;		_clrInd
  3541 ;;		_refreshInd
  3542 ;;		_setDigit
  3543 ;; This function is called by:
  3544 ;;		_EditAddressMemory
  3545 ;;		_main
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           
  3550                           ;psect for function _CellToInd
  3551  0693                     _CellToInd:	
  3552                           
  3553                           ;incstack = 0
  3554                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3555                           ;CellToInd@cell stored from wreg
  3556  0693  1283               	bcf	3,5	;RP0=0, select bank0
  3557  0694  00B6               	movwf	CellToInd@cell
  3558                           
  3559                           ;prog.c: 587: clrInd();
  3560  0695  27A1               	fcall	_clrInd
  3561  0696  300A               	movlw	10
  3562                           
  3563                           ;prog.c: 588: cell++;
  3564  0697  0AB6               	incf	CellToInd@cell,f
  3565                           
  3566                           ;prog.c: 590: if (cell > 9) {
  3567  0698  0236               	subwf	CellToInd@cell,w
  3568  0699  1C03               	skipc
  3569  069A  2EA9               	goto	l3519
  3570                           
  3571                           ;prog.c: 591: setDigit(3, cell / 10);
  3572  069B  300A               	movlw	10
  3573  069C  00AD               	movwf	___lbdiv@divisor
  3574  069D  0836               	movf	CellToInd@cell,w
  3575  069E  26AE               	fcall	___lbdiv
  3576  069F  00B2               	movwf	setDigit@data
  3577  06A0  3003               	movlw	3
  3578  06A1  2733               	fcall	_setDigit
  3579                           
  3580                           ;prog.c: 592: setDigit(2, cell % 10);
  3581  06A2  300A               	movlw	10
  3582  06A3  00AD               	movwf	___lbmod@divisor
  3583  06A4  0836               	movf	CellToInd@cell,w
  3584  06A5  265B               	fcall	___lbmod
  3585  06A6  00B2               	movwf	setDigit@data
  3586  06A7  3002               	movlw	2
  3587  06A8  2EAC               	goto	L8
  3588  06A9                     l3519:	
  3589                           ;prog.c: 593: } else {
  3590                           
  3591                           
  3592                           ;prog.c: 594: setDigit(3, cell);
  3593  06A9  0836               	movf	CellToInd@cell,w
  3594  06AA  00B2               	movwf	setDigit@data
  3595  06AB  3003               	movlw	3
  3596  06AC                     L8:	
  3597  06AC  2733               	fcall	_setDigit
  3598                           
  3599                           ;prog.c: 595: }
  3600                           ;prog.c: 597: refreshInd();
  3601  06AD  2F93               	ljmp	l3287
  3602  06AE                     __end_of_CellToInd:	
  3603                           
  3604                           	psect	text20
  3605  0733                     __ptext20:	
  3606 ;; *************** function _setDigit *****************
  3607 ;; Defined at:
  3608 ;;		line 106 in file "prog.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  a               1    wreg     unsigned char 
  3611 ;;  data            1   18[BANK0 ] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  a               1   21[BANK0 ] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3618 ;; Tracked objects:
  3619 ;;		On entry : 300/0
  3620 ;;		On exit  : B00/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3623 ;;      Params:         0       1       0       0
  3624 ;;      Locals:         0       1       0       0
  3625 ;;      Temps:          0       2       0       0
  3626 ;;      Totals:         0       4       0       0
  3627 ;;Total ram usage:        4 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    3
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_ShowError
  3634 ;;		_indData
  3635 ;;		_CellToInd
  3636 ;;		_main
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _setDigit
  3642  0733                     _setDigit:	
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3646                           ;setDigit@a stored from wreg
  3647  0733  00B5               	movwf	setDigit@a
  3648                           
  3649                           ;prog.c: 107: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3650  0734  303F               	movlw	63
  3651  0735  0532               	andwf	setDigit@data,w
  3652  0736  00B3               	movwf	??_setDigit
  3653  0737  0835               	movf	setDigit@a,w
  3654  0738  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3655  0739  0084               	movwf	4
  3656  073A  1383               	bcf	3,7	;select IRP bank0
  3657  073B  0800               	movf	0,w
  3658  073C  39C0               	andlw	192
  3659  073D  0433               	iorwf	??_setDigit,w
  3660  073E  00B4               	movwf	??_setDigit+1
  3661  073F  0835               	movf	setDigit@a,w
  3662  0740  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3663  0741  0084               	movwf	4
  3664  0742  0834               	movf	??_setDigit+1,w
  3665  0743  0080               	movwf	0
  3666  0744  0008               	return
  3667  0745                     __end_of_setDigit:	
  3668                           
  3669                           	psect	text21
  3670  0793                     __ptext21:	
  3671 ;; *************** function _refreshInd *****************
  3672 ;; Defined at:
  3673 ;;		line 114 in file "prog.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      void 
  3680 ;; Registers used:
  3681 ;;		wreg
  3682 ;; Tracked objects:
  3683 ;;		On entry : 200/0
  3684 ;;		On exit  : 300/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3687 ;;      Params:         0       0       0       0
  3688 ;;      Locals:         0       0       0       0
  3689 ;;      Temps:          0       0       0       0
  3690 ;;      Totals:         0       0       0       0
  3691 ;;Total ram usage:        0 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    3
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_ShowError
  3698 ;;		_CellToInd
  3699 ;;		_EditAddressMemory
  3700 ;;		_main
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           
  3705                           ;psect for function _refreshInd
  3706  0793                     _refreshInd:	
  3707  0793                     l3287:	
  3708                           ;incstack = 0
  3709                           ; Regs used in _refreshInd: [wreg]
  3710                           
  3711                           
  3712                           ;prog.c: 115: digits[0] = digits_0[0];
  3713  0793  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0794  084D               	movf	_digits_0,w	;volatile
  3715  0795  00CA               	movwf	_digits	;volatile
  3716                           
  3717                           ;prog.c: 116: digits[1] = digits_0[1];
  3718  0796  084E               	movf	_digits_0+1,w	;volatile
  3719  0797  00CB               	movwf	_digits+1	;volatile
  3720                           
  3721                           ;prog.c: 117: digits[2] = digits_0[2];
  3722  0798  084F               	movf	_digits_0+2,w	;volatile
  3723  0799  00CC               	movwf	_digits+2	;volatile
  3724  079A  0008               	return
  3725  079B                     __end_of_refreshInd:	
  3726                           
  3727                           	psect	text22
  3728  07A1                     __ptext22:	
  3729 ;; *************** function _clrInd *****************
  3730 ;; Defined at:
  3731 ;;		line 120 in file "prog.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg
  3740 ;; Tracked objects:
  3741 ;;		On entry : 200/0
  3742 ;;		On exit  : 300/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3745 ;;      Params:         0       0       0       0
  3746 ;;      Locals:         0       0       0       0
  3747 ;;      Temps:          0       0       0       0
  3748 ;;      Totals:         0       0       0       0
  3749 ;;Total ram usage:        0 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    3
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_ShowError
  3756 ;;		_CellToInd
  3757 ;;		_EditAddressMemory
  3758 ;;		_main
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           
  3763                           ;psect for function _clrInd
  3764  07A1                     _clrInd:	
  3765                           
  3766                           ;prog.c: 121: digits_0[0] = 34;
  3767                           
  3768                           ;incstack = 0
  3769                           ; Regs used in _clrInd: [wreg]
  3770  07A1  3022               	movlw	34
  3771  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  3772  07A3  00CD               	movwf	_digits_0	;volatile
  3773                           
  3774                           ;prog.c: 122: digits_0[1] = 34;
  3775  07A4  00CE               	movwf	_digits_0+1	;volatile
  3776                           
  3777                           ;prog.c: 123: digits_0[2] = 34;
  3778  07A5  00CF               	movwf	_digits_0+2	;volatile
  3779  07A6  0008               	return
  3780  07A7                     __end_of_clrInd:	
  3781                           
  3782                           	psect	text23
  3783  065B                     __ptext23:	
  3784 ;; *************** function ___lbmod *****************
  3785 ;; Defined at:
  3786 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  dividend        1    wreg     unsigned char 
  3789 ;;  divisor         1   13[BANK0 ] unsigned char 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  dividend        1   15[BANK0 ] unsigned char 
  3792 ;;  rem             1   17[BANK0 ] unsigned char 
  3793 ;;  counter         1   16[BANK0 ] unsigned char 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      unsigned char 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0
  3798 ;; Tracked objects:
  3799 ;;		On entry : 300/0
  3800 ;;		On exit  : 300/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3803 ;;      Params:         0       1       0       0
  3804 ;;      Locals:         0       3       0       0
  3805 ;;      Temps:          0       1       0       0
  3806 ;;      Totals:         0       5       0       0
  3807 ;;Total ram usage:        5 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    3
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_indData
  3814 ;;		_CellToInd
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function ___lbmod
  3820  065B                     ___lbmod:	
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3824                           ;___lbmod@dividend stored from wreg
  3825  065B  00AF               	movwf	___lbmod@dividend
  3826  065C  3008               	movlw	8
  3827  065D  00B0               	movwf	___lbmod@counter
  3828  065E  01B1               	clrf	___lbmod@rem
  3829  065F                     l3339:	
  3830  065F  082F               	movf	___lbmod@dividend,w
  3831  0660  00AE               	movwf	??___lbmod
  3832  0661  3007               	movlw	7
  3833  0662  1003               	clrc
  3834  0663                     L9:	
  3835  0663  0CAE               	rrf	??___lbmod,f
  3836  0664  3EFF               	addlw	-1
  3837  0665  1003               	clrc
  3838  0666  1D03               	skipz
  3839  0667  2E63               	goto	L9
  3840  0668  0D31               	rlf	___lbmod@rem,w
  3841  0669  042E               	iorwf	??___lbmod,w
  3842  066A  00B1               	movwf	___lbmod@rem
  3843  066B  1003               	clrc
  3844  066C  0DAF               	rlf	___lbmod@dividend,f
  3845  066D  082D               	movf	___lbmod@divisor,w
  3846  066E  0231               	subwf	___lbmod@rem,w
  3847  066F  1C03               	skipc
  3848  0670  2E73               	goto	l3347
  3849  0671  082D               	movf	___lbmod@divisor,w
  3850  0672  02B1               	subwf	___lbmod@rem,f
  3851  0673                     l3347:	
  3852  0673  0BB0               	decfsz	___lbmod@counter,f
  3853  0674  2E5F               	goto	l3339
  3854  0675  0831               	movf	___lbmod@rem,w
  3855  0676  0008               	return
  3856  0677                     __end_of___lbmod:	
  3857                           
  3858                           	psect	text24
  3859  06AE                     __ptext24:	
  3860 ;; *************** function ___lbdiv *****************
  3861 ;; Defined at:
  3862 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  dividend        1    wreg     unsigned char 
  3865 ;;  divisor         1   13[BANK0 ] unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  dividend        1   14[BANK0 ] unsigned char 
  3868 ;;  quotient        1   16[BANK0 ] unsigned char 
  3869 ;;  counter         1   15[BANK0 ] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      unsigned char 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0
  3874 ;; Tracked objects:
  3875 ;;		On entry : 300/0
  3876 ;;		On exit  : 300/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3879 ;;      Params:         0       1       0       0
  3880 ;;      Locals:         0       3       0       0
  3881 ;;      Temps:          0       0       0       0
  3882 ;;      Totals:         0       4       0       0
  3883 ;;Total ram usage:        4 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    3
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_indData
  3890 ;;		_CellToInd
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           
  3895                           ;psect for function ___lbdiv
  3896  06AE                     ___lbdiv:	
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3900                           ;___lbdiv@dividend stored from wreg
  3901  06AE  00AE               	movwf	___lbdiv@dividend
  3902  06AF  01B0               	clrf	___lbdiv@quotient
  3903  06B0  082D               	movf	___lbdiv@divisor,w
  3904  06B1  1903               	btfsc	3,2
  3905  06B2  2EC7               	goto	l3331
  3906  06B3  01AF               	clrf	___lbdiv@counter
  3907  06B4                     l3317:	
  3908  06B4  0AAF               	incf	___lbdiv@counter,f
  3909  06B5  1BAD               	btfsc	___lbdiv@divisor,7
  3910  06B6  2EBA               	goto	l729
  3911  06B7  1003               	clrc
  3912  06B8  0DAD               	rlf	___lbdiv@divisor,f
  3913  06B9  2EB4               	goto	l3317
  3914  06BA                     l729:	
  3915  06BA  1003               	clrc
  3916  06BB  0DB0               	rlf	___lbdiv@quotient,f
  3917  06BC  082D               	movf	___lbdiv@divisor,w
  3918  06BD  022E               	subwf	___lbdiv@dividend,w
  3919  06BE  1C03               	skipc
  3920  06BF  2EC4               	goto	L10
  3921  06C0  082D               	movf	___lbdiv@divisor,w
  3922  06C1  02AE               	subwf	___lbdiv@dividend,f
  3923  06C2  1430               	bsf	___lbdiv@quotient,0
  3924  06C3  1003               	clrc
  3925  06C4                     L10:	
  3926  06C4  0CAD               	rrf	___lbdiv@divisor,f
  3927  06C5  0BAF               	decfsz	___lbdiv@counter,f
  3928  06C6  2EBA               	goto	l729
  3929  06C7                     l3331:	
  3930  06C7  0830               	movf	___lbdiv@quotient,w
  3931  06C8  0008               	return
  3932  06C9                     __end_of___lbdiv:	
  3933                           
  3934                           	psect	text25
  3935  031D                     __ptext25:	
  3936 ;; *************** function _F *****************
  3937 ;; Defined at:
  3938 ;;		line 430 in file "prog.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  CurrentKeysS    1   12[BANK0 ] unsigned char 
  3943 ;;  dig             1   11[BANK0 ] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 300/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3953 ;;      Params:         0       0       0       0
  3954 ;;      Locals:         0       2       0       0
  3955 ;;      Temps:          0       5       0       0
  3956 ;;      Totals:         0       7       0       0
  3957 ;;Total ram usage:        7 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    2
  3960 ;; This function calls:
  3961 ;;		_convDig
  3962 ;;		_get_temp_Async
  3963 ;; This function is called by:
  3964 ;;		Interrupt level 1
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           
  3969                           ;psect for function _F
  3970  031D                     _F:	
  3971                           
  3972                           ;prog.c: 431: if (T0IF) {
  3973  031D  1D0B               	btfss	11,2	;volatile
  3974  031E  2BBD               	goto	i1l278
  3975                           
  3976                           ;prog.c: 432: static unsigned char DigitNumber = 0;
  3977                           ;prog.c: 434: T0IF = 0;
  3978  031F  110B               	bcf	11,2	;volatile
  3979                           
  3980                           ;prog.c: 435: TMR0 += TMR0_VALUE;
  3981  0320  30EB               	movlw	235
  3982  0321  0781               	addwf	1,f	;volatile
  3983                           
  3984                           ;prog.c: 437: if (DigitNumber > 2) {
  3985  0322  3003               	movlw	3
  3986  0323  0255               	subwf	F@DigitNumber,w
  3987  0324  1803               	btfsc	3,0
  3988                           
  3989                           ;prog.c: 438: DigitNumber = 0;
  3990  0325  01D5               	clrf	F@DigitNumber
  3991                           
  3992                           ;prog.c: 439: }
  3993                           ;prog.c: 440: unsigned char dig = digits[DigitNumber];
  3994  0326  0855               	movf	F@DigitNumber,w
  3995  0327  3E4A               	addlw	(low (_digits| 0))& (0+255)
  3996  0328  0084               	movwf	4
  3997  0329  1383               	bcf	3,7	;select IRP bank0
  3998  032A  0800               	movf	0,w
  3999  032B  00AB               	movwf	F@dig
  4000                           
  4001                           ;prog.c: 441: digitemp = convDig(0b00111111 & dig);
  4002  032C  393F               	andlw	63
  4003  032D  2677               	fcall	_convDig
  4004  032E  00D9               	movwf	_digitemp
  4005                           
  4006                           ;prog.c: 447: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  4007  032F  1F2B               	btfss	F@dig,6
  4008  0330  2B33               	goto	i1l234
  4009  0331  1559               	bsf	_digitemp,2
  4010  0332  2B34               	goto	i1l3963
  4011  0333                     i1l234:	
  4012  0333  1159               	bcf	_digitemp,2
  4013  0334                     i1l3963:	
  4014                           
  4015                           ;prog.c: 449: PORTB = 0;
  4016  0334  0186               	clrf	6	;volatile
  4017                           
  4018                           ;prog.c: 450: PORTA = (PORTA & 0b00110100) | PortAData[DigitNumber++];
  4019  0335  0855               	movf	F@DigitNumber,w
  4020  0336  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  4021  0337  0084               	movwf	4
  4022  0338  2782               	fcall	stringdir
  4023  0339  00A6               	movwf	??_F
  4024  033A  0805               	movf	5,w	;volatile
  4025  033B  3934               	andlw	52
  4026  033C  0426               	iorwf	??_F,w
  4027  033D  0085               	movwf	5	;volatile
  4028  033E  0AD5               	incf	F@DigitNumber,f
  4029                           
  4030                           ;prog.c: 452: PORTB = digitemp;
  4031  033F  0859               	movf	_digitemp,w
  4032  0340  0086               	movwf	6	;volatile
  4033                           
  4034                           ;prog.c: 454: endInterrupt = 1;
  4035  0341  14E0               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  4036                           
  4037                           ;prog.c: 455: if (powerOnInterval == 0) {
  4038  0342  085D               	movf	_powerOnInterval,w
  4039  0343  045E               	iorwf	_powerOnInterval+1,w
  4040  0344  1D03               	btfss	3,2
  4041  0345  2B4C               	goto	i1l3979
  4042                           
  4043                           ;prog.c: 456: if (PowerBlocked == 0) {
  4044  0346  0858               	movf	_PowerBlocked,w
  4045  0347  1D03               	btfss	3,2
  4046  0348  2B50               	goto	i1l3981
  4047                           
  4048                           ;prog.c: 457: TRISA4 = 1;
  4049  0349  1683               	bsf	3,5	;RP0=1, select bank1
  4050  034A  1605               	bsf	5,4	;volatile
  4051  034B  2B50               	goto	i1l3981
  4052  034C                     i1l3979:	
  4053                           
  4054                           ;prog.c: 460: powerOnInterval--;
  4055  034C  30FF               	movlw	-1
  4056  034D  07DD               	addwf	_powerOnInterval,f
  4057  034E  1C03               	skipc
  4058  034F  03DE               	decf	_powerOnInterval+1,f
  4059  0350                     i1l3981:	
  4060                           
  4061                           ;prog.c: 461: }
  4062                           ;prog.c: 463: static unsigned int KeyTimeCounter = 0;
  4063                           ;prog.c: 464: static unsigned char LastKeysState = 0;
  4064                           ;prog.c: 465: static unsigned char long_press = 0;
  4065                           ;prog.c: 466: static unsigned char ButtonPressTimeIn1 = 0;
  4066                           ;prog.c: 467: static unsigned char ButtonPressTimeIn2 = 0;
  4067                           ;prog.c: 468: static unsigned char ButtonPressTimeOut = 0;
  4068                           ;prog.c: 469: unsigned char CurrentKeysState = 0;
  4069  0350  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0351  01AC               	clrf	F@CurrentKeysState
  4071                           
  4072                           ;prog.c: 471: if (ButtonPressTimeOut > 0) {
  4073  0352  0854               	movf	F@ButtonPressTimeOut,w
  4074  0353  1903               	btfsc	3,2
  4075  0354  2B57               	goto	i1l3987
  4076                           
  4077                           ;prog.c: 472: ButtonPressTimeOut--;
  4078  0355  03D4               	decf	F@ButtonPressTimeOut,f
  4079                           
  4080                           ;prog.c: 473: } else {
  4081  0356  2BBC               	goto	i1l4067
  4082  0357                     i1l3987:	
  4083                           
  4084                           ;prog.c: 475: KeyCode = 0;
  4085  0357  01DF               	clrf	_KeyCode	;volatile
  4086                           
  4087                           ;prog.c: 477: if (RA5) {
  4088  0358  1E85               	btfss	5,5	;volatile
  4089  0359  2B5E               	goto	i1l3995
  4090  035A  3019               	movlw	25
  4091                           
  4092                           ;prog.c: 478: CurrentKeysState = CurrentKeysState | 0b00000001;
  4093  035B  142C               	bsf	F@CurrentKeysState,0
  4094                           
  4095                           ;prog.c: 479: ButtonPressTimeIn1 = 25;
  4096  035C  00D2               	movwf	F@ButtonPressTimeIn1
  4097                           
  4098                           ;prog.c: 480: } else {
  4099  035D  2B64               	goto	i1l4001
  4100  035E                     i1l3995:	
  4101                           
  4102                           ;prog.c: 481: if (ButtonPressTimeIn1 == 0) {
  4103  035E  0852               	movf	F@ButtonPressTimeIn1,w
  4104  035F  1D03               	btfss	3,2
  4105  0360  2B63               	goto	i1l3999
  4106                           
  4107                           ;prog.c: 482: CurrentKeysState = CurrentKeysState & 0b11111110;
  4108  0361  102C               	bcf	F@CurrentKeysState,0
  4109                           
  4110                           ;prog.c: 483: } else {
  4111  0362  2B64               	goto	i1l4001
  4112  0363                     i1l3999:	
  4113                           
  4114                           ;prog.c: 484: ButtonPressTimeIn1--;
  4115  0363  03D2               	decf	F@ButtonPressTimeIn1,f
  4116  0364                     i1l4001:	
  4117                           
  4118                           ;prog.c: 485: }
  4119                           ;prog.c: 486: }
  4120                           ;prog.c: 488: if (RA2) {
  4121  0364  1D05               	btfss	5,2	;volatile
  4122  0365  2B6A               	goto	i1l4007
  4123  0366  3019               	movlw	25
  4124                           
  4125                           ;prog.c: 489: CurrentKeysState = CurrentKeysState | 0b00000010;
  4126  0367  14AC               	bsf	F@CurrentKeysState,1
  4127                           
  4128                           ;prog.c: 490: ButtonPressTimeIn2 = 25;
  4129  0368  00D3               	movwf	F@ButtonPressTimeIn2
  4130                           
  4131                           ;prog.c: 491: } else {
  4132  0369  2B70               	goto	i1l4013
  4133  036A                     i1l4007:	
  4134                           
  4135                           ;prog.c: 492: if (ButtonPressTimeIn2 == 0) {
  4136  036A  0853               	movf	F@ButtonPressTimeIn2,w
  4137  036B  1D03               	btfss	3,2
  4138  036C  2B6F               	goto	i1l4011
  4139                           
  4140                           ;prog.c: 493: CurrentKeysState = CurrentKeysState & 0b11111101;
  4141  036D  10AC               	bcf	F@CurrentKeysState,1
  4142                           
  4143                           ;prog.c: 494: } else {
  4144  036E  2B70               	goto	i1l4013
  4145  036F                     i1l4011:	
  4146                           
  4147                           ;prog.c: 495: ButtonPressTimeIn2--;
  4148  036F  03D3               	decf	F@ButtonPressTimeIn2,f
  4149  0370                     i1l4013:	
  4150                           
  4151                           ;prog.c: 496: }
  4152                           ;prog.c: 497: }
  4153                           ;prog.c: 499: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4154  0370  0852               	movf	F@ButtonPressTimeIn1,w
  4155  0371  1903               	btfsc	3,2
  4156  0372  2B77               	goto	i1l4017
  4157  0373  3019               	movlw	25
  4158  0374  0652               	xorwf	F@ButtonPressTimeIn1,w
  4159  0375  1D03               	btfss	3,2
  4160  0376  2BBC               	goto	i1l4067
  4161  0377                     i1l4017:	
  4162  0377  0853               	movf	F@ButtonPressTimeIn2,w
  4163  0378  1903               	btfsc	3,2
  4164  0379  2B7E               	goto	i1l4021
  4165  037A  3019               	movlw	25
  4166  037B  0653               	xorwf	F@ButtonPressTimeIn2,w
  4167  037C  1D03               	btfss	3,2
  4168  037D  2BBC               	goto	i1l4067
  4169  037E                     i1l4021:	
  4170                           
  4171                           ;prog.c: 500: if (CurrentKeysState > 0) {
  4172  037E  082C               	movf	F@CurrentKeysState,w
  4173  037F  1903               	btfsc	3,2
  4174  0380  2BA8               	goto	i1l4047
  4175                           
  4176                           ;prog.c: 501: if (LastKeysState != CurrentKeysState) {
  4177  0381  0856               	movf	F@LastKeysState,w
  4178  0382  062C               	xorwf	F@CurrentKeysState,w
  4179  0383  1903               	skipnz
  4180  0384  2B8B               	goto	i1l4029
  4181                           
  4182                           ;prog.c: 502: KeyTimeCounter = 0;
  4183  0385  01D0               	clrf	F@KeyTimeCounter
  4184  0386  01D1               	clrf	F@KeyTimeCounter+1
  4185                           
  4186                           ;prog.c: 503: long_press = 0;
  4187  0387  01D7               	clrf	F@long_press
  4188                           
  4189                           ;prog.c: 504: LastKeysState = CurrentKeysState;
  4190  0388  082C               	movf	F@CurrentKeysState,w
  4191  0389  00D6               	movwf	F@LastKeysState
  4192                           
  4193                           ;prog.c: 505: } else if (KeyTimeCounter < 150) {
  4194  038A  2BA0               	goto	i1l4039
  4195  038B                     i1l4029:	
  4196  038B  3000               	movlw	0
  4197  038C  0251               	subwf	F@KeyTimeCounter+1,w
  4198  038D  3096               	movlw	150
  4199  038E  1903               	skipnz
  4200  038F  0250               	subwf	F@KeyTimeCounter,w
  4201  0390  1803               	skipnc
  4202  0391  2B96               	goto	i1l4033
  4203                           
  4204                           ;prog.c: 506: KeyTimeCounter++;
  4205  0392  0AD0               	incf	F@KeyTimeCounter,f
  4206  0393  1903               	skipnz
  4207  0394  0AD1               	incf	F@KeyTimeCounter+1,f
  4208                           
  4209                           ;prog.c: 507: } else if (KeyTimeCounter == 150 && !long_press) {
  4210  0395  2BA0               	goto	i1l4039
  4211  0396                     i1l4033:	
  4212  0396  3096               	movlw	150
  4213  0397  0650               	xorwf	F@KeyTimeCounter,w
  4214  0398  0451               	iorwf	F@KeyTimeCounter+1,w
  4215  0399  1D03               	btfss	3,2
  4216  039A  2BA0               	goto	i1l4039
  4217  039B  0857               	movf	F@long_press,w
  4218  039C  1D03               	btfss	3,2
  4219  039D  2BA0               	goto	i1l4039
  4220                           
  4221                           ;prog.c: 508: long_press = 1;
  4222  039E  01D7               	clrf	F@long_press
  4223  039F  0AD7               	incf	F@long_press,f
  4224  03A0                     i1l4039:	
  4225                           
  4226                           ;prog.c: 509: }
  4227                           ;prog.c: 511: if (long_press == 1) {
  4228  03A0  0B57               	decfsz	F@long_press,w
  4229  03A1  2BBC               	goto	i1l4067
  4230                           
  4231                           ;prog.c: 512: KeyCode = 30 + LastKeysState + 3;
  4232  03A2  0856               	movf	F@LastKeysState,w
  4233  03A3  3E21               	addlw	33
  4234  03A4  00DF               	movwf	_KeyCode	;volatile
  4235                           
  4236                           ;prog.c: 513: long_press = 2;
  4237  03A5  3002               	movlw	2
  4238  03A6  00D7               	movwf	F@long_press
  4239  03A7  2BBA               	goto	i1l4045
  4240  03A8                     i1l4047:	
  4241  03A8  0856               	movf	F@LastKeysState,w
  4242  03A9  1903               	btfsc	3,2
  4243  03AA  2BB2               	goto	i1l4061
  4244  03AB  0857               	movf	F@long_press,w
  4245  03AC  1D03               	btfss	3,2
  4246  03AD  2BB2               	goto	i1l4061
  4247                           
  4248                           ;prog.c: 518: KeyCode = 30 + LastKeysState;
  4249  03AE  0856               	movf	F@LastKeysState,w
  4250  03AF  3E1E               	addlw	30
  4251  03B0  00DF               	movwf	_KeyCode	;volatile
  4252  03B1  2BB6               	goto	i1l4063
  4253  03B2                     i1l4061:	
  4254                           ;prog.c: 521: long_press = 0;
  4255                           
  4256                           ;prog.c: 520: KeyTimeCounter = 0;
  4257                           
  4258                           ;prog.c: 519: LastKeysState = 0;
  4259                           
  4260  03B2  3002               	movlw	2
  4261  03B3  0657               	xorwf	F@long_press,w
  4262  03B4  1D03               	btfss	3,2
  4263  03B5  2BBC               	goto	i1l4067
  4264  03B6                     i1l4063:	
  4265                           
  4266                           ;prog.c: 525: LastKeysState = 0;
  4267  03B6  01D6               	clrf	F@LastKeysState
  4268                           
  4269                           ;prog.c: 526: KeyTimeCounter = 0;
  4270  03B7  01D0               	clrf	F@KeyTimeCounter
  4271  03B8  01D1               	clrf	F@KeyTimeCounter+1
  4272                           
  4273                           ;prog.c: 527: long_press = 0;
  4274  03B9  01D7               	clrf	F@long_press
  4275  03BA                     i1l4045:	
  4276                           
  4277                           ;prog.c: 514: ButtonPressTimeOut = 40;
  4278  03BA  3028               	movlw	40
  4279  03BB  00D4               	movwf	F@ButtonPressTimeOut
  4280  03BC                     i1l4067:	
  4281                           
  4282                           ;prog.c: 529: }
  4283                           ;prog.c: 530: }
  4284                           ;prog.c: 531: }
  4285                           ;prog.c: 533: get_temp_Async();
  4286  03BC  215D               	fcall	_get_temp_Async
  4287  03BD                     i1l278:	
  4288  03BD  082A               	movf	??_F+4,w
  4289  03BE  00FF               	movwf	127
  4290  03BF  0829               	movf	??_F+3,w
  4291  03C0  008A               	movwf	10
  4292  03C1  0828               	movf	??_F+2,w
  4293  03C2  0084               	movwf	4
  4294  03C3  0E27               	swapf	(??_F+1)^0,w
  4295  03C4  0083               	movwf	3
  4296  03C5  0EFE               	swapf	126,f
  4297  03C6  0E7E               	swapf	126,w
  4298  03C7  0009               	retfie
  4299  03C8                     __end_of_F:	
  4300                           
  4301                           	psect	intentry
  4302  0004                     __pintentry:	
  4303                           ;incstack = 0
  4304                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4305                           
  4306  0004                     interrupt_function:	
  4307  007E                     saved_w	set	btemp
  4308  0004  00FE               	movwf	btemp
  4309  0005  0E03               	swapf	3,w
  4310  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0008  00A7               	movwf	??_F+1
  4313  0009  0804               	movf	4,w
  4314  000A  00A8               	movwf	??_F+2
  4315  000B  080A               	movf	10,w
  4316  000C  00A9               	movwf	??_F+3
  4317  000D  087F               	movf	btemp+1,w
  4318  000E  00AA               	movwf	??_F+4
  4319  000F  2B1D               	ljmp	_F
  4320                           
  4321                           	psect	text26
  4322  015D                     __ptext26:	
  4323 ;; *************** function _get_temp_Async *****************
  4324 ;; Defined at:
  4325 ;;		line 296 in file "prog.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  temp2           1    4[BANK0 ] unsigned char 
  4330 ;;  temp1           1    3[BANK0 ] unsigned char 
  4331 ;;  i               1    2[BANK0 ] unsigned char 
  4332 ;;  line            1    5[BANK0 ] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 300/0
  4339 ;;		On exit  : 300/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4342 ;;      Params:         0       0       0       0
  4343 ;;      Locals:         0       4       0       0
  4344 ;;      Temps:          0       2       0       0
  4345 ;;      Totals:         0       6       0       0
  4346 ;;Total ram usage:        6 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    1
  4349 ;; This function calls:
  4350 ;;		___awdiv
  4351 ;;		___wmul
  4352 ;;		i1_INIT
  4353 ;;		i1_RX
  4354 ;;		i1_TX
  4355 ;;		i1_calc_crc
  4356 ;; This function is called by:
  4357 ;;		_F
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           
  4362                           ;psect for function _get_temp_Async
  4363  015D                     _get_temp_Async:	
  4364                           
  4365                           ;prog.c: 298: if (!getTemp_flags.ActiveProcess) {
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4369  015D  1C48               	btfss	_getTemp_flags+4,0
  4370  015E  0008               	return
  4371                           
  4372                           ;prog.c: 300: }
  4373                           ;prog.c: 302: unsigned char line = getTemp_flags.Line;
  4374                           
  4375                           ;prog.c: 299: return;
  4376  015F  0849               	movf	_getTemp_flags+5,w
  4377  0160  00A5               	movwf	get_temp_Async@line
  4378                           
  4379                           ;prog.c: 305: if (getTemp_flags.Init) {
  4380  0161  1C44               	btfss	_getTemp_flags,0
  4381  0162  2972               	goto	i1l171
  4382                           
  4383                           ;prog.c: 306: if (INIT(line)) {
  4384  0163  0825               	movf	get_temp_Async@line,w
  4385  0164  2529               	fcall	i1_INIT
  4386  0165  3A00               	xorlw	0
  4387                           
  4388                           ;prog.c: 307: getTemp_flags.Init = 0;
  4389  0166  1283               	bcf	3,5	;RP0=0, select bank0
  4390  0167  1303               	bcf	3,6	;RP1=0, select bank0
  4391  0168  1903               	skipnz
  4392  0169  296F               	goto	L11
  4393  016A  30C3               	movlw	-61
  4394  016B  1044               	bcf	_getTemp_flags,0
  4395                           
  4396                           ;prog.c: 309: getTemp_flags.Send_Address = 1;
  4397  016C  14C4               	bsf	_getTemp_flags,1
  4398                           
  4399                           ;prog.c: 310: getTemp_flags.CountAddressBytes = 0;
  4400  016D  05C4               	andwf	_getTemp_flags,f
  4401                           
  4402                           ;prog.c: 311: } else {
  4403  016E  0008               	return
  4404  016F                     L11:	
  4405                           ;prog.c: 312: getTemp_flags.ActiveProcess = 0;
  4406                           
  4407  016F  1048               	bcf	_getTemp_flags+4,0
  4408                           
  4409                           ;prog.c: 313: getTemp_flags.Error = 1;
  4410  0170  17C7               	bsf	_getTemp_flags+3,7
  4411  0171  0008               	return
  4412  0172                     i1l171:	
  4413                           
  4414                           ;prog.c: 317: if (getTemp_flags.Send_Address) {
  4415  0172  1CC4               	btfss	_getTemp_flags,1
  4416  0173  29B3               	goto	i1l175
  4417                           
  4418                           ;prog.c: 318: if (Broadcasting) {
  4419  0174  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4420  0175  2982               	goto	i1l3575
  4421                           
  4422                           ;prog.c: 319: TX(0xCC, line);
  4423  0176  0825               	movf	get_temp_Async@line,w
  4424  0177  00F0               	movwf	i1TX@line
  4425  0178  30CC               	movlw	204
  4426  0179  255A               	fcall	i1_TX
  4427                           
  4428                           ;prog.c: 320: getTemp_flags.CountAddressBytes = 1;
  4429  017A  1283               	bcf	3,5	;RP0=0, select bank0
  4430  017B  1303               	bcf	3,6	;RP1=0, select bank0
  4431  017C  0844               	movf	_getTemp_flags,w
  4432  017D  39C3               	andlw	-61
  4433  017E  3804               	iorlw	4
  4434  017F  00C4               	movwf	_getTemp_flags
  4435  0180                     i1l3573:	
  4436                           
  4437                           ;prog.c: 321: getTemp_flags.Send_Address = 0;
  4438  0180  10C4               	bcf	_getTemp_flags,1
  4439                           
  4440                           ;prog.c: 322: } else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
  4441  0181  0008               	return
  4442  0182                     i1l3575:	
  4443  0182  0C44               	rrf	_getTemp_flags,w
  4444  0183  00A0               	movwf	??_get_temp_Async
  4445  0184  0C20               	rrf	??_get_temp_Async,w
  4446  0185  390F               	andlw	15
  4447  0186  00A1               	movwf	??_get_temp_Async+1
  4448  0187  3008               	movlw	8
  4449  0188  0221               	subwf	??_get_temp_Async+1,w
  4450  0189  1803               	skipnc
  4451  018A  0008               	return
  4452                           
  4453                           ;prog.c: 323: if (getTemp_flags.CountAddressBytes == 0) {
  4454  018B  0C44               	rrf	_getTemp_flags,w
  4455  018C  00A0               	movwf	??_get_temp_Async
  4456  018D  0C20               	rrf	??_get_temp_Async,w
  4457  018E  390F               	andlw	15
  4458  018F  1D03               	skipz
  4459  0190  2995               	goto	i1l3581
  4460                           
  4461                           ;prog.c: 324: TX(0x55, line);
  4462  0191  0825               	movf	get_temp_Async@line,w
  4463  0192  00F0               	movwf	i1TX@line
  4464  0193  3055               	movlw	85
  4465  0194  255A               	fcall	i1_TX
  4466  0195                     i1l3581:	
  4467                           
  4468                           ;prog.c: 325: }
  4469                           ;prog.c: 326: TX(DS_Address[getTemp_flags.CountAddressBytes], line);
  4470  0195  1283               	bcf	3,5	;RP0=0, select bank0
  4471  0196  1303               	bcf	3,6	;RP1=0, select bank0
  4472  0197  0825               	movf	get_temp_Async@line,w
  4473  0198  00F0               	movwf	i1TX@line
  4474  0199  0C44               	rrf	_getTemp_flags,w
  4475  019A  00A0               	movwf	??_get_temp_Async
  4476  019B  0C20               	rrf	??_get_temp_Async,w
  4477  019C  390F               	andlw	15
  4478  019D  3EBF               	addlw	(low (_DS_Address| 0))& (0+255)
  4479  019E  0084               	movwf	4
  4480  019F  1383               	bcf	3,7	;select IRP bank1
  4481  01A0  0800               	movf	0,w
  4482  01A1  255A               	fcall	i1_TX
  4483                           
  4484                           ;prog.c: 327: getTemp_flags.CountAddressBytes++;
  4485  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4486  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4487  01A4  0C44               	rrf	_getTemp_flags,w
  4488  01A5  224F               	fcall	PL8	;call to abstracted procedure
  4489  01A6  0844               	movf	_getTemp_flags,w
  4490  01A7  0620               	xorwf	??_get_temp_Async,w
  4491  01A8  39C3               	andlw	-61
  4492  01A9  0620               	xorwf	??_get_temp_Async,w
  4493  01AA  00C4               	movwf	_getTemp_flags
  4494                           
  4495                           ;prog.c: 329: if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
  4496  01AB  0C44               	rrf	_getTemp_flags,w
  4497  01AC  00A0               	movwf	??_get_temp_Async
  4498  01AD  0C20               	rrf	??_get_temp_Async,w
  4499  01AE  390F               	andlw	15
  4500  01AF  3A08               	xorlw	8
  4501  01B0  1D03               	skipz
  4502  01B1  0008               	return
  4503  01B2  2980               	goto	i1l3573
  4504  01B3                     i1l175:	
  4505                           
  4506                           ;prog.c: 335: if (getTemp_flags.SendConvertTemp) {
  4507  01B3  1F44               	btfss	_getTemp_flags,6
  4508  01B4  29BD               	goto	i1l3593
  4509                           
  4510                           ;prog.c: 336: TX(0x44, line);
  4511  01B5  0825               	movf	get_temp_Async@line,w
  4512  01B6  00F0               	movwf	i1TX@line
  4513  01B7  3044               	movlw	68
  4514  01B8  255A               	fcall	i1_TX
  4515                           
  4516                           ;prog.c: 337: getTemp_flags.SendConvertTemp = 0;
  4517  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  4518  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  4519  01BB  1344               	bcf	_getTemp_flags,6
  4520                           
  4521                           ;prog.c: 339: } else
  4522  01BC  0008               	return
  4523  01BD                     i1l3593:	
  4524                           
  4525                           ;prog.c: 341: if (getTemp_flags.PauseValue > 0) {
  4526  01BD  0845               	movf	_getTemp_flags+1,w
  4527  01BE  0446               	iorwf	_getTemp_flags+2,w
  4528  01BF  1903               	btfsc	3,2
  4529  01C0  29CC               	goto	i1l184
  4530                           
  4531                           ;prog.c: 342: getTemp_flags.PauseValue--;
  4532  01C1  3001               	movlw	1
  4533  01C2  02C5               	subwf	_getTemp_flags+1,f
  4534  01C3  3000               	movlw	0
  4535  01C4  1C03               	skipc
  4536  01C5  03C6               	decf	_getTemp_flags+2,f
  4537  01C6  02C6               	subwf	_getTemp_flags+2,f
  4538                           
  4539                           ;prog.c: 343: if (getTemp_flags.PauseValue == 0) {
  4540  01C7  0845               	movf	_getTemp_flags+1,w
  4541  01C8  0446               	iorwf	_getTemp_flags+2,w
  4542  01C9  1903               	btfsc	3,2
  4543                           
  4544                           ;prog.c: 344: getTemp_flags.Init = 1;
  4545  01CA  1444               	bsf	_getTemp_flags,0
  4546  01CB  0008               	return
  4547  01CC                     i1l184:	
  4548                           
  4549                           ;prog.c: 348: if (getTemp_flags.SendGetTemp) {
  4550  01CC  1C47               	btfss	_getTemp_flags+3,0
  4551  01CD  29D6               	goto	i1l187
  4552                           
  4553                           ;prog.c: 349: TX(0xBE, line);
  4554  01CE  0825               	movf	get_temp_Async@line,w
  4555  01CF  00F0               	movwf	i1TX@line
  4556  01D0  30BE               	movlw	190
  4557  01D1  255A               	fcall	i1_TX
  4558                           
  4559                           ;prog.c: 350: getTemp_flags.SendGetTemp = 0;
  4560  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  4561  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  4562  01D4  1047               	bcf	_getTemp_flags+3,0
  4563                           
  4564                           ;prog.c: 351: } else
  4565  01D5  0008               	return
  4566  01D6                     i1l187:	
  4567                           
  4568                           ;prog.c: 353: if (getTemp_flags.ReadData) {
  4569  01D6  1CC7               	btfss	_getTemp_flags+3,1
  4570  01D7  2A4D               	goto	i1l189
  4571                           
  4572                           ;prog.c: 354: if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
  4573  01D8  2257               	fcall	PL10	;call to abstracted procedure
  4574  01D9  1803               	skipnc
  4575  01DA  0008               	return
  4576                           
  4577                           ;prog.c: 355: for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (
      +                          DS_ReadData); i++) {
  4578  01DB  01A2               	clrf	get_temp_Async@i
  4579  01DC  29F4               	goto	i1l3615
  4580  01DD                     i1l3617:	
  4581  01DD  2257               	fcall	PL10	;call to abstracted procedure
  4582  01DE  1803               	btfsc	3,0
  4583  01DF  29F8               	goto	i1l3619
  4584                           
  4585                           ;prog.c: 356: DS_ReadData[getTemp_flags.CountDataBytes] = RX(line);
  4586  01E0  0C47               	rrf	_getTemp_flags+3,w
  4587  01E1  00A0               	movwf	??_get_temp_Async
  4588  01E2  0C20               	rrf	??_get_temp_Async,w
  4589  01E3  390F               	andlw	15
  4590  01E4  3EB6               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4591  01E5  0084               	movwf	4
  4592  01E6  0825               	movf	get_temp_Async@line,w
  4593  01E7  25B4               	fcall	i1_RX
  4594  01E8  1383               	bcf	3,7	;select IRP bank1
  4595  01E9  0080               	movwf	0
  4596                           
  4597                           ;prog.c: 357: getTemp_flags.CountDataBytes++;
  4598  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  4599  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  4600  01EC  0C47               	rrf	_getTemp_flags+3,w
  4601  01ED  224F               	fcall	PL8	;call to abstracted procedure
  4602  01EE  0847               	movf	_getTemp_flags+3,w
  4603  01EF  0620               	xorwf	??_get_temp_Async,w
  4604  01F0  39C3               	andlw	-61
  4605  01F1  0620               	xorwf	??_get_temp_Async,w
  4606  01F2  00C7               	movwf	_getTemp_flags+3
  4607  01F3  0AA2               	incf	get_temp_Async@i,f
  4608  01F4                     i1l3615:	
  4609  01F4  3003               	movlw	3
  4610  01F5  0222               	subwf	get_temp_Async@i,w
  4611  01F6  1C03               	btfss	3,0
  4612  01F7  29DD               	goto	i1l3617
  4613  01F8                     i1l3619:	
  4614                           
  4615                           ;prog.c: 358: }
  4616                           ;prog.c: 359: if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
  4617  01F8  0C47               	rrf	_getTemp_flags+3,w
  4618  01F9  00A0               	movwf	??_get_temp_Async
  4619  01FA  0C20               	rrf	??_get_temp_Async,w
  4620  01FB  390F               	andlw	15
  4621  01FC  3A09               	xorlw	9
  4622  01FD  1D03               	skipz
  4623  01FE  0008               	return
  4624                           
  4625                           ;prog.c: 360: if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof 
      +                          (DS_ReadData) - 1)) {
  4626  01FF  3008               	movlw	8
  4627  0200  00F0               	movwf	i1calc_crc@len
  4628  0201  30B6               	movlw	(low (_DS_ReadData| 0))& (0+255)
  4629  0202  25DB               	fcall	i1_calc_crc
  4630  0203  1683               	bsf	3,5	;RP0=1, select bank1
  4631  0204  063E               	xorwf	(_DS_ReadData^(0+128)+8),w
  4632  0205  1903               	skipnz
  4633  0206  2A0A               	goto	i1l3625
  4634                           
  4635                           ;prog.c: 361: getTemp_flags.Error = 1;
  4636  0207  1283               	bcf	3,5	;RP0=0, select bank0
  4637  0208  17C7               	bsf	_getTemp_flags+3,7
  4638                           
  4639                           ;prog.c: 362: } else {
  4640  0209  2A49               	goto	i1l3653
  4641  020A                     i1l3625:	
  4642                           
  4643                           ;prog.c: 364: unsigned char temp1 = DS_ReadData[0];
  4644  020A  0836               	movf	_DS_ReadData^(0+128),w
  4645  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4646  020C  00A3               	movwf	get_temp_Async@temp1
  4647                           
  4648                           ;prog.c: 365: unsigned char temp2 = DS_ReadData[1];
  4649  020D  1683               	bsf	3,5	;RP0=1, select bank1
  4650  020E  0837               	movf	(_DS_ReadData^(0+128)+1),w
  4651  020F  1283               	bcf	3,5	;RP0=0, select bank0
  4652  0210  00A4               	movwf	get_temp_Async@temp2
  4653                           
  4654                           ;prog.c: 367: temp_drob = temp1 & 0b00001111;
  4655  0211  0823               	movf	get_temp_Async@temp1,w
  4656  0212  00DB               	movwf	_temp_drob
  4657  0213  300F               	movlw	15
  4658  0214  05DB               	andwf	_temp_drob,f
  4659                           
  4660                           ;prog.c: 368: temp_drob = ((temp_drob * 6) + 2) / 10;
  4661  0215  300A               	movlw	10
  4662  0216  00F6               	movwf	___awdiv@divisor
  4663  0217  01F7               	clrf	___awdiv@divisor+1
  4664  0218  085B               	movf	_temp_drob,w
  4665  0219  00F0               	movwf	___wmul@multiplier
  4666  021A  3006               	movlw	6
  4667  021B  01F1               	clrf	___wmul@multiplier+1
  4668  021C  00F2               	movwf	___wmul@multiplicand
  4669  021D  01F3               	clrf	___wmul@multiplicand+1
  4670  021E  26C9               	fcall	___wmul
  4671  021F  0870               	movf	?___wmul,w
  4672  0220  3E02               	addlw	2
  4673  0221  00F8               	movwf	___awdiv@dividend
  4674  0222  0871               	movf	?___wmul+1,w
  4675  0223  1803               	skipnc
  4676  0224  3E01               	addlw	1
  4677  0225  3E00               	addlw	0
  4678  0226  00F9               	movwf	___awdiv@dividend+1
  4679  0227  2478               	fcall	___awdiv
  4680  0228  0876               	movf	?___awdiv,w
  4681  0229  00DB               	movwf	_temp_drob
  4682  022A  300F               	movlw	15
  4683                           
  4684                           ;prog.c: 369: temp1 >>= 4;
  4685  022B  0EA3               	swapf	get_temp_Async@temp1,f
  4686  022C  05A3               	andwf	get_temp_Async@temp1,f
  4687                           
  4688                           ;prog.c: 370: sign = temp2 & 0x80;
  4689  022D  0824               	movf	get_temp_Async@temp2,w
  4690  022E  00DA               	movwf	_sign
  4691  022F  3080               	movlw	128
  4692  0230  05DA               	andwf	_sign,f
  4693  0231  30F0               	movlw	240
  4694                           
  4695                           ;prog.c: 371: temp2 <<= 4;
  4696  0232  0EA4               	swapf	get_temp_Async@temp2,f
  4697  0233  05A4               	andwf	get_temp_Async@temp2,f
  4698                           
  4699                           ;prog.c: 372: temp2 &= 0b01110000;
  4700  0234  3070               	movlw	112
  4701  0235  05A4               	andwf	get_temp_Async@temp2,f
  4702                           
  4703                           ;prog.c: 373: temp2 |= temp1;
  4704  0236  0823               	movf	get_temp_Async@temp1,w
  4705  0237  04A4               	iorwf	get_temp_Async@temp2,f
  4706                           
  4707                           ;prog.c: 375: if (sign) {
  4708  0238  085A               	movf	_sign,w
  4709  0239  1903               	btfsc	3,2
  4710  023A  2A47               	goto	i1l3651
  4711                           
  4712                           ;prog.c: 376: temperature = 127 - temp2;
  4713  023B  0824               	movf	get_temp_Async@temp2,w
  4714  023C  3C7F               	sublw	127
  4715  023D  00DC               	movwf	_temperature
  4716                           
  4717                           ;prog.c: 377: temp_drob = 10 - temp_drob;
  4718  023E  085B               	movf	_temp_drob,w
  4719  023F  3C0A               	sublw	10
  4720  0240  00DB               	movwf	_temp_drob
  4721                           
  4722                           ;prog.c: 378: if (temp_drob == 10) {
  4723  0241  3A0A               	xorlw	10
  4724  0242  1D03               	btfss	3,2
  4725  0243  2A49               	goto	i1l3653
  4726                           
  4727                           ;prog.c: 379: temp_drob = 0;
  4728  0244  01DB               	clrf	_temp_drob
  4729                           
  4730                           ;prog.c: 380: temperature++;
  4731  0245  0ADC               	incf	_temperature,f
  4732  0246  2A49               	goto	i1l3653
  4733  0247                     i1l3651:	
  4734                           
  4735                           ;prog.c: 383: temperature = temp2;
  4736  0247  0824               	movf	get_temp_Async@temp2,w
  4737  0248  00DC               	movwf	_temperature
  4738  0249                     i1l3653:	
  4739                           
  4740                           ;prog.c: 384: }
  4741                           ;prog.c: 385: }
  4742                           ;prog.c: 386: getTemp_flags.ReadData = 0;
  4743  0249  10C7               	bcf	_getTemp_flags+3,1
  4744                           
  4745                           ;prog.c: 387: getTemp_flags.ActiveProcess = 0;
  4746  024A  1048               	bcf	_getTemp_flags+4,0
  4747                           
  4748                           ;prog.c: 388: getTemp_flags.DataIsRead = 1;
  4749  024B  1747               	bsf	_getTemp_flags+3,6
  4750  024C  0008               	return
  4751  024D                     i1l189:	
  4752                           
  4753                           ;prog.c: 392: getTemp_flags.ActiveProcess = 0;
  4754  024D  1048               	bcf	_getTemp_flags+4,0
  4755  024E  0008               	return
  4756  024F                     __end_of_get_temp_Async:	
  4757  024F                     PL8:	
  4758  024F  00A0               	movwf	??_get_temp_Async
  4759  0250  0C20               	rrf	??_get_temp_Async,w
  4760  0251  390F               	andlw	15
  4761  0252  00A0               	movwf	??_get_temp_Async
  4762  0253  0AA0               	incf	??_get_temp_Async,f
  4763  0254  0DA0               	rlf	??_get_temp_Async,f
  4764  0255  0DA0               	rlf	??_get_temp_Async,f
  4765  0256  0008               	return
  4766  0257                     __end_ofPL8:	
  4767  0257                     PL10:	
  4768  0257  0C47               	rrf	_getTemp_flags+3,w
  4769  0258  00A0               	movwf	??_get_temp_Async
  4770  0259  0C20               	rrf	??_get_temp_Async,w
  4771  025A  390F               	andlw	15
  4772  025B  00A1               	movwf	??_get_temp_Async+1
  4773  025C  3009               	movlw	9
  4774  025D  0221               	subwf	??_get_temp_Async+1,w
  4775  025E  0008               	return
  4776  025F                     __end_ofPL10:	
  4777                           
  4778                           	psect	text27
  4779  05DB                     __ptext27:	
  4780 ;; *************** function i1_calc_crc *****************
  4781 ;; Defined at:
  4782 ;;		line 281 in file "prog.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  mas             1    wreg     PTR unsigned char 
  4785 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4786 ;;  len             1    0[COMMON] unsigned char 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  mas             1    1[COMMON] PTR unsigned char 
  4789 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4790 ;;  calc_crc        1    5[COMMON] unsigned char 
  4791 ;;  calc_crc        1    4[COMMON] unsigned char 
  4792 ;;  calc_crc        1    3[COMMON] unsigned char 
  4793 ;;  calc_crc        1    2[COMMON] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  1    wreg      unsigned char 
  4796 ;; Registers used:
  4797 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4798 ;; Tracked objects:
  4799 ;;		On entry : 300/0
  4800 ;;		On exit  : 300/0
  4801 ;;		Unchanged: 300/0
  4802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4803 ;;      Params:         1       0       0       0
  4804 ;;      Locals:         5       0       0       0
  4805 ;;      Temps:          0       0       0       0
  4806 ;;      Totals:         6       0       0       0
  4807 ;;Total ram usage:        6 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_get_temp_Async
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function i1_calc_crc
  4818  05DB                     i1_calc_crc:	
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in i1_calc_crc: [wreg-fsr0h+status,2+status,0]
  4822                           ;i1calc_crc@mas stored from wreg
  4823  05DB  00F1               	movwf	i1calc_crc@mas
  4824                           
  4825                           ;prog.c: 282: unsigned char crc = 0;
  4826  05DC  01F5               	clrf	i1calc_crc@crc
  4827                           
  4828                           ;prog.c: 283: while (len--) {
  4829  05DD  2DF8               	goto	i1l3545
  4830  05DE                     i1l3525:	
  4831                           
  4832                           ;prog.c: 284: unsigned char dat = *mas++;
  4833  05DE  0871               	movf	i1calc_crc@mas,w
  4834  05DF  0084               	movwf	4
  4835  05E0  1383               	bcf	3,7	;select IRP bank0
  4836  05E1  0800               	movf	0,w
  4837  05E2  00F2               	movwf	i1calc_crc@dat
  4838  05E3  0AF1               	incf	i1calc_crc@mas,f
  4839                           
  4840                           ;prog.c: 285: for (unsigned char i = 0; i < 8; i++) {
  4841  05E4  01F4               	clrf	i1calc_crc@i
  4842  05E5                     i1l3535:	
  4843                           
  4844                           ;prog.c: 286: unsigned char fb = (crc ^ dat) & 1;
  4845  05E5  0875               	movf	i1calc_crc@crc,w
  4846  05E6  0672               	xorwf	i1calc_crc@dat,w
  4847  05E7  00F3               	movwf	i1calc_crc@fb
  4848  05E8  3001               	movlw	1
  4849  05E9  05F3               	andwf	i1calc_crc@fb,f
  4850                           
  4851                           ;prog.c: 287: crc >>= 1;
  4852  05EA  1003               	clrc
  4853  05EB  0CF5               	rrf	i1calc_crc@crc,f
  4854                           
  4855                           ;prog.c: 288: dat >>= 1;
  4856  05EC  1003               	clrc
  4857  05ED  0CF2               	rrf	i1calc_crc@dat,f
  4858                           
  4859                           ;prog.c: 289: if (fb) crc ^= 0x8c;
  4860  05EE  0873               	movf	i1calc_crc@fb,w
  4861  05EF  1903               	btfsc	3,2
  4862  05F0  2DF3               	goto	i1l3543
  4863  05F1  308C               	movlw	140
  4864  05F2  06F5               	xorwf	i1calc_crc@crc,f
  4865  05F3                     i1l3543:	
  4866  05F3  3008               	movlw	8
  4867  05F4  0AF4               	incf	i1calc_crc@i,f
  4868  05F5  0274               	subwf	i1calc_crc@i,w
  4869  05F6  1C03               	skipc
  4870  05F7  2DE5               	goto	i1l3535
  4871  05F8                     i1l3545:	
  4872  05F8  03F0               	decf	i1calc_crc@len,f
  4873  05F9  0F70               	incfsz	i1calc_crc@len,w
  4874  05FA  2DDE               	goto	i1l3525
  4875                           
  4876                           ;prog.c: 290: }
  4877                           ;prog.c: 291: }
  4878                           ;prog.c: 292: return crc;
  4879  05FB  0875               	movf	i1calc_crc@crc,w
  4880  05FC  0008               	return
  4881  05FD                     __end_ofi1_calc_crc:	
  4882                           
  4883                           	psect	text28
  4884  055A                     __ptext28:	
  4885 ;; *************** function i1_TX *****************
  4886 ;; Defined at:
  4887 ;;		line 239 in file "prog.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  cmd             1    wreg     unsigned char 
  4890 ;;  line            1    0[COMMON] unsigned char 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;  cmd             1    2[COMMON] unsigned char 
  4893 ;;  TX              1    6[COMMON] unsigned char 
  4894 ;;  TX              1    5[COMMON] unsigned char 
  4895 ;;  TX              1    4[COMMON] unsigned char 
  4896 ;;  TX              1    3[COMMON] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0
  4901 ;; Tracked objects:
  4902 ;;		On entry : 300/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4906 ;;      Params:         1       0       0       0
  4907 ;;      Locals:         5       0       0       0
  4908 ;;      Temps:          1       0       0       0
  4909 ;;      Totals:         7       0       0       0
  4910 ;;Total ram usage:        7 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_get_temp_Async
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function i1_TX
  4921  055A                     i1_TX:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  4925                           ;i1TX@cmd stored from wreg
  4926  055A  00F2               	movwf	i1TX@cmd
  4927                           
  4928                           ;prog.c: 240: unsigned char One = line;
  4929  055B  0870               	movf	i1TX@line,w
  4930  055C  00F6               	movwf	i1TX@One
  4931                           
  4932                           ;prog.c: 241: unsigned char Zero = One ^ 0b11111111;
  4933  055D  0976               	comf	i1TX@One,w
  4934  055E  00F4               	movwf	i1TX@Zero
  4935                           
  4936                           ;prog.c: 244: unsigned char i = 0;
  4937  055F  01F5               	clrf	i1TX@i
  4938                           
  4939                           ;prog.c: 245: temp = cmd;
  4940  0560  0872               	movf	i1TX@cmd,w
  4941  0561  00F3               	movwf	i1TX@temp
  4942                           
  4943                           ;prog.c: 246: for (i = 0; i < 8; i++) {
  4944  0562  01F5               	clrf	i1TX@i
  4945  0563                     i1l147:	
  4946                           
  4947                           ;prog.c: 247: if (temp & 0x01) {
  4948  0563  1C73               	btfss	i1TX@temp,0
  4949  0564  2D6F               	goto	i1l2407
  4950                           
  4951                           ;prog.c: 248: TRISA &= Zero;
  4952  0565  2585               	fcall	PL16	;call to abstracted procedure
  4953                           
  4954                           ;prog.c: 249: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4955  0566  2D67               	nop2	;2 cycle nop
  4956  0567  2D68               	nop2	;2 cycle nop
  4957  0568  0000               	nop
  4958                           
  4959                           ;prog.c: 250: TRISA |= One;
  4960  0569  2580               	fcall	PL14	;call to abstracted procedure
  4961                           
  4962                           ;prog.c: 251: _delay((unsigned long)((70)*(4000000/4000000.0)));
  4963  056A  3017               	movlw	23
  4964  056B  00F1               	movwf	??i1_TX
  4965  056C                     u477_27:	
  4966  056C  0BF1               	decfsz	??i1_TX,f
  4967  056D  2D6C               	goto	u477_27
  4968                           
  4969                           ;prog.c: 252: } else {
  4970  056E  2D78               	goto	i1l2415
  4971  056F                     i1l2407:	
  4972                           
  4973                           ;prog.c: 253: TRISA &= Zero;
  4974  056F  2585               	fcall	PL16	;call to abstracted procedure
  4975                           
  4976                           ;prog.c: 254: _delay((unsigned long)((70)*(4000000/4000000.0)));
  4977  0570  3017               	movlw	23
  4978  0571  00F1               	movwf	??i1_TX
  4979  0572                     u478_27:	
  4980  0572  0BF1               	decfsz	??i1_TX,f
  4981  0573  2D72               	goto	u478_27
  4982                           
  4983                           ;prog.c: 255: TRISA |= One;
  4984  0574  2580               	fcall	PL14	;call to abstracted procedure
  4985                           
  4986                           ;prog.c: 256: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4987  0575  2D76               	nop2	;2 cycle nop
  4988  0576  2D77               	nop2	;2 cycle nop
  4989  0577  0000               	nop
  4990  0578                     i1l2415:	
  4991  0578  3008               	movlw	8
  4992                           
  4993                           ;prog.c: 257: }
  4994                           ;prog.c: 258: temp >>= 1;
  4995  0579  1003               	clrc
  4996  057A  0CF3               	rrf	i1TX@temp,f
  4997  057B  0AF5               	incf	i1TX@i,f
  4998  057C  0275               	subwf	i1TX@i,w
  4999  057D  1803               	btfsc	3,0
  5000  057E  0008               	return
  5001  057F  2D63               	goto	i1l147
  5002  0580                     __end_ofi1_TX:	
  5003  0580                     PL14:	
  5004  0580  0876               	movf	i1TX@One,w
  5005  0581  1683               	bsf	3,5	;RP0=1, select bank1
  5006  0582  1303               	bcf	3,6	;RP1=0, select bank1
  5007  0583  0485               	iorwf	5,f	;volatile
  5008  0584  0008               	return
  5009  0585                     __end_ofPL14:	
  5010  0585                     PL16:	
  5011  0585  0874               	movf	i1TX@Zero,w
  5012  0586  1683               	bsf	3,5	;RP0=1, select bank1
  5013  0587  1303               	bcf	3,6	;RP1=0, select bank1
  5014  0588  0585               	andwf	5,f	;volatile
  5015  0589  0008               	return
  5016  058A                     __end_ofPL16:	
  5017                           
  5018                           	psect	text29
  5019  05B4                     __ptext29:	
  5020 ;; *************** function i1_RX *****************
  5021 ;; Defined at:
  5022 ;;		line 262 in file "prog.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  line            1    wreg     unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  line            1    1[COMMON] unsigned char 
  5027 ;;  RX              1    5[COMMON] unsigned char 
  5028 ;;  RX              1    4[COMMON] unsigned char 
  5029 ;;  RX              1    3[COMMON] unsigned char 
  5030 ;;  RX              1    2[COMMON] unsigned char 
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      unsigned char 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2, status,0
  5035 ;; Tracked objects:
  5036 ;;		On entry : 300/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5040 ;;      Params:         0       0       0       0
  5041 ;;      Locals:         5       0       0       0
  5042 ;;      Temps:          1       0       0       0
  5043 ;;      Totals:         6       0       0       0
  5044 ;;Total ram usage:        6 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; This function calls:
  5047 ;;		Nothing
  5048 ;; This function is called by:
  5049 ;;		_get_temp_Async
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           
  5054                           ;psect for function i1_RX
  5055  05B4                     i1_RX:	
  5056                           
  5057                           ;incstack = 0
  5058                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  5059                           ;i1RX@line stored from wreg
  5060  05B4  00F1               	movwf	i1RX@line
  5061                           
  5062                           ;prog.c: 263: unsigned char One = line;
  5063  05B5  00F5               	movwf	i1RX@One
  5064                           
  5065                           ;prog.c: 264: unsigned char Zero = One ^ 0b11111111;
  5066  05B6  0975               	comf	i1RX@One,w
  5067  05B7  00F2               	movwf	i1RX@Zero
  5068                           
  5069                           ;prog.c: 266: unsigned char d = 0;
  5070  05B8  01F3               	clrf	i1RX@d
  5071                           
  5072                           ;prog.c: 267: for (unsigned char i = 0; i < 8; i++) {
  5073  05B9  01F4               	clrf	i1RX@i
  5074  05BA                     i1l2429:	
  5075                           
  5076                           ;prog.c: 268: TRISA &= Zero;
  5077  05BA  0872               	movf	i1RX@Zero,w
  5078  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  5079  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  5080  05BD  0585               	andwf	5,f	;volatile
  5081                           
  5082                           ;prog.c: 269: _delay((unsigned long)((6)*(4000000/4000000.0)));
  5083  05BE  2DBF               	nop2	;2 cycle nop
  5084  05BF  2DC0               	nop2	;2 cycle nop
  5085  05C0  2DC1               	nop2	;2 cycle nop
  5086                           
  5087                           ;prog.c: 270: TRISA |= One;
  5088  05C1  0875               	movf	i1RX@One,w
  5089  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  5090  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  5091  05C4  0485               	iorwf	5,f	;volatile
  5092                           
  5093                           ;prog.c: 271: _delay((unsigned long)((4)*(4000000/4000000.0)));
  5094  05C5  2DC6               	nop2	;2 cycle nop
  5095  05C6  2DC7               	nop2	;2 cycle nop
  5096                           
  5097                           ;prog.c: 272: d >>= 1;
  5098  05C7  1003               	clrc
  5099  05C8  0CF3               	rrf	i1RX@d,f
  5100                           
  5101                           ;prog.c: 273: if ((PORTA & One) > 0) {
  5102  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  5103  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  5104  05CB  0805               	movf	5,w	;volatile
  5105  05CC  0575               	andwf	i1RX@One,w
  5106  05CD  1D03               	btfss	3,2
  5107                           
  5108                           ;prog.c: 274: d |= 0x80;
  5109  05CE  17F3               	bsf	i1RX@d,7
  5110                           
  5111                           ;prog.c: 275: }
  5112                           ;prog.c: 276: _delay((unsigned long)((60)*(4000000/4000000.0)));
  5113  05CF  3013               	movlw	19
  5114  05D0  00F0               	movwf	??i1_RX
  5115  05D1                     u479_27:	
  5116  05D1  0BF0               	decfsz	??i1_RX,f
  5117  05D2  2DD1               	goto	u479_27
  5118  05D3  2DD4               	nop2	;nop
  5119  05D4  3008               	movlw	8
  5120  05D5  0AF4               	incf	i1RX@i,f
  5121  05D6  0274               	subwf	i1RX@i,w
  5122  05D7  1C03               	skipc
  5123  05D8  2DBA               	goto	i1l2429
  5124                           
  5125                           ;prog.c: 277: }
  5126                           ;prog.c: 278: return d;
  5127  05D9  0873               	movf	i1RX@d,w
  5128  05DA  0008               	return
  5129  05DB                     __end_ofi1_RX:	
  5130                           
  5131                           	psect	text30
  5132  0529                     __ptext30:	
  5133 ;; *************** function i1_INIT *****************
  5134 ;; Defined at:
  5135 ;;		line 221 in file "prog.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  line            1    wreg     unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  line            1    1[COMMON] unsigned char 
  5140 ;;  INIT            1    4[COMMON] unsigned char 
  5141 ;;  INIT            1    3[COMMON] unsigned char 
  5142 ;;  INIT            1    2[COMMON] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  1    wreg      unsigned char 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 300/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5152 ;;      Params:         0       0       0       0
  5153 ;;      Locals:         4       0       0       0
  5154 ;;      Temps:          1       0       0       0
  5155 ;;      Totals:         5       0       0       0
  5156 ;;Total ram usage:        5 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_get_temp_Async
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           
  5166                           ;psect for function i1_INIT
  5167  0529                     i1_INIT:	
  5168                           
  5169                           ;incstack = 0
  5170                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  5171                           ;i1INIT@line stored from wreg
  5172  0529  00F1               	movwf	i1INIT@line
  5173                           
  5174                           ;prog.c: 222: unsigned char One = line;
  5175  052A  00F4               	movwf	i1INIT@One
  5176                           
  5177                           ;prog.c: 223: unsigned char Zero = One ^ 0b11111111;
  5178  052B  0974               	comf	i1INIT@One,w
  5179  052C  00F2               	movwf	i1INIT@Zero
  5180                           
  5181                           ;prog.c: 227: TRISA |= One;
  5182  052D  0874               	movf	i1INIT@One,w
  5183  052E  1683               	bsf	3,5	;RP0=1, select bank1
  5184  052F  0485               	iorwf	5,f	;volatile
  5185                           
  5186                           ;prog.c: 228: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5187  0530  3006               	movlw	6
  5188  0531  00F0               	movwf	??i1_INIT
  5189  0532                     u480_27:	
  5190  0532  0BF0               	decfsz	??i1_INIT,f
  5191  0533  2D32               	goto	u480_27
  5192  0534  0000               	nop
  5193                           
  5194                           ;prog.c: 229: TRISA &= Zero;
  5195  0535  0872               	movf	i1INIT@Zero,w
  5196  0536  1683               	bsf	3,5	;RP0=1, select bank1
  5197  0537  1303               	bcf	3,6	;RP1=0, select bank1
  5198  0538  0585               	andwf	5,f	;volatile
  5199                           
  5200                           ;prog.c: 230: _delay((unsigned long)((500)*(4000000/4000000.0)));
  5201  0539  30A6               	movlw	166
  5202  053A  00F0               	movwf	??i1_INIT
  5203  053B                     u481_27:	
  5204  053B  0BF0               	decfsz	??i1_INIT,f
  5205  053C  2D3B               	goto	u481_27
  5206  053D  0000               	nop
  5207                           
  5208                           ;prog.c: 231: TRISA |= One;
  5209  053E  0874               	movf	i1INIT@One,w
  5210  053F  1683               	bsf	3,5	;RP0=1, select bank1
  5211  0540  1303               	bcf	3,6	;RP1=0, select bank1
  5212  0541  0485               	iorwf	5,f	;volatile
  5213                           
  5214                           ;prog.c: 232: _delay((unsigned long)((65)*(4000000/4000000.0)));
  5215  0542  3015               	movlw	21
  5216  0543  00F0               	movwf	??i1_INIT
  5217  0544                     u482_27:	
  5218  0544  0BF0               	decfsz	??i1_INIT,f
  5219  0545  2D44               	goto	u482_27
  5220  0546  0000               	nop
  5221                           
  5222                           ;prog.c: 233: b = (PORTA & One) > 0;
  5223  0547  1283               	bcf	3,5	;RP0=0, select bank0
  5224  0548  1303               	bcf	3,6	;RP1=0, select bank0
  5225  0549  0805               	movf	5,w	;volatile
  5226  054A  0574               	andwf	i1INIT@One,w
  5227  054B  1903               	btfsc	3,2
  5228  054C  2D4F               	goto	u198_20
  5229  054D  3001               	movlw	1
  5230  054E  2D50               	goto	u199_20
  5231  054F                     u198_20:	
  5232  054F  3000               	movlw	0
  5233  0550                     u199_20:	
  5234  0550  00F3               	movwf	i1INIT@b
  5235                           
  5236                           ;prog.c: 234: _delay((unsigned long)((450)*(4000000/4000000.0)));
  5237  0551  3095               	movlw	149
  5238  0552  00F0               	movwf	??i1_INIT
  5239  0553                     u483_27:	
  5240  0553  0BF0               	decfsz	??i1_INIT,f
  5241  0554  2D53               	goto	u483_27
  5242  0555  2D56               	nop2	;nop
  5243                           
  5244                           ;prog.c: 236: return !b;
  5245  0556  0873               	movf	i1INIT@b,w
  5246  0557  1903               	btfsc	3,2
  5247  0558  3401               	retlw	1
  5248  0559  3400               	retlw	0
  5249  055A                     __end_ofi1_INIT:	
  5250                           
  5251                           	psect	text31
  5252  06C9                     __ptext31:	
  5253 ;; *************** function ___wmul *****************
  5254 ;; Defined at:
  5255 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  multiplier      2    0[COMMON] unsigned int 
  5258 ;;  multiplicand    2    2[COMMON] unsigned int 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  product         2    4[COMMON] unsigned int 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  2    0[COMMON] unsigned int 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0
  5265 ;; Tracked objects:
  5266 ;;		On entry : 300/0
  5267 ;;		On exit  : 300/0
  5268 ;;		Unchanged: 300/0
  5269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5270 ;;      Params:         4       0       0       0
  5271 ;;      Locals:         2       0       0       0
  5272 ;;      Temps:          0       0       0       0
  5273 ;;      Totals:         6       0       0       0
  5274 ;;Total ram usage:        6 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_get_temp_Async
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function ___wmul
  5285  06C9                     ___wmul:	
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5289  06C9  01F4               	clrf	___wmul@product
  5290  06CA  01F5               	clrf	___wmul@product+1
  5291  06CB                     i1l2309:	
  5292  06CB  1C70               	btfss	___wmul@multiplier,0
  5293  06CC  2ED3               	goto	i1l2313
  5294  06CD  0872               	movf	___wmul@multiplicand,w
  5295  06CE  07F4               	addwf	___wmul@product,f
  5296  06CF  1803               	skipnc
  5297  06D0  0AF5               	incf	___wmul@product+1,f
  5298  06D1  0873               	movf	___wmul@multiplicand+1,w
  5299  06D2  07F5               	addwf	___wmul@product+1,f
  5300  06D3                     i1l2313:	
  5301  06D3  1003               	clrc
  5302  06D4  0DF2               	rlf	___wmul@multiplicand,f
  5303  06D5  0DF3               	rlf	___wmul@multiplicand+1,f
  5304  06D6  1003               	clrc
  5305  06D7  0CF1               	rrf	___wmul@multiplier+1,f
  5306  06D8  0CF0               	rrf	___wmul@multiplier,f
  5307  06D9  0870               	movf	___wmul@multiplier,w
  5308  06DA  0471               	iorwf	___wmul@multiplier+1,w
  5309  06DB  1D03               	btfss	3,2
  5310  06DC  2ECB               	goto	i1l2309
  5311  06DD  0875               	movf	___wmul@product+1,w
  5312  06DE  00F1               	movwf	?___wmul+1
  5313  06DF  0874               	movf	___wmul@product,w
  5314  06E0  00F0               	movwf	?___wmul
  5315  06E1  0008               	return
  5316  06E2                     __end_of___wmul:	
  5317                           
  5318                           	psect	text32
  5319  0478                     __ptext32:	
  5320 ;; *************** function ___awdiv *****************
  5321 ;; Defined at:
  5322 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  divisor         2    6[COMMON] int 
  5325 ;;  dividend        2    8[COMMON] int 
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  quotient        2   12[COMMON] int 
  5328 ;;  sign            1   11[COMMON] unsigned char 
  5329 ;;  counter         1   10[COMMON] unsigned char 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2    6[COMMON] int 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, status,0
  5334 ;; Tracked objects:
  5335 ;;		On entry : 300/0
  5336 ;;		On exit  : 300/0
  5337 ;;		Unchanged: 300/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5339 ;;      Params:         4       0       0       0
  5340 ;;      Locals:         4       0       0       0
  5341 ;;      Temps:          0       0       0       0
  5342 ;;      Totals:         8       0       0       0
  5343 ;;Total ram usage:        8 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_get_temp_Async
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           
  5353                           ;psect for function ___awdiv
  5354  0478                     ___awdiv:	
  5355                           
  5356                           ;incstack = 0
  5357                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5358  0478  01FB               	clrf	___awdiv@sign
  5359  0479  1FF7               	btfss	___awdiv@divisor+1,7
  5360  047A  2C82               	goto	i1l2331
  5361  047B  09F6               	comf	___awdiv@divisor,f
  5362  047C  09F7               	comf	___awdiv@divisor+1,f
  5363  047D  0AF6               	incf	___awdiv@divisor,f
  5364  047E  1903               	skipnz
  5365  047F  0AF7               	incf	___awdiv@divisor+1,f
  5366  0480  01FB               	clrf	___awdiv@sign
  5367  0481  0AFB               	incf	___awdiv@sign,f
  5368  0482                     i1l2331:	
  5369  0482  1FF9               	btfss	___awdiv@dividend+1,7
  5370  0483  2C8B               	goto	i1l2337
  5371  0484  09F8               	comf	___awdiv@dividend,f
  5372  0485  09F9               	comf	___awdiv@dividend+1,f
  5373  0486  0AF8               	incf	___awdiv@dividend,f
  5374  0487  1903               	skipnz
  5375  0488  0AF9               	incf	___awdiv@dividend+1,f
  5376  0489  3001               	movlw	1
  5377  048A  06FB               	xorwf	___awdiv@sign,f
  5378  048B                     i1l2337:	
  5379  048B  01FC               	clrf	___awdiv@quotient
  5380  048C  01FD               	clrf	___awdiv@quotient+1
  5381  048D  0876               	movf	___awdiv@divisor,w
  5382  048E  0477               	iorwf	___awdiv@divisor+1,w
  5383  048F  1903               	btfsc	3,2
  5384  0490  2CB0               	goto	i1l2359
  5385  0491  01FA               	clrf	___awdiv@counter
  5386  0492                     L12:	
  5387  0492  0AFA               	incf	___awdiv@counter,f
  5388  0493  1BF7               	btfsc	___awdiv@divisor+1,7
  5389  0494  2C99               	goto	i1l2347
  5390  0495  1003               	clrc
  5391  0496  0DF6               	rlf	___awdiv@divisor,f
  5392  0497  0DF7               	rlf	___awdiv@divisor+1,f
  5393  0498  2C92               	goto	L12
  5394  0499                     i1l2347:	
  5395  0499  1003               	clrc
  5396  049A  0DFC               	rlf	___awdiv@quotient,f
  5397  049B  0DFD               	rlf	___awdiv@quotient+1,f
  5398  049C  0877               	movf	___awdiv@divisor+1,w
  5399  049D  0279               	subwf	___awdiv@dividend+1,w
  5400  049E  1D03               	skipz
  5401  049F  2CA2               	goto	u195_25
  5402  04A0  0876               	movf	___awdiv@divisor,w
  5403  04A1  0278               	subwf	___awdiv@dividend,w
  5404  04A2                     u195_25:	
  5405  04A2  1C03               	skipc
  5406  04A3  2CAC               	goto	L13
  5407  04A4  0876               	movf	___awdiv@divisor,w
  5408  04A5  02F8               	subwf	___awdiv@dividend,f
  5409  04A6  0877               	movf	___awdiv@divisor+1,w
  5410  04A7  1C03               	skipc
  5411  04A8  03F9               	decf	___awdiv@dividend+1,f
  5412  04A9  02F9               	subwf	___awdiv@dividend+1,f
  5413  04AA  147C               	bsf	___awdiv@quotient,0
  5414  04AB  1003               	clrc
  5415  04AC                     L13:	
  5416  04AC  0CF7               	rrf	___awdiv@divisor+1,f
  5417  04AD  0CF6               	rrf	___awdiv@divisor,f
  5418  04AE  0BFA               	decfsz	___awdiv@counter,f
  5419  04AF  2C99               	goto	i1l2347
  5420  04B0                     i1l2359:	
  5421  04B0  087B               	movf	___awdiv@sign,w
  5422  04B1  1903               	btfsc	3,2
  5423  04B2  2CB8               	goto	i1l2363
  5424  04B3  09FC               	comf	___awdiv@quotient,f
  5425  04B4  09FD               	comf	___awdiv@quotient+1,f
  5426  04B5  0AFC               	incf	___awdiv@quotient,f
  5427  04B6  1903               	skipnz
  5428  04B7  0AFD               	incf	___awdiv@quotient+1,f
  5429  04B8                     i1l2363:	
  5430  04B8  087D               	movf	___awdiv@quotient+1,w
  5431  04B9  00F7               	movwf	?___awdiv+1
  5432  04BA  087C               	movf	___awdiv@quotient,w
  5433  04BB  00F6               	movwf	?___awdiv
  5434  04BC  0008               	return
  5435  04BD                     __end_of___awdiv:	
  5436                           
  5437                           	psect	text33
  5438  0677                     __ptext33:	
  5439 ;; *************** function _convDig *****************
  5440 ;; Defined at:
  5441 ;;		line 134 in file "prog.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  dig             1    wreg     unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  dig             1    0[COMMON] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  1    wreg      unsigned char 
  5448 ;; Registers used:
  5449 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5450 ;; Tracked objects:
  5451 ;;		On entry : B00/0
  5452 ;;		On exit  : B00/0
  5453 ;;		Unchanged: B00/0
  5454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5455 ;;      Params:         0       0       0       0
  5456 ;;      Locals:         1       0       0       0
  5457 ;;      Temps:          0       0       0       0
  5458 ;;      Totals:         1       0       0       0
  5459 ;;Total ram usage:        1 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; This function calls:
  5462 ;;		Nothing
  5463 ;; This function is called by:
  5464 ;;		_F
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _convDig
  5470  0677                     _convDig:	
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5474                           ;convDig@dig stored from wreg
  5475  0677  00F0               	movwf	convDig@dig
  5476                           
  5477                           ;prog.c: 135: switch (dig) {
  5478  0678  2E87               	goto	i1l2539
  5479  0679                     i1l2481:	
  5480  0679  34DB               	retlw	219
  5481  067A                     i1l2485:	
  5482  067A  3418               	retlw	24
  5483  067B                     i1l2489:	
  5484  067B  34B3               	retlw	179
  5485  067C                     i1l2493:	
  5486  067C  34BA               	retlw	186
  5487  067D                     i1l2497:	
  5488  067D  3478               	retlw	120
  5489  067E                     i1l2501:	
  5490  067E  34EA               	retlw	234
  5491  067F                     i1l2505:	
  5492  067F  34EB               	retlw	235
  5493  0680                     i1l2509:	
  5494  0680  3498               	retlw	152
  5495  0681                     i1l2513:	
  5496  0681  34FB               	retlw	251
  5497  0682                     i1l2517:	
  5498  0682  34FA               	retlw	250
  5499  0683                     i1l2521:	
  5500  0683  34E3               	retlw	227
  5501  0684                     i1l2525:	
  5502  0684  3421               	retlw	33
  5503  0685                     i1l2529:	
  5504  0685  3420               	retlw	32
  5505  0686                     i1l2533:	
  5506  0686  3400               	retlw	0
  5507  0687                     i1l2539:	
  5508  0687  0870               	movf	convDig@dig,w
  5509                           
  5510                           ; Switch size 1, requested type "space"
  5511                           ; Number of cases is 13, Range of values is 0 to 32
  5512                           ; switch strategies available:
  5513                           ; Name         Instructions Cycles
  5514                           ; direct_byte           39     6 (fixed)
  5515                           ; simple_byte           40    21 (average)
  5516                           ; jumptable            260     6 (fixed)
  5517                           ;	Chosen strategy is direct_byte
  5518  0688  0084               	movwf	4
  5519  0689  3021               	movlw	33
  5520  068A  0204               	subwf	4,w
  5521  068B  1803               	skipnc
  5522  068C  3400               	retlw	0
  5523  068D  3006               	movlw	high i1S4283
  5524  068E  008A               	movwf	10
  5525  068F  301E               	movlw	low i1S4283
  5526  0690  0704               	addwf	4,w
  5527  0691  0082               	movwf	2
  5528  0692  0008               	return
  5529  0693                     __end_of_convDig:	
  5530  007E                     btemp	set	126	;btemp
  5531  007E                     wtemp	set	126
  5532  007E                     wtemp0	set	126
  5533  0080                     wtemp1	set	128
  5534  0082                     wtemp2	set	130
  5535  0084                     wtemp3	set	132
  5536  0086                     wtemp4	set	134
  5537  0088                     wtemp5	set	136
  5538  007F                     wtemp6	set	127
  5539  007E                     ttemp	set	126
  5540  007E                     ttemp0	set	126
  5541  0081                     ttemp1	set	129
  5542  0084                     ttemp2	set	132
  5543  0087                     ttemp3	set	135
  5544  007F                     ttemp4	set	127
  5545  007E                     ltemp	set	126
  5546  007E                     ltemp0	set	126
  5547  0082                     ltemp1	set	130
  5548  0086                     ltemp2	set	134
  5549  0080                     ltemp3	set	128
  5550                           
  5551                           	psect	swtext1
  5552  061E                     __pswtext1:	
  5553  061E                     i1S4283:	
  5554  061E  2E79               	ljmp	i1l2481
  5555  061F  2E7A               	ljmp	i1l2485
  5556  0620  2E7B               	ljmp	i1l2489
  5557  0621  2E7C               	ljmp	i1l2493
  5558  0622  2E7D               	ljmp	i1l2497
  5559  0623  2E7E               	ljmp	i1l2501
  5560  0624  2E7F               	ljmp	i1l2505
  5561  0625  2E80               	ljmp	i1l2509
  5562  0626  2E81               	ljmp	i1l2513
  5563  0627  2E82               	ljmp	i1l2517
  5564  0628  2E86               	ljmp	i1l2533
  5565  0629  2E86               	ljmp	i1l2533
  5566  062A  2E86               	ljmp	i1l2533
  5567  062B  2E86               	ljmp	i1l2533
  5568  062C  2E83               	ljmp	i1l2521
  5569  062D  2E86               	ljmp	i1l2533
  5570  062E  2E86               	ljmp	i1l2533
  5571  062F  2E86               	ljmp	i1l2533
  5572  0630  2E86               	ljmp	i1l2533
  5573  0631  2E86               	ljmp	i1l2533
  5574  0632  2E86               	ljmp	i1l2533
  5575  0633  2E86               	ljmp	i1l2533
  5576  0634  2E86               	ljmp	i1l2533
  5577  0635  2E86               	ljmp	i1l2533
  5578  0636  2E84               	ljmp	i1l2525
  5579  0637  2E86               	ljmp	i1l2533
  5580  0638  2E86               	ljmp	i1l2533
  5581  0639  2E86               	ljmp	i1l2533
  5582  063A  2E86               	ljmp	i1l2533
  5583  063B  2E86               	ljmp	i1l2533
  5584  063C  2E86               	ljmp	i1l2533
  5585  063D  2E86               	ljmp	i1l2533
  5586  063E  2E85               	ljmp	i1l2529


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         25
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      65
    BANK1            80     22      39
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 9
		 -> EditAddressMemory@CellsData(BANK1[8]), DS_ReadData(BANK1[9]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_ReadCell
    _WriteArrayToEEPROM->_EEWR
    _ShowError->_setDigit
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___lbmod

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   16926
                                             35 BANK0      1     1      0
                                             14 BANK1      8     8      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
              _Reset_powerOnInterval
                        _Run_getInit
                        _Run_getTemp
                          _ShowError
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2404
                                             22 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Run_getInit                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            14    13      1    1636
                                             21 BANK0     14    13      1
                _FillArrayFromEEPROM
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   15    15      0    7208
                                             25 BANK0      1     1      0
                                              0 BANK1     14    14      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                          _ShowError
                                 _TX
                 _WriteArrayToEEPROM
                           _calc_crc
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     288
                                             13 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     433
                                             13 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     673
                                             16 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     161
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _TX                                                   7     6      1     549
                                             13 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ShowError                                            0     0      0     873
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             4     3      1    1188
                                             21 BANK0      4     3      1
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2     931
                                             16 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             13 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   6     6      0     269
                                             13 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _INIT                                                 5     5      0     229
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    1863
                                             22 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1     873
                                             18 BANK0      4     3      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     427
                                             13 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     436
                                             13 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    7     7      0    2241
                                              6 BANK0      7     7      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       6     6      0    2046
                                              0 BANK0      6     6      0
                            ___awdiv
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                         i1_calc_crc
 ---------------------------------------------------------------------------------
 (7) i1_calc_crc                                           6     5      1     313
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 7     6      1     358
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 6     6      0     183
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               5     5      0     158
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     406
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___lbdiv
     ___lbmod
     _clrInd
     _refreshInd
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___lbdiv
       ___lbmod
       _clrInd
       _refreshInd
       _setDigit
         ___lbdiv (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _ShowError
       _clrInd
       _refreshInd
       _setDigit
         ___lbdiv (ARG)
         ___lbmod (ARG)
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _calc_crc
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _waitInterrupt
   _Reset_powerOnInterval
   _Run_getInit
   _Run_getTemp
   _ShowError
     _clrInd
     _refreshInd
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___lbdiv (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___awdiv
       ___wmul (ARG)
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1_calc_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      27       7       48.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      41       3       81.3%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76      10        0.0%
ABS                  0      0      76       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec 16 00:25:23 2016

                      __CFG_CP$ON 0000                                 _F 031D              FindCell@addressStart 0040  
                               pc 0002                                ?_F 0070                                PL2 013C  
                              PL4 014B                                PL6 0156                                PL8 024F  
                              l73 07A9                                _RX 058A                                _TX 04F5  
                    ___awdiv@sign 007B                                fsr 0004               ___wmul@multiplicand 0072  
                      i1_calc_crc 05DB                               ??_F 0026                               PL10 0257  
                             PL12 0523                               PL14 0580                               PL16 0585  
                             ?_RX 0070                               ?_TX 002D                               l123 06F4  
                             l205 043F                               l147 04FE                               l351 0095  
                             l364 00C8                               l286 03E5                               l374 010F  
                             RX@d 0030                               l729 06BA                               RX@i 0031  
                             TX@i 0032                               _RA2 002A                               _RA5 002D  
                    __CFG_CPD$OFF 0000                               fsr0 0004                               indf 0000  
                     main@address 00B4                   ?_get_temp_Async 0070                      main@TheStart 00B3  
                            ??_RX 002D                              ??_TX 002E                      __CFG_LVP$OFF 0000  
                            F@dig 002B                    setPoint@dignum 002E                              l4111 0062  
                            l3331 06C7                              l4203 00E8                              l4131 0080  
                            l3317 06B4                              l3309 0747                              l4213 00F3  
                            l4117 006E                              l4109 005E                              l4231 0109  
                            l4223 00FC                              l3441 0591                              l4153 00A8  
                            l3347 0673                              l3339 065F                              l3427 0519  
                            l3419 050D                              l4243 0117                              l4235 010B  
                            l4219 00F7                              l4171 00C4                              l4155 00AC  
                            l3357 075F                              l4261 013A                              l4165 00C0  
                            l3287 0793                              l3519 06A9                              l3463 0600  
                            l4255 0129                              l3377 0710                              l3481 0614  
                            l3473 0606                              l3705 0472                              l3721 03D3  
                            l4177 00CB                              l3483 0619                              l3803 0296  
                            l3707 0476                              l3731 03E1                              l3723 03D7  
                            l4195 00DE                              l4099 004D                              l3733 03E7  
                            l3725 03D9                              l3807 0298                              l3743 040A  
                            l3497 064E                              l3817 02A0                              l3681 0457  
                            l3673 044C                              l3665 043D                              l3675 044F  
                            l3667 0443                              l3837 02B6                              l3693 0461  
                            l3757 0423                              l3847 02CE                              l3855 02E0  
                            l3863 02E5                              l3791 0284                              l3783 0278  
                            l3775 026A                              l3679 0455                              l3873 02F2  
                            l3793 0286                              l3795 028A                              l3887 02FE  
                            l3899 031A                              _EERD 0765                              _T0IF 005A  
                            _EEWR 06E2                              u4150 0313                              u4160 0314  
                            u3370 04E8                              u3380 04E9                              _INIT 04BD  
                            u4520 00B3                              u4530 00B4                              u3900 03F5  
                            u3910 03F6                              u4707 050A                              u4717 0513  
                            u4727 05A8                              u3880 03ED                              u4737 04C7  
                            u3970 0429                              u3890 03EE                              u4747 04D2  
                            u3980 042A                              u4757 04DD                              u4767 04EC  
                            i1_RX 05B4                              i1_TX 055A                              _TMR0 0001  
                            _main 002D                              _sign 005A                              btemp 007E  
                            ltemp 007E                              start 0010                              ttemp 007E  
                            wtemp 007E        WriteArrayToEEPROM@quantity 0031                    EEWR@INTCON_BUP 002F  
     WriteArrayToEEPROM@container 0033                       i1calc_crc@i 0074      __size_of_FillArrayFromEEPROM 0011  
                           ?_EERD 0070                             ?_EEWR 002D                             ?_INIT 0070  
                           ?i1_RX 0070                             ?i1_TX 0070                             INIT@b 0030  
                           ?_main 0070                   __end_of___awdiv 04BD                   __end_of___lbdiv 06C9  
                           _EEADR 009B                             RX@One 0032                     __CFG_WDTE$OFF 0000  
                 __end_of___lbmod 0677                             _CMCON 001F                             TX@One 0033  
                 ___awdiv@divisor 0076                             _T2CON 0012                             TX@cmd 002F  
                           i1l234 0333                             i1l147 0563                             i1l171 0172  
                           i1l175 01B3                             i1l184 01CC                             i1l187 01D6  
                           i1l189 024D                             i1l278 03BD                             i1RX@d 0073  
                           i1RX@i 0074                             i1TX@i 0075                   ___awdiv@counter 007A  
                           _PORTA 0005                             _PORTB 0006                             _TRISA 0085  
                           _TRISB 0086                     __CFG_PWRTE$ON 0000                   __end_of_indData 0433  
                 __end_of_convDig 0693                    __CFG_BOREN$OFF 0000                             pclath 000A  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                   ___lbdiv@divisor 002D  
          main@point_on_ind_delay 00AE                   ___lbdiv@counter 002F                  __end_of_FindCell 0478  
                    __end_of_EERD 0774                      __end_of_EEWR 06FA                      __end_of_INIT 04F5  
                    __end_ofi1_RX 05DB                      __end_ofi1_TX 0580                    __CFG_MCLRE$OFF 0000  
                 __initialization 0011                      __end_of_main 013C                      i1calc_crc@fb 0073  
              __size_of_CellToInd 001B                    EERD@EEDATA_BUP 002F                  __end_of_ReadCell 065B  
                          ??_EERD 002D                            ??_EEWR 002E                            ??_INIT 002D  
                          ??i1_RX 0070                            ??i1_TX 0071                       ?i1_calc_crc 0070  
                          ??_main 0043           ??_Reset_powerOnInterval 002D                      ReadCell@cell 0037  
                          i1S4283 061E                            _EEDATA 009A                            _EECON2 009D  
                ___awdiv@dividend 0078                            RX@Zero 002F                            TX@Zero 0031  
                          RX@line 002E                 F@CurrentKeysState 002C                            i1l2313 06D3  
                          i1l4001 0364                            i1l2331 0482                            i1l4011 036F  
                          i1l2501 067E                            i1l2309 06CB                            i1l4021 037E  
                          i1l4013 0370                            i1l2415 0578                            i1l2407 056F  
                          i1l4007 036A                            i1l2521 0683                            i1l2513 0681  
                          i1l2505 067F                            i1l2337 048B                            i1l4033 0396  
                          i1l4017 0377                            i1l2363 04B8                            i1l2347 0499  
                          i1l2533 0686                            i1l2525 0684                            i1l2517 0682  
                          i1l2509 0680                            i1l2429 05BA                            i1l4061 03B2  
                          i1l4045 03BA                            i1l4029 038B                            i1l2359 04B0  
                          i1l4063 03B6                            i1l4039 03A0                            i1l4047 03A8  
                          i1l2529 0685                            i1l2481 0679                            i1l2539 0687  
                          i1l4067 03BC                            i1l2493 067C                            i1l2485 067A  
                          i1l3525 05DE                            i1l3543 05F3                            i1l3535 05E5  
                          i1l3615 01F4                            i1l2497 067D                            i1l2489 067B  
                          i1l3545 05F8                            i1l3625 020A                            i1l3617 01DD  
                          i1l3651 0247                            i1l3619 01F8                            i1l3653 0249  
                          i1l3581 0195                            i1l3573 0180                            i1l3575 0182  
                          i1l3593 01BD                            i1l3963 0334                            i1l3981 0350  
                          i1l3995 035E                            i1l3987 0357                            i1l3979 034C  
                          TX@line 002D                            i1l3999 0363                            _INTCON 000B  
                          TX@temp 0030                            u195_25 04A2                            i1_INIT 0529  
                          u198_20 054F                            u199_20 0550                            u480_27 0532  
                          u481_27 053B                            u482_27 0544                            u483_27 0553  
                          u477_27 056C                            u478_27 0572                            u479_27 05D1  
                __end_of_calc_crc 061E                            _TRISA4 042C                            ___wmul 06C9  
                       ??___awdiv 007A                         ??___lbdiv 002E                         ??___lbmod 002E  
                          _clrInd 07A1                            _digits 004A                  ___awdiv@quotient 007C  
                       ??_indData 0036                  __end_of_setDigit 0745                         ??_convDig 0070  
              __size_of_ShowError 000E                  __end_of_setPoint 0765                            saved_w 007E  
               _EditAddressMemory 025F                 __end_of_CellToInd 06AE                  ___lbdiv@dividend 002E  
              ?_EditAddressMemory 0070                   ___lbmod@divisor 002D           __end_of__initialization 002B  
                  EERD@INTCON_BUP 002E                   ___lbmod@counter 0030               __size_ofi1_calc_crc 0022  
      __end_of_WriteArrayToEEPROM 0721               ??_EditAddressMemory 0039                    __pcstackCOMMON 0070  
                    __pidataBANK1 0000             __end_of_waitInterrupt 07AC                     ??_Run_getInit 002D  
                   ??_Run_getTemp 002D                     i1calc_crc@dat 0072                     i1calc_crc@crc 0075  
                   i1calc_crc@len 0070                     i1calc_crc@mas 0071                        __end_ofPL2 014B  
                      __end_ofPL4 0156                        __end_ofPL6 015D                        __end_ofPL8 0257  
                ___lbdiv@quotient 0030                        __end_of_RX 05B4                        __end_of_TX 0523  
                ??_get_temp_Async 0020                       F@long_press 0057        EditAddressMemory@CellsData 00A0  
       __end_of_EditAddressMemory 031D                         ?_FindCell 0035               _FillArrayFromEEPROM 0745  
     EditAddressMemory@RereadCell 00A9                        __pbssBANK0 0044                           ?i1_INIT 0070  
                       ?_ReadCell 0035                           INIT@One 0031                 __end_of_PortAData 078B  
               __end_of_ShowError 0782                        __pmaintext 002D      EditAddressMemory@CellIsEmpty 00AA  
                    _endInterrupt 0301              ?_FillArrayFromEEPROM 0030                           ?___wmul 0070  
                         ?_clrInd 0070                        __pintentry 0004                           i1INIT@b 0073  
                      __size_of_F 00AB                         ?_calc_crc 002D               __end_of_Run_getInit 0733  
                         i1RX@One 0075               __end_of_Run_getTemp 070E                           i1TX@One 0076  
                         i1TX@cmd 0072  FillArrayFromEEPROM@address_start 0030                        ??_FindCell 0036  
                      calc_crc@fb 002F                   Run_getInit@line 002D                      _Broadcasting 0300  
                      __stringtab 0782                 ReadCell@CellsData 0035                        ??_ReadCell 0036  
                 __size_ofi1_INIT 0031                           _KeyCode 005F                         ?_setDigit 0032  
                       ?_setPoint 002D               get_temp_Async@temp1 0023               get_temp_Async@temp2 0024  
           ??_FillArrayFromEEPROM 0032                   Run_getTemp@line 002D                           ___awdiv 0478  
                         ___lbdiv 06AE                           ___lbmod 065B                   __size_of___wmul 0019  
                 __size_of_clrInd 0006                      ??i1_calc_crc 0071                         i1INIT@One 0074  
                         __ptext1 03C8                           __ptext2 06FA                           __ptext3 0721  
                         __ptext4 079B                           __ptext5 0433                           __ptext6 025F  
                         __ptext7 0756                           __ptext8 05FD                           __ptext9 070E  
                         _indData 03C8                           _convDig 0677                        ??_calc_crc 002E  
      __size_of_EditAddressMemory 00BE    __size_of_Reset_powerOnInterval 0006     __end_of_Reset_powerOnInterval 07A1  
                         clrloop0 078C              end_of_initialization 002B                        _refreshInd 0793  
              __end_ofi1_calc_crc 05FD                        ??_setDigit 0033                        ??_setPoint 002E  
                       FindCell@i 0041                       _Run_getInit 0721                       _Run_getTemp 06FA  
                FindCell@previous 0035                  ___lbmod@dividend 002F               WriteArrayToEEPROM@i 0034  
                      convDig@dig 0070                       ___lbmod@rem 0031                   F@KeyTimeCounter 0050  
                       _CellToInd 0693                         ReadCell@i 0038                    __end_ofi1_INIT 055A  
                   setPoint@value 002D                    __end_of___wmul 06E2      EditAddressMemory@ErrorShowed 00A8  
                  __end_of_clrInd 07A7                     __pbitbssBANK0 0300                _WriteArrayToEEPROM 070E  
                     __end_ofPL10 025F                       __end_ofPL12 0529                       __end_ofPL14 0585  
                     __end_ofPL16 058A               start_initialization 0011   WriteArrayToEEPROM@address_start 0030  
             ?_WriteArrayToEEPROM 0030                 __size_of_FindCell 0045                       ?_refreshInd 0070  
                        ??i1_INIT 0070      FillArrayFromEEPROM@container 0033                        ?_CellToInd 0070  
               __size_of_ReadCell 001C                         _PortAData 0788              ??_WriteArrayToEEPROM 0032  
              EditAddressMemory@i 00AB                         _ShowError 0774                          ??___wmul 0074  
                        ??_clrInd 002D                       __pdataBANK1 00B6                          EEWR@data 002D  
                    setDigit@data 0032                         ___latbits 0000                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                 __size_of_calc_crc 0021            EditAddressMemory@i_256 00AC  
                        INIT@Zero 002F                          INIT@line 002E                         __end_of_F 03C8  
          __size_of_waitInterrupt 0005                         __pnvBANK0 005D                 __size_of_setDigit 0012  
                      ?_ShowError 0070                 __size_of_setPoint 000F                          ?___awdiv 0076  
                        ?___lbdiv 002D                          ?___lbmod 002D               __size_of_refreshInd 0008  
                       __pstrings 0782                         calc_crc@i 0031                          ?_indData 0070  
                       __pswtext1 061E                          ?_convDig 0070                get_temp_Async@line 0025  
         __size_of_get_temp_Async 00F2                   get_temp_Async@i 0022                       __size_of_RX 002A  
                     __size_of_TX 002E                 interrupt_function 0004                   FindCell@address 0042  
                  ___wmul@product 0074                       ??_CellToInd 0036       __end_of_FillArrayFromEEPROM 0756  
                        i1RX@Zero 0072                         clear_ram0 078B                          i1TX@Zero 0074  
                        i1RX@line 0071                          i1TX@line 0070                          i1TX@temp 0073  
                       _temp_drob 005B                       calc_crc@dat 002E                       calc_crc@crc 0032  
                     calc_crc@len 002D                       calc_crc@mas 0030                         indData@dN 003A  
                       indData@cd 003B                     _waitInterrupt 07A7                      ?_Run_getInit 0070  
                    ?_Run_getTemp 0070                FindCell@addressNew 003E                       __stringbase 0787  
               FindCell@CellsData 0036                 ___wmul@multiplier 0070                   _powerOnInterval 005D  
                  F@LastKeysState 0056                          _FindCell 0433             _Reset_powerOnInterval 079B  
                        _ReadCell 063F                        _EECON1bits 009C              FillArrayFromEEPROM@i 0034  
                  indData@isPoint 0038                       ??_ShowError 0036                    ?_waitInterrupt 0070  
                __size_of___awdiv 0045                  __size_of___lbdiv 001B                  __size_of___lbmod 001C  
                   _getTemp_flags 0044                __end_of__stringtab 0788             EditAddressMemory@cell 00AD  
     FillArrayFromEEPROM@quantity 0031                          _calc_crc 05FD                  __size_of_indData 006B  
                __size_of_convDig 001C                      F@DigitNumber 0055                         setDigit@a 0035  
                      i1INIT@Zero 0072                          _main$272 00B0                       EERD@address 002D  
                      i1INIT@line 0071                          _digits_0 004D                          _digitemp 0059  
                        __ptext10 07A7                          __ptext11 06E2                          __ptext20 0733  
                        __ptext12 04F5                          __ptext21 0793                          __ptext13 0774  
                        __ptext30 0529                          __ptext22 07A1                          __ptext14 063F  
                        __ptext31 06C9                          __ptext23 065B                          __ptext15 0745  
                        __ptext32 0478                          __ptext24 06AE                          __ptext16 0765  
                        __ptext33 0677                          __ptext25 031D                          __ptext17 058A  
                        __ptext26 015D                          __ptext18 04BD                          __ptext27 05DB  
                        __ptext19 0693                          __ptext28 055A                          __ptext29 05B4  
                    ??_refreshInd 002D                     __size_of_EERD 000F                     __size_of_EEWR 0018  
                   __size_of_INIT 0038                     __size_ofi1_RX 0027                     __size_ofi1_TX 0026  
                     _DS_ReadData 00B6                     __size_of_main 010F                          _setDigit 0733  
                        _setPoint 0756                          indData@v 0039                      _PowerBlocked 0058  
                        main@cell 00B2                          main@line 00B5                __end_of_refreshInd 079B  
                      _INTCONbits 000B            ?_Reset_powerOnInterval 0070                    _get_temp_Async 015D  
                        intlevel1 0000                        _DS_Address 00BF                         stringcode 0782  
                 ??_waitInterrupt 002D                       EEWR@address 002E               F@ButtonPressTimeIn1 0052  
             F@ButtonPressTimeIn2 0053       __size_of_WriteArrayToEEPROM 0013               F@ButtonPressTimeOut 0054  
                   CellToInd@cell 0036                      indData@v_240 0037              __size_of_Run_getInit 0012  
            __size_of_Run_getTemp 0014                        _OPTION_REG 0081                       _temperature 005C  
                        stringdir 0782                          stringtab 0782            __end_of_get_temp_Async 024F  
              __CFG_FOSC$INTOSCIO 0000               FindCell@CellIsEmpty 003F  
