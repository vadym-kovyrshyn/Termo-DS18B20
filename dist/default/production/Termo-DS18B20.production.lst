

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Sun Dec 04 15:34:19 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	swtext1,local,class=CONST,delta=2
    53                           	psect	pa_nodes,global,class=CODE,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0092                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009F                     	;# 
    92                           
    93                           	psect	eeprom_data
    94  0000  0028 00FF 00A2 00D1 0064 0015 0001 0000 	db	40,255,162,209,100,21,1,0	;# 
    95  0008  0028 00FF 00BE 00AC 0064 0015 0001 0068 	db	40,255,190,172,100,21,1,104	;# 
    96  0010  0028 00FF 00F8 00E7 0063 0015 0002 00F1 	db	40,255,248,231,99,21,2,241	;# 
    97  0018  0028 00FF 00EC 0095 0063 0015 0002 003D 	db	40,255,236,149,99,21,2,61	;# 
    98  0020  0028 00FF 0000 0093 0063 0015 0002 00CF 	db	40,255,0,147,99,21,2,207	;# 
    99  0028  0028 00FF 001D 00A8 0063 0015 0002 0083 	db	40,255,29,168,99,21,2,131	;# 
   100  0030  0028 00FF 0029 0089 0063 0015 0002 00E7 	db	40,255,41,137,99,21,2,231	;# 
   101  0038  0028 00FF 002A 00A8 0063 0015 0002 0056 	db	40,255,42,168,99,21,2,86	;# 
   102  0040  0028 00FF 00A5 00D4 0063 0015 0002 0048 	db	40,255,165,212,99,21,2,72	;# 
   103  0048  0028 00FF 0065 00D3 0063 0015 0002 00EC 	db	40,255,101,211,99,21,2,236	;# 
   104  0050  0028 00FF 0013 00E7 0063 0015 0002 005B 	db	40,255,19,231,99,21,2,91	;# 
   105  0058  0028 00FF 0041 00A7 0063 0015 0002 00AD 	db	40,255,65,167,99,21,2,173	;# 
   106                           
   107                           	psect	idataBANK1
   108  0000                     __pidataBANK1:	
   109                           
   110                           	psect	strings
   111  07D1                     __pstrings:	
   112  07D1                     stringtab:	
   113  07D1                     __stringtab:	
   114  07D1                     stringcode:	
   115                           ;	String table - string pointers are 1 byte each
   116                           
   117  07D1                     stringdir:	
   118  07D1  3007               	movlw	high stringdir
   119  07D2  008A               	movwf	10
   120  07D3  0804               	movf	4,w
   121  07D4  0A84               	incf	4,f
   122  07D5  0782               	addwf	2,f
   123  07D6                     __stringbase:	
   124  07D6  3400               	retlw	0
   125  07D7                     __end_of__stringtab:	
   126  07D7                     _PortAData:	
   127  07D7  3480               	retlw	128
   128  07D8  3440               	retlw	64
   129  07D9  3401               	retlw	1
   130  07DA                     __end_of_PortAData:	
   131                           
   132                           	psect	nvBANK0
   133  005D                     __pnvBANK0:	
   134  005D                     _powerOnInterval:	
   135  005D                     	ds	2
   136  005F                     _KeyCode:	
   137  005F                     	ds	1
   138  001F                     _CMCON	set	31
   139  000B                     _INTCON	set	11
   140  000B                     _INTCONbits	set	11
   141  0005                     _PORTA	set	5
   142  0006                     _PORTB	set	6
   143  0012                     _T2CON	set	18
   144  0001                     _TMR0	set	1
   145  002A                     _RA2	set	42
   146  002D                     _RA5	set	45
   147  005A                     _T0IF	set	90
   148  009B                     _EEADR	set	155
   149  009C                     _EECON1bits	set	156
   150  009D                     _EECON2	set	157
   151  009A                     _EEDATA	set	154
   152  0081                     _OPTION_REG	set	129
   153  0085                     _TRISA	set	133
   154  0086                     _TRISB	set	134
   155  042C                     _TRISA4	set	1068
   156                           
   157                           ; #config settings
   158  0000                     
   159                           	psect	cinit
   160  0011                     start_initialization:	
   161  0011                     __initialization:	
   162  0011  30FF               	movlw	255
   163                           
   164                           ; Initialize objects allocated to BANK1
   165  0012  1683               	bsf	3,5	;RP0=1, select bank1
   166                           
   167                           ;initializer for _DS_ReadData
   168  0013  00B6               	movwf	__pdataBANK1& (0+127)
   169  0014  00B7               	movwf	(__pdataBANK1+1)& (0+127)
   170  0015  00B8               	movwf	(__pdataBANK1+2)& (0+127)
   171  0016  00B9               	movwf	(__pdataBANK1+3)& (0+127)
   172  0017  00BA               	movwf	(__pdataBANK1+4)& (0+127)
   173  0018  00BB               	movwf	(__pdataBANK1+5)& (0+127)
   174  0019  00BC               	movwf	(__pdataBANK1+6)& (0+127)
   175  001A  00BD               	movwf	(__pdataBANK1+7)& (0+127)
   176  001B  00BE               	movwf	(__pdataBANK1+8)& (0+127)
   177                           
   178                           ;initializer for _DS_Address
   179  001C  00BF               	movwf	(__pdataBANK1+9)& (0+127)
   180  001D  00C0               	movwf	(__pdataBANK1+10)& (0+127)
   181  001E  00C1               	movwf	(__pdataBANK1+11)& (0+127)
   182  001F  00C2               	movwf	(__pdataBANK1+12)& (0+127)
   183  0020  00C3               	movwf	(__pdataBANK1+13)& (0+127)
   184  0021  00C4               	movwf	(__pdataBANK1+14)& (0+127)
   185  0022  00C5               	movwf	(__pdataBANK1+15)& (0+127)
   186  0023  00C6               	movwf	(__pdataBANK1+16)& (0+127)
   187  0024  3044               	movlw	low __pbssBANK0
   188                           
   189                           ; Clear objects allocated to BANK0
   190  0025  1383               	bcf	3,7	;select IRP bank0
   191  0026  0084               	movwf	4
   192  0027  305D               	movlw	low (__pbssBANK0+25)
   193  0028  27DA               	fcall	clear_ram0
   194                           
   195                           ; Clear objects allocated to BITBANK0
   196  0029  1283               	bcf	3,5	;RP0=0, select bank0
   197  002A  01E0               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   198  002B                     end_of_initialization:	
   199                           ;End of C runtime variable initialization code
   200                           
   201  002B                     __end_of__initialization:	
   202  002B  0183               	clrf	3
   203  002C  292D               	ljmp	_main	;jump to C main() function
   204                           
   205                           	psect	bssBANK0
   206  0044                     __pbssBANK0:	
   207  0044                     _getTemp_flags:	
   208  0044                     	ds	6
   209  004A                     _digits:	
   210  004A                     	ds	3
   211  004D                     _digits_0:	
   212  004D                     	ds	3
   213  0050                     F@KeyTimeCounter:	
   214  0050                     	ds	2
   215  0052                     F@ButtonPressTimeIn1:	
   216  0052                     	ds	1
   217  0053                     F@ButtonPressTimeIn2:	
   218  0053                     	ds	1
   219  0054                     F@ButtonPressTimeOut:	
   220  0054                     	ds	1
   221  0055                     F@DigitNumber:	
   222  0055                     	ds	1
   223  0056                     F@LastKeysState:	
   224  0056                     	ds	1
   225  0057                     F@long_press:	
   226  0057                     	ds	1
   227  0058                     _PowerBlocked:	
   228  0058                     	ds	1
   229  0059                     _digitemp:	
   230  0059                     	ds	1
   231  005A                     _sign:	
   232  005A                     	ds	1
   233  005B                     _temp_drob:	
   234  005B                     	ds	1
   235  005C                     _temperature:	
   236  005C                     	ds	1
   237                           
   238                           	psect	bitbssBANK0
   239  0300                     __pbitbssBANK0:	
   240  0300                     _Broadcasting:	
   241  0300                     	ds	1
   242  0301                     _endInterrupt:	
   243  0301                     	ds	1
   244                           
   245                           	psect	dataBANK1
   246  00B6                     __pdataBANK1:	
   247  00B6                     _DS_ReadData:	
   248  00B6                     	ds	9
   249  00BF                     _DS_Address:	
   250  00BF                     	ds	8
   251                           
   252                           	psect	clrtext
   253  07DA                     clear_ram0:	
   254                           ;	Called with FSR containing the base address, and
   255                           ;	W with the last address+1
   256                           
   257  07DA  0064               	clrwdt	;clear the watchdog before getting into this loop
   258  07DB                     clrloop0:	
   259  07DB  0180               	clrf	0	;clear RAM location pointed to by FSR
   260  07DC  0A84               	incf	4,f	;increment pointer
   261  07DD  0604               	xorwf	4,w	;XOR with final address
   262  07DE  1903               	btfsc	3,2	;have we reached the end yet?
   263  07DF  3400               	retlw	0	;all done for this memory range, return
   264  07E0  0604               	xorwf	4,w	;XOR again to restore value
   265  07E1  2FDB               	goto	clrloop0	;do the next byte
   266                           
   267                           	psect	cstackBANK1
   268  00A0                     __pcstackBANK1:	
   269  00A0                     EditAddressMemory@CellsData:	
   270                           
   271                           ; 8 bytes @ 0x0
   272  00A0                     	ds	8
   273  00A8                     EditAddressMemory@ErrorShowed:	
   274                           
   275                           ; 1 bytes @ 0x8
   276  00A8                     	ds	1
   277  00A9                     EditAddressMemory@RereadCell:	
   278                           
   279                           ; 1 bytes @ 0x9
   280  00A9                     	ds	1
   281  00AA                     EditAddressMemory@CellIsEmpty:	
   282                           
   283                           ; 1 bytes @ 0xA
   284  00AA                     	ds	1
   285  00AB                     EditAddressMemory@i:	
   286                           
   287                           ; 1 bytes @ 0xB
   288  00AB                     	ds	1
   289  00AC                     EditAddressMemory@i_264:	
   290                           
   291                           ; 1 bytes @ 0xC
   292  00AC                     	ds	1
   293  00AD                     EditAddressMemory@cell:	
   294                           
   295                           ; 1 bytes @ 0xD
   296  00AD                     	ds	1
   297  00AE                     main@point_on_ind_delay:	
   298                           
   299                           ; 2 bytes @ 0xE
   300  00AE                     	ds	2
   301  00B0                     _main$278:	
   302                           
   303                           ; 2 bytes @ 0x10
   304  00B0                     	ds	2
   305  00B2                     main@TheStart:	
   306                           
   307                           ; 1 bytes @ 0x12
   308  00B2                     	ds	1
   309  00B3                     main@cell:	
   310                           
   311                           ; 1 bytes @ 0x13
   312  00B3                     	ds	1
   313  00B4                     main@address:	
   314                           
   315                           ; 1 bytes @ 0x14
   316  00B4                     	ds	1
   317  00B5                     main@line:	
   318                           
   319                           ; 1 bytes @ 0x15
   320  00B5                     	ds	1
   321                           
   322                           	psect	cstackCOMMON
   323  0070                     __pcstackCOMMON:	
   324  0070                     ?_waitInterrupt:	
   325  0070                     ?_Reset_powerOnInterval:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_refreshInd:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_clrInd:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_ShowError:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_convDig:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ??_convDig:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_EERD:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_INIT:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_RX:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_get_temp_Async:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_F:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_indData:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_CellToInd:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_EditAddressMemory:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_Run_getTemp:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_main:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?i1_INIT:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ??i1_INIT:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?i1_TX:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?i1_RX:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ??i1_RX:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?i1_calc_crc:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?___wmul:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     convDig@dig:	
   395                           ; 2 bytes @ 0x0
   396                           
   397  0070                     i1TX@line:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     i1calc_crc@len:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ___wmul@multiplier:	
   404                           ; 1 bytes @ 0x0
   405                           
   406                           
   407                           ; 2 bytes @ 0x0
   408  0070                     	ds	1
   409  0071                     ??i1_TX:	
   410  0071                     ??i1_calc_crc:	
   411                           ; 1 bytes @ 0x1
   412                           
   413  0071                     i1INIT@line:	
   414                           ; 1 bytes @ 0x1
   415                           
   416  0071                     i1RX@line:	
   417                           ; 1 bytes @ 0x1
   418                           
   419  0071                     i1calc_crc@mas:	
   420                           ; 1 bytes @ 0x1
   421                           
   422                           
   423                           ; 1 bytes @ 0x1
   424  0071                     	ds	1
   425  0072                     i1INIT@Zero:	
   426  0072                     i1TX@cmd:	
   427                           ; 1 bytes @ 0x2
   428                           
   429  0072                     i1RX@Zero:	
   430                           ; 1 bytes @ 0x2
   431                           
   432  0072                     i1calc_crc@dat:	
   433                           ; 1 bytes @ 0x2
   434                           
   435  0072                     ___wmul@multiplicand:	
   436                           ; 1 bytes @ 0x2
   437                           
   438                           
   439                           ; 2 bytes @ 0x2
   440  0072                     	ds	1
   441  0073                     i1INIT@b:	
   442  0073                     i1TX@temp:	
   443                           ; 1 bytes @ 0x3
   444                           
   445  0073                     i1RX@d:	
   446                           ; 1 bytes @ 0x3
   447                           
   448  0073                     i1calc_crc@fb:	
   449                           ; 1 bytes @ 0x3
   450                           
   451                           
   452                           ; 1 bytes @ 0x3
   453  0073                     	ds	1
   454  0074                     ??___wmul:	
   455  0074                     i1INIT@One:	
   456                           ; 1 bytes @ 0x4
   457                           
   458  0074                     i1TX@Zero:	
   459                           ; 1 bytes @ 0x4
   460                           
   461  0074                     i1RX@i:	
   462                           ; 1 bytes @ 0x4
   463                           
   464  0074                     i1calc_crc@i:	
   465                           ; 1 bytes @ 0x4
   466                           
   467  0074                     ___wmul@product:	
   468                           ; 1 bytes @ 0x4
   469                           
   470                           
   471                           ; 2 bytes @ 0x4
   472  0074                     	ds	1
   473  0075                     i1TX@i:	
   474  0075                     i1RX@One:	
   475                           ; 1 bytes @ 0x5
   476                           
   477  0075                     i1calc_crc@crc:	
   478                           ; 1 bytes @ 0x5
   479                           
   480                           
   481                           ; 1 bytes @ 0x5
   482  0075                     	ds	1
   483  0076                     ?i1___awdiv:	
   484  0076                     i1TX@One:	
   485                           ; 2 bytes @ 0x6
   486                           
   487  0076                     i1___awdiv@divisor:	
   488                           ; 1 bytes @ 0x6
   489                           
   490                           
   491                           ; 2 bytes @ 0x6
   492  0076                     	ds	2
   493  0078                     i1___awdiv@dividend:	
   494                           
   495                           ; 2 bytes @ 0x8
   496  0078                     	ds	2
   497  007A                     ??i1___awdiv:	
   498  007A                     i1___awdiv@counter:	
   499                           ; 1 bytes @ 0xA
   500                           
   501                           
   502                           ; 1 bytes @ 0xA
   503  007A                     	ds	1
   504  007B                     i1___awdiv@sign:	
   505                           
   506                           ; 1 bytes @ 0xB
   507  007B                     	ds	1
   508  007C                     i1___awdiv@quotient:	
   509                           
   510                           ; 2 bytes @ 0xC
   511  007C                     	ds	2
   512                           
   513                           	psect	cstackBANK0
   514  0020                     __pcstackBANK0:	
   515  0020                     ??_get_temp_Async:	
   516                           
   517                           ; 1 bytes @ 0x0
   518  0020                     	ds	2
   519  0022                     get_temp_Async@i:	
   520                           
   521                           ; 1 bytes @ 0x2
   522  0022                     	ds	1
   523  0023                     get_temp_Async@temp1:	
   524                           
   525                           ; 1 bytes @ 0x3
   526  0023                     	ds	1
   527  0024                     get_temp_Async@temp2:	
   528                           
   529                           ; 1 bytes @ 0x4
   530  0024                     	ds	1
   531  0025                     get_temp_Async@line:	
   532                           
   533                           ; 1 bytes @ 0x5
   534  0025                     	ds	1
   535  0026                     ??_F:	
   536                           
   537                           ; 1 bytes @ 0x6
   538  0026                     	ds	5
   539  002B                     F@dig:	
   540                           
   541                           ; 1 bytes @ 0xB
   542  002B                     	ds	1
   543  002C                     F@CurrentKeysState:	
   544                           
   545                           ; 1 bytes @ 0xC
   546  002C                     	ds	1
   547  002D                     ??_waitInterrupt:	
   548  002D                     ??_Reset_powerOnInterval:	
   549                           ; 1 bytes @ 0xD
   550                           
   551  002D                     ?_setPoint:	
   552                           ; 1 bytes @ 0xD
   553                           
   554  002D                     ??_refreshInd:	
   555                           ; 1 bytes @ 0xD
   556                           
   557  002D                     ??_clrInd:	
   558                           ; 1 bytes @ 0xD
   559                           
   560  002D                     ?_EEWR:	
   561                           ; 1 bytes @ 0xD
   562                           
   563  002D                     ??_EERD:	
   564                           ; 1 bytes @ 0xD
   565                           
   566  002D                     ??_INIT:	
   567                           ; 1 bytes @ 0xD
   568                           
   569  002D                     ?_TX:	
   570                           ; 1 bytes @ 0xD
   571                           
   572  002D                     ??_RX:	
   573                           ; 1 bytes @ 0xD
   574                           
   575  002D                     ?_calc_crc:	
   576                           ; 1 bytes @ 0xD
   577                           
   578  002D                     ??_Run_getTemp:	
   579                           ; 1 bytes @ 0xD
   580                           
   581  002D                     ?___lbdiv:	
   582                           ; 1 bytes @ 0xD
   583                           
   584  002D                     ?___lbmod:	
   585                           ; 1 bytes @ 0xD
   586                           
   587  002D                     ?___awdiv:	
   588                           ; 1 bytes @ 0xD
   589                           
   590  002D                     ?___awmod:	
   591                           ; 2 bytes @ 0xD
   592                           
   593  002D                     setPoint@value:	
   594                           ; 2 bytes @ 0xD
   595                           
   596  002D                     EEWR@data:	
   597                           ; 1 bytes @ 0xD
   598                           
   599  002D                     EERD@address:	
   600                           ; 1 bytes @ 0xD
   601                           
   602  002D                     TX@line:	
   603                           ; 1 bytes @ 0xD
   604                           
   605  002D                     calc_crc@len:	
   606                           ; 1 bytes @ 0xD
   607                           
   608  002D                     Run_getTemp@line:	
   609                           ; 1 bytes @ 0xD
   610                           
   611  002D                     ___lbdiv@divisor:	
   612                           ; 1 bytes @ 0xD
   613                           
   614  002D                     ___lbmod@divisor:	
   615                           ; 1 bytes @ 0xD
   616                           
   617  002D                     ___awdiv@divisor:	
   618                           ; 1 bytes @ 0xD
   619                           
   620  002D                     ___awmod@divisor:	
   621                           ; 2 bytes @ 0xD
   622                           
   623                           
   624                           ; 2 bytes @ 0xD
   625  002D                     	ds	1
   626  002E                     ??_setPoint:	
   627  002E                     ??_EEWR:	
   628                           ; 1 bytes @ 0xE
   629                           
   630  002E                     ??_TX:	
   631                           ; 1 bytes @ 0xE
   632                           
   633  002E                     ??_calc_crc:	
   634                           ; 1 bytes @ 0xE
   635                           
   636  002E                     ??___lbdiv:	
   637                           ; 1 bytes @ 0xE
   638                           
   639  002E                     ??___lbmod:	
   640                           ; 1 bytes @ 0xE
   641                           
   642  002E                     setPoint@dignum:	
   643                           ; 1 bytes @ 0xE
   644                           
   645  002E                     EEWR@address:	
   646                           ; 1 bytes @ 0xE
   647                           
   648  002E                     EERD@INTCON_BUP:	
   649                           ; 1 bytes @ 0xE
   650                           
   651  002E                     INIT@line:	
   652                           ; 1 bytes @ 0xE
   653                           
   654  002E                     RX@line:	
   655                           ; 1 bytes @ 0xE
   656                           
   657  002E                     calc_crc@dat:	
   658                           ; 1 bytes @ 0xE
   659                           
   660  002E                     ___lbdiv@dividend:	
   661                           ; 1 bytes @ 0xE
   662                           
   663                           
   664                           ; 1 bytes @ 0xE
   665  002E                     	ds	1
   666  002F                     EEWR@INTCON_BUP:	
   667  002F                     EERD@EEDATA_BUP:	
   668                           ; 1 bytes @ 0xF
   669                           
   670  002F                     INIT@Zero:	
   671                           ; 1 bytes @ 0xF
   672                           
   673  002F                     TX@cmd:	
   674                           ; 1 bytes @ 0xF
   675                           
   676  002F                     RX@Zero:	
   677                           ; 1 bytes @ 0xF
   678                           
   679  002F                     calc_crc@fb:	
   680                           ; 1 bytes @ 0xF
   681                           
   682  002F                     ___lbdiv@counter:	
   683                           ; 1 bytes @ 0xF
   684                           
   685  002F                     ___lbmod@dividend:	
   686                           ; 1 bytes @ 0xF
   687                           
   688  002F                     ___awdiv@dividend:	
   689                           ; 1 bytes @ 0xF
   690                           
   691  002F                     ___awmod@dividend:	
   692                           ; 2 bytes @ 0xF
   693                           
   694                           
   695                           ; 2 bytes @ 0xF
   696  002F                     	ds	1
   697  0030                     ?_FillArrayFromEEPROM:	
   698  0030                     ?_WriteArrayToEEPROM:	
   699                           ; 1 bytes @ 0x10
   700                           
   701  0030                     FillArrayFromEEPROM@address_start:	
   702                           ; 1 bytes @ 0x10
   703                           
   704  0030                     WriteArrayToEEPROM@address_start:	
   705                           ; 1 bytes @ 0x10
   706                           
   707  0030                     INIT@b:	
   708                           ; 1 bytes @ 0x10
   709                           
   710  0030                     TX@temp:	
   711                           ; 1 bytes @ 0x10
   712                           
   713  0030                     RX@d:	
   714                           ; 1 bytes @ 0x10
   715                           
   716  0030                     calc_crc@mas:	
   717                           ; 1 bytes @ 0x10
   718                           
   719  0030                     ___lbdiv@quotient:	
   720                           ; 1 bytes @ 0x10
   721                           
   722  0030                     ___lbmod@counter:	
   723                           ; 1 bytes @ 0x10
   724                           
   725                           
   726                           ; 1 bytes @ 0x10
   727  0030                     	ds	1
   728  0031                     ??___awdiv:	
   729  0031                     ??___awmod:	
   730                           ; 1 bytes @ 0x11
   731                           
   732  0031                     FillArrayFromEEPROM@quantity:	
   733                           ; 1 bytes @ 0x11
   734                           
   735  0031                     WriteArrayToEEPROM@quantity:	
   736                           ; 1 bytes @ 0x11
   737                           
   738  0031                     INIT@One:	
   739                           ; 1 bytes @ 0x11
   740                           
   741  0031                     TX@Zero:	
   742                           ; 1 bytes @ 0x11
   743                           
   744  0031                     RX@i:	
   745                           ; 1 bytes @ 0x11
   746                           
   747  0031                     calc_crc@i:	
   748                           ; 1 bytes @ 0x11
   749                           
   750  0031                     ___awdiv@counter:	
   751                           ; 1 bytes @ 0x11
   752                           
   753  0031                     ___awmod@counter:	
   754                           ; 1 bytes @ 0x11
   755                           
   756  0031                     ___lbmod@rem:	
   757                           ; 1 bytes @ 0x11
   758                           
   759                           
   760                           ; 1 bytes @ 0x11
   761  0031                     	ds	1
   762  0032                     ??_FillArrayFromEEPROM:	
   763  0032                     ??_WriteArrayToEEPROM:	
   764                           ; 1 bytes @ 0x12
   765                           
   766  0032                     TX@i:	
   767                           ; 1 bytes @ 0x12
   768                           
   769  0032                     RX@One:	
   770                           ; 1 bytes @ 0x12
   771                           
   772  0032                     calc_crc@crc:	
   773                           ; 1 bytes @ 0x12
   774                           
   775  0032                     ___awdiv@sign:	
   776                           ; 1 bytes @ 0x12
   777                           
   778  0032                     ___awmod@sign:	
   779                           ; 1 bytes @ 0x12
   780                           
   781                           
   782                           ; 1 bytes @ 0x12
   783  0032                     	ds	1
   784  0033                     FillArrayFromEEPROM@container:	
   785  0033                     WriteArrayToEEPROM@container:	
   786                           ; 1 bytes @ 0x13
   787                           
   788  0033                     TX@One:	
   789                           ; 1 bytes @ 0x13
   790                           
   791  0033                     ___awdiv@quotient:	
   792                           ; 1 bytes @ 0x13
   793                           
   794                           
   795                           ; 2 bytes @ 0x13
   796  0033                     	ds	1
   797  0034                     FillArrayFromEEPROM@i:	
   798  0034                     WriteArrayToEEPROM@i:	
   799                           ; 1 bytes @ 0x14
   800                           
   801                           
   802                           ; 1 bytes @ 0x14
   803  0034                     	ds	1
   804  0035                     ?_setDigit:	
   805  0035                     ?_FindCell:	
   806                           ; 1 bytes @ 0x15
   807                           
   808  0035                     ?_ReadCell:	
   809                           ; 1 bytes @ 0x15
   810                           
   811  0035                     setDigit@data:	
   812                           ; 1 bytes @ 0x15
   813                           
   814  0035                     FindCell@previous:	
   815                           ; 1 bytes @ 0x15
   816                           
   817  0035                     ReadCell@CellsData:	
   818                           ; 1 bytes @ 0x15
   819                           
   820                           
   821                           ; 1 bytes @ 0x15
   822  0035                     	ds	1
   823  0036                     ??_setDigit:	
   824  0036                     ??_FindCell:	
   825                           ; 1 bytes @ 0x16
   826                           
   827  0036                     ??_ReadCell:	
   828                           ; 1 bytes @ 0x16
   829                           
   830  0036                     FindCell@CellsData:	
   831                           ; 1 bytes @ 0x16
   832                           
   833                           
   834                           ; 8 bytes @ 0x16
   835  0036                     	ds	1
   836  0037                     ReadCell@cell:	
   837                           
   838                           ; 1 bytes @ 0x17
   839  0037                     	ds	1
   840  0038                     setDigit@a:	
   841  0038                     ReadCell@i:	
   842                           ; 1 bytes @ 0x18
   843                           
   844                           
   845                           ; 1 bytes @ 0x18
   846  0038                     	ds	1
   847  0039                     ??_ShowError:	
   848  0039                     ??_indData:	
   849                           ; 1 bytes @ 0x19
   850                           
   851  0039                     ??_CellToInd:	
   852                           ; 1 bytes @ 0x19
   853                           
   854  0039                     CellToInd@cell:	
   855                           ; 1 bytes @ 0x19
   856                           
   857                           
   858                           ; 1 bytes @ 0x19
   859  0039                     	ds	1
   860  003A                     ??_EditAddressMemory:	
   861  003A                     indData@v_248:	
   862                           ; 1 bytes @ 0x1A
   863                           
   864                           
   865                           ; 1 bytes @ 0x1A
   866  003A                     	ds	1
   867  003B                     indData@isPoint:	
   868                           
   869                           ; 1 bytes @ 0x1B
   870  003B                     	ds	1
   871  003C                     indData@v:	
   872                           
   873                           ; 1 bytes @ 0x1C
   874  003C                     	ds	1
   875  003D                     indData@cd:	
   876                           
   877                           ; 1 bytes @ 0x1D
   878  003D                     	ds	1
   879  003E                     FindCell@addressNew:	
   880  003E                     indData@dN:	
   881                           ; 1 bytes @ 0x1E
   882                           
   883                           
   884                           ; 1 bytes @ 0x1E
   885  003E                     	ds	1
   886  003F                     FindCell@CellIsEmpty:	
   887                           
   888                           ; 1 bytes @ 0x1F
   889  003F                     	ds	1
   890  0040                     FindCell@addressStart:	
   891                           
   892                           ; 1 bytes @ 0x20
   893  0040                     	ds	1
   894  0041                     FindCell@i:	
   895                           
   896                           ; 1 bytes @ 0x21
   897  0041                     	ds	1
   898  0042                     FindCell@address:	
   899                           
   900                           ; 1 bytes @ 0x22
   901  0042                     	ds	1
   902  0043                     ??_main:	
   903                           
   904                           ; 1 bytes @ 0x23
   905  0043                     	ds	1
   906                           
   907                           	psect	maintext
   908  012D                     __pmaintext:	
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 765 in file "prog.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  point_on_ind    2   14[BANK1 ] unsigned int 
   919 ;;  line            1   21[BANK1 ] unsigned char 
   920 ;;  address         1   20[BANK1 ] unsigned char 
   921 ;;  cell            1   19[BANK1 ] unsigned char 
   922 ;;  TheStart        1   18[BANK1 ] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : B00/0
   929 ;;		On exit  : 300/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   932 ;;      Params:         0       0       0       0
   933 ;;      Locals:         0       0       8       0
   934 ;;      Temps:          0       1       0       0
   935 ;;      Totals:         0       1       8       0
   936 ;;Total ram usage:        9 bytes
   937 ;; Hardware stack levels required when called:    7
   938 ;; This function calls:
   939 ;;		_CellToInd
   940 ;;		_EditAddressMemory
   941 ;;		_FillArrayFromEEPROM
   942 ;;		_FindCell
   943 ;;		_Reset_powerOnInterval
   944 ;;		_Run_getTemp
   945 ;;		_ShowError
   946 ;;		_clrInd
   947 ;;		_indData
   948 ;;		_refreshInd
   949 ;;		_setDigit
   950 ;;		_setPoint
   951 ;;		_waitInterrupt
   952 ;; This function is called by:
   953 ;;		Startup code after reset
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _main
   959  012D                     _main:	
   960                           
   961                           ;prog.c: 767: INTCON = 0;
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   965  012D  018B               	clrf	11	;volatile
   966                           
   967                           ;prog.c: 768: OPTION_REG = 0b00000111;
   968  012E  3007               	movlw	7
   969  012F  1683               	bsf	3,5	;RP0=1, select bank1
   970  0130  0081               	movwf	1	;volatile
   971                           
   972                           ;prog.c: 769: TRISA = 0b00101110;
   973  0131  302E               	movlw	46
   974  0132  0085               	movwf	5	;volatile
   975                           
   976                           ;prog.c: 770: TRISB = 0b00000000;
   977  0133  0186               	clrf	6	;volatile
   978                           
   979                           ;prog.c: 771: PORTA = 0b00000000;
   980  0134  1283               	bcf	3,5	;RP0=0, select bank0
   981  0135  0185               	clrf	5	;volatile
   982                           
   983                           ;prog.c: 772: PORTB = 0b00000000;
   984  0136  0186               	clrf	6	;volatile
   985                           
   986                           ;prog.c: 773: TMR0 = TMR0_VALUE;
   987  0137  30EB               	movlw	235
   988  0138  0081               	movwf	1	;volatile
   989                           
   990                           ;prog.c: 774: T2CON = 0b00000100;
   991  0139  3004               	movlw	4
   992  013A  0092               	movwf	18	;volatile
   993                           
   994                           ;prog.c: 775: CMCON = 0b00000111;
   995  013B  3007               	movlw	7
   996  013C  009F               	movwf	31	;volatile
   997                           
   998                           ;prog.c: 777: clrInd();
   999  013D  27F0               	fcall	_clrInd
  1000                           
  1001                           ;prog.c: 778: refreshInd();
  1002  013E  27E2               	fcall	_refreshInd
  1003                           
  1004                           ;prog.c: 780: INTCON = 0b10100000;
  1005  013F  30A0               	movlw	160
  1006  0140  008B               	movwf	11	;volatile
  1007                           
  1008                           ;prog.c: 782: Reset_powerOnInterval();
  1009  0141  27EA               	fcall	_Reset_powerOnInterval
  1010  0142  3008               	movlw	8
  1011                           
  1012                           ;prog.c: 784: unsigned char cell = 0;
  1013  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1014  0144  01B3               	clrf	main@cell^(0+128)
  1015                           
  1016                           ;prog.c: 785: unsigned char address;
  1017                           ;prog.c: 786: unsigned int point_on_ind_delay = 0;
  1018  0145  01AE               	clrf	main@point_on_ind_delay^(0+128)
  1019  0146  01AF               	clrf	(main@point_on_ind_delay+1)^(0+128)
  1020                           
  1021                           ;prog.c: 787: unsigned char TheStart = 1;
  1022  0147  01B2               	clrf	main@TheStart^(0+128)
  1023  0148  0AB2               	incf	main@TheStart^(0+128),f
  1024                           
  1025                           ;prog.c: 788: unsigned char line = 0b00001000;
  1026  0149  00B5               	movwf	main@line^(0+128)
  1027                           
  1028                           ;prog.c: 790: KeyCode = 36;
  1029  014A  3024               	movlw	36
  1030  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1031  014C  00DF               	movwf	_KeyCode	;volatile
  1032  014D                     l4227:	
  1033                           
  1034                           ;prog.c: 794: if (KeyCode == 33) {
  1035  014D  3021               	movlw	33
  1036  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1037  014F  065F               	xorwf	_KeyCode,w	;volatile
  1038  0150  1D03               	btfss	3,2
  1039  0151  2962               	goto	l4239
  1040                           
  1041                           ;prog.c: 795: KeyCode = 0;
  1042  0152  01DF               	clrf	_KeyCode	;volatile
  1043                           
  1044                           ;prog.c: 796: if (PowerBlocked != 1) {
  1045  0153  0358               	decf	_PowerBlocked,w
  1046  0154  1903               	btfsc	3,2
  1047  0155  295E               	goto	l4237
  1048  0156  30A0               	movlw	160
  1049                           
  1050                           ;prog.c: 797: PowerBlocked = 1;
  1051  0157  01D8               	clrf	_PowerBlocked
  1052  0158  0AD8               	incf	_PowerBlocked,f
  1053                           
  1054                           ;prog.c: 798: point_on_ind_delay = 4000;
  1055  0159  1683               	bsf	3,5	;RP0=1, select bank1
  1056  015A  00AE               	movwf	main@point_on_ind_delay^(0+128)
  1057  015B  300F               	movlw	15
  1058  015C  00AF               	movwf	(main@point_on_ind_delay^(0+128)+1)
  1059                           
  1060                           ;prog.c: 799: } else {
  1061  015D  29F2               	goto	l4323
  1062  015E                     l4237:	
  1063                           
  1064                           ;prog.c: 800: powerOnInterval = 0;
  1065  015E  01DD               	clrf	_powerOnInterval
  1066  015F  01DE               	clrf	_powerOnInterval+1
  1067                           
  1068                           ;prog.c: 801: PowerBlocked = 0;
  1069  0160  01D8               	clrf	_PowerBlocked
  1070  0161  29F2               	goto	l4323
  1071  0162                     l4239:	
  1072  0162  301F               	movlw	31
  1073  0163  065F               	xorwf	_KeyCode,w	;volatile
  1074  0164  1903               	btfsc	3,2
  1075  0165  296E               	goto	l4245
  1076  0166  3020               	movlw	32
  1077  0167  065F               	xorwf	_KeyCode,w	;volatile
  1078  0168  1903               	btfsc	3,2
  1079  0169  296E               	goto	l4245
  1080  016A  3022               	movlw	34
  1081  016B  065F               	xorwf	_KeyCode,w	;volatile
  1082  016C  1D03               	btfss	3,2
  1083  016D  29B9               	goto	l4295
  1084  016E                     l4245:	
  1085                           
  1086                           ;prog.c: 804: Reset_powerOnInterval();
  1087  016E  27EA               	fcall	_Reset_powerOnInterval
  1088                           
  1089                           ;prog.c: 806: if (Broadcasting) {
  1090  016F  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1091  0170  2991               	goto	l370
  1092                           
  1093                           ;prog.c: 808: if (KeyCode == 31 && line != 0b00001000) {
  1094  0171  301F               	movlw	31
  1095  0172  065F               	xorwf	_KeyCode,w	;volatile
  1096  0173  1D03               	btfss	3,2
  1097  0174  297C               	goto	l4257
  1098  0175  3008               	movlw	8
  1099  0176  1683               	bsf	3,5	;RP0=1, select bank1
  1100  0177  0635               	xorwf	main@line^(0+128),w
  1101  0178  1903               	btfsc	3,2
  1102  0179  297C               	goto	l4257
  1103  017A  3008               	movlw	8
  1104  017B  2987               	goto	L4
  1105  017C                     l4257:	
  1106                           ;prog.c: 811: } else if (KeyCode == 32 && line != 0b00000010) {
  1107                           
  1108                           ;prog.c: 810: line = 0b00001000;
  1109                           
  1110                           ;prog.c: 809: TheStart = 1;
  1111                           
  1112  017C  3020               	movlw	32
  1113  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1114  017E  065F               	xorwf	_KeyCode,w	;volatile
  1115  017F  1D03               	btfss	3,2
  1116  0180  294D               	goto	l4227
  1117  0181  3002               	movlw	2
  1118  0182  1683               	bsf	3,5	;RP0=1, select bank1
  1119  0183  0635               	xorwf	main@line^(0+128),w
  1120  0184  1903               	btfsc	3,2
  1121  0185  294D               	goto	l4227
  1122  0186  3002               	movlw	2
  1123  0187                     L4:	
  1124                           
  1125                           ;prog.c: 812: TheStart = 1;
  1126  0187  01B2               	clrf	main@TheStart^(0+128)
  1127  0188  0AB2               	incf	main@TheStart^(0+128),f
  1128                           
  1129                           ;prog.c: 813: line = 0b00000010;
  1130  0189  00B5               	movwf	main@line^(0+128)
  1131                           
  1132                           ;prog.c: 816: }
  1133                           ;prog.c: 817: KeyCode = 0;
  1134                           
  1135                           ;prog.c: 814: } else {
  1136  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1137  018B  01DF               	clrf	_KeyCode	;volatile
  1138                           
  1139                           ;prog.c: 818: getTemp_flags.ActiveProcess = 0;
  1140  018C  1048               	bcf	_getTemp_flags+4,0
  1141                           
  1142                           ;prog.c: 819: waitInterrupt();
  1143  018D  27F6               	fcall	_waitInterrupt
  1144                           
  1145                           ;prog.c: 820: Run_getTemp(line);
  1146  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1147  018F  0835               	movf	main@line^(0+128),w
  1148  0190  29F1               	goto	L2
  1149  0191                     l370:	
  1150                           ;prog.c: 822: } else {
  1151                           
  1152  0191  3022               	movlw	34
  1153                           
  1154                           ;prog.c: 823: getTemp_flags.ActiveProcess = 0;
  1155  0192  1048               	bcf	_getTemp_flags+4,0
  1156                           
  1157                           ;prog.c: 825: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1158  0193  065F               	xorwf	_KeyCode,w	;volatile
  1159  0194  1903               	btfsc	3,2
  1160  0195  29A4               	goto	l4279
  1161  0196  1683               	bsf	3,5	;RP0=1, select bank1
  1162  0197  0833               	movf	main@cell^(0+128),w
  1163  0198  00B0               	movwf	_main$278^(0+128)
  1164  0199  01B1               	clrf	(_main$278+1)^(0+128)
  1165  019A  1003               	clrc
  1166  019B  0DB0               	rlf	_main$278^(0+128),f
  1167  019C  0DB1               	rlf	(_main$278+1)^(0+128),f
  1168  019D  1003               	clrc
  1169  019E  0DB0               	rlf	_main$278^(0+128),f
  1170  019F  0DB1               	rlf	(_main$278+1)^(0+128),f
  1171  01A0  1003               	clrc
  1172  01A1  0DB0               	rlf	_main$278^(0+128),f
  1173  01A2  0DB1               	rlf	(_main$278+1)^(0+128),f
  1174  01A3  29A8               	goto	l4281
  1175  01A4                     l4279:	
  1176  01A4  3080               	movlw	128
  1177  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1178  01A6  00B0               	movwf	_main$278^(0+128)
  1179  01A7  01B1               	clrf	(_main$278+1)^(0+128)
  1180  01A8                     l4281:	
  1181  01A8  301F               	movlw	31
  1182  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1183  01AA  065F               	xorwf	_KeyCode,w	;volatile
  1184  01AB  1D03               	btfss	3,2
  1185  01AC  29AF               	goto	u4740
  1186  01AD  3001               	movlw	1
  1187  01AE  29B0               	goto	u4750
  1188  01AF                     u4740:	
  1189  01AF  3000               	movlw	0
  1190  01B0                     u4750:	
  1191  01B0  00B5               	movwf	FindCell@previous
  1192  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1193  01B2  0830               	movf	_main$278^(0+128),w
  1194  01B3  2405               	fcall	_FindCell
  1195  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  1196  01B5  00B4               	movwf	main@address^(0+128)
  1197                           
  1198                           ;prog.c: 826: KeyCode = 0;
  1199  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1200  01B7  01DF               	clrf	_KeyCode	;volatile
  1201  01B8  29D7               	goto	l4313
  1202  01B9                     l4295:	
  1203                           ;prog.c: 834: Run_getTemp(line);
  1204                           
  1205                           ;prog.c: 833: line = 0b00001000;
  1206                           
  1207                           ;prog.c: 831: CellToInd(cell);
  1208                           
  1209                           ;prog.c: 829: cell = address / (sizeof(DS_Address));
  1210                           
  1211                           ;prog.c: 828: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1212                           
  1213  01B9  3024               	movlw	36
  1214  01BA  065F               	xorwf	_KeyCode,w	;volatile
  1215  01BB  1D03               	btfss	3,2
  1216  01BC  29F2               	goto	l4323
  1217                           
  1218                           ;prog.c: 838: KeyCode = 0;
  1219  01BD  01DF               	clrf	_KeyCode	;volatile
  1220                           
  1221                           ;prog.c: 839: if (!TheStart) {
  1222  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  1223  01BF  0832               	movf	main@TheStart^(0+128),w
  1224  01C0  1D03               	btfss	3,2
  1225  01C1  29C3               	goto	l4303
  1226                           
  1227                           ;prog.c: 840: EditAddressMemory();
  1228  01C2  2228               	fcall	_EditAddressMemory
  1229  01C3                     l4303:	
  1230                           
  1231                           ;prog.c: 841: }
  1232                           ;prog.c: 843: Reset_powerOnInterval();
  1233  01C3  27EA               	fcall	_Reset_powerOnInterval
  1234  01C4  3080               	movlw	128
  1235                           
  1236                           ;prog.c: 844: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1237  01C5  01B5               	clrf	FindCell@previous
  1238  01C6  2405               	fcall	_FindCell
  1239  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1240  01C8  00B4               	movwf	main@address^(0+128)
  1241                           
  1242                           ;prog.c: 845: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1243  01C9  3A80               	xorlw	128
  1244  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1245  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1246  01CC  1D03               	btfss	3,2
  1247  01CD  29D0               	goto	L3
  1248  01CE  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1249  01CF  29D1               	goto	l4309
  1250  01D0                     L3:	
  1251  01D0  1060               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1252  01D1                     l4309:	
  1253                           
  1254                           ;prog.c: 846: if (Broadcasting) {
  1255  01D1  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1256  01D2  29D7               	goto	l4313
  1257                           
  1258                           ;prog.c: 847: TheStart = 1;
  1259  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  1260  01D4  01B2               	clrf	main@TheStart^(0+128)
  1261  01D5  0AB2               	incf	main@TheStart^(0+128),f
  1262                           
  1263                           ;prog.c: 848: } else {
  1264  01D6  29EE               	goto	l4319
  1265  01D7                     l4313:	
  1266                           
  1267                           ;prog.c: 849: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1268  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  1269  01D8  0834               	movf	main@address^(0+128),w
  1270  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1271  01DA  00B0               	movwf	FillArrayFromEEPROM@address_start
  1272  01DB  3008               	movlw	8
  1273  01DC  00B1               	movwf	FillArrayFromEEPROM@quantity
  1274  01DD  30BF               	movlw	(low (_DS_Address| 0))& (0+255)
  1275  01DE  2794               	fcall	_FillArrayFromEEPROM
  1276                           
  1277                           ;prog.c: 850: cell = address / (sizeof(DS_Address));
  1278  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  1279  01E0  0834               	movf	main@address^(0+128),w
  1280  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1281  01E2  00C3               	movwf	??_main
  1282  01E3  1003               	clrc
  1283  01E4  0CC3               	rrf	??_main,f
  1284  01E5  1003               	clrc
  1285  01E6  0CC3               	rrf	??_main,f
  1286  01E7  1003               	clrc
  1287  01E8  0CC3               	rrf	??_main,f
  1288  01E9  0843               	movf	??_main,w
  1289  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  1290  01EB  00B3               	movwf	main@cell^(0+128)
  1291                           
  1292                           ;prog.c: 852: CellToInd(cell);
  1293  01EC  0833               	movf	main@cell^(0+128),w
  1294  01ED  2608               	fcall	_CellToInd
  1295  01EE                     l4319:	
  1296                           
  1297                           ;prog.c: 853: }
  1298                           ;prog.c: 854: line = 0b00001000;
  1299  01EE  3008               	movlw	8
  1300  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  1301  01F0  00B5               	movwf	main@line^(0+128)
  1302  01F1                     L2:	
  1303                           ;prog.c: 855: Run_getTemp(line);
  1304                           
  1305  01F1  275B               	fcall	_Run_getTemp
  1306  01F2                     l4323:	
  1307                           
  1308                           ;prog.c: 856: }
  1309                           ;prog.c: 858: if (getTemp_flags.Error) {
  1310  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1311  01F3  1FC7               	btfss	_getTemp_flags+3,7
  1312  01F4  29FB               	goto	l386
  1313                           
  1314                           ;prog.c: 859: clrInd();
  1315  01F5  27F0               	fcall	_clrInd
  1316                           
  1317                           ;prog.c: 860: ShowError();
  1318  01F6  27C3               	fcall	_ShowError
  1319                           
  1320                           ;prog.c: 861: Run_getTemp(line);
  1321  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  1322  01F8  0835               	movf	main@line^(0+128),w
  1323  01F9  275B               	fcall	_Run_getTemp
  1324                           
  1325                           ;prog.c: 862: } else if (getTemp_flags.DataIsRead) {
  1326  01FA  2A15               	goto	l4349
  1327  01FB                     l386:	
  1328  01FB  1F47               	btfss	_getTemp_flags+3,6
  1329  01FC  2A03               	goto	l4337
  1330                           
  1331                           ;prog.c: 863: clrInd();
  1332  01FD  27F0               	fcall	_clrInd
  1333                           
  1334                           ;prog.c: 864: indData();
  1335  01FE  2391               	fcall	_indData
  1336                           
  1337                           ;prog.c: 865: Run_getTemp(line);
  1338  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1339  0200  0835               	movf	main@line^(0+128),w
  1340  0201  275B               	fcall	_Run_getTemp
  1341                           
  1342                           ;prog.c: 866: } else if (TheStart) {
  1343  0202  2A15               	goto	l4349
  1344  0203                     l4337:	
  1345  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1346  0204  0832               	movf	main@TheStart^(0+128),w
  1347  0205  1903               	btfsc	3,2
  1348  0206  2A15               	goto	l4349
  1349                           
  1350                           ;prog.c: 867: TheStart = 0;
  1351  0207  01B2               	clrf	main@TheStart^(0+128)
  1352                           
  1353                           ;prog.c: 868: clrInd();
  1354  0208  27F0               	fcall	_clrInd
  1355                           
  1356                           ;prog.c: 869: setDigit(1, 32);
  1357  0209  3020               	movlw	32
  1358  020A  00B5               	movwf	setDigit@data
  1359  020B  3001               	movlw	1
  1360  020C  2782               	fcall	_setDigit
  1361                           
  1362                           ;prog.c: 870: setDigit(2, 32);
  1363  020D  3020               	movlw	32
  1364  020E  00B5               	movwf	setDigit@data
  1365  020F  3002               	movlw	2
  1366  0210  2782               	fcall	_setDigit
  1367                           
  1368                           ;prog.c: 871: setDigit(3, 32);
  1369  0211  3020               	movlw	32
  1370  0212  00B5               	movwf	setDigit@data
  1371  0213  3003               	movlw	3
  1372  0214  2782               	fcall	_setDigit
  1373  0215                     l4349:	
  1374                           
  1375                           ;prog.c: 872: }
  1376                           ;prog.c: 874: if (point_on_ind_delay > 0) {
  1377  0215  1683               	bsf	3,5	;RP0=1, select bank1
  1378  0216  082E               	movf	main@point_on_ind_delay^(0+128),w
  1379  0217  042F               	iorwf	(main@point_on_ind_delay+1)^(0+128),w
  1380  0218  1903               	btfsc	3,2
  1381  0219  2A26               	goto	l4355
  1382  021A  3001               	movlw	1
  1383                           
  1384                           ;prog.c: 875: setPoint(1, 1);
  1385  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1386  021C  01AD               	clrf	setPoint@value
  1387  021D  0AAD               	incf	setPoint@value,f
  1388  021E  27A5               	fcall	_setPoint
  1389                           
  1390                           ;prog.c: 876: point_on_ind_delay--;
  1391  021F  3001               	movlw	1
  1392  0220  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0221  02AE               	subwf	main@point_on_ind_delay^(0+128),f
  1394  0222  3000               	movlw	0
  1395  0223  1C03               	skipc
  1396  0224  03AF               	decf	(main@point_on_ind_delay+1)^(0+128),f
  1397  0225  02AF               	subwf	(main@point_on_ind_delay+1)^(0+128),f
  1398  0226                     l4355:	
  1399                           
  1400                           ;prog.c: 877: }
  1401                           ;prog.c: 879: refreshInd();
  1402  0226  27E2               	fcall	_refreshInd
  1403  0227  294D               	goto	l4227
  1404  0228                     __end_of_main:	
  1405                           
  1406                           	psect	text1
  1407  0391                     __ptext1:	
  1408 ;; *************** function _indData *****************
  1409 ;; Defined at:
  1410 ;;		line 596 in file "prog.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  v               1   26[BANK0 ] unsigned char 
  1415 ;;  v               1   28[BANK0 ] unsigned char 
  1416 ;;  dN              1   30[BANK0 ] unsigned char 
  1417 ;;  cd              1   29[BANK0 ] unsigned char 
  1418 ;;  isPoint         1   27[BANK0 ] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 300/0
  1425 ;;		On exit  : 300/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1428 ;;      Params:         0       0       0       0
  1429 ;;      Locals:         0       5       0       0
  1430 ;;      Temps:          0       1       0       0
  1431 ;;      Totals:         0       6       0       0
  1432 ;;Total ram usage:        6 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    4
  1435 ;; This function calls:
  1436 ;;		___lbdiv
  1437 ;;		___lbmod
  1438 ;;		_setDigit
  1439 ;;		_setPoint
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           
  1446                           ;psect for function _indData
  1447  0391                     _indData:	
  1448                           
  1449                           ;prog.c: 598: unsigned char cd = 3;
  1450                           
  1451                           ;incstack = 0
  1452                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1453  0391  3003               	movlw	3
  1454  0392  00BD               	movwf	indData@cd
  1455                           
  1456                           ;prog.c: 599: unsigned char dN = 3;
  1457  0393  00BE               	movwf	indData@dN
  1458                           
  1459                           ;prog.c: 601: if (sign != 0) {
  1460  0394  085A               	movf	_sign,w
  1461  0395  1903               	btfsc	3,2
  1462  0396  2B9D               	goto	l3865
  1463                           
  1464                           ;prog.c: 602: setDigit(cd, 32);
  1465  0397  3020               	movlw	32
  1466  0398  00B5               	movwf	setDigit@data
  1467  0399  3003               	movlw	3
  1468  039A  2782               	fcall	_setDigit
  1469                           
  1470                           ;prog.c: 603: cd--;
  1471  039B  03BD               	decf	indData@cd,f
  1472                           
  1473                           ;prog.c: 604: dN--;
  1474  039C  03BE               	decf	indData@dN,f
  1475  039D                     l3865:	
  1476                           
  1477                           ;prog.c: 605: }
  1478                           ;prog.c: 606: unsigned char isPoint = 0;
  1479  039D  01BB               	clrf	indData@isPoint
  1480  039E                     l3867:	
  1481                           
  1482                           ;prog.c: 608: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1483  039E  3064               	movlw	100
  1484  039F  025C               	subwf	_temperature,w
  1485  03A0  1C03               	btfss	3,0
  1486  03A1  2BA4               	goto	u4080
  1487  03A2  3001               	movlw	1
  1488  03A3  2BA5               	goto	u4090
  1489  03A4                     u4080:	
  1490  03A4  3000               	movlw	0
  1491  03A5                     u4090:	
  1492  03A5  00B9               	movwf	??_indData
  1493  03A6  300A               	movlw	10
  1494  03A7  025C               	subwf	_temperature,w
  1495  03A8  1C03               	btfss	3,0
  1496  03A9  2BAC               	goto	u4100
  1497  03AA  3001               	movlw	1
  1498  03AB  2BAD               	goto	u4110
  1499  03AC                     u4100:	
  1500  03AC  3000               	movlw	0
  1501  03AD                     u4110:	
  1502  03AD  0739               	addwf	??_indData,w
  1503  03AE  00BC               	movwf	indData@v
  1504                           
  1505                           ;prog.c: 609: setDigit(cd - v, temperature % 10);
  1506  03AF  300A               	movlw	10
  1507  03B0  00AD               	movwf	___lbmod@divisor
  1508  03B1  085C               	movf	_temperature,w
  1509  03B2  26BB               	fcall	___lbmod
  1510  03B3  00B5               	movwf	setDigit@data
  1511  03B4  083C               	movf	indData@v,w
  1512  03B5  023D               	subwf	indData@cd,w
  1513  03B6  2782               	fcall	_setDigit
  1514                           
  1515                           ;prog.c: 610: if (!isPoint) {
  1516  03B7  083B               	movf	indData@isPoint,w
  1517  03B8  1D03               	btfss	3,2
  1518  03B9  2BC1               	goto	l3877
  1519                           
  1520                           ;prog.c: 611: setPoint(cd - v, 1);
  1521  03BA  01AD               	clrf	setPoint@value
  1522  03BB  0AAD               	incf	setPoint@value,f
  1523  03BC  083C               	movf	indData@v,w
  1524  03BD  023D               	subwf	indData@cd,w
  1525  03BE  27A5               	fcall	_setPoint
  1526                           
  1527                           ;prog.c: 612: isPoint = 1;
  1528  03BF  01BB               	clrf	indData@isPoint
  1529  03C0  0ABB               	incf	indData@isPoint,f
  1530  03C1                     l3877:	
  1531                           
  1532                           ;prog.c: 613: }
  1533                           ;prog.c: 614: temperature /= 10;
  1534  03C1  300A               	movlw	10
  1535  03C2  00AD               	movwf	___lbdiv@divisor
  1536  03C3  085C               	movf	_temperature,w
  1537  03C4  270F               	fcall	___lbdiv
  1538  03C5  00DC               	movwf	_temperature
  1539                           
  1540                           ;prog.c: 615: dN--;
  1541  03C6  03BE               	decf	indData@dN,f
  1542                           
  1543                           ;prog.c: 616: } while (temperature > 0);
  1544  03C7  085C               	movf	_temperature,w
  1545  03C8  1D03               	btfss	3,2
  1546  03C9  2B9E               	goto	l3867
  1547                           
  1548                           ;prog.c: 618: if (dN > 0) {
  1549  03CA  083E               	movf	indData@dN,w
  1550  03CB  1903               	btfsc	3,2
  1551  03CC  2C01               	goto	l3909
  1552                           
  1553                           ;prog.c: 619: cd = dN;
  1554  03CD  083E               	movf	indData@dN,w
  1555  03CE  00BD               	movwf	indData@cd
  1556                           
  1557                           ;prog.c: 620: if (temp_drob > 99) temp_drob /= 10;
  1558  03CF  3064               	movlw	100
  1559  03D0  025B               	subwf	_temp_drob,w
  1560  03D1  300A               	movlw	10
  1561  03D2  1C03               	skipc
  1562  03D3  2BD9               	goto	L5
  1563  03D4  00AD               	movwf	___lbdiv@divisor
  1564  03D5  085B               	movf	_temp_drob,w
  1565  03D6  270F               	fcall	___lbdiv
  1566  03D7  00DB               	movwf	_temp_drob
  1567                           
  1568                           ;prog.c: 621: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1569  03D8  300A               	movlw	10
  1570  03D9                     L5:	
  1571  03D9  025B               	subwf	_temp_drob,w
  1572  03DA  1C03               	skipc
  1573  03DB  2BE3               	goto	l3895
  1574  03DC  0B3E               	decfsz	indData@dN,w
  1575  03DD  2BE3               	goto	l3895
  1576  03DE  300A               	movlw	10
  1577  03DF  00AD               	movwf	___lbdiv@divisor
  1578  03E0  085B               	movf	_temp_drob,w
  1579  03E1  270F               	fcall	___lbdiv
  1580  03E2  00DB               	movwf	_temp_drob
  1581  03E3                     l3895:	
  1582                           
  1583                           ;prog.c: 623: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1584  03E3  300A               	movlw	10
  1585  03E4  025B               	subwf	_temp_drob,w
  1586  03E5  1C03               	btfss	3,0
  1587  03E6  2BE9               	goto	u4180
  1588  03E7  3001               	movlw	1
  1589  03E8  2BEA               	goto	u4190
  1590  03E9                     u4180:	
  1591  03E9  3000               	movlw	0
  1592  03EA                     u4190:	
  1593  03EA  00BA               	movwf	indData@v_248
  1594                           
  1595                           ;prog.c: 624: setDigit(cd - v, temp_drob % 10);
  1596  03EB  300A               	movlw	10
  1597  03EC  00AD               	movwf	___lbmod@divisor
  1598  03ED  085B               	movf	_temp_drob,w
  1599  03EE  26BB               	fcall	___lbmod
  1600  03EF  00B5               	movwf	setDigit@data
  1601  03F0  083A               	movf	indData@v_248,w
  1602  03F1  023D               	subwf	indData@cd,w
  1603  03F2  2782               	fcall	_setDigit
  1604                           
  1605                           ;prog.c: 625: temp_drob /= 10;
  1606  03F3  300A               	movlw	10
  1607  03F4  00AD               	movwf	___lbdiv@divisor
  1608  03F5  085B               	movf	_temp_drob,w
  1609  03F6  270F               	fcall	___lbdiv
  1610  03F7  00DB               	movwf	_temp_drob
  1611                           
  1612                           ;prog.c: 626: dN--;
  1613  03F8  03BE               	decf	indData@dN,f
  1614                           
  1615                           ;prog.c: 627: } while (temp_drob > 0);
  1616  03F9  085B               	movf	_temp_drob,w
  1617  03FA  1903               	btfsc	3,2
  1618  03FB  2C01               	goto	l3909
  1619  03FC  2BE3               	goto	l3895
  1620  03FD                     l3905:	
  1621                           
  1622                           ;prog.c: 631: setDigit(dN, 0);
  1623  03FD  01B5               	clrf	setDigit@data
  1624  03FE  083E               	movf	indData@dN,w
  1625  03FF  2782               	fcall	_setDigit
  1626                           
  1627                           ;prog.c: 632: dN--;
  1628  0400  03BE               	decf	indData@dN,f
  1629  0401                     l3909:	
  1630  0401  083E               	movf	indData@dN,w
  1631  0402  1903               	btfsc	3,2
  1632  0403  0008               	return
  1633  0404  2BFD               	goto	l3905
  1634  0405                     __end_of_indData:	
  1635                           
  1636                           	psect	text2
  1637  06BB                     __ptext2:	
  1638 ;; *************** function ___lbmod *****************
  1639 ;; Defined at:
  1640 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;  dividend        1    wreg     unsigned char 
  1643 ;;  divisor         1   13[BANK0 ] unsigned char 
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  dividend        1   15[BANK0 ] unsigned char 
  1646 ;;  rem             1   17[BANK0 ] unsigned char 
  1647 ;;  counter         1   16[BANK0 ] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      unsigned char 
  1650 ;; Registers used:
  1651 ;;		wreg, status,2, status,0
  1652 ;; Tracked objects:
  1653 ;;		On entry : 300/0
  1654 ;;		On exit  : 300/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1657 ;;      Params:         0       1       0       0
  1658 ;;      Locals:         0       3       0       0
  1659 ;;      Temps:          0       1       0       0
  1660 ;;      Totals:         0       5       0       0
  1661 ;;Total ram usage:        5 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    3
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_indData
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           
  1672                           ;psect for function ___lbmod
  1673  06BB                     ___lbmod:	
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1677                           ;___lbmod@dividend stored from wreg
  1678  06BB  00AF               	movwf	___lbmod@dividend
  1679  06BC  3008               	movlw	8
  1680  06BD  00B0               	movwf	___lbmod@counter
  1681  06BE  01B1               	clrf	___lbmod@rem
  1682  06BF                     l3653:	
  1683  06BF  082F               	movf	___lbmod@dividend,w
  1684  06C0  00AE               	movwf	??___lbmod
  1685  06C1  3007               	movlw	7
  1686  06C2  1003               	clrc
  1687  06C3                     L6:	
  1688  06C3  0CAE               	rrf	??___lbmod,f
  1689  06C4  3EFF               	addlw	-1
  1690  06C5  1003               	clrc
  1691  06C6  1D03               	skipz
  1692  06C7  2EC3               	goto	L6
  1693  06C8  0D31               	rlf	___lbmod@rem,w
  1694  06C9  042E               	iorwf	??___lbmod,w
  1695  06CA  00B1               	movwf	___lbmod@rem
  1696  06CB  1003               	clrc
  1697  06CC  0DAF               	rlf	___lbmod@dividend,f
  1698  06CD  082D               	movf	___lbmod@divisor,w
  1699  06CE  0231               	subwf	___lbmod@rem,w
  1700  06CF  1C03               	skipc
  1701  06D0  2ED3               	goto	l3661
  1702  06D1  082D               	movf	___lbmod@divisor,w
  1703  06D2  02B1               	subwf	___lbmod@rem,f
  1704  06D3                     l3661:	
  1705  06D3  0BB0               	decfsz	___lbmod@counter,f
  1706  06D4  2EBF               	goto	l3653
  1707  06D5  0831               	movf	___lbmod@rem,w
  1708  06D6  0008               	return
  1709  06D7                     __end_of___lbmod:	
  1710                           
  1711                           	psect	text3
  1712  070F                     __ptext3:	
  1713 ;; *************** function ___lbdiv *****************
  1714 ;; Defined at:
  1715 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  dividend        1    wreg     unsigned char 
  1718 ;;  divisor         1   13[BANK0 ] unsigned char 
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;  dividend        1   14[BANK0 ] unsigned char 
  1721 ;;  quotient        1   16[BANK0 ] unsigned char 
  1722 ;;  counter         1   15[BANK0 ] unsigned char 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      unsigned char 
  1725 ;; Registers used:
  1726 ;;		wreg, status,2, status,0
  1727 ;; Tracked objects:
  1728 ;;		On entry : 300/0
  1729 ;;		On exit  : 300/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1732 ;;      Params:         0       1       0       0
  1733 ;;      Locals:         0       3       0       0
  1734 ;;      Temps:          0       0       0       0
  1735 ;;      Totals:         0       4       0       0
  1736 ;;Total ram usage:        4 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    3
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_indData
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function ___lbdiv
  1748  070F                     ___lbdiv:	
  1749                           
  1750                           ;incstack = 0
  1751                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1752                           ;___lbdiv@dividend stored from wreg
  1753  070F  00AE               	movwf	___lbdiv@dividend
  1754  0710  01B0               	clrf	___lbdiv@quotient
  1755  0711  082D               	movf	___lbdiv@divisor,w
  1756  0712  1903               	btfsc	3,2
  1757  0713  2F28               	goto	l3645
  1758  0714  01AF               	clrf	___lbdiv@counter
  1759  0715                     l3631:	
  1760  0715  0AAF               	incf	___lbdiv@counter,f
  1761  0716  1BAD               	btfsc	___lbdiv@divisor,7
  1762  0717  2F1B               	goto	l739
  1763  0718  1003               	clrc
  1764  0719  0DAD               	rlf	___lbdiv@divisor,f
  1765  071A  2F15               	goto	l3631
  1766  071B                     l739:	
  1767  071B  1003               	clrc
  1768  071C  0DB0               	rlf	___lbdiv@quotient,f
  1769  071D  082D               	movf	___lbdiv@divisor,w
  1770  071E  022E               	subwf	___lbdiv@dividend,w
  1771  071F  1C03               	skipc
  1772  0720  2F25               	goto	L7
  1773  0721  082D               	movf	___lbdiv@divisor,w
  1774  0722  02AE               	subwf	___lbdiv@dividend,f
  1775  0723  1430               	bsf	___lbdiv@quotient,0
  1776  0724  1003               	clrc
  1777  0725                     L7:	
  1778  0725  0CAD               	rrf	___lbdiv@divisor,f
  1779  0726  0BAF               	decfsz	___lbdiv@counter,f
  1780  0727  2F1B               	goto	l739
  1781  0728                     l3645:	
  1782  0728  0830               	movf	___lbdiv@quotient,w
  1783  0729  0008               	return
  1784  072A                     __end_of___lbdiv:	
  1785                           
  1786                           	psect	text4
  1787  075B                     __ptext4:	
  1788 ;; *************** function _Run_getTemp *****************
  1789 ;; Defined at:
  1790 ;;		line 747 in file "prog.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  line            1    wreg     unsigned char 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  line            1   13[BANK0 ] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0
  1799 ;; Tracked objects:
  1800 ;;		On entry : 300/100
  1801 ;;		On exit  : 300/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1804 ;;      Params:         0       0       0       0
  1805 ;;      Locals:         0       1       0       0
  1806 ;;      Temps:          0       0       0       0
  1807 ;;      Totals:         0       1       0       0
  1808 ;;Total ram usage:        1 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    3
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _Run_getTemp
  1820  075B                     _Run_getTemp:	
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1824                           ;Run_getTemp@line stored from wreg
  1825  075B  1283               	bcf	3,5	;RP0=0, select bank0
  1826  075C  00AD               	movwf	Run_getTemp@line
  1827  075D  30C3               	movlw	-61
  1828                           
  1829                           ;prog.c: 749: getTemp_flags.Init = 1;
  1830  075E  1444               	bsf	_getTemp_flags,0
  1831                           
  1832                           ;prog.c: 750: getTemp_flags.Send_Address = 1;
  1833  075F  14C4               	bsf	_getTemp_flags,1
  1834                           
  1835                           ;prog.c: 751: getTemp_flags.CountAddressBytes = 0;
  1836  0760  05C4               	andwf	_getTemp_flags,f
  1837  0761  30DC               	movlw	220
  1838                           
  1839                           ;prog.c: 752: getTemp_flags.SendConvertTemp = 1;
  1840  0762  1744               	bsf	_getTemp_flags,6
  1841                           
  1842                           ;prog.c: 753: getTemp_flags.PauseValue = 220;
  1843  0763  00C5               	movwf	_getTemp_flags+1
  1844  0764  30C3               	movlw	-61
  1845  0765  01C6               	clrf	_getTemp_flags+2
  1846                           
  1847                           ;prog.c: 754: getTemp_flags.SendGetTemp = 1;
  1848  0766  1447               	bsf	_getTemp_flags+3,0
  1849                           
  1850                           ;prog.c: 755: getTemp_flags.ReadData = 1;
  1851  0767  14C7               	bsf	_getTemp_flags+3,1
  1852                           
  1853                           ;prog.c: 756: getTemp_flags.CountDataBytes = 0;
  1854  0768  05C7               	andwf	_getTemp_flags+3,f
  1855                           
  1856                           ;prog.c: 757: getTemp_flags.Error = 0;
  1857  0769  13C7               	bcf	_getTemp_flags+3,7
  1858                           
  1859                           ;prog.c: 758: getTemp_flags.DataIsRead = 0;
  1860  076A  1347               	bcf	_getTemp_flags+3,6
  1861                           
  1862                           ;prog.c: 759: getTemp_flags.Line = line;
  1863  076B  082D               	movf	Run_getTemp@line,w
  1864  076C  00C9               	movwf	_getTemp_flags+5
  1865                           
  1866                           ;prog.c: 761: getTemp_flags.ActiveProcess = 1;
  1867  076D  1448               	bsf	_getTemp_flags+4,0
  1868  076E  0008               	return
  1869  076F                     __end_of_Run_getTemp:	
  1870                           
  1871                           	psect	text5
  1872  07EA                     __ptext5:	
  1873 ;; *************** function _Reset_powerOnInterval *****************
  1874 ;; Defined at:
  1875 ;;		line 96 in file "prog.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg
  1884 ;; Tracked objects:
  1885 ;;		On entry : 200/0
  1886 ;;		On exit  : 300/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1889 ;;      Params:         0       0       0       0
  1890 ;;      Locals:         0       0       0       0
  1891 ;;      Temps:          0       0       0       0
  1892 ;;      Totals:         0       0       0       0
  1893 ;;Total ram usage:        0 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    3
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           
  1904                           ;psect for function _Reset_powerOnInterval
  1905  07EA                     _Reset_powerOnInterval:	
  1906                           
  1907                           ;prog.c: 97: powerOnInterval = 700;
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1911  07EA  30BC               	movlw	188
  1912  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  1913  07EC  00DD               	movwf	_powerOnInterval
  1914  07ED  3002               	movlw	2
  1915  07EE  00DE               	movwf	_powerOnInterval+1
  1916  07EF  0008               	return
  1917  07F0                     __end_of_Reset_powerOnInterval:	
  1918                           
  1919                           	psect	text6
  1920  0405                     __ptext6:	
  1921 ;; *************** function _FindCell *****************
  1922 ;; Defined at:
  1923 ;;		line 455 in file "prog.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  addressStart    1    wreg     unsigned char 
  1926 ;;  previous        1   21[BANK0 ] unsigned char 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  addressStart    1   32[BANK0 ] unsigned char 
  1929 ;;  i               1   33[BANK0 ] unsigned char 
  1930 ;;  CellsData       8   22[BANK0 ] unsigned char [8]
  1931 ;;  CellIsEmpty     1   31[BANK0 ] unsigned char 
  1932 ;;  address         1   34[BANK0 ] unsigned char 
  1933 ;;  addressNew      1   30[BANK0 ] unsigned char 
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      unsigned char 
  1936 ;; Registers used:
  1937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 200/100
  1940 ;;		On exit  : B00/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1943 ;;      Params:         0       1       0       0
  1944 ;;      Locals:         0      13       0       0
  1945 ;;      Temps:          0       0       0       0
  1946 ;;      Totals:         0      14       0       0
  1947 ;;Total ram usage:       14 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    5
  1950 ;; This function calls:
  1951 ;;		_FillArrayFromEEPROM
  1952 ;;		_waitInterrupt
  1953 ;; This function is called by:
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _FindCell
  1960  0405                     _FindCell:	
  1961                           
  1962                           ;incstack = 0
  1963                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1964                           ;FindCell@addressStart stored from wreg
  1965  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1966  0406  00C0               	movwf	FindCell@addressStart
  1967                           
  1968                           ;prog.c: 456: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1969  0407  3A80               	xorlw	128
  1970  0408  1D03               	btfss	3,2
  1971  0409  2C11               	goto	l228
  1972                           
  1973                           ;prog.c: 457: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1974  040A  0835               	movf	FindCell@previous,w
  1975  040B  1903               	btfsc	3,2
  1976  040C  2C0F               	goto	l3809
  1977  040D  01C0               	clrf	FindCell@addressStart
  1978  040E  2C11               	goto	l228
  1979  040F                     l3809:	
  1980  040F  3078               	movlw	120
  1981  0410  00C0               	movwf	FindCell@addressStart
  1982  0411                     l228:	
  1983                           
  1984                           ;prog.c: 458: }
  1985                           ;prog.c: 459: unsigned char address = addressStart;
  1986  0411  0840               	movf	FindCell@addressStart,w
  1987  0412  00C2               	movwf	FindCell@address
  1988                           
  1989                           ;prog.c: 460: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  1990  0413  3080               	movlw	128
  1991  0414  00BE               	movwf	FindCell@addressNew
  1992  0415                     l3811:	
  1993                           
  1994                           ;prog.c: 463: if (!previous) {
  1995  0415  0835               	movf	FindCell@previous,w
  1996  0416  1D03               	btfss	3,2
  1997  0417  2C21               	goto	l3819
  1998                           
  1999                           ;prog.c: 464: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  2000  0418  3078               	movlw	120
  2001  0419  0642               	xorwf	FindCell@address,w
  2002  041A  1D03               	btfss	3,2
  2003  041B  2C1E               	goto	l3817
  2004  041C  01C2               	clrf	FindCell@address
  2005  041D  2C29               	goto	l3825
  2006  041E                     l3817:	
  2007  041E  3008               	movlw	8
  2008  041F  07C2               	addwf	FindCell@address,f
  2009  0420  2C29               	goto	l3825
  2010  0421                     l3819:	
  2011                           
  2012                           ;prog.c: 466: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  2013  0421  0842               	movf	FindCell@address,w
  2014  0422  1D03               	btfss	3,2
  2015  0423  2C27               	goto	l3823
  2016  0424  3078               	movlw	120
  2017  0425  00C2               	movwf	FindCell@address
  2018  0426  2C29               	goto	l3825
  2019  0427                     l3823:	
  2020  0427  3008               	movlw	8
  2021  0428  02C2               	subwf	FindCell@address,f
  2022  0429                     l3825:	
  2023                           
  2024                           ;prog.c: 467: }
  2025                           ;prog.c: 469: unsigned char CellsData [(sizeof(DS_Address))];
  2026                           ;prog.c: 470: waitInterrupt();
  2027  0429  27F6               	fcall	_waitInterrupt
  2028                           
  2029                           ;prog.c: 471: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  2030  042A  0842               	movf	FindCell@address,w
  2031  042B  00B0               	movwf	FillArrayFromEEPROM@address_start
  2032  042C  3008               	movlw	8
  2033  042D  00B1               	movwf	FillArrayFromEEPROM@quantity
  2034  042E  3036               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  2035  042F  2794               	fcall	_FillArrayFromEEPROM
  2036                           
  2037                           ;prog.c: 472: unsigned char CellIsEmpty = 1;
  2038  0430  01BF               	clrf	FindCell@CellIsEmpty
  2039  0431  0ABF               	incf	FindCell@CellIsEmpty,f
  2040                           
  2041                           ;prog.c: 473: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2042  0432  01C1               	clrf	FindCell@i
  2043  0433                     l3837:	
  2044                           
  2045                           ;prog.c: 474: if (CellsData[i] != 0xFF) {
  2046  0433  0841               	movf	FindCell@i,w
  2047  0434  3E36               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  2048  0435  0084               	movwf	4
  2049  0436  1383               	bcf	3,7	;select IRP bank0
  2050  0437  0F00               	incfsz	0,w
  2051                           
  2052                           ;prog.c: 475: CellIsEmpty = 0;
  2053  0438  01BF               	clrf	FindCell@CellIsEmpty
  2054  0439  3008               	movlw	8
  2055  043A  0AC1               	incf	FindCell@i,f
  2056  043B  0241               	subwf	FindCell@i,w
  2057  043C  1C03               	skipc
  2058  043D  2C33               	goto	l3837
  2059                           
  2060                           ;prog.c: 476: }
  2061                           ;prog.c: 477: }
  2062                           ;prog.c: 479: if (CellIsEmpty == 0) {
  2063  043E  083F               	movf	FindCell@CellIsEmpty,w
  2064  043F  1D03               	btfss	3,2
  2065  0440  2C44               	goto	l3849
  2066                           
  2067                           ;prog.c: 480: addressNew = address;
  2068  0441  0842               	movf	FindCell@address,w
  2069  0442  00BE               	movwf	FindCell@addressNew
  2070                           
  2071                           ;prog.c: 481: break;
  2072  0443  2C48               	goto	l3851
  2073  0444                     l3849:	
  2074                           
  2075                           ;prog.c: 482: }
  2076                           ;prog.c: 483: } while (address != addressStart);
  2077  0444  0842               	movf	FindCell@address,w
  2078  0445  0640               	xorwf	FindCell@addressStart,w
  2079  0446  1D03               	skipz
  2080  0447  2C15               	goto	l3811
  2081  0448                     l3851:	
  2082                           
  2083                           ;prog.c: 484: return addressNew;
  2084  0448  083E               	movf	FindCell@addressNew,w
  2085  0449  0008               	return
  2086  044A                     __end_of_FindCell:	
  2087                           
  2088                           	psect	text7
  2089  0228                     __ptext7:	
  2090 ;; *************** function _EditAddressMemory *****************
  2091 ;; Defined at:
  2092 ;;		line 659 in file "prog.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  i               1   11[BANK1 ] unsigned char 
  2097 ;;  i               1   12[BANK1 ] unsigned char 
  2098 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  2099 ;;  cell            1   13[BANK1 ] unsigned char 
  2100 ;;  CellIsEmpty     1   10[BANK1 ] unsigned char 
  2101 ;;  RereadCell      1    9[BANK1 ] unsigned char 
  2102 ;;  ErrorShowed     1    8[BANK1 ] unsigned char 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 300/100
  2109 ;;		On exit  : 300/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2112 ;;      Params:         0       0       0       0
  2113 ;;      Locals:         0       0      14       0
  2114 ;;      Temps:          0       1       0       0
  2115 ;;      Totals:         0       1      14       0
  2116 ;;Total ram usage:       15 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    6
  2119 ;; This function calls:
  2120 ;;		_CellToInd
  2121 ;;		_INIT
  2122 ;;		_RX
  2123 ;;		_ReadCell
  2124 ;;		_ShowError
  2125 ;;		_TX
  2126 ;;		_WriteArrayToEEPROM
  2127 ;;		_calc_crc
  2128 ;;		_clrInd
  2129 ;;		_refreshInd
  2130 ;;		_setPoint
  2131 ;;		_waitInterrupt
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _EditAddressMemory
  2139  0228                     _EditAddressMemory:	
  2140                           
  2141                           ;prog.c: 660: getTemp_flags.ActiveProcess = 0;
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2145  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0229  1048               	bcf	_getTemp_flags+4,0
  2147                           
  2148                           ;prog.c: 662: PowerBlocked++;
  2149  022A  0AD8               	incf	_PowerBlocked,f
  2150                           
  2151                           ;prog.c: 664: clrInd();
  2152  022B  27F0               	fcall	_clrInd
  2153                           
  2154                           ;prog.c: 666: unsigned char cell = 0;
  2155  022C  1683               	bsf	3,5	;RP0=1, select bank1
  2156  022D  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2157                           
  2158                           ;prog.c: 667: unsigned char CellIsEmpty = 1;
  2159  022E  01AA               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2160  022F  0AAA               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2161                           
  2162                           ;prog.c: 668: unsigned char CellsData [(sizeof(DS_Address))];
  2163                           ;prog.c: 670: unsigned char ErrorShowed = 0;
  2164  0230  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2165                           
  2166                           ;prog.c: 671: unsigned char RereadCell = 1;
  2167  0231  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2168  0232  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2169  0233                     l3925:	
  2170                           
  2171                           ;prog.c: 674: if (KeyCode != 0 && ErrorShowed) {
  2172  0233  1283               	bcf	3,5	;RP0=0, select bank0
  2173  0234  085F               	movf	_KeyCode,w	;volatile
  2174  0235  1903               	btfsc	3,2
  2175  0236  2A41               	goto	l3933
  2176  0237  1683               	bsf	3,5	;RP0=1, select bank1
  2177  0238  0828               	movf	EditAddressMemory@ErrorShowed^(0+128),w
  2178  0239  1903               	btfsc	3,2
  2179  023A  2A41               	goto	l3933
  2180                           
  2181                           ;prog.c: 675: KeyCode = 0;
  2182  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2183  023C  01DF               	clrf	_KeyCode	;volatile
  2184                           
  2185                           ;prog.c: 676: ErrorShowed = 0;
  2186  023D  1683               	bsf	3,5	;RP0=1, select bank1
  2187  023E  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2188                           
  2189                           ;prog.c: 677: RereadCell = 1;
  2190  023F  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2191  0240  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2192  0241                     l3933:	
  2193                           
  2194                           ;prog.c: 678: }
  2195                           ;prog.c: 680: if (KeyCode == 31) {
  2196  0241  301F               	movlw	31
  2197  0242  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0243  065F               	xorwf	_KeyCode,w	;volatile
  2199  0244  1D03               	btfss	3,2
  2200  0245  2A53               	goto	l3945
  2201                           
  2202                           ;prog.c: 681: KeyCode = 0;
  2203  0246  01DF               	clrf	_KeyCode	;volatile
  2204                           
  2205                           ;prog.c: 682: if (cell > 0) {
  2206  0247  1683               	bsf	3,5	;RP0=1, select bank1
  2207  0248  082D               	movf	EditAddressMemory@cell^(0+128),w
  2208  0249  1903               	btfsc	3,2
  2209  024A  2A4D               	goto	l3941
  2210                           
  2211                           ;prog.c: 683: cell--;
  2212  024B  03AD               	decf	EditAddressMemory@cell^(0+128),f
  2213                           
  2214                           ;prog.c: 684: } else {
  2215  024C  2A4F               	goto	l3943
  2216  024D                     l3941:	
  2217                           
  2218                           ;prog.c: 685: cell = 16 - 1;
  2219  024D  300F               	movlw	15
  2220  024E  00AD               	movwf	EditAddressMemory@cell^(0+128)
  2221  024F                     l3943:	
  2222                           
  2223                           ;prog.c: 686: }
  2224                           ;prog.c: 687: RereadCell = 1;
  2225  024F  1683               	bsf	3,5	;RP0=1, select bank1
  2226  0250  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2227  0251  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2228                           
  2229                           ;prog.c: 688: } else if (KeyCode == 32) {
  2230  0252  2AC7               	goto	l4037
  2231  0253                     l3945:	
  2232  0253  3020               	movlw	32
  2233  0254  065F               	xorwf	_KeyCode,w	;volatile
  2234  0255  1D03               	btfss	3,2
  2235  0256  2A61               	goto	l3957
  2236                           
  2237                           ;prog.c: 689: KeyCode = 0;
  2238  0257  01DF               	clrf	_KeyCode	;volatile
  2239                           
  2240                           ;prog.c: 690: if (cell < 16 - 1) {
  2241  0258  300F               	movlw	15
  2242  0259  1683               	bsf	3,5	;RP0=1, select bank1
  2243  025A  022D               	subwf	EditAddressMemory@cell^(0+128),w
  2244  025B  1803               	skipnc
  2245  025C  2A5F               	goto	l3953
  2246                           
  2247                           ;prog.c: 691: cell++;
  2248  025D  0AAD               	incf	EditAddressMemory@cell^(0+128),f
  2249                           
  2250                           ;prog.c: 692: } else {
  2251  025E  2A4F               	goto	l3943
  2252  025F                     l3953:	
  2253                           
  2254                           ;prog.c: 693: cell = 0;
  2255  025F  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2256  0260  2A4F               	goto	l3943
  2257  0261                     l3957:	
  2258  0261  3022               	movlw	34
  2259  0262  065F               	xorwf	_KeyCode,w	;volatile
  2260  0263  1D03               	btfss	3,2
  2261  0264  2A69               	goto	l3967
  2262                           
  2263                           ;prog.c: 697: KeyCode = 0;
  2264  0265  01DF               	clrf	_KeyCode	;volatile
  2265                           
  2266                           ;prog.c: 698: clrInd();
  2267  0266  27F0               	fcall	_clrInd
  2268                           
  2269                           ;prog.c: 699: refreshInd();
  2270  0267  27E2               	fcall	_refreshInd
  2271                           
  2272                           ;prog.c: 700: break;
  2273  0268  2AE3               	goto	l4049
  2274  0269                     l3967:	
  2275  0269  3023               	movlw	35
  2276  026A  065F               	xorwf	_KeyCode,w	;volatile
  2277  026B  1D03               	btfss	3,2
  2278  026C  2AAE               	goto	l4013
  2279  026D  1683               	bsf	3,5	;RP0=1, select bank1
  2280  026E  0B2A               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2281  026F  2AAE               	goto	l4013
  2282                           
  2283                           ;prog.c: 702: KeyCode = 0;
  2284  0270  1283               	bcf	3,5	;RP0=0, select bank0
  2285  0271  01DF               	clrf	_KeyCode	;volatile
  2286                           
  2287                           ;prog.c: 703: waitInterrupt();
  2288  0272  27F6               	fcall	_waitInterrupt
  2289                           
  2290                           ;prog.c: 704: if (INIT(0b00000010)) {
  2291  0273  3002               	movlw	2
  2292  0274  2511               	fcall	_INIT
  2293  0275  3A00               	xorlw	0
  2294  0276  1903               	skipnz
  2295  0277  2AA9               	goto	l4005
  2296                           
  2297                           ;prog.c: 705: waitInterrupt();
  2298  0278  27F6               	fcall	_waitInterrupt
  2299                           
  2300                           ;prog.c: 706: TX(0x33, 0b00000010);
  2301  0279  3002               	movlw	2
  2302  027A  00AD               	movwf	TX@line
  2303  027B  3033               	movlw	51
  2304  027C  2549               	fcall	_TX
  2305                           
  2306                           ;prog.c: 707: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2307  027D  1683               	bsf	3,5	;RP0=1, select bank1
  2308  027E  01AB               	clrf	EditAddressMemory@i^(0+128)
  2309  027F                     l3987:	
  2310                           
  2311                           ;prog.c: 708: waitInterrupt();
  2312  027F  27F6               	fcall	_waitInterrupt
  2313                           
  2314                           ;prog.c: 709: CellsData[i] = RX(0b00000010);
  2315  0280  1683               	bsf	3,5	;RP0=1, select bank1
  2316  0281  082B               	movf	EditAddressMemory@i^(0+128),w
  2317  0282  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2318  0283  0084               	movwf	4
  2319  0284  3002               	movlw	2
  2320  0285  25DE               	fcall	_RX
  2321  0286  1383               	bcf	3,7	;select IRP bank1
  2322  0287  0080               	movwf	0
  2323  0288  3008               	movlw	8
  2324  0289  1683               	bsf	3,5	;RP0=1, select bank1
  2325  028A  0AAB               	incf	EditAddressMemory@i^(0+128),f
  2326  028B  022B               	subwf	EditAddressMemory@i^(0+128),w
  2327  028C  1C03               	skipc
  2328  028D  2A7F               	goto	l3987
  2329                           
  2330                           ;prog.c: 710: }
  2331                           ;prog.c: 711: if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_
      +                          Address)) - 1)) {
  2332  028E  3007               	movlw	7
  2333  028F  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0290  00AD               	movwf	calc_crc@len
  2335  0291  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2336  0292  2679               	fcall	_calc_crc
  2337  0293  1683               	bsf	3,5	;RP0=1, select bank1
  2338  0294  0627               	xorwf	(EditAddressMemory@CellsData^(0+128)+7),w
  2339  0295  1D03               	skipz
  2340  0296  2AA9               	goto	l4005
  2341  0297                     l3997:	
  2342                           
  2343                           ;prog.c: 712: waitInterrupt();
  2344  0297  27F6               	fcall	_waitInterrupt
  2345                           
  2346                           ;prog.c: 713: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2347  0298  1683               	bsf	3,5	;RP0=1, select bank1
  2348  0299  082D               	movf	EditAddressMemory@cell^(0+128),w
  2349  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2350  029B  00BA               	movwf	??_EditAddressMemory
  2351  029C  1003               	clrc
  2352  029D  0DBA               	rlf	??_EditAddressMemory,f
  2353  029E  1003               	clrc
  2354  029F  0DBA               	rlf	??_EditAddressMemory,f
  2355  02A0  1003               	clrc
  2356  02A1  0D3A               	rlf	??_EditAddressMemory,w
  2357  02A2  00B0               	movwf	WriteArrayToEEPROM@address_start
  2358  02A3  3008               	movlw	8
  2359  02A4  00B1               	movwf	WriteArrayToEEPROM@quantity
  2360  02A5  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2361  02A6  276F               	fcall	_WriteArrayToEEPROM
  2362                           
  2363                           ;prog.c: 714: waitInterrupt();
  2364  02A7  27F6               	fcall	_waitInterrupt
  2365  02A8  2A4F               	goto	l3943
  2366  02A9                     l4005:	
  2367                           
  2368                           ;prog.c: 717: ShowError();
  2369  02A9  27C3               	fcall	_ShowError
  2370                           
  2371                           ;prog.c: 718: ErrorShowed = 1;
  2372  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  2373  02AB  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2374  02AC  0AA8               	incf	EditAddressMemory@ErrorShowed^(0+128),f
  2375  02AD  2AC7               	goto	l4037
  2376  02AE                     l4013:	
  2377  02AE  3024               	movlw	36
  2378  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2379  02B0  065F               	xorwf	_KeyCode,w	;volatile
  2380  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2381  02B2  1D03               	btfss	3,2
  2382  02B3  2AC8               	goto	L8
  2383  02B4  082A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2384  02B5  1D03               	btfss	3,2
  2385  02B6  2AC7               	goto	l4037
  2386                           
  2387                           ;prog.c: 725: KeyCode = 0;
  2388  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2389  02B8  01DF               	clrf	_KeyCode	;volatile
  2390                           
  2391                           ;prog.c: 726: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2392  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2393  02BA  01AC               	clrf	EditAddressMemory@i_264^(0+128)
  2394  02BB                     l4023:	
  2395                           
  2396                           ;prog.c: 727: CellsData[i] = 0xFF;
  2397  02BB  082C               	movf	EditAddressMemory@i_264^(0+128),w
  2398  02BC  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2399  02BD  0084               	movwf	4
  2400  02BE  30FF               	movlw	255
  2401  02BF  1383               	bcf	3,7	;select IRP bank1
  2402  02C0  0080               	movwf	0
  2403  02C1  3008               	movlw	8
  2404  02C2  0AAC               	incf	EditAddressMemory@i_264^(0+128),f
  2405  02C3  022C               	subwf	EditAddressMemory@i_264^(0+128),w
  2406  02C4  1C03               	skipc
  2407  02C5  2ABB               	goto	l4023
  2408  02C6  2A97               	goto	l3997
  2409  02C7                     l4037:	
  2410                           ;prog.c: 730: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2411                           
  2412                           ;prog.c: 728: }
  2413                           ;prog.c: 729: waitInterrupt();
  2414                           
  2415                           
  2416                           ;prog.c: 733: }
  2417                           ;prog.c: 735: if (RereadCell) {
  2418  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2419  02C8                     L8:	
  2420  02C8  0829               	movf	EditAddressMemory@RereadCell^(0+128),w
  2421  02C9  1903               	btfsc	3,2
  2422  02CA  2A33               	goto	l3925
  2423  02CB  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2424                           
  2425                           ;prog.c: 736: RereadCell = 0;
  2426  02CC  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2427                           
  2428                           ;prog.c: 737: CellIsEmpty = ReadCell(cell, CellsData);
  2429  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2430  02CE  00B5               	movwf	ReadCell@CellsData
  2431  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2432  02D0  082D               	movf	EditAddressMemory@cell^(0+128),w
  2433  02D1  26D7               	fcall	_ReadCell
  2434  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  2435  02D3  00AA               	movwf	EditAddressMemory@CellIsEmpty^(0+128)
  2436                           
  2437                           ;prog.c: 738: CellToInd(cell);
  2438  02D4  082D               	movf	EditAddressMemory@cell^(0+128),w
  2439  02D5  2608               	fcall	_CellToInd
  2440                           
  2441                           ;prog.c: 739: setPoint(1, !CellIsEmpty);
  2442  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2443  02D7  082A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2444  02D8  1D03               	btfss	3,2
  2445  02D9  2ADC               	goto	u4380
  2446  02DA  3001               	movlw	1
  2447  02DB  2ADD               	goto	u4390
  2448  02DC                     u4380:	
  2449  02DC  3000               	movlw	0
  2450  02DD                     u4390:	
  2451  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2452  02DE  00AD               	movwf	setPoint@value
  2453  02DF  3001               	movlw	1
  2454  02E0  27A5               	fcall	_setPoint
  2455                           
  2456                           ;prog.c: 740: refreshInd();
  2457  02E1  27E2               	fcall	_refreshInd
  2458  02E2  2A33               	goto	l3925
  2459  02E3                     l4049:	
  2460                           
  2461                           ;prog.c: 741: }
  2462                           ;prog.c: 742: }
  2463                           ;prog.c: 743: waitInterrupt();
  2464  02E3  27F6               	fcall	_waitInterrupt
  2465                           
  2466                           ;prog.c: 744: PowerBlocked--;
  2467  02E4  03D8               	decf	_PowerBlocked,f
  2468  02E5  0008               	return
  2469  02E6                     __end_of_EditAddressMemory:	
  2470                           
  2471                           	psect	text8
  2472  07A5                     __ptext8:	
  2473 ;; *************** function _setPoint *****************
  2474 ;; Defined at:
  2475 ;;		line 108 in file "prog.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  dignum          1    wreg     unsigned char 
  2478 ;;  value           1   13[BANK0 ] unsigned char 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  dignum          1   14[BANK0 ] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2485 ;; Tracked objects:
  2486 ;;		On entry : 300/0
  2487 ;;		On exit  : B00/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2490 ;;      Params:         0       1       0       0
  2491 ;;      Locals:         0       1       0       0
  2492 ;;      Temps:          0       0       0       0
  2493 ;;      Totals:         0       2       0       0
  2494 ;;Total ram usage:        2 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    3
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_indData
  2501 ;;		_EditAddressMemory
  2502 ;;		_main
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           
  2507                           ;psect for function _setPoint
  2508  07A5                     _setPoint:	
  2509                           
  2510                           ;incstack = 0
  2511                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2512                           ;setPoint@dignum stored from wreg
  2513  07A5  00AE               	movwf	setPoint@dignum
  2514                           
  2515                           ;prog.c: 109: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 
      +                          0b10111111;
  2516  07A6  0B2D               	decfsz	setPoint@value,w
  2517  07A7  2FAE               	goto	l3461
  2518  07A8  082E               	movf	setPoint@dignum,w
  2519  07A9  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2520  07AA  0084               	movwf	4
  2521  07AB  1383               	bcf	3,7	;select IRP bank0
  2522  07AC  1700               	bsf	0,6
  2523  07AD  0008               	return
  2524  07AE                     l3461:	
  2525  07AE  082E               	movf	setPoint@dignum,w
  2526  07AF  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2527  07B0  0084               	movwf	4
  2528  07B1  1383               	bcf	3,7	;select IRP bank0
  2529  07B2  1300               	bcf	0,6
  2530  07B3  0008               	return
  2531  07B4                     __end_of_setPoint:	
  2532                           
  2533                           	psect	text9
  2534  0679                     __ptext9:	
  2535 ;; *************** function _calc_crc *****************
  2536 ;; Defined at:
  2537 ;;		line 279 in file "prog.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  mas             1    wreg     PTR unsigned char 
  2540 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2541 ;;  len             1   13[BANK0 ] unsigned char 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  mas             1   16[BANK0 ] PTR unsigned char 
  2544 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2545 ;;  fb              1   15[BANK0 ] unsigned char 
  2546 ;;  i               1   17[BANK0 ] unsigned char 
  2547 ;;  dat             1   14[BANK0 ] unsigned char 
  2548 ;;  crc             1   18[BANK0 ] unsigned char 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      unsigned char 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2553 ;; Tracked objects:
  2554 ;;		On entry : B00/0
  2555 ;;		On exit  : B00/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2558 ;;      Params:         0       1       0       0
  2559 ;;      Locals:         0       5       0       0
  2560 ;;      Temps:          0       0       0       0
  2561 ;;      Totals:         0       6       0       0
  2562 ;;Total ram usage:        6 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    3
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_EditAddressMemory
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _calc_crc
  2574  0679                     _calc_crc:	
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2578                           ;calc_crc@mas stored from wreg
  2579  0679  00B0               	movwf	calc_crc@mas
  2580                           
  2581                           ;prog.c: 280: unsigned char crc = 0;
  2582  067A  01B2               	clrf	calc_crc@crc
  2583                           
  2584                           ;prog.c: 281: while (len--) {
  2585  067B  2E95               	goto	l3587
  2586  067C                     l3567:	
  2587                           
  2588                           ;prog.c: 282: unsigned char dat = *mas++;
  2589  067C  0830               	movf	calc_crc@mas,w
  2590  067D  0084               	movwf	4
  2591  067E  0800               	movf	0,w
  2592  067F  00AE               	movwf	calc_crc@dat
  2593  0680  0AB0               	incf	calc_crc@mas,f
  2594                           
  2595                           ;prog.c: 283: for (unsigned char i = 0; i < 8; i++) {
  2596  0681  01B1               	clrf	calc_crc@i
  2597  0682                     l3577:	
  2598                           
  2599                           ;prog.c: 284: unsigned char fb = (crc ^ dat) & 1;
  2600  0682  0832               	movf	calc_crc@crc,w
  2601  0683  062E               	xorwf	calc_crc@dat,w
  2602  0684  00AF               	movwf	calc_crc@fb
  2603  0685  3001               	movlw	1
  2604  0686  05AF               	andwf	calc_crc@fb,f
  2605                           
  2606                           ;prog.c: 285: crc >>= 1;
  2607  0687  1003               	clrc
  2608  0688  0CB2               	rrf	calc_crc@crc,f
  2609                           
  2610                           ;prog.c: 286: dat >>= 1;
  2611  0689  1003               	clrc
  2612  068A  0CAE               	rrf	calc_crc@dat,f
  2613                           
  2614                           ;prog.c: 287: if (fb) crc ^= 0x8c;
  2615  068B  082F               	movf	calc_crc@fb,w
  2616  068C  1903               	btfsc	3,2
  2617  068D  2E90               	goto	l3585
  2618  068E  308C               	movlw	140
  2619  068F  06B2               	xorwf	calc_crc@crc,f
  2620  0690                     l3585:	
  2621  0690  3008               	movlw	8
  2622  0691  0AB1               	incf	calc_crc@i,f
  2623  0692  0231               	subwf	calc_crc@i,w
  2624  0693  1C03               	skipc
  2625  0694  2E82               	goto	l3577
  2626  0695                     l3587:	
  2627  0695  03AD               	decf	calc_crc@len,f
  2628  0696  0F2D               	incfsz	calc_crc@len,w
  2629  0697  2E7C               	goto	l3567
  2630                           
  2631                           ;prog.c: 288: }
  2632                           ;prog.c: 289: }
  2633                           ;prog.c: 290: return crc;
  2634  0698  0832               	movf	calc_crc@crc,w
  2635  0699  0008               	return
  2636  069A                     __end_of_calc_crc:	
  2637                           
  2638                           	psect	text10
  2639  076F                     __ptext10:	
  2640 ;; *************** function _WriteArrayToEEPROM *****************
  2641 ;; Defined at:
  2642 ;;		line 211 in file "prog.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;  container       1    wreg     PTR unsigned char 
  2645 ;;		 -> EditAddressMemory@CellsData(8), 
  2646 ;;  address_star    1   16[BANK0 ] unsigned char 
  2647 ;;  quantity        1   17[BANK0 ] unsigned char 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  container       1   19[BANK0 ] PTR unsigned char 
  2650 ;;		 -> EditAddressMemory@CellsData(8), 
  2651 ;;  i               1   20[BANK0 ] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 300/0
  2658 ;;		On exit  : 300/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2661 ;;      Params:         0       2       0       0
  2662 ;;      Locals:         0       2       0       0
  2663 ;;      Temps:          0       1       0       0
  2664 ;;      Totals:         0       5       0       0
  2665 ;;Total ram usage:        5 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    4
  2668 ;; This function calls:
  2669 ;;		_EEWR
  2670 ;;		_waitInterrupt
  2671 ;; This function is called by:
  2672 ;;		_EditAddressMemory
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           
  2677                           ;psect for function _WriteArrayToEEPROM
  2678  076F                     _WriteArrayToEEPROM:	
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2682                           ;WriteArrayToEEPROM@container stored from wreg
  2683  076F  00B3               	movwf	WriteArrayToEEPROM@container
  2684                           
  2685                           ;prog.c: 212: for (unsigned char i = 0; i < quantity; i++) {
  2686  0770  01B4               	clrf	WriteArrayToEEPROM@i
  2687  0771                     l3481:	
  2688  0771  0831               	movf	WriteArrayToEEPROM@quantity,w
  2689  0772  0234               	subwf	WriteArrayToEEPROM@i,w
  2690  0773  1803               	btfsc	3,0
  2691  0774  0008               	return
  2692                           
  2693                           ;prog.c: 213: waitInterrupt();
  2694  0775  27F6               	fcall	_waitInterrupt
  2695                           
  2696                           ;prog.c: 214: EEWR(address_start + i, container[i]);
  2697  0776  0834               	movf	WriteArrayToEEPROM@i,w
  2698  0777  0733               	addwf	WriteArrayToEEPROM@container,w
  2699  0778  00B2               	movwf	??_WriteArrayToEEPROM
  2700  0779  0084               	movwf	4
  2701  077A  1383               	bcf	3,7	;select IRP bank0
  2702  077B  0800               	movf	0,w
  2703  077C  00AD               	movwf	EEWR@data
  2704  077D  0834               	movf	WriteArrayToEEPROM@i,w
  2705  077E  0730               	addwf	WriteArrayToEEPROM@address_start,w
  2706  077F  2743               	fcall	_EEWR
  2707  0780  0AB4               	incf	WriteArrayToEEPROM@i,f
  2708  0781  2F71               	goto	l3481
  2709  0782                     __end_of_WriteArrayToEEPROM:	
  2710                           
  2711                           	psect	text11
  2712  07F6                     __ptext11:	
  2713 ;; *************** function _waitInterrupt *****************
  2714 ;; Defined at:
  2715 ;;		line 91 in file "prog.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		None
  2724 ;; Tracked objects:
  2725 ;;		On entry : 200/0
  2726 ;;		On exit  : 300/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2729 ;;      Params:         0       0       0       0
  2730 ;;      Locals:         0       0       0       0
  2731 ;;      Temps:          0       0       0       0
  2732 ;;      Totals:         0       0       0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    3
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_WriteArrayToEEPROM
  2740 ;;		_FindCell
  2741 ;;		_EditAddressMemory
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           
  2747                           ;psect for function _waitInterrupt
  2748  07F6                     _waitInterrupt:	
  2749                           
  2750                           ;prog.c: 92: endInterrupt = 0;
  2751                           
  2752                           ;incstack = 0
  2753                           ; Regs used in _waitInterrupt: []
  2754  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  2755  07F7  10E0               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2756  07F8                     l75:	
  2757                           ;prog.c: 93: while (!endInterrupt);
  2758                           
  2759  07F8  18E0               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2760  07F9  0008               	return
  2761  07FA  2FF8               	goto	l75
  2762  07FB                     __end_of_waitInterrupt:	
  2763                           
  2764                           	psect	text12
  2765  0743                     __ptext12:	
  2766 ;; *************** function _EEWR *****************
  2767 ;; Defined at:
  2768 ;;		line 179 in file "prog.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  address         1    wreg     unsigned char 
  2771 ;;  data            1   13[BANK0 ] unsigned char 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  address         1   14[BANK0 ] unsigned char 
  2774 ;;  INTCON_BUP      1   15[BANK0 ] volatile unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg
  2779 ;; Tracked objects:
  2780 ;;		On entry : B00/0
  2781 ;;		On exit  : B00/0
  2782 ;;		Unchanged: 800/0
  2783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2784 ;;      Params:         0       1       0       0
  2785 ;;      Locals:         0       2       0       0
  2786 ;;      Temps:          0       0       0       0
  2787 ;;      Totals:         0       3       0       0
  2788 ;;Total ram usage:        3 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    3
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_WriteArrayToEEPROM
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           
  2799                           ;psect for function _EEWR
  2800  0743                     _EEWR:	
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _EEWR: [wreg]
  2804                           ;EEWR@address stored from wreg
  2805  0743  00AE               	movwf	EEWR@address
  2806                           
  2807                           ;prog.c: 180: volatile unsigned char INTCON_BUP = INTCON;
  2808  0744  080B               	movf	11,w	;volatile
  2809  0745  00AF               	movwf	EEWR@INTCON_BUP	;volatile
  2810                           
  2811                           ;prog.c: 181: INTCONbits.GIE = 0;
  2812  0746  138B               	bcf	11,7	;volatile
  2813                           
  2814                           ;prog.c: 182: EEADR = address;
  2815  0747  082E               	movf	EEWR@address,w
  2816  0748  1683               	bsf	3,5	;RP0=1, select bank1
  2817  0749  009B               	movwf	27	;volatile
  2818                           
  2819                           ;prog.c: 183: EEDATA = data;
  2820  074A  1283               	bcf	3,5	;RP0=0, select bank0
  2821  074B  082D               	movf	EEWR@data,w
  2822  074C  1683               	bsf	3,5	;RP0=1, select bank1
  2823  074D  009A               	movwf	26	;volatile
  2824                           
  2825                           ;prog.c: 184: EECON1bits.WREN = 1;
  2826  074E  151C               	bsf	28,2	;volsfr
  2827                           
  2828                           ;prog.c: 185: EECON2 = 0x55;
  2829  074F  3055               	movlw	85
  2830  0750  009D               	movwf	29	;volsfr
  2831                           
  2832                           ;prog.c: 186: EECON2 = 0xAA;
  2833  0751  30AA               	movlw	170
  2834  0752  009D               	movwf	29	;volsfr
  2835                           
  2836                           ;prog.c: 187: EECON1bits.WR = 1;
  2837  0753  149C               	bsf	28,1	;volsfr
  2838                           
  2839                           ;prog.c: 188: EECON1bits.WREN = 0;
  2840  0754  111C               	bcf	28,2	;volsfr
  2841  0755                     l125:	
  2842                           ;prog.c: 189: while (EECON1bits.WR == 1) {
  2843                           
  2844  0755  189C               	btfsc	28,1	;volsfr
  2845  0756  2F55               	goto	l125
  2846                           
  2847                           ;prog.c: 190: }
  2848                           ;prog.c: 191: INTCON = INTCON_BUP;
  2849  0757  1283               	bcf	3,5	;RP0=0, select bank0
  2850  0758  082F               	movf	EEWR@INTCON_BUP,w	;volatile
  2851  0759  008B               	movwf	11	;volatile
  2852  075A  0008               	return
  2853  075B                     __end_of_EEWR:	
  2854                           
  2855                           	psect	text13
  2856  0549                     __ptext13:	
  2857 ;; *************** function _TX *****************
  2858 ;; Defined at:
  2859 ;;		line 237 in file "prog.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  cmd             1    wreg     unsigned char 
  2862 ;;  line            1   13[BANK0 ] unsigned char 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  cmd             1   15[BANK0 ] unsigned char 
  2865 ;;  One             1   19[BANK0 ] unsigned char 
  2866 ;;  i               1   18[BANK0 ] unsigned char 
  2867 ;;  Zero            1   17[BANK0 ] unsigned char 
  2868 ;;  temp            1   16[BANK0 ] unsigned char 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0
  2873 ;; Tracked objects:
  2874 ;;		On entry : 300/0
  2875 ;;		On exit  : 300/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2878 ;;      Params:         0       1       0       0
  2879 ;;      Locals:         0       5       0       0
  2880 ;;      Temps:          0       1       0       0
  2881 ;;      Totals:         0       7       0       0
  2882 ;;Total ram usage:        7 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    3
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_EditAddressMemory
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _TX
  2894  0549                     _TX:	
  2895                           
  2896                           ;incstack = 0
  2897                           ; Regs used in _TX: [wreg+status,2+status,0]
  2898                           ;TX@cmd stored from wreg
  2899  0549  00AF               	movwf	TX@cmd
  2900                           
  2901                           ;prog.c: 238: unsigned char One = line;
  2902  054A  082D               	movf	TX@line,w
  2903  054B  00B3               	movwf	TX@One
  2904                           
  2905                           ;prog.c: 239: unsigned char Zero = One ^ 0b11111111;
  2906  054C  0933               	comf	TX@One,w
  2907  054D  00B1               	movwf	TX@Zero
  2908                           
  2909                           ;prog.c: 242: unsigned char i = 0;
  2910  054E  01B2               	clrf	TX@i
  2911                           
  2912                           ;prog.c: 243: temp = cmd;
  2913  054F  082F               	movf	TX@cmd,w
  2914  0550  00B0               	movwf	TX@temp
  2915                           
  2916                           ;prog.c: 244: for (i = 0; i < 8; i++) {
  2917  0551  01B2               	clrf	TX@i
  2918  0552                     l149:	
  2919                           
  2920                           ;prog.c: 245: if (temp & 0x01) {
  2921  0552  1C30               	btfss	TX@temp,0
  2922  0553  2D61               	goto	l3523
  2923                           
  2924                           ;prog.c: 246: TRISA &= Zero;
  2925  0554  0831               	movf	TX@Zero,w
  2926  0555  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0556  0585               	andwf	5,f	;volatile
  2928                           
  2929                           ;prog.c: 247: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2930  0557  2D58               	nop2	;2 cycle nop
  2931  0558  2D59               	nop2	;2 cycle nop
  2932  0559  0000               	nop
  2933                           
  2934                           ;prog.c: 248: TRISA |= One;
  2935  055A  2577               	fcall	PL6	;call to abstracted procedure
  2936                           
  2937                           ;prog.c: 249: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2938  055B  3017               	movlw	23
  2939  055C  1283               	bcf	3,5	;RP0=0, select bank0
  2940  055D  00AE               	movwf	??_TX
  2941  055E                     u4857:	
  2942  055E  0BAE               	decfsz	??_TX,f
  2943  055F  2D5E               	goto	u4857
  2944                           
  2945                           ;prog.c: 250: } else {
  2946  0560  2D6D               	goto	l3531
  2947  0561                     l3523:	
  2948                           
  2949                           ;prog.c: 251: TRISA &= Zero;
  2950  0561  0831               	movf	TX@Zero,w
  2951  0562  1683               	bsf	3,5	;RP0=1, select bank1
  2952  0563  0585               	andwf	5,f	;volatile
  2953                           
  2954                           ;prog.c: 252: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2955  0564  3017               	movlw	23
  2956  0565  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0566  00AE               	movwf	??_TX
  2958  0567                     u4867:	
  2959  0567  0BAE               	decfsz	??_TX,f
  2960  0568  2D67               	goto	u4867
  2961                           
  2962                           ;prog.c: 253: TRISA |= One;
  2963  0569  2577               	fcall	PL6	;call to abstracted procedure
  2964                           
  2965                           ;prog.c: 254: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2966  056A  2D6B               	nop2	;2 cycle nop
  2967  056B  2D6C               	nop2	;2 cycle nop
  2968  056C  0000               	nop
  2969  056D                     l3531:	
  2970  056D  3008               	movlw	8
  2971                           
  2972                           ;prog.c: 255: }
  2973                           ;prog.c: 256: temp >>= 1;
  2974  056E  1283               	bcf	3,5	;RP0=0, select bank0
  2975  056F  1303               	bcf	3,6	;RP1=0, select bank0
  2976  0570  1003               	clrc
  2977  0571  0CB0               	rrf	TX@temp,f
  2978  0572  0AB2               	incf	TX@i,f
  2979  0573  0232               	subwf	TX@i,w
  2980  0574  1803               	btfsc	3,0
  2981  0575  0008               	return
  2982  0576  2D52               	goto	l149
  2983  0577                     __end_of_TX:	
  2984  0577                     PL6:	
  2985  0577  1283               	bcf	3,5	;RP0=0, select bank0
  2986  0578  1303               	bcf	3,6	;RP1=0, select bank0
  2987  0579  0833               	movf	TX@One,w
  2988  057A  1683               	bsf	3,5	;RP0=1, select bank1
  2989  057B  0485               	iorwf	5,f	;volatile
  2990  057C  0008               	return
  2991  057D                     __end_ofPL6:	
  2992                           
  2993                           	psect	text14
  2994  07C3                     __ptext14:	
  2995 ;; *************** function _ShowError *****************
  2996 ;; Defined at:
  2997 ;;		line 124 in file "prog.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;		None
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;		None
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 200/0
  3008 ;;		On exit  : 300/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3011 ;;      Params:         0       0       0       0
  3012 ;;      Locals:         0       0       0       0
  3013 ;;      Temps:          0       0       0       0
  3014 ;;      Totals:         0       0       0       0
  3015 ;;Total ram usage:        0 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    4
  3018 ;; This function calls:
  3019 ;;		_clrInd
  3020 ;;		_refreshInd
  3021 ;;		_setDigit
  3022 ;; This function is called by:
  3023 ;;		_EditAddressMemory
  3024 ;;		_main
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           
  3029                           ;psect for function _ShowError
  3030  07C3                     _ShowError:	
  3031                           
  3032                           ;prog.c: 125: clrInd();
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in _ShowError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3036  07C3  27F0               	fcall	_clrInd
  3037                           
  3038                           ;prog.c: 126: setDigit(3, 14);
  3039  07C4  300E               	movlw	14
  3040  07C5  00B5               	movwf	setDigit@data
  3041  07C6  3003               	movlw	3
  3042  07C7  2782               	fcall	_setDigit
  3043                           
  3044                           ;prog.c: 127: setDigit(2, 24);
  3045  07C8  3018               	movlw	24
  3046  07C9  00B5               	movwf	setDigit@data
  3047  07CA  3002               	movlw	2
  3048  07CB  2782               	fcall	_setDigit
  3049                           
  3050                           ;prog.c: 128: setDigit(1, 24);
  3051  07CC  3018               	movlw	24
  3052  07CD  00B5               	movwf	setDigit@data
  3053  07CE  3001               	movlw	1
  3054  07CF  2782               	fcall	_setDigit
  3055                           
  3056                           ;prog.c: 129: refreshInd();
  3057  07D0  2FE2               	ljmp	l3353
  3058  07D1                     __end_of_ShowError:	
  3059                           
  3060                           	psect	text15
  3061  06D7                     __ptext15:	
  3062 ;; *************** function _ReadCell *****************
  3063 ;; Defined at:
  3064 ;;		line 636 in file "prog.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  cell            1    wreg     unsigned char 
  3067 ;;  CellsData       1   21[BANK0 ] PTR unsigned char 
  3068 ;;		 -> EditAddressMemory@CellsData(8), 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  cell            1   23[BANK0 ] unsigned char 
  3071 ;;  i               1   24[BANK0 ] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      unsigned char 
  3074 ;; Registers used:
  3075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 300/100
  3078 ;;		On exit  : B00/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3081 ;;      Params:         0       1       0       0
  3082 ;;      Locals:         0       2       0       0
  3083 ;;      Temps:          0       1       0       0
  3084 ;;      Totals:         0       4       0       0
  3085 ;;Total ram usage:        4 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    5
  3088 ;; This function calls:
  3089 ;;		_FillArrayFromEEPROM
  3090 ;; This function is called by:
  3091 ;;		_EditAddressMemory
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _ReadCell
  3097  06D7                     _ReadCell:	
  3098                           
  3099                           ;incstack = 0
  3100                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3101                           ;ReadCell@cell stored from wreg
  3102  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  3103  06D8  00B7               	movwf	ReadCell@cell
  3104                           
  3105                           ;prog.c: 637: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  3106  06D9  00B6               	movwf	??_ReadCell
  3107  06DA  1003               	clrc
  3108  06DB  0DB6               	rlf	??_ReadCell,f
  3109  06DC  1003               	clrc
  3110  06DD  0DB6               	rlf	??_ReadCell,f
  3111  06DE  1003               	clrc
  3112  06DF  0D36               	rlf	??_ReadCell,w
  3113  06E0  00B0               	movwf	FillArrayFromEEPROM@address_start
  3114  06E1  3008               	movlw	8
  3115  06E2  00B1               	movwf	FillArrayFromEEPROM@quantity
  3116  06E3  0835               	movf	ReadCell@CellsData,w
  3117  06E4  2794               	fcall	_FillArrayFromEEPROM
  3118                           
  3119                           ;prog.c: 638: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  3120  06E5  01B8               	clrf	ReadCell@i
  3121  06E6                     l3601:	
  3122                           
  3123                           ;prog.c: 639: if (CellsData[i] != 0xFF) {
  3124  06E6  0838               	movf	ReadCell@i,w
  3125  06E7  0735               	addwf	ReadCell@CellsData,w
  3126  06E8  00B6               	movwf	??_ReadCell
  3127  06E9  0084               	movwf	4
  3128  06EA  1383               	bcf	3,7	;select IRP bank0
  3129  06EB  0F00               	incfsz	0,w
  3130                           
  3131                           ;prog.c: 640: return 0;
  3132  06EC  3400               	retlw	0
  3133  06ED  3008               	movlw	8
  3134  06EE  0AB8               	incf	ReadCell@i,f
  3135  06EF  0238               	subwf	ReadCell@i,w
  3136  06F0  1803               	btfsc	3,0
  3137                           
  3138                           ;prog.c: 641: }
  3139                           ;prog.c: 642: }
  3140                           ;prog.c: 643: return 1;
  3141  06F1  3401               	retlw	1
  3142  06F2  2EE6               	goto	l3601
  3143  06F3                     __end_of_ReadCell:	
  3144                           
  3145                           	psect	text16
  3146  0794                     __ptext16:	
  3147 ;; *************** function _FillArrayFromEEPROM *****************
  3148 ;; Defined at:
  3149 ;;		line 205 in file "prog.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  container       1    wreg     PTR unsigned char 
  3152 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3153 ;;  address_star    1   16[BANK0 ] unsigned char 
  3154 ;;  quantity        1   17[BANK0 ] unsigned char 
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  container       1   19[BANK0 ] PTR unsigned char 
  3157 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3158 ;;  i               1   20[BANK0 ] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 300/0
  3165 ;;		On exit  : 300/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3168 ;;      Params:         0       2       0       0
  3169 ;;      Locals:         0       2       0       0
  3170 ;;      Temps:          0       1       0       0
  3171 ;;      Totals:         0       5       0       0
  3172 ;;Total ram usage:        5 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    4
  3175 ;; This function calls:
  3176 ;;		_EERD
  3177 ;; This function is called by:
  3178 ;;		_FindCell
  3179 ;;		_ReadCell
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _FillArrayFromEEPROM
  3186  0794                     _FillArrayFromEEPROM:	
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3190                           ;FillArrayFromEEPROM@container stored from wreg
  3191  0794  00B3               	movwf	FillArrayFromEEPROM@container
  3192                           
  3193                           ;prog.c: 206: for (unsigned char i = 0; i < quantity; i++) {
  3194  0795  01B4               	clrf	FillArrayFromEEPROM@i
  3195  0796                     l3375:	
  3196  0796  0831               	movf	FillArrayFromEEPROM@quantity,w
  3197  0797  0234               	subwf	FillArrayFromEEPROM@i,w
  3198  0798  1803               	btfsc	3,0
  3199  0799  0008               	return
  3200                           
  3201                           ;prog.c: 207: container[i] = EERD(address_start + i);
  3202  079A  0834               	movf	FillArrayFromEEPROM@i,w
  3203  079B  0733               	addwf	FillArrayFromEEPROM@container,w
  3204  079C  00B2               	movwf	??_FillArrayFromEEPROM
  3205  079D  0084               	movwf	4
  3206  079E  0834               	movf	FillArrayFromEEPROM@i,w
  3207  079F  0730               	addwf	FillArrayFromEEPROM@address_start,w
  3208  07A0  27B4               	fcall	_EERD
  3209  07A1  1383               	bcf	3,7	;select IRP bank0
  3210  07A2  0080               	movwf	0
  3211  07A3  0AB4               	incf	FillArrayFromEEPROM@i,f
  3212  07A4  2F96               	goto	l3375
  3213  07A5                     __end_of_FillArrayFromEEPROM:	
  3214                           
  3215                           	psect	text17
  3216  07B4                     __ptext17:	
  3217 ;; *************** function _EERD *****************
  3218 ;; Defined at:
  3219 ;;		line 194 in file "prog.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  address         1    wreg     unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  address         1   13[BANK0 ] unsigned char 
  3224 ;;  EEDATA_BUP      1   15[BANK0 ] volatile unsigned char 
  3225 ;;  INTCON_BUP      1   14[BANK0 ] volatile unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      unsigned char 
  3228 ;; Registers used:
  3229 ;;		wreg
  3230 ;; Tracked objects:
  3231 ;;		On entry : 300/0
  3232 ;;		On exit  : 300/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3235 ;;      Params:         0       0       0       0
  3236 ;;      Locals:         0       3       0       0
  3237 ;;      Temps:          0       0       0       0
  3238 ;;      Totals:         0       3       0       0
  3239 ;;Total ram usage:        3 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_FillArrayFromEEPROM
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _EERD
  3251  07B4                     _EERD:	
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _EERD: [wreg]
  3255                           ;EERD@address stored from wreg
  3256  07B4  00AD               	movwf	EERD@address
  3257                           
  3258                           ;prog.c: 195: volatile unsigned char INTCON_BUP = INTCON;
  3259  07B5  080B               	movf	11,w	;volatile
  3260  07B6  00AE               	movwf	EERD@INTCON_BUP	;volatile
  3261                           
  3262                           ;prog.c: 196: volatile unsigned char EEDATA_BUP;
  3263                           ;prog.c: 197: INTCONbits.GIE = 0;
  3264  07B7  138B               	bcf	11,7	;volatile
  3265                           
  3266                           ;prog.c: 198: EEADR = address;
  3267  07B8  082D               	movf	EERD@address,w
  3268  07B9  1683               	bsf	3,5	;RP0=1, select bank1
  3269  07BA  009B               	movwf	27	;volatile
  3270                           
  3271                           ;prog.c: 199: EECON1bits.RD = 1;
  3272  07BB  141C               	bsf	28,0	;volsfr
  3273                           
  3274                           ;prog.c: 200: EEDATA_BUP = EEDATA;
  3275  07BC  081A               	movf	26,w	;volatile
  3276  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  3277  07BE  00AF               	movwf	EERD@EEDATA_BUP	;volatile
  3278                           
  3279                           ;prog.c: 201: INTCON = INTCON_BUP;
  3280  07BF  082E               	movf	EERD@INTCON_BUP,w	;volatile
  3281  07C0  008B               	movwf	11	;volatile
  3282                           
  3283                           ;prog.c: 202: return EEDATA_BUP;
  3284  07C1  082F               	movf	EERD@EEDATA_BUP,w	;volatile
  3285  07C2  0008               	return
  3286  07C3                     __end_of_EERD:	
  3287                           
  3288                           	psect	text18
  3289  05DE                     __ptext18:	
  3290 ;; *************** function _RX *****************
  3291 ;; Defined at:
  3292 ;;		line 260 in file "prog.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  line            1    wreg     unsigned char 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  line            1   14[BANK0 ] unsigned char 
  3297 ;;  i               1   17[BANK0 ] unsigned char 
  3298 ;;  One             1   18[BANK0 ] unsigned char 
  3299 ;;  d               1   16[BANK0 ] unsigned char 
  3300 ;;  Zero            1   15[BANK0 ] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      unsigned char 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0
  3305 ;; Tracked objects:
  3306 ;;		On entry : 300/100
  3307 ;;		On exit  : 300/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3310 ;;      Params:         0       0       0       0
  3311 ;;      Locals:         0       5       0       0
  3312 ;;      Temps:          0       1       0       0
  3313 ;;      Totals:         0       6       0       0
  3314 ;;Total ram usage:        6 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    3
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_EditAddressMemory
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _RX
  3326  05DE                     _RX:	
  3327                           
  3328                           ;incstack = 0
  3329                           ; Regs used in _RX: [wreg+status,2+status,0]
  3330                           ;RX@line stored from wreg
  3331  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3332  05DF  00AE               	movwf	RX@line
  3333                           
  3334                           ;prog.c: 261: unsigned char One = line;
  3335  05E0  00B2               	movwf	RX@One
  3336                           
  3337                           ;prog.c: 262: unsigned char Zero = One ^ 0b11111111;
  3338  05E1  0932               	comf	RX@One,w
  3339  05E2  00AF               	movwf	RX@Zero
  3340                           
  3341                           ;prog.c: 264: unsigned char d = 0;
  3342  05E3  01B0               	clrf	RX@d
  3343                           
  3344                           ;prog.c: 265: for (unsigned char i = 0; i < 8; i++) {
  3345  05E4  01B1               	clrf	RX@i
  3346  05E5                     l3545:	
  3347                           
  3348                           ;prog.c: 266: TRISA &= Zero;
  3349  05E5  082F               	movf	RX@Zero,w
  3350  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  3351  05E7  0585               	andwf	5,f	;volatile
  3352                           
  3353                           ;prog.c: 267: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3354  05E8  2DE9               	nop2	;2 cycle nop
  3355  05E9  2DEA               	nop2	;2 cycle nop
  3356  05EA  2DEB               	nop2	;2 cycle nop
  3357                           
  3358                           ;prog.c: 268: TRISA |= One;
  3359  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  3360  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  3361  05ED  0832               	movf	RX@One,w
  3362  05EE  1683               	bsf	3,5	;RP0=1, select bank1
  3363  05EF  0485               	iorwf	5,f	;volatile
  3364                           
  3365                           ;prog.c: 269: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3366  05F0  2DF1               	nop2	;2 cycle nop
  3367  05F1  2DF2               	nop2	;2 cycle nop
  3368                           
  3369                           ;prog.c: 270: d >>= 1;
  3370  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  3371  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  3372  05F4  1003               	clrc
  3373  05F5  0CB0               	rrf	RX@d,f
  3374                           
  3375                           ;prog.c: 271: if ((PORTA & One) > 0) {
  3376  05F6  0805               	movf	5,w	;volatile
  3377  05F7  0532               	andwf	RX@One,w
  3378  05F8  1D03               	btfss	3,2
  3379                           
  3380                           ;prog.c: 272: d |= 0x80;
  3381  05F9  17B0               	bsf	RX@d,7
  3382                           
  3383                           ;prog.c: 273: }
  3384                           ;prog.c: 274: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3385  05FA  3013               	movlw	19
  3386  05FB  00AD               	movwf	??_RX
  3387  05FC                     u4877:	
  3388  05FC  0BAD               	decfsz	??_RX,f
  3389  05FD  2DFC               	goto	u4877
  3390  05FE  2DFF               	nop2	;nop
  3391  05FF  3008               	movlw	8
  3392  0600  1283               	bcf	3,5	;RP0=0, select bank0
  3393  0601  1303               	bcf	3,6	;RP1=0, select bank0
  3394  0602  0AB1               	incf	RX@i,f
  3395  0603  0231               	subwf	RX@i,w
  3396  0604  1C03               	skipc
  3397  0605  2DE5               	goto	l3545
  3398                           
  3399                           ;prog.c: 275: }
  3400                           ;prog.c: 276: return d;
  3401  0606  0830               	movf	RX@d,w
  3402  0607  0008               	return
  3403  0608                     __end_of_RX:	
  3404                           
  3405                           	psect	text19
  3406  0511                     __ptext19:	
  3407 ;; *************** function _INIT *****************
  3408 ;; Defined at:
  3409 ;;		line 219 in file "prog.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  line            1    wreg     unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  line            1   14[BANK0 ] unsigned char 
  3414 ;;  One             1   17[BANK0 ] unsigned char 
  3415 ;;  b               1   16[BANK0 ] unsigned char 
  3416 ;;  Zero            1   15[BANK0 ] unsigned char 
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      unsigned char 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0
  3421 ;; Tracked objects:
  3422 ;;		On entry : 300/0
  3423 ;;		On exit  : 300/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3426 ;;      Params:         0       0       0       0
  3427 ;;      Locals:         0       4       0       0
  3428 ;;      Temps:          0       1       0       0
  3429 ;;      Totals:         0       5       0       0
  3430 ;;Total ram usage:        5 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    3
  3433 ;; This function calls:
  3434 ;;		Nothing
  3435 ;; This function is called by:
  3436 ;;		_EditAddressMemory
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           
  3441                           ;psect for function _INIT
  3442  0511                     _INIT:	
  3443                           
  3444                           ;incstack = 0
  3445                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3446                           ;INIT@line stored from wreg
  3447  0511  00AE               	movwf	INIT@line
  3448                           
  3449                           ;prog.c: 220: unsigned char One = line;
  3450  0512  00B1               	movwf	INIT@One
  3451                           
  3452                           ;prog.c: 221: unsigned char Zero = One ^ 0b11111111;
  3453  0513  0931               	comf	INIT@One,w
  3454  0514  00AF               	movwf	INIT@Zero
  3455                           
  3456                           ;prog.c: 225: TRISA |= One;
  3457  0515  0831               	movf	INIT@One,w
  3458  0516  1683               	bsf	3,5	;RP0=1, select bank1
  3459  0517  0485               	iorwf	5,f	;volatile
  3460                           
  3461                           ;prog.c: 226: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3462  0518  3006               	movlw	6
  3463  0519  1283               	bcf	3,5	;RP0=0, select bank0
  3464  051A  00AD               	movwf	??_INIT
  3465  051B                     u4887:	
  3466  051B  0BAD               	decfsz	??_INIT,f
  3467  051C  2D1B               	goto	u4887
  3468  051D  0000               	nop
  3469                           
  3470                           ;prog.c: 227: TRISA &= Zero;
  3471  051E  1283               	bcf	3,5	;RP0=0, select bank0
  3472  051F  1303               	bcf	3,6	;RP1=0, select bank0
  3473  0520  082F               	movf	INIT@Zero,w
  3474  0521  1683               	bsf	3,5	;RP0=1, select bank1
  3475  0522  0585               	andwf	5,f	;volatile
  3476                           
  3477                           ;prog.c: 228: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3478  0523  30A6               	movlw	166
  3479  0524  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0525  00AD               	movwf	??_INIT
  3481  0526                     u4897:	
  3482  0526  0BAD               	decfsz	??_INIT,f
  3483  0527  2D26               	goto	u4897
  3484  0528  0000               	nop
  3485                           
  3486                           ;prog.c: 229: TRISA |= One;
  3487  0529  1283               	bcf	3,5	;RP0=0, select bank0
  3488  052A  1303               	bcf	3,6	;RP1=0, select bank0
  3489  052B  0831               	movf	INIT@One,w
  3490  052C  1683               	bsf	3,5	;RP0=1, select bank1
  3491  052D  0485               	iorwf	5,f	;volatile
  3492                           
  3493                           ;prog.c: 230: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3494  052E  3015               	movlw	21
  3495  052F  1283               	bcf	3,5	;RP0=0, select bank0
  3496  0530  00AD               	movwf	??_INIT
  3497  0531                     u4907:	
  3498  0531  0BAD               	decfsz	??_INIT,f
  3499  0532  2D31               	goto	u4907
  3500  0533  0000               	nop
  3501                           
  3502                           ;prog.c: 231: b = (PORTA & One) > 0;
  3503  0534  1283               	bcf	3,5	;RP0=0, select bank0
  3504  0535  1303               	bcf	3,6	;RP1=0, select bank0
  3505  0536  0805               	movf	5,w	;volatile
  3506  0537  0531               	andwf	INIT@One,w
  3507  0538  1903               	btfsc	3,2
  3508  0539  2D3C               	goto	u3540
  3509  053A  3001               	movlw	1
  3510  053B  2D3D               	goto	u3550
  3511  053C                     u3540:	
  3512  053C  3000               	movlw	0
  3513  053D                     u3550:	
  3514  053D  00B0               	movwf	INIT@b
  3515                           
  3516                           ;prog.c: 232: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3517  053E  3095               	movlw	149
  3518  053F  00AD               	movwf	??_INIT
  3519  0540                     u4917:	
  3520  0540  0BAD               	decfsz	??_INIT,f
  3521  0541  2D40               	goto	u4917
  3522  0542  2D43               	nop2	;nop
  3523                           
  3524                           ;prog.c: 234: return !b;
  3525  0543  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0544  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0545  0830               	movf	INIT@b,w
  3528  0546  1903               	btfsc	3,2
  3529  0547  3401               	retlw	1
  3530  0548  3400               	retlw	0
  3531  0549                     __end_of_INIT:	
  3532                           
  3533                           	psect	text20
  3534  0608                     __ptext20:	
  3535 ;; *************** function _CellToInd *****************
  3536 ;; Defined at:
  3537 ;;		line 646 in file "prog.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  cell            1    wreg     unsigned char 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  cell            1   25[BANK0 ] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 300/100
  3548 ;;		On exit  : 300/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3551 ;;      Params:         0       0       0       0
  3552 ;;      Locals:         0       1       0       0
  3553 ;;      Temps:          0       0       0       0
  3554 ;;      Totals:         0       1       0       0
  3555 ;;Total ram usage:        1 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    4
  3558 ;; This function calls:
  3559 ;;		___awdiv
  3560 ;;		___awmod
  3561 ;;		_clrInd
  3562 ;;		_refreshInd
  3563 ;;		_setDigit
  3564 ;; This function is called by:
  3565 ;;		_EditAddressMemory
  3566 ;;		_main
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           
  3571                           ;psect for function _CellToInd
  3572  0608                     _CellToInd:	
  3573                           
  3574                           ;incstack = 0
  3575                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3576                           ;CellToInd@cell stored from wreg
  3577  0608  1283               	bcf	3,5	;RP0=0, select bank0
  3578  0609  00B9               	movwf	CellToInd@cell
  3579                           
  3580                           ;prog.c: 647: clrInd();
  3581  060A  27F0               	fcall	_clrInd
  3582                           
  3583                           ;prog.c: 649: if (cell >= 9) {
  3584  060B  3009               	movlw	9
  3585  060C  0239               	subwf	CellToInd@cell,w
  3586                           
  3587                           ;prog.c: 650: setDigit(3, (1 + cell) / 10);
  3588  060D  0839               	movf	CellToInd@cell,w
  3589  060E  1C03               	skipc
  3590  060F  2E2B               	goto	L10
  3591  0610  00AF               	movwf	___awdiv@dividend
  3592  0611  01B0               	clrf	___awdiv@dividend+1
  3593  0612  0AAF               	incf	___awdiv@dividend,f
  3594  0613  1903               	skipnz
  3595  0614  0AB0               	incf	___awdiv@dividend+1,f
  3596  0615  300A               	movlw	10
  3597  0616  00AD               	movwf	___awdiv@divisor
  3598  0617  01AE               	clrf	___awdiv@divisor+1
  3599  0618  244A               	fcall	___awdiv
  3600  0619  082D               	movf	?___awdiv,w
  3601  061A  00B5               	movwf	setDigit@data
  3602  061B  3003               	movlw	3
  3603  061C  2782               	fcall	_setDigit
  3604                           
  3605                           ;prog.c: 651: setDigit(2, (1 + cell) % 10);
  3606  061D  0839               	movf	CellToInd@cell,w
  3607  061E  00AF               	movwf	___awmod@dividend
  3608  061F  01B0               	clrf	___awmod@dividend+1
  3609  0620  0AAF               	incf	___awmod@dividend,f
  3610  0621  1903               	skipnz
  3611  0622  0AB0               	incf	___awmod@dividend+1,f
  3612  0623  300A               	movlw	10
  3613  0624  00AD               	movwf	___awmod@divisor
  3614  0625  01AE               	clrf	___awmod@divisor+1
  3615  0626  24D4               	fcall	___awmod
  3616  0627  082D               	movf	?___awmod,w
  3617  0628  00B5               	movwf	setDigit@data
  3618  0629  3002               	movlw	2
  3619  062A  2E2E               	goto	L9
  3620  062B                     L10:	
  3621                           ;prog.c: 653: setDigit(3, 1 + cell);
  3622                           
  3623                           ;prog.c: 652: } else {
  3624                           
  3625  062B  3E01               	addlw	1
  3626  062C  00B5               	movwf	setDigit@data
  3627  062D  3003               	movlw	3
  3628  062E                     L9:	
  3629  062E  2782               	fcall	_setDigit
  3630                           
  3631                           ;prog.c: 654: }
  3632                           ;prog.c: 656: refreshInd();
  3633  062F  2FE2               	ljmp	l3353
  3634  0630                     __end_of_CellToInd:	
  3635                           
  3636                           	psect	text21
  3637  0782                     __ptext21:	
  3638 ;; *************** function _setDigit *****************
  3639 ;; Defined at:
  3640 ;;		line 104 in file "prog.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  a               1    wreg     unsigned char 
  3643 ;;  data            1   21[BANK0 ] unsigned char 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  a               1   24[BANK0 ] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3650 ;; Tracked objects:
  3651 ;;		On entry : 300/0
  3652 ;;		On exit  : B00/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3655 ;;      Params:         0       1       0       0
  3656 ;;      Locals:         0       1       0       0
  3657 ;;      Temps:          0       2       0       0
  3658 ;;      Totals:         0       4       0       0
  3659 ;;Total ram usage:        4 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    3
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_ShowError
  3666 ;;		_indData
  3667 ;;		_CellToInd
  3668 ;;		_main
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           
  3673                           ;psect for function _setDigit
  3674  0782                     _setDigit:	
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3678                           ;setDigit@a stored from wreg
  3679  0782  00B8               	movwf	setDigit@a
  3680                           
  3681                           ;prog.c: 105: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3682  0783  303F               	movlw	63
  3683  0784  0535               	andwf	setDigit@data,w
  3684  0785  00B6               	movwf	??_setDigit
  3685  0786  0838               	movf	setDigit@a,w
  3686  0787  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3687  0788  0084               	movwf	4
  3688  0789  1383               	bcf	3,7	;select IRP bank0
  3689  078A  0800               	movf	0,w
  3690  078B  39C0               	andlw	192
  3691  078C  0436               	iorwf	??_setDigit,w
  3692  078D  00B7               	movwf	??_setDigit+1
  3693  078E  0838               	movf	setDigit@a,w
  3694  078F  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3695  0790  0084               	movwf	4
  3696  0791  0837               	movf	??_setDigit+1,w
  3697  0792  0080               	movwf	0
  3698  0793  0008               	return
  3699  0794                     __end_of_setDigit:	
  3700                           
  3701                           	psect	text22
  3702  07E2                     __ptext22:	
  3703 ;; *************** function _refreshInd *****************
  3704 ;; Defined at:
  3705 ;;		line 112 in file "prog.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg
  3714 ;; Tracked objects:
  3715 ;;		On entry : 200/0
  3716 ;;		On exit  : 300/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3719 ;;      Params:         0       0       0       0
  3720 ;;      Locals:         0       0       0       0
  3721 ;;      Temps:          0       0       0       0
  3722 ;;      Totals:         0       0       0       0
  3723 ;;Total ram usage:        0 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    3
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_ShowError
  3730 ;;		_CellToInd
  3731 ;;		_EditAddressMemory
  3732 ;;		_main
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function _refreshInd
  3738  07E2                     _refreshInd:	
  3739  07E2                     l3353:	
  3740                           ;incstack = 0
  3741                           ; Regs used in _refreshInd: [wreg]
  3742                           
  3743                           
  3744                           ;prog.c: 113: digits[0] = digits_0[0];
  3745  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  3746  07E3  084D               	movf	_digits_0,w	;volatile
  3747  07E4  00CA               	movwf	_digits	;volatile
  3748                           
  3749                           ;prog.c: 114: digits[1] = digits_0[1];
  3750  07E5  084E               	movf	_digits_0+1,w	;volatile
  3751  07E6  00CB               	movwf	_digits+1	;volatile
  3752                           
  3753                           ;prog.c: 115: digits[2] = digits_0[2];
  3754  07E7  084F               	movf	_digits_0+2,w	;volatile
  3755  07E8  00CC               	movwf	_digits+2	;volatile
  3756  07E9  0008               	return
  3757  07EA                     __end_of_refreshInd:	
  3758                           
  3759                           	psect	text23
  3760  07F0                     __ptext23:	
  3761 ;; *************** function _clrInd *****************
  3762 ;; Defined at:
  3763 ;;		line 118 in file "prog.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg
  3772 ;; Tracked objects:
  3773 ;;		On entry : 200/0
  3774 ;;		On exit  : 300/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3777 ;;      Params:         0       0       0       0
  3778 ;;      Locals:         0       0       0       0
  3779 ;;      Temps:          0       0       0       0
  3780 ;;      Totals:         0       0       0       0
  3781 ;;Total ram usage:        0 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    3
  3784 ;; This function calls:
  3785 ;;		Nothing
  3786 ;; This function is called by:
  3787 ;;		_ShowError
  3788 ;;		_CellToInd
  3789 ;;		_EditAddressMemory
  3790 ;;		_main
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           
  3795                           ;psect for function _clrInd
  3796  07F0                     _clrInd:	
  3797                           
  3798                           ;prog.c: 119: digits_0[0] = 34;
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _clrInd: [wreg]
  3802  07F0  3022               	movlw	34
  3803  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  3804  07F2  00CD               	movwf	_digits_0	;volatile
  3805                           
  3806                           ;prog.c: 120: digits_0[1] = 34;
  3807  07F3  00CE               	movwf	_digits_0+1	;volatile
  3808                           
  3809                           ;prog.c: 121: digits_0[2] = 34;
  3810  07F4  00CF               	movwf	_digits_0+2	;volatile
  3811  07F5  0008               	return
  3812  07F6                     __end_of_clrInd:	
  3813                           
  3814                           	psect	text24
  3815  04D4                     __ptext24:	
  3816 ;; *************** function ___awmod *****************
  3817 ;; Defined at:
  3818 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  divisor         2   13[BANK0 ] int 
  3821 ;;  dividend        2   15[BANK0 ] int 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  sign            1   18[BANK0 ] unsigned char 
  3824 ;;  counter         1   17[BANK0 ] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  2   13[BANK0 ] int 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : B00/0
  3831 ;;		On exit  : B00/0
  3832 ;;		Unchanged: 800/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3834 ;;      Params:         0       4       0       0
  3835 ;;      Locals:         0       2       0       0
  3836 ;;      Temps:          0       0       0       0
  3837 ;;      Totals:         0       6       0       0
  3838 ;;Total ram usage:        6 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    3
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_CellToInd
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function ___awmod
  3850  04D4                     ___awmod:	
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3854  04D4  01B2               	clrf	___awmod@sign
  3855  04D5  1FB0               	btfss	___awmod@dividend+1,7
  3856  04D6  2CDE               	goto	l3429
  3857  04D7  09AF               	comf	___awmod@dividend,f
  3858  04D8  09B0               	comf	___awmod@dividend+1,f
  3859  04D9  0AAF               	incf	___awmod@dividend,f
  3860  04DA  1903               	skipnz
  3861  04DB  0AB0               	incf	___awmod@dividend+1,f
  3862  04DC  01B2               	clrf	___awmod@sign
  3863  04DD  0AB2               	incf	___awmod@sign,f
  3864  04DE                     l3429:	
  3865  04DE  1FAE               	btfss	___awmod@divisor+1,7
  3866  04DF  2CE5               	goto	l3433
  3867  04E0  09AD               	comf	___awmod@divisor,f
  3868  04E1  09AE               	comf	___awmod@divisor+1,f
  3869  04E2  0AAD               	incf	___awmod@divisor,f
  3870  04E3  1903               	skipnz
  3871  04E4  0AAE               	incf	___awmod@divisor+1,f
  3872  04E5                     l3433:	
  3873  04E5  082D               	movf	___awmod@divisor,w
  3874  04E6  042E               	iorwf	___awmod@divisor+1,w
  3875  04E7  1903               	btfsc	3,2
  3876  04E8  2D04               	goto	l3449
  3877  04E9  01B1               	clrf	___awmod@counter
  3878  04EA                     L11:	
  3879  04EA  0AB1               	incf	___awmod@counter,f
  3880  04EB  1BAE               	btfsc	___awmod@divisor+1,7
  3881  04EC  2CF1               	goto	l3441
  3882  04ED  1003               	clrc
  3883  04EE  0DAD               	rlf	___awmod@divisor,f
  3884  04EF  0DAE               	rlf	___awmod@divisor+1,f
  3885  04F0  2CEA               	goto	L11
  3886  04F1                     l3441:	
  3887  04F1  082E               	movf	___awmod@divisor+1,w
  3888  04F2  0230               	subwf	___awmod@dividend+1,w
  3889  04F3  1D03               	skipz
  3890  04F4  2CF7               	goto	u3495
  3891  04F5  082D               	movf	___awmod@divisor,w
  3892  04F6  022F               	subwf	___awmod@dividend,w
  3893  04F7                     u3495:	
  3894  04F7  1C03               	skipc
  3895  04F8  2D00               	goto	L12
  3896  04F9  082D               	movf	___awmod@divisor,w
  3897  04FA  02AF               	subwf	___awmod@dividend,f
  3898  04FB  082E               	movf	___awmod@divisor+1,w
  3899  04FC  1C03               	skipc
  3900  04FD  03B0               	decf	___awmod@dividend+1,f
  3901  04FE  02B0               	subwf	___awmod@dividend+1,f
  3902  04FF  1003               	clrc
  3903  0500                     L12:	
  3904  0500  0CAE               	rrf	___awmod@divisor+1,f
  3905  0501  0CAD               	rrf	___awmod@divisor,f
  3906  0502  0BB1               	decfsz	___awmod@counter,f
  3907  0503  2CF1               	goto	l3441
  3908  0504                     l3449:	
  3909  0504  0832               	movf	___awmod@sign,w
  3910  0505  1903               	btfsc	3,2
  3911  0506  2D0C               	goto	l3453
  3912  0507  09AF               	comf	___awmod@dividend,f
  3913  0508  09B0               	comf	___awmod@dividend+1,f
  3914  0509  0AAF               	incf	___awmod@dividend,f
  3915  050A  1903               	skipnz
  3916  050B  0AB0               	incf	___awmod@dividend+1,f
  3917  050C                     l3453:	
  3918  050C  0830               	movf	___awmod@dividend+1,w
  3919  050D  00AE               	movwf	?___awmod+1
  3920  050E  082F               	movf	___awmod@dividend,w
  3921  050F  00AD               	movwf	?___awmod
  3922  0510  0008               	return
  3923  0511                     __end_of___awmod:	
  3924                           
  3925                           	psect	text25
  3926  044A                     __ptext25:	
  3927 ;; *************** function ___awdiv *****************
  3928 ;; Defined at:
  3929 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;  divisor         2   13[BANK0 ] int 
  3932 ;;  dividend        2   15[BANK0 ] int 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  quotient        2   19[BANK0 ] int 
  3935 ;;  sign            1   18[BANK0 ] unsigned char 
  3936 ;;  counter         1   17[BANK0 ] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  2   13[BANK0 ] int 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0
  3941 ;; Tracked objects:
  3942 ;;		On entry : 300/0
  3943 ;;		On exit  : 300/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3946 ;;      Params:         0       4       0       0
  3947 ;;      Locals:         0       4       0       0
  3948 ;;      Temps:          0       0       0       0
  3949 ;;      Totals:         0       8       0       0
  3950 ;;Total ram usage:        8 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    3
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_CellToInd
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function ___awdiv
  3962  044A                     ___awdiv:	
  3963                           
  3964                           ;incstack = 0
  3965                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3966  044A  01B2               	clrf	___awdiv@sign
  3967  044B  1FAE               	btfss	___awdiv@divisor+1,7
  3968  044C  2C54               	goto	l3385
  3969  044D  09AD               	comf	___awdiv@divisor,f
  3970  044E  09AE               	comf	___awdiv@divisor+1,f
  3971  044F  0AAD               	incf	___awdiv@divisor,f
  3972  0450  1903               	skipnz
  3973  0451  0AAE               	incf	___awdiv@divisor+1,f
  3974  0452  01B2               	clrf	___awdiv@sign
  3975  0453  0AB2               	incf	___awdiv@sign,f
  3976  0454                     l3385:	
  3977  0454  1FB0               	btfss	___awdiv@dividend+1,7
  3978  0455  2C5D               	goto	l3391
  3979  0456  09AF               	comf	___awdiv@dividend,f
  3980  0457  09B0               	comf	___awdiv@dividend+1,f
  3981  0458  0AAF               	incf	___awdiv@dividend,f
  3982  0459  1903               	skipnz
  3983  045A  0AB0               	incf	___awdiv@dividend+1,f
  3984  045B  3001               	movlw	1
  3985  045C  06B2               	xorwf	___awdiv@sign,f
  3986  045D                     l3391:	
  3987  045D  01B3               	clrf	___awdiv@quotient
  3988  045E  01B4               	clrf	___awdiv@quotient+1
  3989  045F  082D               	movf	___awdiv@divisor,w
  3990  0460  042E               	iorwf	___awdiv@divisor+1,w
  3991  0461  1903               	btfsc	3,2
  3992  0462  2C82               	goto	l3413
  3993  0463  01B1               	clrf	___awdiv@counter
  3994  0464                     L13:	
  3995  0464  0AB1               	incf	___awdiv@counter,f
  3996  0465  1BAE               	btfsc	___awdiv@divisor+1,7
  3997  0466  2C6B               	goto	l3401
  3998  0467  1003               	clrc
  3999  0468  0DAD               	rlf	___awdiv@divisor,f
  4000  0469  0DAE               	rlf	___awdiv@divisor+1,f
  4001  046A  2C64               	goto	L13
  4002  046B                     l3401:	
  4003  046B  1003               	clrc
  4004  046C  0DB3               	rlf	___awdiv@quotient,f
  4005  046D  0DB4               	rlf	___awdiv@quotient+1,f
  4006  046E  082E               	movf	___awdiv@divisor+1,w
  4007  046F  0230               	subwf	___awdiv@dividend+1,w
  4008  0470  1D03               	skipz
  4009  0471  2C74               	goto	u3425
  4010  0472  082D               	movf	___awdiv@divisor,w
  4011  0473  022F               	subwf	___awdiv@dividend,w
  4012  0474                     u3425:	
  4013  0474  1C03               	skipc
  4014  0475  2C7E               	goto	L14
  4015  0476  082D               	movf	___awdiv@divisor,w
  4016  0477  02AF               	subwf	___awdiv@dividend,f
  4017  0478  082E               	movf	___awdiv@divisor+1,w
  4018  0479  1C03               	skipc
  4019  047A  03B0               	decf	___awdiv@dividend+1,f
  4020  047B  02B0               	subwf	___awdiv@dividend+1,f
  4021  047C  1433               	bsf	___awdiv@quotient,0
  4022  047D  1003               	clrc
  4023  047E                     L14:	
  4024  047E  0CAE               	rrf	___awdiv@divisor+1,f
  4025  047F  0CAD               	rrf	___awdiv@divisor,f
  4026  0480  0BB1               	decfsz	___awdiv@counter,f
  4027  0481  2C6B               	goto	l3401
  4028  0482                     l3413:	
  4029  0482  0832               	movf	___awdiv@sign,w
  4030  0483  1903               	btfsc	3,2
  4031  0484  2C8A               	goto	l3417
  4032  0485  09B3               	comf	___awdiv@quotient,f
  4033  0486  09B4               	comf	___awdiv@quotient+1,f
  4034  0487  0AB3               	incf	___awdiv@quotient,f
  4035  0488  1903               	skipnz
  4036  0489  0AB4               	incf	___awdiv@quotient+1,f
  4037  048A                     l3417:	
  4038  048A  0834               	movf	___awdiv@quotient+1,w
  4039  048B  00AE               	movwf	?___awdiv+1
  4040  048C  0833               	movf	___awdiv@quotient,w
  4041  048D  00AD               	movwf	?___awdiv
  4042  048E  0008               	return
  4043  048F                     __end_of___awdiv:	
  4044                           
  4045                           	psect	text26
  4046  02E6                     __ptext26:	
  4047 ;; *************** function _F *****************
  4048 ;; Defined at:
  4049 ;;		line 489 in file "prog.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;		None
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  CurrentKeysS    1   12[BANK0 ] unsigned char 
  4054 ;;  dig             1   11[BANK0 ] unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 300/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4064 ;;      Params:         0       0       0       0
  4065 ;;      Locals:         0       2       0       0
  4066 ;;      Temps:          0       5       0       0
  4067 ;;      Totals:         0       7       0       0
  4068 ;;Total ram usage:        7 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    2
  4071 ;; This function calls:
  4072 ;;		_convDig
  4073 ;;		_get_temp_Async
  4074 ;; This function is called by:
  4075 ;;		Interrupt level 1
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           
  4080                           ;psect for function _F
  4081  02E6                     _F:	
  4082                           
  4083                           ;prog.c: 490: if (T0IF) {
  4084  02E6  1D0B               	btfss	11,2	;volatile
  4085  02E7  2B86               	goto	i1l301
  4086                           
  4087                           ;prog.c: 491: static unsigned char DigitNumber = 0;
  4088                           ;prog.c: 493: T0IF = 0;
  4089  02E8  110B               	bcf	11,2	;volatile
  4090                           
  4091                           ;prog.c: 494: TMR0 += TMR0_VALUE;
  4092  02E9  30EB               	movlw	235
  4093  02EA  0781               	addwf	1,f	;volatile
  4094                           
  4095                           ;prog.c: 496: if (DigitNumber > 2) {
  4096  02EB  3003               	movlw	3
  4097  02EC  0255               	subwf	F@DigitNumber,w
  4098  02ED  1803               	btfsc	3,0
  4099                           
  4100                           ;prog.c: 497: DigitNumber = 0;
  4101  02EE  01D5               	clrf	F@DigitNumber
  4102                           
  4103                           ;prog.c: 498: }
  4104                           ;prog.c: 499: unsigned char dig = digits[DigitNumber];
  4105  02EF  0855               	movf	F@DigitNumber,w
  4106  02F0  3E4A               	addlw	(low (_digits| 0))& (0+255)
  4107  02F1  0084               	movwf	4
  4108  02F2  1383               	bcf	3,7	;select IRP bank0
  4109  02F3  0800               	movf	0,w
  4110  02F4  00AB               	movwf	F@dig
  4111                           
  4112                           ;prog.c: 500: digitemp = convDig(0b00111111 & dig);
  4113  02F5  393F               	andlw	63
  4114  02F6  26F3               	fcall	_convDig
  4115  02F7  00D9               	movwf	_digitemp
  4116                           
  4117                           ;prog.c: 506: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  4118  02F8  1F2B               	btfss	F@dig,6
  4119  02F9  2AFC               	goto	i1l257
  4120  02FA  1559               	bsf	_digitemp,2
  4121  02FB  2AFD               	goto	i1l4091
  4122  02FC                     i1l257:	
  4123  02FC  1159               	bcf	_digitemp,2
  4124  02FD                     i1l4091:	
  4125                           
  4126                           ;prog.c: 508: PORTB = 0;
  4127  02FD  0186               	clrf	6	;volatile
  4128                           
  4129                           ;prog.c: 509: PORTA = (PORTA & 0b00110100) | PortAData[DigitNumber++];
  4130  02FE  0855               	movf	F@DigitNumber,w
  4131  02FF  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  4132  0300  0084               	movwf	4
  4133  0301  27D1               	fcall	stringdir
  4134  0302  00A6               	movwf	??_F
  4135  0303  0805               	movf	5,w	;volatile
  4136  0304  3934               	andlw	52
  4137  0305  0426               	iorwf	??_F,w
  4138  0306  0085               	movwf	5	;volatile
  4139  0307  0AD5               	incf	F@DigitNumber,f
  4140                           
  4141                           ;prog.c: 511: PORTB = digitemp;
  4142  0308  0859               	movf	_digitemp,w
  4143  0309  0086               	movwf	6	;volatile
  4144                           
  4145                           ;prog.c: 513: endInterrupt = 1;
  4146  030A  14E0               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  4147                           
  4148                           ;prog.c: 514: if (powerOnInterval == 0) {
  4149  030B  085D               	movf	_powerOnInterval,w
  4150  030C  045E               	iorwf	_powerOnInterval+1,w
  4151  030D  1D03               	btfss	3,2
  4152  030E  2B15               	goto	i1l4107
  4153                           
  4154                           ;prog.c: 515: if (PowerBlocked == 0) {
  4155  030F  0858               	movf	_PowerBlocked,w
  4156  0310  1D03               	btfss	3,2
  4157  0311  2B19               	goto	i1l4109
  4158                           
  4159                           ;prog.c: 516: TRISA4 = 1;
  4160  0312  1683               	bsf	3,5	;RP0=1, select bank1
  4161  0313  1605               	bsf	5,4	;volatile
  4162  0314  2B19               	goto	i1l4109
  4163  0315                     i1l4107:	
  4164                           
  4165                           ;prog.c: 519: powerOnInterval--;
  4166  0315  30FF               	movlw	-1
  4167  0316  07DD               	addwf	_powerOnInterval,f
  4168  0317  1C03               	skipc
  4169  0318  03DE               	decf	_powerOnInterval+1,f
  4170  0319                     i1l4109:	
  4171                           
  4172                           ;prog.c: 520: }
  4173                           ;prog.c: 522: static unsigned int KeyTimeCounter = 0;
  4174                           ;prog.c: 523: static unsigned char LastKeysState = 0;
  4175                           ;prog.c: 524: static unsigned char long_press = 0;
  4176                           ;prog.c: 525: static unsigned char ButtonPressTimeIn1 = 0;
  4177                           ;prog.c: 526: static unsigned char ButtonPressTimeIn2 = 0;
  4178                           ;prog.c: 527: static unsigned char ButtonPressTimeOut = 0;
  4179                           ;prog.c: 528: unsigned char CurrentKeysState = 0;
  4180  0319  1283               	bcf	3,5	;RP0=0, select bank0
  4181  031A  01AC               	clrf	F@CurrentKeysState
  4182                           
  4183                           ;prog.c: 530: if (ButtonPressTimeOut > 0) {
  4184  031B  0854               	movf	F@ButtonPressTimeOut,w
  4185  031C  1903               	btfsc	3,2
  4186  031D  2B20               	goto	i1l4115
  4187                           
  4188                           ;prog.c: 531: ButtonPressTimeOut--;
  4189  031E  03D4               	decf	F@ButtonPressTimeOut,f
  4190                           
  4191                           ;prog.c: 532: } else {
  4192  031F  2B85               	goto	i1l4195
  4193  0320                     i1l4115:	
  4194                           
  4195                           ;prog.c: 534: KeyCode = 0;
  4196  0320  01DF               	clrf	_KeyCode	;volatile
  4197                           
  4198                           ;prog.c: 536: if (RA5) {
  4199  0321  1E85               	btfss	5,5	;volatile
  4200  0322  2B27               	goto	i1l4123
  4201  0323  3019               	movlw	25
  4202                           
  4203                           ;prog.c: 537: CurrentKeysState = CurrentKeysState | 0b00000001;
  4204  0324  142C               	bsf	F@CurrentKeysState,0
  4205                           
  4206                           ;prog.c: 538: ButtonPressTimeIn1 = 25;
  4207  0325  00D2               	movwf	F@ButtonPressTimeIn1
  4208                           
  4209                           ;prog.c: 539: } else {
  4210  0326  2B2D               	goto	i1l4129
  4211  0327                     i1l4123:	
  4212                           
  4213                           ;prog.c: 540: if (ButtonPressTimeIn1 == 0) {
  4214  0327  0852               	movf	F@ButtonPressTimeIn1,w
  4215  0328  1D03               	btfss	3,2
  4216  0329  2B2C               	goto	i1l4127
  4217                           
  4218                           ;prog.c: 541: CurrentKeysState = CurrentKeysState & 0b11111110;
  4219  032A  102C               	bcf	F@CurrentKeysState,0
  4220                           
  4221                           ;prog.c: 542: } else {
  4222  032B  2B2D               	goto	i1l4129
  4223  032C                     i1l4127:	
  4224                           
  4225                           ;prog.c: 543: ButtonPressTimeIn1--;
  4226  032C  03D2               	decf	F@ButtonPressTimeIn1,f
  4227  032D                     i1l4129:	
  4228                           
  4229                           ;prog.c: 544: }
  4230                           ;prog.c: 545: }
  4231                           ;prog.c: 547: if (RA2) {
  4232  032D  1D05               	btfss	5,2	;volatile
  4233  032E  2B33               	goto	i1l4135
  4234  032F  3019               	movlw	25
  4235                           
  4236                           ;prog.c: 548: CurrentKeysState = CurrentKeysState | 0b00000010;
  4237  0330  14AC               	bsf	F@CurrentKeysState,1
  4238                           
  4239                           ;prog.c: 549: ButtonPressTimeIn2 = 25;
  4240  0331  00D3               	movwf	F@ButtonPressTimeIn2
  4241                           
  4242                           ;prog.c: 550: } else {
  4243  0332  2B39               	goto	i1l4141
  4244  0333                     i1l4135:	
  4245                           
  4246                           ;prog.c: 551: if (ButtonPressTimeIn2 == 0) {
  4247  0333  0853               	movf	F@ButtonPressTimeIn2,w
  4248  0334  1D03               	btfss	3,2
  4249  0335  2B38               	goto	i1l4139
  4250                           
  4251                           ;prog.c: 552: CurrentKeysState = CurrentKeysState & 0b11111101;
  4252  0336  10AC               	bcf	F@CurrentKeysState,1
  4253                           
  4254                           ;prog.c: 553: } else {
  4255  0337  2B39               	goto	i1l4141
  4256  0338                     i1l4139:	
  4257                           
  4258                           ;prog.c: 554: ButtonPressTimeIn2--;
  4259  0338  03D3               	decf	F@ButtonPressTimeIn2,f
  4260  0339                     i1l4141:	
  4261                           
  4262                           ;prog.c: 555: }
  4263                           ;prog.c: 556: }
  4264                           ;prog.c: 558: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4265  0339  0852               	movf	F@ButtonPressTimeIn1,w
  4266  033A  1903               	btfsc	3,2
  4267  033B  2B40               	goto	i1l4145
  4268  033C  3019               	movlw	25
  4269  033D  0652               	xorwf	F@ButtonPressTimeIn1,w
  4270  033E  1D03               	btfss	3,2
  4271  033F  2B85               	goto	i1l4195
  4272  0340                     i1l4145:	
  4273  0340  0853               	movf	F@ButtonPressTimeIn2,w
  4274  0341  1903               	btfsc	3,2
  4275  0342  2B47               	goto	i1l4149
  4276  0343  3019               	movlw	25
  4277  0344  0653               	xorwf	F@ButtonPressTimeIn2,w
  4278  0345  1D03               	btfss	3,2
  4279  0346  2B85               	goto	i1l4195
  4280  0347                     i1l4149:	
  4281                           
  4282                           ;prog.c: 559: if (CurrentKeysState > 0) {
  4283  0347  082C               	movf	F@CurrentKeysState,w
  4284  0348  1903               	btfsc	3,2
  4285  0349  2B71               	goto	i1l4175
  4286                           
  4287                           ;prog.c: 560: if (LastKeysState != CurrentKeysState) {
  4288  034A  0856               	movf	F@LastKeysState,w
  4289  034B  062C               	xorwf	F@CurrentKeysState,w
  4290  034C  1903               	skipnz
  4291  034D  2B54               	goto	i1l4157
  4292                           
  4293                           ;prog.c: 561: KeyTimeCounter = 0;
  4294  034E  01D0               	clrf	F@KeyTimeCounter
  4295  034F  01D1               	clrf	F@KeyTimeCounter+1
  4296                           
  4297                           ;prog.c: 562: long_press = 0;
  4298  0350  01D7               	clrf	F@long_press
  4299                           
  4300                           ;prog.c: 563: LastKeysState = CurrentKeysState;
  4301  0351  082C               	movf	F@CurrentKeysState,w
  4302  0352  00D6               	movwf	F@LastKeysState
  4303                           
  4304                           ;prog.c: 564: } else if (KeyTimeCounter < 150) {
  4305  0353  2B69               	goto	i1l4167
  4306  0354                     i1l4157:	
  4307  0354  3000               	movlw	0
  4308  0355  0251               	subwf	F@KeyTimeCounter+1,w
  4309  0356  3096               	movlw	150
  4310  0357  1903               	skipnz
  4311  0358  0250               	subwf	F@KeyTimeCounter,w
  4312  0359  1803               	skipnc
  4313  035A  2B5F               	goto	i1l4161
  4314                           
  4315                           ;prog.c: 565: KeyTimeCounter++;
  4316  035B  0AD0               	incf	F@KeyTimeCounter,f
  4317  035C  1903               	skipnz
  4318  035D  0AD1               	incf	F@KeyTimeCounter+1,f
  4319                           
  4320                           ;prog.c: 566: } else if (KeyTimeCounter == 150 && !long_press) {
  4321  035E  2B69               	goto	i1l4167
  4322  035F                     i1l4161:	
  4323  035F  3096               	movlw	150
  4324  0360  0650               	xorwf	F@KeyTimeCounter,w
  4325  0361  0451               	iorwf	F@KeyTimeCounter+1,w
  4326  0362  1D03               	btfss	3,2
  4327  0363  2B69               	goto	i1l4167
  4328  0364  0857               	movf	F@long_press,w
  4329  0365  1D03               	btfss	3,2
  4330  0366  2B69               	goto	i1l4167
  4331                           
  4332                           ;prog.c: 567: long_press = 1;
  4333  0367  01D7               	clrf	F@long_press
  4334  0368  0AD7               	incf	F@long_press,f
  4335  0369                     i1l4167:	
  4336                           
  4337                           ;prog.c: 568: }
  4338                           ;prog.c: 570: if (long_press == 1) {
  4339  0369  0B57               	decfsz	F@long_press,w
  4340  036A  2B85               	goto	i1l4195
  4341                           
  4342                           ;prog.c: 571: KeyCode = 30 + LastKeysState + 3;
  4343  036B  0856               	movf	F@LastKeysState,w
  4344  036C  3E21               	addlw	33
  4345  036D  00DF               	movwf	_KeyCode	;volatile
  4346                           
  4347                           ;prog.c: 572: long_press = 2;
  4348  036E  3002               	movlw	2
  4349  036F  00D7               	movwf	F@long_press
  4350  0370  2B83               	goto	i1l4173
  4351  0371                     i1l4175:	
  4352  0371  0856               	movf	F@LastKeysState,w
  4353  0372  1903               	btfsc	3,2
  4354  0373  2B7B               	goto	i1l4189
  4355  0374  0857               	movf	F@long_press,w
  4356  0375  1D03               	btfss	3,2
  4357  0376  2B7B               	goto	i1l4189
  4358                           
  4359                           ;prog.c: 577: KeyCode = 30 + LastKeysState;
  4360  0377  0856               	movf	F@LastKeysState,w
  4361  0378  3E1E               	addlw	30
  4362  0379  00DF               	movwf	_KeyCode	;volatile
  4363  037A  2B7F               	goto	i1l4191
  4364  037B                     i1l4189:	
  4365                           ;prog.c: 580: long_press = 0;
  4366                           
  4367                           ;prog.c: 579: KeyTimeCounter = 0;
  4368                           
  4369                           ;prog.c: 578: LastKeysState = 0;
  4370                           
  4371  037B  3002               	movlw	2
  4372  037C  0657               	xorwf	F@long_press,w
  4373  037D  1D03               	btfss	3,2
  4374  037E  2B85               	goto	i1l4195
  4375  037F                     i1l4191:	
  4376                           
  4377                           ;prog.c: 584: LastKeysState = 0;
  4378  037F  01D6               	clrf	F@LastKeysState
  4379                           
  4380                           ;prog.c: 585: KeyTimeCounter = 0;
  4381  0380  01D0               	clrf	F@KeyTimeCounter
  4382  0381  01D1               	clrf	F@KeyTimeCounter+1
  4383                           
  4384                           ;prog.c: 586: long_press = 0;
  4385  0382  01D7               	clrf	F@long_press
  4386  0383                     i1l4173:	
  4387                           
  4388                           ;prog.c: 573: ButtonPressTimeOut = 40;
  4389  0383  3028               	movlw	40
  4390  0384  00D4               	movwf	F@ButtonPressTimeOut
  4391  0385                     i1l4195:	
  4392                           
  4393                           ;prog.c: 588: }
  4394                           ;prog.c: 589: }
  4395                           ;prog.c: 590: }
  4396                           ;prog.c: 592: get_temp_Async();
  4397  0385  202D               	fcall	_get_temp_Async
  4398  0386                     i1l301:	
  4399  0386  082A               	movf	??_F+4,w
  4400  0387  00FF               	movwf	127
  4401  0388  0829               	movf	??_F+3,w
  4402  0389  008A               	movwf	10
  4403  038A  0828               	movf	??_F+2,w
  4404  038B  0084               	movwf	4
  4405  038C  0E27               	swapf	(??_F+1)^0,w
  4406  038D  0083               	movwf	3
  4407  038E  0EFE               	swapf	126,f
  4408  038F  0E7E               	swapf	126,w
  4409  0390  0009               	retfie
  4410  0391                     __end_of_F:	
  4411                           
  4412                           	psect	intentry
  4413  0004                     __pintentry:	
  4414                           ;incstack = 0
  4415                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4416                           
  4417  0004                     interrupt_function:	
  4418  007E                     saved_w	set	btemp
  4419  0004  00FE               	movwf	btemp
  4420  0005  0E03               	swapf	3,w
  4421  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4422  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4423  0008  00A7               	movwf	??_F+1
  4424  0009  0804               	movf	4,w
  4425  000A  00A8               	movwf	??_F+2
  4426  000B  080A               	movf	10,w
  4427  000C  00A9               	movwf	??_F+3
  4428  000D  087F               	movf	btemp+1,w
  4429  000E  00AA               	movwf	??_F+4
  4430  000F  2AE6               	ljmp	_F
  4431                           
  4432                           	psect	text27
  4433  002D                     __ptext27:	
  4434 ;; *************** function _get_temp_Async *****************
  4435 ;; Defined at:
  4436 ;;		line 357 in file "prog.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  temp2           1    4[BANK0 ] unsigned char 
  4441 ;;  temp1           1    3[BANK0 ] unsigned char 
  4442 ;;  i               1    2[BANK0 ] unsigned char 
  4443 ;;  line            1    5[BANK0 ] unsigned char 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : 300/0
  4450 ;;		On exit  : 300/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4453 ;;      Params:         0       0       0       0
  4454 ;;      Locals:         0       4       0       0
  4455 ;;      Temps:          0       2       0       0
  4456 ;;      Totals:         0       6       0       0
  4457 ;;Total ram usage:        6 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    1
  4460 ;; This function calls:
  4461 ;;		___wmul
  4462 ;;		i1_INIT
  4463 ;;		i1_RX
  4464 ;;		i1_TX
  4465 ;;		i1___awdiv
  4466 ;;		i1_calc_crc
  4467 ;; This function is called by:
  4468 ;;		_F
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           
  4473                           ;psect for function _get_temp_Async
  4474  002D                     _get_temp_Async:	
  4475                           
  4476                           ;prog.c: 359: if (!getTemp_flags.ActiveProcess) {
  4477                           
  4478                           ;incstack = 0
  4479                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4480  002D  1C48               	btfss	_getTemp_flags+4,0
  4481  002E  0008               	return
  4482                           
  4483                           ;prog.c: 361: }
  4484                           ;prog.c: 363: unsigned char line = getTemp_flags.Line;
  4485                           
  4486                           ;prog.c: 360: return;
  4487  002F  0849               	movf	_getTemp_flags+5,w
  4488  0030  00A5               	movwf	get_temp_Async@line
  4489                           
  4490                           ;prog.c: 366: if (getTemp_flags.Init) {
  4491  0031  1C44               	btfss	_getTemp_flags,0
  4492  0032  2842               	goto	i1l195
  4493                           
  4494                           ;prog.c: 367: if (INIT(line)) {
  4495  0033  0825               	movf	get_temp_Async@line,w
  4496  0034  257D               	fcall	i1_INIT
  4497  0035  3A00               	xorlw	0
  4498                           
  4499                           ;prog.c: 368: getTemp_flags.Init = 0;
  4500  0036  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0037  1303               	bcf	3,6	;RP1=0, select bank0
  4502  0038  1903               	skipnz
  4503  0039  283F               	goto	L15
  4504  003A  30C3               	movlw	-61
  4505  003B  1044               	bcf	_getTemp_flags,0
  4506                           
  4507                           ;prog.c: 370: getTemp_flags.Send_Address = 1;
  4508  003C  14C4               	bsf	_getTemp_flags,1
  4509                           
  4510                           ;prog.c: 371: getTemp_flags.CountAddressBytes = 0;
  4511  003D  05C4               	andwf	_getTemp_flags,f
  4512                           
  4513                           ;prog.c: 372: } else {
  4514  003E  0008               	return
  4515  003F                     L15:	
  4516                           ;prog.c: 373: getTemp_flags.ActiveProcess = 0;
  4517                           
  4518  003F  1048               	bcf	_getTemp_flags+4,0
  4519                           
  4520                           ;prog.c: 374: getTemp_flags.Error = 1;
  4521  0040  17C7               	bsf	_getTemp_flags+3,7
  4522  0041  0008               	return
  4523  0042                     i1l195:	
  4524                           
  4525                           ;prog.c: 378: if (getTemp_flags.Send_Address) {
  4526  0042  1CC4               	btfss	_getTemp_flags,1
  4527  0043  2883               	goto	i1l199
  4528                           
  4529                           ;prog.c: 379: if (Broadcasting) {
  4530  0044  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4531  0045  2852               	goto	i1l3719
  4532                           
  4533                           ;prog.c: 380: TX(0xCC, line);
  4534  0046  0825               	movf	get_temp_Async@line,w
  4535  0047  00F0               	movwf	i1TX@line
  4536  0048  30CC               	movlw	204
  4537  0049  25AE               	fcall	i1_TX
  4538                           
  4539                           ;prog.c: 381: getTemp_flags.CountAddressBytes = 1;
  4540  004A  1283               	bcf	3,5	;RP0=0, select bank0
  4541  004B  1303               	bcf	3,6	;RP1=0, select bank0
  4542  004C  0844               	movf	_getTemp_flags,w
  4543  004D  39C3               	andlw	-61
  4544  004E  3804               	iorlw	4
  4545  004F  00C4               	movwf	_getTemp_flags
  4546  0050                     i1l3717:	
  4547                           
  4548                           ;prog.c: 382: getTemp_flags.Send_Address = 0;
  4549  0050  10C4               	bcf	_getTemp_flags,1
  4550                           
  4551                           ;prog.c: 383: } else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
  4552  0051  0008               	return
  4553  0052                     i1l3719:	
  4554  0052  0C44               	rrf	_getTemp_flags,w
  4555  0053  00A0               	movwf	??_get_temp_Async
  4556  0054  0C20               	rrf	??_get_temp_Async,w
  4557  0055  390F               	andlw	15
  4558  0056  00A1               	movwf	??_get_temp_Async+1
  4559  0057  3008               	movlw	8
  4560  0058  0221               	subwf	??_get_temp_Async+1,w
  4561  0059  1803               	skipnc
  4562  005A  0008               	return
  4563                           
  4564                           ;prog.c: 384: if (getTemp_flags.CountAddressBytes == 0) {
  4565  005B  0C44               	rrf	_getTemp_flags,w
  4566  005C  00A0               	movwf	??_get_temp_Async
  4567  005D  0C20               	rrf	??_get_temp_Async,w
  4568  005E  390F               	andlw	15
  4569  005F  1D03               	skipz
  4570  0060  2865               	goto	i1l3725
  4571                           
  4572                           ;prog.c: 385: TX(0x55, line);
  4573  0061  0825               	movf	get_temp_Async@line,w
  4574  0062  00F0               	movwf	i1TX@line
  4575  0063  3055               	movlw	85
  4576  0064  25AE               	fcall	i1_TX
  4577  0065                     i1l3725:	
  4578                           
  4579                           ;prog.c: 386: }
  4580                           ;prog.c: 387: TX(DS_Address[getTemp_flags.CountAddressBytes], line);
  4581  0065  1283               	bcf	3,5	;RP0=0, select bank0
  4582  0066  1303               	bcf	3,6	;RP1=0, select bank0
  4583  0067  0825               	movf	get_temp_Async@line,w
  4584  0068  00F0               	movwf	i1TX@line
  4585  0069  0C44               	rrf	_getTemp_flags,w
  4586  006A  00A0               	movwf	??_get_temp_Async
  4587  006B  0C20               	rrf	??_get_temp_Async,w
  4588  006C  390F               	andlw	15
  4589  006D  3EBF               	addlw	(low (_DS_Address| 0))& (0+255)
  4590  006E  0084               	movwf	4
  4591  006F  1383               	bcf	3,7	;select IRP bank1
  4592  0070  0800               	movf	0,w
  4593  0071  25AE               	fcall	i1_TX
  4594                           
  4595                           ;prog.c: 388: getTemp_flags.CountAddressBytes++;
  4596  0072  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0073  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0074  0C44               	rrf	_getTemp_flags,w
  4599  0075  211D               	fcall	PL2	;call to abstracted procedure
  4600  0076  0844               	movf	_getTemp_flags,w
  4601  0077  0620               	xorwf	??_get_temp_Async,w
  4602  0078  39C3               	andlw	-61
  4603  0079  0620               	xorwf	??_get_temp_Async,w
  4604  007A  00C4               	movwf	_getTemp_flags
  4605                           
  4606                           ;prog.c: 390: if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
  4607  007B  0C44               	rrf	_getTemp_flags,w
  4608  007C  00A0               	movwf	??_get_temp_Async
  4609  007D  0C20               	rrf	??_get_temp_Async,w
  4610  007E  390F               	andlw	15
  4611  007F  3A08               	xorlw	8
  4612  0080  1D03               	skipz
  4613  0081  0008               	return
  4614  0082  2850               	goto	i1l3717
  4615  0083                     i1l199:	
  4616                           
  4617                           ;prog.c: 396: if (getTemp_flags.SendConvertTemp) {
  4618  0083  1F44               	btfss	_getTemp_flags,6
  4619  0084  288D               	goto	i1l3737
  4620                           
  4621                           ;prog.c: 397: TX(0x44, line);
  4622  0085  0825               	movf	get_temp_Async@line,w
  4623  0086  00F0               	movwf	i1TX@line
  4624  0087  3044               	movlw	68
  4625  0088  25AE               	fcall	i1_TX
  4626                           
  4627                           ;prog.c: 398: getTemp_flags.SendConvertTemp = 0;
  4628  0089  1283               	bcf	3,5	;RP0=0, select bank0
  4629  008A  1303               	bcf	3,6	;RP1=0, select bank0
  4630  008B  1344               	bcf	_getTemp_flags,6
  4631                           
  4632                           ;prog.c: 400: } else
  4633  008C  0008               	return
  4634  008D                     i1l3737:	
  4635                           
  4636                           ;prog.c: 402: if (getTemp_flags.PauseValue > 0) {
  4637  008D  0845               	movf	_getTemp_flags+1,w
  4638  008E  0446               	iorwf	_getTemp_flags+2,w
  4639  008F  1903               	btfsc	3,2
  4640  0090  289C               	goto	i1l208
  4641                           
  4642                           ;prog.c: 403: getTemp_flags.PauseValue--;
  4643  0091  3001               	movlw	1
  4644  0092  02C5               	subwf	_getTemp_flags+1,f
  4645  0093  3000               	movlw	0
  4646  0094  1C03               	skipc
  4647  0095  03C6               	decf	_getTemp_flags+2,f
  4648  0096  02C6               	subwf	_getTemp_flags+2,f
  4649                           
  4650                           ;prog.c: 404: if (getTemp_flags.PauseValue == 0) {
  4651  0097  0845               	movf	_getTemp_flags+1,w
  4652  0098  0446               	iorwf	_getTemp_flags+2,w
  4653  0099  1903               	btfsc	3,2
  4654                           
  4655                           ;prog.c: 405: getTemp_flags.Init = 1;
  4656  009A  1444               	bsf	_getTemp_flags,0
  4657  009B  0008               	return
  4658  009C                     i1l208:	
  4659                           
  4660                           ;prog.c: 409: if (getTemp_flags.SendGetTemp) {
  4661  009C  1C47               	btfss	_getTemp_flags+3,0
  4662  009D  28A6               	goto	i1l211
  4663                           
  4664                           ;prog.c: 410: TX(0xBE, line);
  4665  009E  0825               	movf	get_temp_Async@line,w
  4666  009F  00F0               	movwf	i1TX@line
  4667  00A0  30BE               	movlw	190
  4668  00A1  25AE               	fcall	i1_TX
  4669                           
  4670                           ;prog.c: 411: getTemp_flags.SendGetTemp = 0;
  4671  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  4672  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  4673  00A4  1047               	bcf	_getTemp_flags+3,0
  4674                           
  4675                           ;prog.c: 412: } else
  4676  00A5  0008               	return
  4677  00A6                     i1l211:	
  4678                           
  4679                           ;prog.c: 414: if (getTemp_flags.ReadData) {
  4680  00A6  1CC7               	btfss	_getTemp_flags+3,1
  4681  00A7  0008               	return
  4682                           
  4683                           ;prog.c: 415: if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
  4684  00A8  2125               	fcall	PL4	;call to abstracted procedure
  4685  00A9  1803               	skipnc
  4686  00AA  0008               	return
  4687                           
  4688                           ;prog.c: 416: for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (
      +                          DS_ReadData); i++) {
  4689  00AB  01A2               	clrf	get_temp_Async@i
  4690  00AC  28C4               	goto	i1l3759
  4691  00AD                     i1l3761:	
  4692  00AD  2125               	fcall	PL4	;call to abstracted procedure
  4693  00AE  1803               	btfsc	3,0
  4694  00AF  28C8               	goto	i1l3763
  4695                           
  4696                           ;prog.c: 417: DS_ReadData[getTemp_flags.CountDataBytes] = RX(line);
  4697  00B0  0C47               	rrf	_getTemp_flags+3,w
  4698  00B1  00A0               	movwf	??_get_temp_Async
  4699  00B2  0C20               	rrf	??_get_temp_Async,w
  4700  00B3  390F               	andlw	15
  4701  00B4  3EB6               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4702  00B5  0084               	movwf	4
  4703  00B6  0825               	movf	get_temp_Async@line,w
  4704  00B7  2630               	fcall	i1_RX
  4705  00B8  1383               	bcf	3,7	;select IRP bank1
  4706  00B9  0080               	movwf	0
  4707                           
  4708                           ;prog.c: 418: getTemp_flags.CountDataBytes++;
  4709  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4710  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4711  00BC  0C47               	rrf	_getTemp_flags+3,w
  4712  00BD  211D               	fcall	PL2	;call to abstracted procedure
  4713  00BE  0847               	movf	_getTemp_flags+3,w
  4714  00BF  0620               	xorwf	??_get_temp_Async,w
  4715  00C0  39C3               	andlw	-61
  4716  00C1  0620               	xorwf	??_get_temp_Async,w
  4717  00C2  00C7               	movwf	_getTemp_flags+3
  4718  00C3  0AA2               	incf	get_temp_Async@i,f
  4719  00C4                     i1l3759:	
  4720  00C4  3003               	movlw	3
  4721  00C5  0222               	subwf	get_temp_Async@i,w
  4722  00C6  1C03               	btfss	3,0
  4723  00C7  28AD               	goto	i1l3761
  4724  00C8                     i1l3763:	
  4725                           
  4726                           ;prog.c: 419: }
  4727                           ;prog.c: 420: if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
  4728  00C8  0C47               	rrf	_getTemp_flags+3,w
  4729  00C9  00A0               	movwf	??_get_temp_Async
  4730  00CA  0C20               	rrf	??_get_temp_Async,w
  4731  00CB  390F               	andlw	15
  4732  00CC  3A09               	xorlw	9
  4733  00CD  1D03               	skipz
  4734  00CE  0008               	return
  4735                           
  4736                           ;prog.c: 421: if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof 
      +                          (DS_ReadData) - 1)) {
  4737  00CF  3008               	movlw	8
  4738  00D0  00F0               	movwf	i1calc_crc@len
  4739  00D1  30B6               	movlw	(low (_DS_ReadData| 0))& (0+255)
  4740  00D2  2657               	fcall	i1_calc_crc
  4741  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  4742  00D4  063E               	xorwf	(_DS_ReadData^(0+128)+8),w
  4743  00D5  1903               	skipnz
  4744  00D6  28DA               	goto	i1l3769
  4745                           
  4746                           ;prog.c: 422: getTemp_flags.Error = 1;
  4747  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4748  00D8  17C7               	bsf	_getTemp_flags+3,7
  4749                           
  4750                           ;prog.c: 423: } else {
  4751  00D9  2919               	goto	i1l3797
  4752  00DA                     i1l3769:	
  4753                           
  4754                           ;prog.c: 425: unsigned char temp1 = DS_ReadData[0];
  4755  00DA  0836               	movf	_DS_ReadData^(0+128),w
  4756  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  4757  00DC  00A3               	movwf	get_temp_Async@temp1
  4758                           
  4759                           ;prog.c: 426: unsigned char temp2 = DS_ReadData[1];
  4760  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  4761  00DE  0837               	movf	(_DS_ReadData^(0+128)+1),w
  4762  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  4763  00E0  00A4               	movwf	get_temp_Async@temp2
  4764                           
  4765                           ;prog.c: 428: temp_drob = temp1 & 0b00001111;
  4766  00E1  0823               	movf	get_temp_Async@temp1,w
  4767  00E2  00DB               	movwf	_temp_drob
  4768  00E3  300F               	movlw	15
  4769  00E4  05DB               	andwf	_temp_drob,f
  4770                           
  4771                           ;prog.c: 429: temp_drob = ((temp_drob * 6) + 2) / 10;
  4772  00E5  300A               	movlw	10
  4773  00E6  00F6               	movwf	i1___awdiv@divisor
  4774  00E7  01F7               	clrf	i1___awdiv@divisor+1
  4775  00E8  085B               	movf	_temp_drob,w
  4776  00E9  00F0               	movwf	___wmul@multiplier
  4777  00EA  3006               	movlw	6
  4778  00EB  01F1               	clrf	___wmul@multiplier+1
  4779  00EC  00F2               	movwf	___wmul@multiplicand
  4780  00ED  01F3               	clrf	___wmul@multiplicand+1
  4781  00EE  272A               	fcall	___wmul
  4782  00EF  0870               	movf	?___wmul,w
  4783  00F0  3E02               	addlw	2
  4784  00F1  00F8               	movwf	i1___awdiv@dividend
  4785  00F2  0871               	movf	?___wmul+1,w
  4786  00F3  1803               	skipnc
  4787  00F4  3E01               	addlw	1
  4788  00F5  3E00               	addlw	0
  4789  00F6  00F9               	movwf	i1___awdiv@dividend+1
  4790  00F7  248F               	fcall	i1___awdiv
  4791  00F8  0876               	movf	?i1___awdiv,w
  4792  00F9  00DB               	movwf	_temp_drob
  4793  00FA  300F               	movlw	15
  4794                           
  4795                           ;prog.c: 430: temp1 >>= 4;
  4796  00FB  0EA3               	swapf	get_temp_Async@temp1,f
  4797  00FC  05A3               	andwf	get_temp_Async@temp1,f
  4798                           
  4799                           ;prog.c: 431: sign = temp2 & 0x80;
  4800  00FD  0824               	movf	get_temp_Async@temp2,w
  4801  00FE  00DA               	movwf	_sign
  4802  00FF  3080               	movlw	128
  4803  0100  05DA               	andwf	_sign,f
  4804  0101  30F0               	movlw	240
  4805                           
  4806                           ;prog.c: 432: temp2 <<= 4;
  4807  0102  0EA4               	swapf	get_temp_Async@temp2,f
  4808  0103  05A4               	andwf	get_temp_Async@temp2,f
  4809                           
  4810                           ;prog.c: 433: temp2 &= 0b01110000;
  4811  0104  3070               	movlw	112
  4812  0105  05A4               	andwf	get_temp_Async@temp2,f
  4813                           
  4814                           ;prog.c: 434: temp2 |= temp1;
  4815  0106  0823               	movf	get_temp_Async@temp1,w
  4816  0107  04A4               	iorwf	get_temp_Async@temp2,f
  4817                           
  4818                           ;prog.c: 436: if (sign) {
  4819  0108  085A               	movf	_sign,w
  4820  0109  1903               	btfsc	3,2
  4821  010A  2917               	goto	i1l3795
  4822                           
  4823                           ;prog.c: 437: temperature = 127 - temp2;
  4824  010B  0824               	movf	get_temp_Async@temp2,w
  4825  010C  3C7F               	sublw	127
  4826  010D  00DC               	movwf	_temperature
  4827                           
  4828                           ;prog.c: 438: temp_drob = 10 - temp_drob;
  4829  010E  085B               	movf	_temp_drob,w
  4830  010F  3C0A               	sublw	10
  4831  0110  00DB               	movwf	_temp_drob
  4832                           
  4833                           ;prog.c: 439: if (temp_drob == 10) {
  4834  0111  3A0A               	xorlw	10
  4835  0112  1D03               	btfss	3,2
  4836  0113  2919               	goto	i1l3797
  4837                           
  4838                           ;prog.c: 440: temp_drob = 0;
  4839  0114  01DB               	clrf	_temp_drob
  4840                           
  4841                           ;prog.c: 441: temperature++;
  4842  0115  0ADC               	incf	_temperature,f
  4843  0116  2919               	goto	i1l3797
  4844  0117                     i1l3795:	
  4845                           
  4846                           ;prog.c: 444: temperature = temp2;
  4847  0117  0824               	movf	get_temp_Async@temp2,w
  4848  0118  00DC               	movwf	_temperature
  4849  0119                     i1l3797:	
  4850                           
  4851                           ;prog.c: 445: }
  4852                           ;prog.c: 446: }
  4853                           ;prog.c: 447: getTemp_flags.ReadData = 0;
  4854  0119  10C7               	bcf	_getTemp_flags+3,1
  4855                           
  4856                           ;prog.c: 448: getTemp_flags.ActiveProcess = 0;
  4857  011A  1048               	bcf	_getTemp_flags+4,0
  4858                           
  4859                           ;prog.c: 449: getTemp_flags.DataIsRead = 1;
  4860  011B  1747               	bsf	_getTemp_flags+3,6
  4861  011C  0008               	return
  4862  011D                     __end_of_get_temp_Async:	
  4863  011D                     PL2:	
  4864  011D  00A0               	movwf	??_get_temp_Async
  4865  011E  0C20               	rrf	??_get_temp_Async,w
  4866  011F  390F               	andlw	15
  4867  0120  00A0               	movwf	??_get_temp_Async
  4868  0121  0AA0               	incf	??_get_temp_Async,f
  4869  0122  0DA0               	rlf	??_get_temp_Async,f
  4870  0123  0DA0               	rlf	??_get_temp_Async,f
  4871  0124  0008               	return
  4872  0125                     __end_ofPL2:	
  4873  0125                     PL4:	
  4874  0125  0C47               	rrf	_getTemp_flags+3,w
  4875  0126  00A0               	movwf	??_get_temp_Async
  4876  0127  0C20               	rrf	??_get_temp_Async,w
  4877  0128  390F               	andlw	15
  4878  0129  00A1               	movwf	??_get_temp_Async+1
  4879  012A  3009               	movlw	9
  4880  012B  0221               	subwf	??_get_temp_Async+1,w
  4881  012C  0008               	return
  4882  012D                     __end_ofPL4:	
  4883                           
  4884                           	psect	text28
  4885  0657                     __ptext28:	
  4886 ;; *************** function i1_calc_crc *****************
  4887 ;; Defined at:
  4888 ;;		line 279 in file "prog.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  mas             1    wreg     PTR unsigned char 
  4891 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4892 ;;  len             1    0[COMMON] unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  mas             1    1[COMMON] PTR unsigned char 
  4895 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4896 ;;  calc_crc        1    5[COMMON] unsigned char 
  4897 ;;  calc_crc        1    4[COMMON] unsigned char 
  4898 ;;  calc_crc        1    3[COMMON] unsigned char 
  4899 ;;  calc_crc        1    2[COMMON] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      unsigned char 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4904 ;; Tracked objects:
  4905 ;;		On entry : 300/0
  4906 ;;		On exit  : 300/0
  4907 ;;		Unchanged: 300/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4909 ;;      Params:         1       0       0       0
  4910 ;;      Locals:         5       0       0       0
  4911 ;;      Temps:          0       0       0       0
  4912 ;;      Totals:         6       0       0       0
  4913 ;;Total ram usage:        6 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_get_temp_Async
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function i1_calc_crc
  4924  0657                     i1_calc_crc:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in i1_calc_crc: [wreg-fsr0h+status,2+status,0]
  4928                           ;i1calc_crc@mas stored from wreg
  4929  0657  00F1               	movwf	i1calc_crc@mas
  4930                           
  4931                           ;prog.c: 280: unsigned char crc = 0;
  4932  0658  01F5               	clrf	i1calc_crc@crc
  4933                           
  4934                           ;prog.c: 281: while (len--) {
  4935  0659  2E74               	goto	i1l3689
  4936  065A                     i1l3669:	
  4937                           
  4938                           ;prog.c: 282: unsigned char dat = *mas++;
  4939  065A  0871               	movf	i1calc_crc@mas,w
  4940  065B  0084               	movwf	4
  4941  065C  1383               	bcf	3,7	;select IRP bank0
  4942  065D  0800               	movf	0,w
  4943  065E  00F2               	movwf	i1calc_crc@dat
  4944  065F  0AF1               	incf	i1calc_crc@mas,f
  4945                           
  4946                           ;prog.c: 283: for (unsigned char i = 0; i < 8; i++) {
  4947  0660  01F4               	clrf	i1calc_crc@i
  4948  0661                     i1l3679:	
  4949                           
  4950                           ;prog.c: 284: unsigned char fb = (crc ^ dat) & 1;
  4951  0661  0875               	movf	i1calc_crc@crc,w
  4952  0662  0672               	xorwf	i1calc_crc@dat,w
  4953  0663  00F3               	movwf	i1calc_crc@fb
  4954  0664  3001               	movlw	1
  4955  0665  05F3               	andwf	i1calc_crc@fb,f
  4956                           
  4957                           ;prog.c: 285: crc >>= 1;
  4958  0666  1003               	clrc
  4959  0667  0CF5               	rrf	i1calc_crc@crc,f
  4960                           
  4961                           ;prog.c: 286: dat >>= 1;
  4962  0668  1003               	clrc
  4963  0669  0CF2               	rrf	i1calc_crc@dat,f
  4964                           
  4965                           ;prog.c: 287: if (fb) crc ^= 0x8c;
  4966  066A  0873               	movf	i1calc_crc@fb,w
  4967  066B  1903               	btfsc	3,2
  4968  066C  2E6F               	goto	i1l3687
  4969  066D  308C               	movlw	140
  4970  066E  06F5               	xorwf	i1calc_crc@crc,f
  4971  066F                     i1l3687:	
  4972  066F  3008               	movlw	8
  4973  0670  0AF4               	incf	i1calc_crc@i,f
  4974  0671  0274               	subwf	i1calc_crc@i,w
  4975  0672  1C03               	skipc
  4976  0673  2E61               	goto	i1l3679
  4977  0674                     i1l3689:	
  4978  0674  03F0               	decf	i1calc_crc@len,f
  4979  0675  0F70               	incfsz	i1calc_crc@len,w
  4980  0676  2E5A               	goto	i1l3669
  4981                           
  4982                           ;prog.c: 288: }
  4983                           ;prog.c: 289: }
  4984                           ;prog.c: 290: return crc;
  4985  0677  0875               	movf	i1calc_crc@crc,w
  4986  0678  0008               	return
  4987  0679                     __end_ofi1_calc_crc:	
  4988                           
  4989                           	psect	text29
  4990  048F                     __ptext29:	
  4991 ;; *************** function i1___awdiv *****************
  4992 ;; Defined at:
  4993 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;  divisor         2    6[COMMON] int 
  4996 ;;  dividend        2    8[COMMON] int 
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  __awdiv         2   12[COMMON] int 
  4999 ;;  __awdiv         1   11[COMMON] unsigned char 
  5000 ;;  __awdiv         1   10[COMMON] unsigned char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  2    6[COMMON] int 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0
  5005 ;; Tracked objects:
  5006 ;;		On entry : 300/0
  5007 ;;		On exit  : 300/0
  5008 ;;		Unchanged: 300/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5010 ;;      Params:         4       0       0       0
  5011 ;;      Locals:         4       0       0       0
  5012 ;;      Temps:          0       0       0       0
  5013 ;;      Totals:         8       0       0       0
  5014 ;;Total ram usage:        8 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_get_temp_Async
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function i1___awdiv
  5025  048F                     i1___awdiv:	
  5026                           
  5027                           ;incstack = 0
  5028                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  5029  048F  01FB               	clrf	i1___awdiv@sign
  5030  0490  1FF7               	btfss	i1___awdiv@divisor+1,7
  5031  0491  2C99               	goto	i1l2557
  5032  0492  09F6               	comf	i1___awdiv@divisor,f
  5033  0493  09F7               	comf	i1___awdiv@divisor+1,f
  5034  0494  0AF6               	incf	i1___awdiv@divisor,f
  5035  0495  1903               	skipnz
  5036  0496  0AF7               	incf	i1___awdiv@divisor+1,f
  5037  0497  01FB               	clrf	i1___awdiv@sign
  5038  0498  0AFB               	incf	i1___awdiv@sign,f
  5039  0499                     i1l2557:	
  5040  0499  1FF9               	btfss	i1___awdiv@dividend+1,7
  5041  049A  2CA2               	goto	i1l2563
  5042  049B  09F8               	comf	i1___awdiv@dividend,f
  5043  049C  09F9               	comf	i1___awdiv@dividend+1,f
  5044  049D  0AF8               	incf	i1___awdiv@dividend,f
  5045  049E  1903               	skipnz
  5046  049F  0AF9               	incf	i1___awdiv@dividend+1,f
  5047  04A0  3001               	movlw	1
  5048  04A1  06FB               	xorwf	i1___awdiv@sign,f
  5049  04A2                     i1l2563:	
  5050  04A2  01FC               	clrf	i1___awdiv@quotient
  5051  04A3  01FD               	clrf	i1___awdiv@quotient+1
  5052  04A4  0876               	movf	i1___awdiv@divisor,w
  5053  04A5  0477               	iorwf	i1___awdiv@divisor+1,w
  5054  04A6  1903               	btfsc	3,2
  5055  04A7  2CC7               	goto	i1l2585
  5056  04A8  01FA               	clrf	i1___awdiv@counter
  5057  04A9                     L16:	
  5058  04A9  0AFA               	incf	i1___awdiv@counter,f
  5059  04AA  1BF7               	btfsc	i1___awdiv@divisor+1,7
  5060  04AB  2CB0               	goto	i1l2573
  5061  04AC  1003               	clrc
  5062  04AD  0DF6               	rlf	i1___awdiv@divisor,f
  5063  04AE  0DF7               	rlf	i1___awdiv@divisor+1,f
  5064  04AF  2CA9               	goto	L16
  5065  04B0                     i1l2573:	
  5066  04B0  1003               	clrc
  5067  04B1  0DFC               	rlf	i1___awdiv@quotient,f
  5068  04B2  0DFD               	rlf	i1___awdiv@quotient+1,f
  5069  04B3  0877               	movf	i1___awdiv@divisor+1,w
  5070  04B4  0279               	subwf	i1___awdiv@dividend+1,w
  5071  04B5  1D03               	skipz
  5072  04B6  2CB9               	goto	u225_25
  5073  04B7  0876               	movf	i1___awdiv@divisor,w
  5074  04B8  0278               	subwf	i1___awdiv@dividend,w
  5075  04B9                     u225_25:	
  5076  04B9  1C03               	skipc
  5077  04BA  2CC3               	goto	L17
  5078  04BB  0876               	movf	i1___awdiv@divisor,w
  5079  04BC  02F8               	subwf	i1___awdiv@dividend,f
  5080  04BD  0877               	movf	i1___awdiv@divisor+1,w
  5081  04BE  1C03               	skipc
  5082  04BF  03F9               	decf	i1___awdiv@dividend+1,f
  5083  04C0  02F9               	subwf	i1___awdiv@dividend+1,f
  5084  04C1  147C               	bsf	i1___awdiv@quotient,0
  5085  04C2  1003               	clrc
  5086  04C3                     L17:	
  5087  04C3  0CF7               	rrf	i1___awdiv@divisor+1,f
  5088  04C4  0CF6               	rrf	i1___awdiv@divisor,f
  5089  04C5  0BFA               	decfsz	i1___awdiv@counter,f
  5090  04C6  2CB0               	goto	i1l2573
  5091  04C7                     i1l2585:	
  5092  04C7  087B               	movf	i1___awdiv@sign,w
  5093  04C8  1903               	btfsc	3,2
  5094  04C9  2CCF               	goto	i1l2589
  5095  04CA  09FC               	comf	i1___awdiv@quotient,f
  5096  04CB  09FD               	comf	i1___awdiv@quotient+1,f
  5097  04CC  0AFC               	incf	i1___awdiv@quotient,f
  5098  04CD  1903               	skipnz
  5099  04CE  0AFD               	incf	i1___awdiv@quotient+1,f
  5100  04CF                     i1l2589:	
  5101  04CF  087D               	movf	i1___awdiv@quotient+1,w
  5102  04D0  00F7               	movwf	?i1___awdiv+1
  5103  04D1  087C               	movf	i1___awdiv@quotient,w
  5104  04D2  00F6               	movwf	?i1___awdiv
  5105  04D3  0008               	return
  5106  04D4                     __end_ofi1___awdiv:	
  5107                           
  5108                           	psect	text30
  5109  05AE                     __ptext30:	
  5110 ;; *************** function i1_TX *****************
  5111 ;; Defined at:
  5112 ;;		line 237 in file "prog.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  cmd             1    wreg     unsigned char 
  5115 ;;  line            1    0[COMMON] unsigned char 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  cmd             1    2[COMMON] unsigned char 
  5118 ;;  TX              1    6[COMMON] unsigned char 
  5119 ;;  TX              1    5[COMMON] unsigned char 
  5120 ;;  TX              1    4[COMMON] unsigned char 
  5121 ;;  TX              1    3[COMMON] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 300/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5131 ;;      Params:         1       0       0       0
  5132 ;;      Locals:         5       0       0       0
  5133 ;;      Temps:          1       0       0       0
  5134 ;;      Totals:         7       0       0       0
  5135 ;;Total ram usage:        7 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_get_temp_Async
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function i1_TX
  5146  05AE                     i1_TX:	
  5147                           
  5148                           ;incstack = 0
  5149                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  5150                           ;i1TX@cmd stored from wreg
  5151  05AE  00F2               	movwf	i1TX@cmd
  5152                           
  5153                           ;prog.c: 238: unsigned char One = line;
  5154  05AF  0870               	movf	i1TX@line,w
  5155  05B0  00F6               	movwf	i1TX@One
  5156                           
  5157                           ;prog.c: 239: unsigned char Zero = One ^ 0b11111111;
  5158  05B1  0976               	comf	i1TX@One,w
  5159  05B2  00F4               	movwf	i1TX@Zero
  5160                           
  5161                           ;prog.c: 242: unsigned char i = 0;
  5162  05B3  01F5               	clrf	i1TX@i
  5163                           
  5164                           ;prog.c: 243: temp = cmd;
  5165  05B4  0872               	movf	i1TX@cmd,w
  5166  05B5  00F3               	movwf	i1TX@temp
  5167                           
  5168                           ;prog.c: 244: for (i = 0; i < 8; i++) {
  5169  05B6  01F5               	clrf	i1TX@i
  5170  05B7                     i1l149:	
  5171                           
  5172                           ;prog.c: 245: if (temp & 0x01) {
  5173  05B7  1C73               	btfss	i1TX@temp,0
  5174  05B8  2DC3               	goto	i1l2479
  5175                           
  5176                           ;prog.c: 246: TRISA &= Zero;
  5177  05B9  25D9               	fcall	PL10	;call to abstracted procedure
  5178                           
  5179                           ;prog.c: 247: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5180  05BA  2DBB               	nop2	;2 cycle nop
  5181  05BB  2DBC               	nop2	;2 cycle nop
  5182  05BC  0000               	nop
  5183                           
  5184                           ;prog.c: 248: TRISA |= One;
  5185  05BD  25D4               	fcall	PL8	;call to abstracted procedure
  5186                           
  5187                           ;prog.c: 249: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5188  05BE  3017               	movlw	23
  5189  05BF  00F1               	movwf	??i1_TX
  5190  05C0                     u492_27:	
  5191  05C0  0BF1               	decfsz	??i1_TX,f
  5192  05C1  2DC0               	goto	u492_27
  5193                           
  5194                           ;prog.c: 250: } else {
  5195  05C2  2DCC               	goto	i1l2487
  5196  05C3                     i1l2479:	
  5197                           
  5198                           ;prog.c: 251: TRISA &= Zero;
  5199  05C3  25D9               	fcall	PL10	;call to abstracted procedure
  5200                           
  5201                           ;prog.c: 252: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5202  05C4  3017               	movlw	23
  5203  05C5  00F1               	movwf	??i1_TX
  5204  05C6                     u493_27:	
  5205  05C6  0BF1               	decfsz	??i1_TX,f
  5206  05C7  2DC6               	goto	u493_27
  5207                           
  5208                           ;prog.c: 253: TRISA |= One;
  5209  05C8  25D4               	fcall	PL8	;call to abstracted procedure
  5210                           
  5211                           ;prog.c: 254: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5212  05C9  2DCA               	nop2	;2 cycle nop
  5213  05CA  2DCB               	nop2	;2 cycle nop
  5214  05CB  0000               	nop
  5215  05CC                     i1l2487:	
  5216  05CC  3008               	movlw	8
  5217                           
  5218                           ;prog.c: 255: }
  5219                           ;prog.c: 256: temp >>= 1;
  5220  05CD  1003               	clrc
  5221  05CE  0CF3               	rrf	i1TX@temp,f
  5222  05CF  0AF5               	incf	i1TX@i,f
  5223  05D0  0275               	subwf	i1TX@i,w
  5224  05D1  1803               	btfsc	3,0
  5225  05D2  0008               	return
  5226  05D3  2DB7               	goto	i1l149
  5227  05D4                     __end_ofi1_TX:	
  5228  05D4                     PL8:	
  5229  05D4  0876               	movf	i1TX@One,w
  5230  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  5231  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  5232  05D7  0485               	iorwf	5,f	;volatile
  5233  05D8  0008               	return
  5234  05D9                     __end_ofPL8:	
  5235  05D9                     PL10:	
  5236  05D9  0874               	movf	i1TX@Zero,w
  5237  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  5238  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  5239  05DC  0585               	andwf	5,f	;volatile
  5240  05DD  0008               	return
  5241  05DE                     __end_ofPL10:	
  5242                           
  5243                           	psect	text31
  5244  0630                     __ptext31:	
  5245 ;; *************** function i1_RX *****************
  5246 ;; Defined at:
  5247 ;;		line 260 in file "prog.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  line            1    wreg     unsigned char 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  line            1    1[COMMON] unsigned char 
  5252 ;;  RX              1    5[COMMON] unsigned char 
  5253 ;;  RX              1    4[COMMON] unsigned char 
  5254 ;;  RX              1    3[COMMON] unsigned char 
  5255 ;;  RX              1    2[COMMON] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      unsigned char 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0
  5260 ;; Tracked objects:
  5261 ;;		On entry : 300/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5265 ;;      Params:         0       0       0       0
  5266 ;;      Locals:         5       0       0       0
  5267 ;;      Temps:          1       0       0       0
  5268 ;;      Totals:         6       0       0       0
  5269 ;;Total ram usage:        6 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_get_temp_Async
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function i1_RX
  5280  0630                     i1_RX:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  5284                           ;i1RX@line stored from wreg
  5285  0630  00F1               	movwf	i1RX@line
  5286                           
  5287                           ;prog.c: 261: unsigned char One = line;
  5288  0631  00F5               	movwf	i1RX@One
  5289                           
  5290                           ;prog.c: 262: unsigned char Zero = One ^ 0b11111111;
  5291  0632  0975               	comf	i1RX@One,w
  5292  0633  00F2               	movwf	i1RX@Zero
  5293                           
  5294                           ;prog.c: 264: unsigned char d = 0;
  5295  0634  01F3               	clrf	i1RX@d
  5296                           
  5297                           ;prog.c: 265: for (unsigned char i = 0; i < 8; i++) {
  5298  0635  01F4               	clrf	i1RX@i
  5299  0636                     i1l2501:	
  5300                           
  5301                           ;prog.c: 266: TRISA &= Zero;
  5302  0636  0872               	movf	i1RX@Zero,w
  5303  0637  1683               	bsf	3,5	;RP0=1, select bank1
  5304  0638  1303               	bcf	3,6	;RP1=0, select bank1
  5305  0639  0585               	andwf	5,f	;volatile
  5306                           
  5307                           ;prog.c: 267: _delay((unsigned long)((6)*(4000000/4000000.0)));
  5308  063A  2E3B               	nop2	;2 cycle nop
  5309  063B  2E3C               	nop2	;2 cycle nop
  5310  063C  2E3D               	nop2	;2 cycle nop
  5311                           
  5312                           ;prog.c: 268: TRISA |= One;
  5313  063D  0875               	movf	i1RX@One,w
  5314  063E  1683               	bsf	3,5	;RP0=1, select bank1
  5315  063F  1303               	bcf	3,6	;RP1=0, select bank1
  5316  0640  0485               	iorwf	5,f	;volatile
  5317                           
  5318                           ;prog.c: 269: _delay((unsigned long)((4)*(4000000/4000000.0)));
  5319  0641  2E42               	nop2	;2 cycle nop
  5320  0642  2E43               	nop2	;2 cycle nop
  5321                           
  5322                           ;prog.c: 270: d >>= 1;
  5323  0643  1003               	clrc
  5324  0644  0CF3               	rrf	i1RX@d,f
  5325                           
  5326                           ;prog.c: 271: if ((PORTA & One) > 0) {
  5327  0645  1283               	bcf	3,5	;RP0=0, select bank0
  5328  0646  1303               	bcf	3,6	;RP1=0, select bank0
  5329  0647  0805               	movf	5,w	;volatile
  5330  0648  0575               	andwf	i1RX@One,w
  5331  0649  1D03               	btfss	3,2
  5332                           
  5333                           ;prog.c: 272: d |= 0x80;
  5334  064A  17F3               	bsf	i1RX@d,7
  5335                           
  5336                           ;prog.c: 273: }
  5337                           ;prog.c: 274: _delay((unsigned long)((60)*(4000000/4000000.0)));
  5338  064B  3013               	movlw	19
  5339  064C  00F0               	movwf	??i1_RX
  5340  064D                     u494_27:	
  5341  064D  0BF0               	decfsz	??i1_RX,f
  5342  064E  2E4D               	goto	u494_27
  5343  064F  2E50               	nop2	;nop
  5344  0650  3008               	movlw	8
  5345  0651  0AF4               	incf	i1RX@i,f
  5346  0652  0274               	subwf	i1RX@i,w
  5347  0653  1C03               	skipc
  5348  0654  2E36               	goto	i1l2501
  5349                           
  5350                           ;prog.c: 275: }
  5351                           ;prog.c: 276: return d;
  5352  0655  0873               	movf	i1RX@d,w
  5353  0656  0008               	return
  5354  0657                     __end_ofi1_RX:	
  5355                           
  5356                           	psect	text32
  5357  057D                     __ptext32:	
  5358 ;; *************** function i1_INIT *****************
  5359 ;; Defined at:
  5360 ;;		line 219 in file "prog.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  line            1    wreg     unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  line            1    1[COMMON] unsigned char 
  5365 ;;  INIT            1    4[COMMON] unsigned char 
  5366 ;;  INIT            1    3[COMMON] unsigned char 
  5367 ;;  INIT            1    2[COMMON] unsigned char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;                  1    wreg      unsigned char 
  5370 ;; Registers used:
  5371 ;;		wreg, status,2, status,0
  5372 ;; Tracked objects:
  5373 ;;		On entry : 300/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5377 ;;      Params:         0       0       0       0
  5378 ;;      Locals:         4       0       0       0
  5379 ;;      Temps:          1       0       0       0
  5380 ;;      Totals:         5       0       0       0
  5381 ;;Total ram usage:        5 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		_get_temp_Async
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function i1_INIT
  5392  057D                     i1_INIT:	
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  5396                           ;i1INIT@line stored from wreg
  5397  057D  00F1               	movwf	i1INIT@line
  5398                           
  5399                           ;prog.c: 220: unsigned char One = line;
  5400  057E  00F4               	movwf	i1INIT@One
  5401                           
  5402                           ;prog.c: 221: unsigned char Zero = One ^ 0b11111111;
  5403  057F  0974               	comf	i1INIT@One,w
  5404  0580  00F2               	movwf	i1INIT@Zero
  5405                           
  5406                           ;prog.c: 225: TRISA |= One;
  5407  0581  0874               	movf	i1INIT@One,w
  5408  0582  1683               	bsf	3,5	;RP0=1, select bank1
  5409  0583  0485               	iorwf	5,f	;volatile
  5410                           
  5411                           ;prog.c: 226: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5412  0584  3006               	movlw	6
  5413  0585  00F0               	movwf	??i1_INIT
  5414  0586                     u495_27:	
  5415  0586  0BF0               	decfsz	??i1_INIT,f
  5416  0587  2D86               	goto	u495_27
  5417  0588  0000               	nop
  5418                           
  5419                           ;prog.c: 227: TRISA &= Zero;
  5420  0589  0872               	movf	i1INIT@Zero,w
  5421  058A  1683               	bsf	3,5	;RP0=1, select bank1
  5422  058B  1303               	bcf	3,6	;RP1=0, select bank1
  5423  058C  0585               	andwf	5,f	;volatile
  5424                           
  5425                           ;prog.c: 228: _delay((unsigned long)((500)*(4000000/4000000.0)));
  5426  058D  30A6               	movlw	166
  5427  058E  00F0               	movwf	??i1_INIT
  5428  058F                     u496_27:	
  5429  058F  0BF0               	decfsz	??i1_INIT,f
  5430  0590  2D8F               	goto	u496_27
  5431  0591  0000               	nop
  5432                           
  5433                           ;prog.c: 229: TRISA |= One;
  5434  0592  0874               	movf	i1INIT@One,w
  5435  0593  1683               	bsf	3,5	;RP0=1, select bank1
  5436  0594  1303               	bcf	3,6	;RP1=0, select bank1
  5437  0595  0485               	iorwf	5,f	;volatile
  5438                           
  5439                           ;prog.c: 230: _delay((unsigned long)((65)*(4000000/4000000.0)));
  5440  0596  3015               	movlw	21
  5441  0597  00F0               	movwf	??i1_INIT
  5442  0598                     u497_27:	
  5443  0598  0BF0               	decfsz	??i1_INIT,f
  5444  0599  2D98               	goto	u497_27
  5445  059A  0000               	nop
  5446                           
  5447                           ;prog.c: 231: b = (PORTA & One) > 0;
  5448  059B  1283               	bcf	3,5	;RP0=0, select bank0
  5449  059C  1303               	bcf	3,6	;RP1=0, select bank0
  5450  059D  0805               	movf	5,w	;volatile
  5451  059E  0574               	andwf	i1INIT@One,w
  5452  059F  1903               	btfsc	3,2
  5453  05A0  2DA3               	goto	u210_20
  5454  05A1  3001               	movlw	1
  5455  05A2  2DA4               	goto	u211_20
  5456  05A3                     u210_20:	
  5457  05A3  3000               	movlw	0
  5458  05A4                     u211_20:	
  5459  05A4  00F3               	movwf	i1INIT@b
  5460                           
  5461                           ;prog.c: 232: _delay((unsigned long)((450)*(4000000/4000000.0)));
  5462  05A5  3095               	movlw	149
  5463  05A6  00F0               	movwf	??i1_INIT
  5464  05A7                     u498_27:	
  5465  05A7  0BF0               	decfsz	??i1_INIT,f
  5466  05A8  2DA7               	goto	u498_27
  5467  05A9  2DAA               	nop2	;nop
  5468                           
  5469                           ;prog.c: 234: return !b;
  5470  05AA  0873               	movf	i1INIT@b,w
  5471  05AB  1903               	btfsc	3,2
  5472  05AC  3401               	retlw	1
  5473  05AD  3400               	retlw	0
  5474  05AE                     __end_ofi1_INIT:	
  5475                           
  5476                           	psect	text33
  5477  072A                     __ptext33:	
  5478 ;; *************** function ___wmul *****************
  5479 ;; Defined at:
  5480 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  multiplier      2    0[COMMON] unsigned int 
  5483 ;;  multiplicand    2    2[COMMON] unsigned int 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  product         2    4[COMMON] unsigned int 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  2    0[COMMON] unsigned int 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0
  5490 ;; Tracked objects:
  5491 ;;		On entry : 300/0
  5492 ;;		On exit  : 300/0
  5493 ;;		Unchanged: 300/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5495 ;;      Params:         4       0       0       0
  5496 ;;      Locals:         2       0       0       0
  5497 ;;      Temps:          0       0       0       0
  5498 ;;      Totals:         6       0       0       0
  5499 ;;Total ram usage:        6 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_get_temp_Async
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function ___wmul
  5510  072A                     ___wmul:	
  5511                           
  5512                           ;incstack = 0
  5513                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5514  072A  01F4               	clrf	___wmul@product
  5515  072B  01F5               	clrf	___wmul@product+1
  5516  072C                     i1l2383:	
  5517  072C  1C70               	btfss	___wmul@multiplier,0
  5518  072D  2F34               	goto	i1l2387
  5519  072E  0872               	movf	___wmul@multiplicand,w
  5520  072F  07F4               	addwf	___wmul@product,f
  5521  0730  1803               	skipnc
  5522  0731  0AF5               	incf	___wmul@product+1,f
  5523  0732  0873               	movf	___wmul@multiplicand+1,w
  5524  0733  07F5               	addwf	___wmul@product+1,f
  5525  0734                     i1l2387:	
  5526  0734  1003               	clrc
  5527  0735  0DF2               	rlf	___wmul@multiplicand,f
  5528  0736  0DF3               	rlf	___wmul@multiplicand+1,f
  5529  0737  1003               	clrc
  5530  0738  0CF1               	rrf	___wmul@multiplier+1,f
  5531  0739  0CF0               	rrf	___wmul@multiplier,f
  5532  073A  0870               	movf	___wmul@multiplier,w
  5533  073B  0471               	iorwf	___wmul@multiplier+1,w
  5534  073C  1D03               	btfss	3,2
  5535  073D  2F2C               	goto	i1l2383
  5536  073E  0875               	movf	___wmul@product+1,w
  5537  073F  00F1               	movwf	?___wmul+1
  5538  0740  0874               	movf	___wmul@product,w
  5539  0741  00F0               	movwf	?___wmul
  5540  0742  0008               	return
  5541  0743                     __end_of___wmul:	
  5542                           
  5543                           	psect	text34
  5544  06F3                     __ptext34:	
  5545 ;; *************** function _convDig *****************
  5546 ;; Defined at:
  5547 ;;		line 132 in file "prog.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  dig             1    wreg     unsigned char 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  dig             1    0[COMMON] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      unsigned char 
  5554 ;; Registers used:
  5555 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5556 ;; Tracked objects:
  5557 ;;		On entry : B00/0
  5558 ;;		On exit  : B00/0
  5559 ;;		Unchanged: B00/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5561 ;;      Params:         0       0       0       0
  5562 ;;      Locals:         1       0       0       0
  5563 ;;      Temps:          0       0       0       0
  5564 ;;      Totals:         1       0       0       0
  5565 ;;Total ram usage:        1 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_F
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function _convDig
  5576  06F3                     _convDig:	
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5580                           ;convDig@dig stored from wreg
  5581  06F3  00F0               	movwf	convDig@dig
  5582                           
  5583                           ;prog.c: 133: switch (dig) {
  5584  06F4  2F03               	goto	i1l2655
  5585  06F5                     i1l2597:	
  5586  06F5  34DB               	retlw	219
  5587  06F6                     i1l2601:	
  5588  06F6  3418               	retlw	24
  5589  06F7                     i1l2605:	
  5590  06F7  34B3               	retlw	179
  5591  06F8                     i1l2609:	
  5592  06F8  34BA               	retlw	186
  5593  06F9                     i1l2613:	
  5594  06F9  3478               	retlw	120
  5595  06FA                     i1l2617:	
  5596  06FA  34EA               	retlw	234
  5597  06FB                     i1l2621:	
  5598  06FB  34EB               	retlw	235
  5599  06FC                     i1l2625:	
  5600  06FC  3498               	retlw	152
  5601  06FD                     i1l2629:	
  5602  06FD  34FB               	retlw	251
  5603  06FE                     i1l2633:	
  5604  06FE  34FA               	retlw	250
  5605  06FF                     i1l2637:	
  5606  06FF  34E3               	retlw	227
  5607  0700                     i1l2641:	
  5608  0700  3421               	retlw	33
  5609  0701                     i1l2645:	
  5610  0701  3420               	retlw	32
  5611  0702                     i1l2649:	
  5612  0702  3400               	retlw	0
  5613  0703                     i1l2655:	
  5614  0703  0870               	movf	convDig@dig,w
  5615                           
  5616                           ; Switch size 1, requested type "space"
  5617                           ; Number of cases is 13, Range of values is 0 to 32
  5618                           ; switch strategies available:
  5619                           ; Name         Instructions Cycles
  5620                           ; direct_byte           39     6 (fixed)
  5621                           ; simple_byte           40    21 (average)
  5622                           ; jumptable            260     6 (fixed)
  5623                           ;	Chosen strategy is direct_byte
  5624  0704  0084               	movwf	4
  5625  0705  3021               	movlw	33
  5626  0706  0204               	subwf	4,w
  5627  0707  1803               	skipnc
  5628  0708  3400               	retlw	0
  5629  0709  3006               	movlw	high i1S4377
  5630  070A  008A               	movwf	10
  5631  070B  309A               	movlw	low i1S4377
  5632  070C  0704               	addwf	4,w
  5633  070D  0082               	movwf	2
  5634  070E  0008               	return
  5635  070F                     __end_of_convDig:	
  5636  007E                     btemp	set	126	;btemp
  5637  007E                     wtemp	set	126
  5638  007E                     wtemp0	set	126
  5639  0080                     wtemp1	set	128
  5640  0082                     wtemp2	set	130
  5641  0084                     wtemp3	set	132
  5642  0086                     wtemp4	set	134
  5643  0088                     wtemp5	set	136
  5644  007F                     wtemp6	set	127
  5645  007E                     ttemp	set	126
  5646  007E                     ttemp0	set	126
  5647  0081                     ttemp1	set	129
  5648  0084                     ttemp2	set	132
  5649  0087                     ttemp3	set	135
  5650  007F                     ttemp4	set	127
  5651  007E                     ltemp	set	126
  5652  007E                     ltemp0	set	126
  5653  0082                     ltemp1	set	130
  5654  0086                     ltemp2	set	134
  5655  0080                     ltemp3	set	128
  5656                           
  5657                           	psect	swtext1
  5658  069A                     __pswtext1:	
  5659  069A                     i1S4377:	
  5660  069A  2EF5               	ljmp	i1l2597
  5661  069B  2EF6               	ljmp	i1l2601
  5662  069C  2EF7               	ljmp	i1l2605
  5663  069D  2EF8               	ljmp	i1l2609
  5664  069E  2EF9               	ljmp	i1l2613
  5665  069F  2EFA               	ljmp	i1l2617
  5666  06A0  2EFB               	ljmp	i1l2621
  5667  06A1  2EFC               	ljmp	i1l2625
  5668  06A2  2EFD               	ljmp	i1l2629
  5669  06A3  2EFE               	ljmp	i1l2633
  5670  06A4  2F02               	ljmp	i1l2649
  5671  06A5  2F02               	ljmp	i1l2649
  5672  06A6  2F02               	ljmp	i1l2649
  5673  06A7  2F02               	ljmp	i1l2649
  5674  06A8  2EFF               	ljmp	i1l2637
  5675  06A9  2F02               	ljmp	i1l2649
  5676  06AA  2F02               	ljmp	i1l2649
  5677  06AB  2F02               	ljmp	i1l2649
  5678  06AC  2F02               	ljmp	i1l2649
  5679  06AD  2F02               	ljmp	i1l2649
  5680  06AE  2F02               	ljmp	i1l2649
  5681  06AF  2F02               	ljmp	i1l2649
  5682  06B0  2F02               	ljmp	i1l2649
  5683  06B1  2F02               	ljmp	i1l2649
  5684  06B2  2F00               	ljmp	i1l2641
  5685  06B3  2F02               	ljmp	i1l2649
  5686  06B4  2F02               	ljmp	i1l2649
  5687  06B5  2F02               	ljmp	i1l2649
  5688  06B6  2F02               	ljmp	i1l2649
  5689  06B7  2F02               	ljmp	i1l2649
  5690  06B8  2F02               	ljmp	i1l2649
  5691  06B9  2F02               	ljmp	i1l2649
  5692  06BA  2F01               	ljmp	i1l2645


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         25
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      65
    BANK1            80     22      39
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 9
		 -> EditAddressMemory@CellsData(BANK1[8]), DS_ReadData(BANK1[9]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->i1___awdiv
    i1___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_CellToInd
    _WriteArrayToEEPROM->_EEWR
    _ShowError->_setDigit
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___awdiv

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   18311
                                             35 BANK0      1     1      0
                                             14 BANK1      8     8      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
              _Reset_powerOnInterval
                        _Run_getTemp
                          _ShowError
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2528
                                             25 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                             13 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     501
                                             13 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            14    13      1    1636
                                             21 BANK0     14    13      1
                _FillArrayFromEEPROM
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   15    15      0    7957
                                             26 BANK0      1     1      0
                                              0 BANK1     14    14      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                          _ShowError
                                 _TX
                 _WriteArrayToEEPROM
                           _calc_crc
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     288
                                             13 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     433
                                             13 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     673
                                             16 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     161
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _TX                                                   7     6      1     684
                                             13 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ShowError                                            0     0      0     938
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             4     3      1    1188
                                             21 BANK0      4     3      1
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2     931
                                             16 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             13 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   6     6      0     269
                                             13 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _INIT                                                 5     5      0     229
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    2412
                                             25 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1     938
                                             21 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     594
                                             13 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     756
                                             13 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    7     7      0    2267
                                              6 BANK0      7     7      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       6     6      0    2072
                                              0 BANK0      6     6      0
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                          i1___awdiv
                         i1_calc_crc
 ---------------------------------------------------------------------------------
 (7) i1_calc_crc                                           6     5      1     313
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (7) i1___awdiv                                            8     4      4     352
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 7     6      1     358
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 6     6      0     183
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               5     5      0     158
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     278
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___awdiv
     ___awmod
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___awdiv
       ___awmod
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _ShowError
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _calc_crc
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _waitInterrupt
   _Reset_powerOnInterval
   _Run_getTemp
   _ShowError
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___awdiv (ARG)
     ___awmod (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1___awdiv
       ___wmul (ARG)
     i1_calc_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      27       7       48.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      41       3       81.3%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76      10        0.0%
ABS                  0      0      76       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Dec 04 15:34:19 2016

                      __CFG_CP$ON 0000                                 _F 02E6              FindCell@addressStart 0040  
                               pc 0002                                ?_F 0070                                PL2 011D  
                              PL4 0125                                PL6 0577                                PL8 05D4  
                              l75 07F8                                _RX 05DE                                _TX 0549  
                    ___awdiv@sign 0032                                fsr 0004               ___wmul@multiplicand 0072  
                      i1_calc_crc 0657                               ??_F 0026                               PL10 05D9  
                             ?_RX 0070                               ?_TX 002D                               l125 0755  
                             l228 0411                               l149 0552                               l370 0191  
                             l386 01FB                               RX@d 0030                               RX@i 0031  
                             l739 071B                               TX@i 0032                               _RA2 002A  
                             _RA5 002D                      __CFG_CPD$OFF 0000                               fsr0 0004  
                             indf 0000                      ___awmod@sign 0032                       main@address 00B4  
                 ?_get_temp_Async 0070                      main@TheStart 00B2                              ??_RX 002D  
                            ??_TX 002E                      __CFG_LVP$OFF 0000                              F@dig 002B  
                  setPoint@dignum 002E                              l4005 02A9                              l4013 02AE  
                            l4023 02BB                              l3401 046B                              l3413 0482  
                            l4037 02C7                              l4303 01C3                              l3417 048A  
                            l3441 04F1                              l3433 04E5                              l3353 07E2  
                            l3601 06E6                              l4049 02E3                              l4313 01D7  
                            l3531 056D                              l3523 0561                              l4323 01F2  
                            l4227 014D                              l3453 050C                              l3429 04DE  
                            l3461 07AE                              l4309 01D1                              l4245 016E  
                            l4237 015E                              l3391 045D                              l3375 0796  
                            l3631 0715                              l4319 01EE                              l4239 0162  
                            l3385 0454                              l3449 0504                              l3545 05E5  
                            l3481 0771                              l4337 0203                              l4281 01A8  
                            l4257 017C                              l3811 0415                              l4355 0226  
                            l3645 0728                              l3661 06D3                              l3653 06BF  
                            l4349 0215                              l3567 067C                              l3823 0427  
                            l4279 01A4                              l4295 01B9                              l3585 0690  
                            l3577 0682                              l3825 0429                              l3817 041E  
                            l3809 040F                              l3905 03FD                              l3587 0695  
                            l3851 0448                              l3819 0421                              l3941 024D  
                            l3933 0241                              l3925 0233                              l3837 0433  
                            l3909 0401                              l3943 024F                              l3953 025F  
                            l3945 0253                              l3849 0444                              l3865 039D  
                            l3867 039E                              l3957 0261                              l3877 03C1  
                            l3967 0269                              l3895 03E3                              l3987 027F  
                            l3997 0297                              _EERD 07B4                              _T0IF 005A  
                            _EEWR 0743                              u4100 03AC                              u4110 03AD  
                            u4080 03A4                              u3425 0474                              u4090 03A5  
                            u3540 053C                              u4180 03E9                              u3550 053D  
                            u4190 03EA                              _INIT 0511                              u4380 02DC  
                            u4390 02DD                              u3495 04F7                              u4740 01AF  
                            u4750 01B0                              u4907 0531                              u4917 0540  
                            u4857 055E                              u4867 0567                              u4877 05FC  
                            u4887 051B                              u4897 0526                              i1_RX 0630  
                            i1_TX 05AE                              _TMR0 0001                              _main 012D  
                            _sign 005A                              btemp 007E                              ltemp 007E  
                            start 0010                              ttemp 007E                              wtemp 007E  
      WriteArrayToEEPROM@quantity 0031                    EEWR@INTCON_BUP 002F       WriteArrayToEEPROM@container 0033  
                     i1calc_crc@i 0074      __size_of_FillArrayFromEEPROM 0011                             ?_EERD 0070  
                           ?_EEWR 002D                             ?_INIT 0070                             ?i1_RX 0070  
                           ?i1_TX 0070                             INIT@b 0030                             ?_main 0070  
                  i1___awdiv@sign 007B                   __end_of___awdiv 048F                   __end_of___lbdiv 072A  
                           _EEADR 009B                             RX@One 0032                     __CFG_WDTE$OFF 0000  
                 __end_of___awmod 0511                   __end_of___lbmod 06D7                             _CMCON 001F  
                           TX@One 0033                   ___awdiv@divisor 002D                             _T2CON 0012  
                           TX@cmd 002F                             i1l211 00A6                             i1l301 0386  
                           i1l208 009C                             i1l149 05B7                             i1l257 02FC  
                           i1l195 0042                             i1l199 0083                             i1RX@d 0073  
                           i1RX@i 0074                             i1TX@i 0075                   ___awdiv@counter 0031  
                           _PORTA 0005                             _PORTB 0006                             _TRISA 0085  
                           _TRISB 0086                     __CFG_PWRTE$ON 0000                   __end_of_indData 0405  
                 __end_of_convDig 070F                    __CFG_BOREN$OFF 0000                             pclath 000A  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                __size_ofi1___awdiv 0045  
                 ___lbdiv@divisor 002D            main@point_on_ind_delay 00AE                   ___lbdiv@counter 002F  
                __end_of_FindCell 044A                      __end_of_EERD 07C3                      __end_of_EEWR 075B  
                    __end_of_INIT 0549                      __end_ofi1_RX 0657                      __end_ofi1_TX 05D4  
                  __CFG_MCLRE$OFF 0000                   __initialization 0011                      __end_of_main 0228  
                    i1calc_crc@fb 0073                __size_of_CellToInd 0028                    EERD@EEDATA_BUP 002F  
                __end_of_ReadCell 06F3                            ??_EERD 002D                            ??_EEWR 002E  
                          ??_INIT 002D                            ??i1_RX 0070                            ??i1_TX 0071  
                     ?i1_calc_crc 0070                            ??_main 0043           ??_Reset_powerOnInterval 002D  
                    ReadCell@cell 0037                            i1S4377 069A                            _EEDATA 009A  
                          _EECON2 009D                  ___awdiv@dividend 002F                            RX@Zero 002F  
                          TX@Zero 0031                            RX@line 002E                 F@CurrentKeysState 002C  
                          i1l2501 0636                            i1l2601 06F6                            i1l4123 0327  
                          i1l4115 0320                            i1l4107 0315                            i1l2621 06FB  
                          i1l2613 06F9                            i1l2605 06F7                            i1l4141 0339  
                          i1l4109 0319                            i1l2383 072C                            i1l4135 0333  
                          i1l4127 032C                            u210_20 05A3                            i1l2641 0700  
                          i1l2633 06FE                            i1l2625 06FC                            i1l2617 06FA  
                          i1l2609 06F8                            i1l4161 035F                            i1l4145 0340  
                          i1l4129 032D                            i1l2387 0734                            i1l2563 04A2  
                          i1l4139 0338                            i1l4091 02FD                            i1l2645 0701  
                          i1l2637 06FF                            i1l2629 06FD                            i1l2573 04B0  
                          i1l2557 0499                            i1l4173 0383                            i1l4157 0354  
                          i1l4149 0347                            i1l2655 0703                            i1l2487 05CC  
                          i1l2479 05C3                            i1l4191 037F                            i1l4167 0369  
                          i1l4175 0371                            u211_20 05A4                            i1l2649 0702  
                          i1l2585 04C7                            i1l4195 0385                            i1l2597 06F5  
                          i1l2589 04CF                            i1l3725 0065                            i1l3717 0050  
                          i1l4189 037B                            i1l3719 0052                            i1l3761 00AD  
                          i1l3737 008D                            i1l3763 00C8                            i1l3669 065A  
                          i1l3687 066F                            i1l3679 0661                            i1l3759 00C4  
                          i1l3689 0674                            i1l3769 00DA                            i1l3795 0117  
                          i1l3797 0119                            TX@line 002D                            _INTCON 000B  
                          u225_25 04B9                            TX@temp 0030                            i1_INIT 057D  
                          u492_27 05C0                            u493_27 05C6                            u494_27 064D  
                          u495_27 0586                  __end_of_calc_crc 069A                            u496_27 058F  
                          u497_27 0598                            u498_27 05A7                            _TRISA4 042C  
                          ___wmul 072A                         ??___awdiv 0031                         ??___lbdiv 002E  
                       ??___awmod 0031                         ??___lbmod 002E                            _clrInd 07F0  
                          _digits 004A                  ___awdiv@quotient 0033                   ___awmod@divisor 002D  
                 ___awmod@counter 0031                         ??_indData 0039                  __end_of_setDigit 0794  
                       ??_convDig 0070                __size_of_ShowError 000E                 __end_ofi1___awdiv 04D4  
                __end_of_setPoint 07B4                            saved_w 007E                 _EditAddressMemory 0228  
               __end_of_CellToInd 0630                  ___lbdiv@dividend 002E                ?_EditAddressMemory 0070  
                 ___lbmod@divisor 002D           __end_of__initialization 002B                    EERD@INTCON_BUP 002E  
                 ___lbmod@counter 0030               __size_ofi1_calc_crc 0022        __end_of_WriteArrayToEEPROM 0782  
             ??_EditAddressMemory 003A                    __pcstackCOMMON 0070                      __pidataBANK1 0000  
           __end_of_waitInterrupt 07FB                     ??_Run_getTemp 002D                     i1calc_crc@dat 0072  
                   i1calc_crc@crc 0075                     i1calc_crc@len 0070                     i1calc_crc@mas 0071  
                      __end_ofPL2 0125                        __end_ofPL4 012D                        __end_ofPL6 057D  
                      __end_ofPL8 05D9                  ___lbdiv@quotient 0030                        __end_of_RX 0608  
                      __end_of_TX 0577                  ??_get_temp_Async 0020                       F@long_press 0057  
      EditAddressMemory@CellsData 00A0         __end_of_EditAddressMemory 02E6                         ?_FindCell 0035  
             _FillArrayFromEEPROM 0794       EditAddressMemory@RereadCell 00A9                        __pbssBANK0 0044  
                         ?i1_INIT 0070                         ?_ReadCell 0035                           INIT@One 0031  
               __end_of_PortAData 07DA                 __end_of_ShowError 07D1                        __pmaintext 012D  
    EditAddressMemory@CellIsEmpty 00AA                      _endInterrupt 0301              ?_FillArrayFromEEPROM 0030  
                         ?___wmul 0070                           ?_clrInd 0070                        __pintentry 0004  
                         i1INIT@b 0073                        __size_of_F 00AB                         ?_calc_crc 002D  
              i1___awdiv@dividend 0078                           i1RX@One 0075               __end_of_Run_getTemp 076F  
                         i1TX@One 0076                           i1TX@cmd 0072  FillArrayFromEEPROM@address_start 0030  
                      ??_FindCell 0036                        calc_crc@fb 002F                      _Broadcasting 0300  
                      __stringtab 07D1                 ReadCell@CellsData 0035                        ??_ReadCell 0036  
                 __size_ofi1_INIT 0031                           _KeyCode 005F                         ?_setDigit 0035  
                       ?_setPoint 002D               get_temp_Async@temp1 0023               get_temp_Async@temp2 0024  
              i1___awdiv@quotient 007C             ??_FillArrayFromEEPROM 0032                   Run_getTemp@line 002D  
                         ___awdiv 044A                           ___lbdiv 070F                           ___awmod 04D4  
                         ___lbmod 06BB                   __size_of___wmul 0019                   __size_of_clrInd 0006  
                    ??i1_calc_crc 0071                         i1INIT@One 0074                           __ptext1 0391  
                         __ptext2 06BB                           __ptext3 070F                           __ptext4 075B  
                         __ptext5 07EA                           __ptext6 0405                           __ptext7 0228  
                         __ptext8 07A5                           __ptext9 0679                           _indData 0391  
                         _convDig 06F3                        ??_calc_crc 002E                  ___awmod@dividend 002F  
      __size_of_EditAddressMemory 00BE    __size_of_Reset_powerOnInterval 0006     __end_of_Reset_powerOnInterval 07F0  
                         clrloop0 07DB              end_of_initialization 002B                        _refreshInd 07E2  
              __end_ofi1_calc_crc 0679                        ??_setDigit 0036                        ??_setPoint 002E  
                       FindCell@i 0041                       _Run_getTemp 075B                  FindCell@previous 0035  
                ___lbmod@dividend 002F               WriteArrayToEEPROM@i 0034                         i1___awdiv 048F  
                      convDig@dig 0070                       ___lbmod@rem 0031                   F@KeyTimeCounter 0050  
                       _CellToInd 0608                         ReadCell@i 0038                    __end_ofi1_INIT 05AE  
                   setPoint@value 002D                    __end_of___wmul 0743      EditAddressMemory@ErrorShowed 00A8  
                  __end_of_clrInd 07F6                     __pbitbssBANK0 0300                _WriteArrayToEEPROM 076F  
                     __end_ofPL10 05DE               start_initialization 0011   WriteArrayToEEPROM@address_start 0030  
                      ?i1___awdiv 0076               ?_WriteArrayToEEPROM 0030                 __size_of_FindCell 0045  
                     ?_refreshInd 0070                          ??i1_INIT 0070      FillArrayFromEEPROM@container 0033  
                      ?_CellToInd 0070                 __size_of_ReadCell 001C                         _PortAData 07D7  
            ??_WriteArrayToEEPROM 0032                EditAddressMemory@i 00AB                         _ShowError 07C3  
                        ??___wmul 0074                          ??_clrInd 002D                       __pdataBANK1 00B6  
                        EEWR@data 002D                      setDigit@data 0035                         ___latbits 0000  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                 __size_of_calc_crc 0021  
          EditAddressMemory@i_264 00AC                          INIT@Zero 002F                          INIT@line 002E  
                       __end_of_F 0391            __size_of_waitInterrupt 0005                         __pnvBANK0 005D  
               __size_of_setDigit 0012                        ?_ShowError 0070                 __size_of_setPoint 000F  
                        ?___awdiv 002D                          ?___lbdiv 002D                          ?___awmod 002D  
                        ?___lbmod 002D                 i1___awdiv@divisor 0076                 i1___awdiv@counter 007A  
             __size_of_refreshInd 0008                         __pstrings 07D1                         calc_crc@i 0031  
                        ?_indData 0070                         __pswtext1 069A                          ?_convDig 0070  
              get_temp_Async@line 0025                       ??i1___awdiv 007A           __size_of_get_temp_Async 00F0  
                 get_temp_Async@i 0022                       __size_of_RX 002A                       __size_of_TX 002E  
               interrupt_function 0004                   FindCell@address 0042                    ___wmul@product 0074  
                     ??_CellToInd 0039       __end_of_FillArrayFromEEPROM 07A5                          i1RX@Zero 0072  
                       clear_ram0 07DA                          i1TX@Zero 0074                          i1RX@line 0071  
                        i1TX@line 0070                          i1TX@temp 0073                         _temp_drob 005B  
                     calc_crc@dat 002E                       calc_crc@crc 0032                       calc_crc@len 002D  
                     calc_crc@mas 0030                         indData@dN 003E                         indData@cd 003D  
                   _waitInterrupt 07F6                      ?_Run_getTemp 0070                FindCell@addressNew 003E  
                     __stringbase 07D6                 FindCell@CellsData 0036                 ___wmul@multiplier 0070  
                 _powerOnInterval 005D                    F@LastKeysState 0056                          _FindCell 0405  
           _Reset_powerOnInterval 07EA                          _ReadCell 06D7                        _EECON1bits 009C  
            FillArrayFromEEPROM@i 0034                    indData@isPoint 003B                       ??_ShowError 0039  
                  ?_waitInterrupt 0070                  __size_of___awdiv 0045                  __size_of___lbdiv 001B  
                __size_of___awmod 003D                  __size_of___lbmod 001C                     _getTemp_flags 0044  
              __end_of__stringtab 07D7             EditAddressMemory@cell 00AD       FillArrayFromEEPROM@quantity 0031  
                        _calc_crc 0679                  __size_of_indData 0074                  __size_of_convDig 001C  
                    F@DigitNumber 0055                         setDigit@a 0038                        i1INIT@Zero 0072  
                     EERD@address 002D                          _main$278 00B0                        i1INIT@line 0071  
                        _digits_0 004D                          _digitemp 0059                          __ptext10 076F  
                        __ptext11 07F6                          __ptext20 0608                          __ptext12 0743  
                        __ptext21 0782                          __ptext13 0549                          __ptext30 05AE  
                        __ptext22 07E2                          __ptext14 07C3                          __ptext31 0630  
                        __ptext23 07F0                          __ptext15 06D7                          __ptext32 057D  
                        __ptext24 04D4                          __ptext16 0794                          __ptext33 072A  
                        __ptext25 044A                          __ptext17 07B4                          __ptext34 06F3  
                        __ptext26 02E6                          __ptext18 05DE                          __ptext27 002D  
                        __ptext19 0511                          __ptext28 0657                          __ptext29 048F  
                    ??_refreshInd 002D                     __size_of_EERD 000F                     __size_of_EEWR 0018  
                   __size_of_INIT 0038                     __size_ofi1_RX 0027                     __size_ofi1_TX 0026  
                     _DS_ReadData 00B6                     __size_of_main 00FB                          _setDigit 0782  
                        _setPoint 07A5                          indData@v 003C                      _PowerBlocked 0058  
                        main@cell 00B3                          main@line 00B5                __end_of_refreshInd 07EA  
                      _INTCONbits 000B            ?_Reset_powerOnInterval 0070                    _get_temp_Async 002D  
                        intlevel1 0000                        _DS_Address 00BF                         stringcode 07D1  
                 ??_waitInterrupt 002D                       EEWR@address 002E               F@ButtonPressTimeIn1 0052  
             F@ButtonPressTimeIn2 0053       __size_of_WriteArrayToEEPROM 0013               F@ButtonPressTimeOut 0054  
                   CellToInd@cell 0039                      indData@v_248 003A              __size_of_Run_getTemp 0014  
                      _OPTION_REG 0081                       _temperature 005C                          stringdir 07D1  
                        stringtab 07D1            __end_of_get_temp_Async 011D                __CFG_FOSC$INTOSCIO 0000  
             FindCell@CellIsEmpty 003F  
