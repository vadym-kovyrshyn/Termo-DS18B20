

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Thu Dec 15 00:27:03 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	swtext1,local,class=CONST,delta=2
    52                           	psect	pa_nodes,global,class=CODE,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0092                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009F                     	;# 
    91                           
    92                           	psect	eeprom_data
    93  0000  0028 00FF 0013 00E7 0063 0015 0002 005B 	db	40,255,19,231,99,21,2,91	;# 
    94  0008  0028 00FF 0029 0089 0063 0015 0002 00E7 	db	40,255,41,137,99,21,2,231	;# 
    95  0010  0028 00FF 00F8 00E7 0063 0015 0002 00F1 	db	40,255,248,231,99,21,2,241	;# 
    96  0018  0028 00FF 00BE 00AC 0064 0015 0001 0068 	db	40,255,190,172,100,21,1,104	;# 
    97  0020  0028 00FF 00EC 0095 0063 0015 0002 003D 	db	40,255,236,149,99,21,2,61	;# 
    98  0028  0028 00FF 0000 0093 0063 0015 0002 00CF 	db	40,255,0,147,99,21,2,207	;# 
    99  0030  0028 00FF 001D 00A8 0063 0015 0002 0083 	db	40,255,29,168,99,21,2,131	;# 
   100  0038  0028 00FF 002A 00A8 0063 0015 0002 0056 	db	40,255,42,168,99,21,2,86	;# 
   101  0040  0028 00FF 00A5 00D4 0063 0015 0002 0048 	db	40,255,165,212,99,21,2,72	;# 
   102  0048  0028 00FF 0065 00D3 0063 0015 0002 00EC 	db	40,255,101,211,99,21,2,236	;# 
   103  0050  0028 00FF 0041 00A7 0063 0015 0002 00AD 	db	40,255,65,167,99,21,2,173	;# 
   104  0058  0028 00FF 00A2 00D1 0064 0015 0001 0000 	db	40,255,162,209,100,21,1,0	;# 
   105                           
   106                           	psect	idataBANK1
   107  0000                     __pidataBANK1:	
   108                           
   109                           	psect	strings
   110  0775                     __pstrings:	
   111  0775                     stringtab:	
   112  0775                     __stringtab:	
   113  0775                     stringcode:	
   114                           ;	String table - string pointers are 1 byte each
   115                           
   116  0775                     stringdir:	
   117  0775  3007               	movlw	high stringdir
   118  0776  008A               	movwf	10
   119  0777  0804               	movf	4,w
   120  0778  0A84               	incf	4,f
   121  0779  0782               	addwf	2,f
   122  077A                     __stringbase:	
   123  077A  3400               	retlw	0
   124  077B                     __end_of__stringtab:	
   125  077B                     _PortAData:	
   126  077B  3480               	retlw	128
   127  077C  3440               	retlw	64
   128  077D  3401               	retlw	1
   129  077E                     __end_of_PortAData:	
   130                           
   131                           	psect	nvBANK0
   132  005D                     __pnvBANK0:	
   133  005D                     _powerOnInterval:	
   134  005D                     	ds	2
   135  005F                     _KeyCode:	
   136  005F                     	ds	1
   137  001F                     _CMCON	set	31
   138  000B                     _INTCON	set	11
   139  000B                     _INTCONbits	set	11
   140  0005                     _PORTA	set	5
   141  0006                     _PORTB	set	6
   142  0012                     _T2CON	set	18
   143  0001                     _TMR0	set	1
   144  002A                     _RA2	set	42
   145  002D                     _RA5	set	45
   146  005A                     _T0IF	set	90
   147  009B                     _EEADR	set	155
   148  009C                     _EECON1bits	set	156
   149  009D                     _EECON2	set	157
   150  009A                     _EEDATA	set	154
   151  0081                     _OPTION_REG	set	129
   152  0085                     _TRISA	set	133
   153  0086                     _TRISB	set	134
   154  042C                     _TRISA4	set	1068
   155                           
   156                           ; #config settings
   157  0000                     
   158                           	psect	cinit
   159  0011                     start_initialization:	
   160  0011                     __initialization:	
   161  0011  30FF               	movlw	255
   162                           
   163                           ; Initialize objects allocated to BANK1
   164  0012  1683               	bsf	3,5	;RP0=1, select bank1
   165                           
   166                           ;initializer for _DS_ReadData
   167  0013  00B6               	movwf	__pdataBANK1& (0+127)
   168  0014  00B7               	movwf	(__pdataBANK1+1)& (0+127)
   169  0015  00B8               	movwf	(__pdataBANK1+2)& (0+127)
   170  0016  00B9               	movwf	(__pdataBANK1+3)& (0+127)
   171  0017  00BA               	movwf	(__pdataBANK1+4)& (0+127)
   172  0018  00BB               	movwf	(__pdataBANK1+5)& (0+127)
   173  0019  00BC               	movwf	(__pdataBANK1+6)& (0+127)
   174  001A  00BD               	movwf	(__pdataBANK1+7)& (0+127)
   175  001B  00BE               	movwf	(__pdataBANK1+8)& (0+127)
   176                           
   177                           ;initializer for _DS_Address
   178  001C  00BF               	movwf	(__pdataBANK1+9)& (0+127)
   179  001D  00C0               	movwf	(__pdataBANK1+10)& (0+127)
   180  001E  00C1               	movwf	(__pdataBANK1+11)& (0+127)
   181  001F  00C2               	movwf	(__pdataBANK1+12)& (0+127)
   182  0020  00C3               	movwf	(__pdataBANK1+13)& (0+127)
   183  0021  00C4               	movwf	(__pdataBANK1+14)& (0+127)
   184  0022  00C5               	movwf	(__pdataBANK1+15)& (0+127)
   185  0023  00C6               	movwf	(__pdataBANK1+16)& (0+127)
   186  0024  3044               	movlw	low __pbssBANK0
   187                           
   188                           ; Clear objects allocated to BANK0
   189  0025  1383               	bcf	3,7	;select IRP bank0
   190  0026  0084               	movwf	4
   191  0027  305D               	movlw	low (__pbssBANK0+25)
   192  0028  277E               	fcall	clear_ram0
   193                           
   194                           ; Clear objects allocated to BITBANK0
   195  0029  1283               	bcf	3,5	;RP0=0, select bank0
   196  002A  01E0               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   197  002B                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200  002B                     __end_of__initialization:	
   201  002B  0183               	clrf	3
   202  002C  282D               	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssBANK0
   205  0044                     __pbssBANK0:	
   206  0044                     _getTemp_flags:	
   207  0044                     	ds	6
   208  004A                     _digits:	
   209  004A                     	ds	3
   210  004D                     _digits_0:	
   211  004D                     	ds	3
   212  0050                     F@KeyTimeCounter:	
   213  0050                     	ds	2
   214  0052                     F@ButtonPressTimeIn1:	
   215  0052                     	ds	1
   216  0053                     F@ButtonPressTimeIn2:	
   217  0053                     	ds	1
   218  0054                     F@ButtonPressTimeOut:	
   219  0054                     	ds	1
   220  0055                     F@DigitNumber:	
   221  0055                     	ds	1
   222  0056                     F@LastKeysState:	
   223  0056                     	ds	1
   224  0057                     F@long_press:	
   225  0057                     	ds	1
   226  0058                     _PowerBlocked:	
   227  0058                     	ds	1
   228  0059                     _digitemp:	
   229  0059                     	ds	1
   230  005A                     _sign:	
   231  005A                     	ds	1
   232  005B                     _temp_drob:	
   233  005B                     	ds	1
   234  005C                     _temperature:	
   235  005C                     	ds	1
   236                           
   237                           	psect	bitbssBANK0
   238  0300                     __pbitbssBANK0:	
   239  0300                     _Broadcasting:	
   240  0300                     	ds	1
   241  0301                     _endInterrupt:	
   242  0301                     	ds	1
   243                           
   244                           	psect	dataBANK1
   245  00B6                     __pdataBANK1:	
   246  00B6                     _DS_ReadData:	
   247  00B6                     	ds	9
   248  00BF                     _DS_Address:	
   249  00BF                     	ds	8
   250                           
   251                           	psect	clrtext
   252  077E                     clear_ram0:	
   253                           ;	Called with FSR containing the base address, and
   254                           ;	W with the last address+1
   255                           
   256  077E  0064               	clrwdt	;clear the watchdog before getting into this loop
   257  077F                     clrloop0:	
   258  077F  0180               	clrf	0	;clear RAM location pointed to by FSR
   259  0780  0A84               	incf	4,f	;increment pointer
   260  0781  0604               	xorwf	4,w	;XOR with final address
   261  0782  1903               	btfsc	3,2	;have we reached the end yet?
   262  0783  3400               	retlw	0	;all done for this memory range, return
   263  0784  0604               	xorwf	4,w	;XOR again to restore value
   264  0785  2F7F               	goto	clrloop0	;do the next byte
   265                           
   266                           	psect	cstackBANK1
   267  00A0                     __pcstackBANK1:	
   268  00A0                     EditAddressMemory@CellsData:	
   269                           
   270                           ; 8 bytes @ 0x0
   271  00A0                     	ds	8
   272  00A8                     EditAddressMemory@ErrorShowed:	
   273                           
   274                           ; 1 bytes @ 0x8
   275  00A8                     	ds	1
   276  00A9                     EditAddressMemory@RereadCell:	
   277                           
   278                           ; 1 bytes @ 0x9
   279  00A9                     	ds	1
   280  00AA                     EditAddressMemory@CellIsEmpty:	
   281                           
   282                           ; 1 bytes @ 0xA
   283  00AA                     	ds	1
   284  00AB                     EditAddressMemory@i:	
   285                           
   286                           ; 1 bytes @ 0xB
   287  00AB                     	ds	1
   288  00AC                     EditAddressMemory@i_256:	
   289                           
   290                           ; 1 bytes @ 0xC
   291  00AC                     	ds	1
   292  00AD                     EditAddressMemory@cell:	
   293                           
   294                           ; 1 bytes @ 0xD
   295  00AD                     	ds	1
   296  00AE                     main@point_on_ind_delay:	
   297                           
   298                           ; 2 bytes @ 0xE
   299  00AE                     	ds	2
   300  00B0                     _main$272:	
   301                           
   302                           ; 2 bytes @ 0x10
   303  00B0                     	ds	2
   304  00B2                     main@cell:	
   305                           
   306                           ; 1 bytes @ 0x12
   307  00B2                     	ds	1
   308  00B3                     main@TheStart:	
   309                           
   310                           ; 1 bytes @ 0x13
   311  00B3                     	ds	1
   312  00B4                     main@address:	
   313                           
   314                           ; 1 bytes @ 0x14
   315  00B4                     	ds	1
   316  00B5                     main@line:	
   317                           
   318                           ; 1 bytes @ 0x15
   319  00B5                     	ds	1
   320                           
   321                           	psect	cstackCOMMON
   322  0070                     __pcstackCOMMON:	
   323  0070                     ?_waitInterrupt:	
   324  0070                     ?_Reset_powerOnInterval:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_refreshInd:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_clrInd:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_ShowError:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_convDig:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ??_convDig:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_EERD:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_INIT:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_RX:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_get_temp_Async:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_F:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_indData:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_CellToInd:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_EditAddressMemory:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_Run_getTemp:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_Run_getInit:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_main:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?i1_INIT:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ??i1_INIT:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?i1_TX:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?i1_RX:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ??i1_RX:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?i1_calc_crc:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?___wmul:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     convDig@dig:	
   397                           ; 2 bytes @ 0x0
   398                           
   399  0070                     i1TX@line:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     i1calc_crc@len:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ___wmul@multiplier:	
   406                           ; 1 bytes @ 0x0
   407                           
   408                           
   409                           ; 2 bytes @ 0x0
   410  0070                     	ds	1
   411  0071                     ??i1_TX:	
   412  0071                     ??i1_calc_crc:	
   413                           ; 1 bytes @ 0x1
   414                           
   415  0071                     i1INIT@line:	
   416                           ; 1 bytes @ 0x1
   417                           
   418  0071                     i1RX@line:	
   419                           ; 1 bytes @ 0x1
   420                           
   421  0071                     i1calc_crc@mas:	
   422                           ; 1 bytes @ 0x1
   423                           
   424                           
   425                           ; 1 bytes @ 0x1
   426  0071                     	ds	1
   427  0072                     i1INIT@Zero:	
   428  0072                     i1TX@cmd:	
   429                           ; 1 bytes @ 0x2
   430                           
   431  0072                     i1RX@Zero:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     i1calc_crc@dat:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0072                     ___wmul@multiplicand:	
   438                           ; 1 bytes @ 0x2
   439                           
   440                           
   441                           ; 2 bytes @ 0x2
   442  0072                     	ds	1
   443  0073                     i1INIT@b:	
   444  0073                     i1TX@temp:	
   445                           ; 1 bytes @ 0x3
   446                           
   447  0073                     i1RX@d:	
   448                           ; 1 bytes @ 0x3
   449                           
   450  0073                     i1calc_crc@fb:	
   451                           ; 1 bytes @ 0x3
   452                           
   453                           
   454                           ; 1 bytes @ 0x3
   455  0073                     	ds	1
   456  0074                     ??___wmul:	
   457  0074                     i1INIT@One:	
   458                           ; 1 bytes @ 0x4
   459                           
   460  0074                     i1TX@Zero:	
   461                           ; 1 bytes @ 0x4
   462                           
   463  0074                     i1RX@i:	
   464                           ; 1 bytes @ 0x4
   465                           
   466  0074                     i1calc_crc@i:	
   467                           ; 1 bytes @ 0x4
   468                           
   469  0074                     ___wmul@product:	
   470                           ; 1 bytes @ 0x4
   471                           
   472                           
   473                           ; 2 bytes @ 0x4
   474  0074                     	ds	1
   475  0075                     i1TX@i:	
   476  0075                     i1RX@One:	
   477                           ; 1 bytes @ 0x5
   478                           
   479  0075                     i1calc_crc@crc:	
   480                           ; 1 bytes @ 0x5
   481                           
   482                           
   483                           ; 1 bytes @ 0x5
   484  0075                     	ds	1
   485  0076                     ?___awdiv:	
   486  0076                     i1TX@One:	
   487                           ; 2 bytes @ 0x6
   488                           
   489  0076                     ___awdiv@divisor:	
   490                           ; 1 bytes @ 0x6
   491                           
   492                           
   493                           ; 2 bytes @ 0x6
   494  0076                     	ds	2
   495  0078                     ___awdiv@dividend:	
   496                           
   497                           ; 2 bytes @ 0x8
   498  0078                     	ds	2
   499  007A                     ??___awdiv:	
   500  007A                     ___awdiv@counter:	
   501                           ; 1 bytes @ 0xA
   502                           
   503                           
   504                           ; 1 bytes @ 0xA
   505  007A                     	ds	1
   506  007B                     ___awdiv@sign:	
   507                           
   508                           ; 1 bytes @ 0xB
   509  007B                     	ds	1
   510  007C                     ___awdiv@quotient:	
   511                           
   512                           ; 2 bytes @ 0xC
   513  007C                     	ds	2
   514                           
   515                           	psect	cstackBANK0
   516  0020                     __pcstackBANK0:	
   517  0020                     ??_get_temp_Async:	
   518                           
   519                           ; 1 bytes @ 0x0
   520  0020                     	ds	2
   521  0022                     get_temp_Async@i:	
   522                           
   523                           ; 1 bytes @ 0x2
   524  0022                     	ds	1
   525  0023                     get_temp_Async@temp1:	
   526                           
   527                           ; 1 bytes @ 0x3
   528  0023                     	ds	1
   529  0024                     get_temp_Async@temp2:	
   530                           
   531                           ; 1 bytes @ 0x4
   532  0024                     	ds	1
   533  0025                     get_temp_Async@line:	
   534                           
   535                           ; 1 bytes @ 0x5
   536  0025                     	ds	1
   537  0026                     ??_F:	
   538                           
   539                           ; 1 bytes @ 0x6
   540  0026                     	ds	5
   541  002B                     F@dig:	
   542                           
   543                           ; 1 bytes @ 0xB
   544  002B                     	ds	1
   545  002C                     F@CurrentKeysState:	
   546                           
   547                           ; 1 bytes @ 0xC
   548  002C                     	ds	1
   549  002D                     ??_waitInterrupt:	
   550  002D                     ??_Reset_powerOnInterval:	
   551                           ; 1 bytes @ 0xD
   552                           
   553  002D                     ?_setPoint:	
   554                           ; 1 bytes @ 0xD
   555                           
   556  002D                     ??_refreshInd:	
   557                           ; 1 bytes @ 0xD
   558                           
   559  002D                     ??_clrInd:	
   560                           ; 1 bytes @ 0xD
   561                           
   562  002D                     ?_EEWR:	
   563                           ; 1 bytes @ 0xD
   564                           
   565  002D                     ??_EERD:	
   566                           ; 1 bytes @ 0xD
   567                           
   568  002D                     ??_INIT:	
   569                           ; 1 bytes @ 0xD
   570                           
   571  002D                     ?_TX:	
   572                           ; 1 bytes @ 0xD
   573                           
   574  002D                     ??_RX:	
   575                           ; 1 bytes @ 0xD
   576                           
   577  002D                     ?_calc_crc:	
   578                           ; 1 bytes @ 0xD
   579                           
   580  002D                     ??_Run_getTemp:	
   581                           ; 1 bytes @ 0xD
   582                           
   583  002D                     ??_Run_getInit:	
   584                           ; 1 bytes @ 0xD
   585                           
   586  002D                     ?___lbdiv:	
   587                           ; 1 bytes @ 0xD
   588                           
   589  002D                     ?___lbmod:	
   590                           ; 1 bytes @ 0xD
   591                           
   592  002D                     setPoint@value:	
   593                           ; 1 bytes @ 0xD
   594                           
   595  002D                     EEWR@data:	
   596                           ; 1 bytes @ 0xD
   597                           
   598  002D                     EERD@address:	
   599                           ; 1 bytes @ 0xD
   600                           
   601  002D                     TX@line:	
   602                           ; 1 bytes @ 0xD
   603                           
   604  002D                     calc_crc@len:	
   605                           ; 1 bytes @ 0xD
   606                           
   607  002D                     Run_getTemp@line:	
   608                           ; 1 bytes @ 0xD
   609                           
   610  002D                     Run_getInit@line:	
   611                           ; 1 bytes @ 0xD
   612                           
   613  002D                     ___lbdiv@divisor:	
   614                           ; 1 bytes @ 0xD
   615                           
   616  002D                     ___lbmod@divisor:	
   617                           ; 1 bytes @ 0xD
   618                           
   619                           
   620                           ; 1 bytes @ 0xD
   621  002D                     	ds	1
   622  002E                     ??_setPoint:	
   623  002E                     ??_EEWR:	
   624                           ; 1 bytes @ 0xE
   625                           
   626  002E                     ??_TX:	
   627                           ; 1 bytes @ 0xE
   628                           
   629  002E                     ??_calc_crc:	
   630                           ; 1 bytes @ 0xE
   631                           
   632  002E                     ??___lbdiv:	
   633                           ; 1 bytes @ 0xE
   634                           
   635  002E                     ??___lbmod:	
   636                           ; 1 bytes @ 0xE
   637                           
   638  002E                     setPoint@dignum:	
   639                           ; 1 bytes @ 0xE
   640                           
   641  002E                     EEWR@address:	
   642                           ; 1 bytes @ 0xE
   643                           
   644  002E                     EERD@INTCON_BUP:	
   645                           ; 1 bytes @ 0xE
   646                           
   647  002E                     INIT@line:	
   648                           ; 1 bytes @ 0xE
   649                           
   650  002E                     RX@line:	
   651                           ; 1 bytes @ 0xE
   652                           
   653  002E                     calc_crc@dat:	
   654                           ; 1 bytes @ 0xE
   655                           
   656  002E                     ___lbdiv@dividend:	
   657                           ; 1 bytes @ 0xE
   658                           
   659                           
   660                           ; 1 bytes @ 0xE
   661  002E                     	ds	1
   662  002F                     EEWR@INTCON_BUP:	
   663  002F                     EERD@EEDATA_BUP:	
   664                           ; 1 bytes @ 0xF
   665                           
   666  002F                     INIT@Zero:	
   667                           ; 1 bytes @ 0xF
   668                           
   669  002F                     TX@cmd:	
   670                           ; 1 bytes @ 0xF
   671                           
   672  002F                     RX@Zero:	
   673                           ; 1 bytes @ 0xF
   674                           
   675  002F                     calc_crc@fb:	
   676                           ; 1 bytes @ 0xF
   677                           
   678  002F                     ___lbdiv@counter:	
   679                           ; 1 bytes @ 0xF
   680                           
   681  002F                     ___lbmod@dividend:	
   682                           ; 1 bytes @ 0xF
   683                           
   684                           
   685                           ; 1 bytes @ 0xF
   686  002F                     	ds	1
   687  0030                     ?_FillArrayFromEEPROM:	
   688  0030                     ?_WriteArrayToEEPROM:	
   689                           ; 1 bytes @ 0x10
   690                           
   691  0030                     FillArrayFromEEPROM@address_start:	
   692                           ; 1 bytes @ 0x10
   693                           
   694  0030                     WriteArrayToEEPROM@address_start:	
   695                           ; 1 bytes @ 0x10
   696                           
   697  0030                     INIT@b:	
   698                           ; 1 bytes @ 0x10
   699                           
   700  0030                     TX@temp:	
   701                           ; 1 bytes @ 0x10
   702                           
   703  0030                     RX@d:	
   704                           ; 1 bytes @ 0x10
   705                           
   706  0030                     calc_crc@mas:	
   707                           ; 1 bytes @ 0x10
   708                           
   709  0030                     ___lbdiv@quotient:	
   710                           ; 1 bytes @ 0x10
   711                           
   712  0030                     ___lbmod@counter:	
   713                           ; 1 bytes @ 0x10
   714                           
   715                           
   716                           ; 1 bytes @ 0x10
   717  0030                     	ds	1
   718  0031                     FillArrayFromEEPROM@quantity:	
   719  0031                     WriteArrayToEEPROM@quantity:	
   720                           ; 1 bytes @ 0x11
   721                           
   722  0031                     INIT@One:	
   723                           ; 1 bytes @ 0x11
   724                           
   725  0031                     TX@Zero:	
   726                           ; 1 bytes @ 0x11
   727                           
   728  0031                     RX@i:	
   729                           ; 1 bytes @ 0x11
   730                           
   731  0031                     calc_crc@i:	
   732                           ; 1 bytes @ 0x11
   733                           
   734  0031                     ___lbmod@rem:	
   735                           ; 1 bytes @ 0x11
   736                           
   737                           
   738                           ; 1 bytes @ 0x11
   739  0031                     	ds	1
   740  0032                     ?_setDigit:	
   741  0032                     ??_FillArrayFromEEPROM:	
   742                           ; 1 bytes @ 0x12
   743                           
   744  0032                     ??_WriteArrayToEEPROM:	
   745                           ; 1 bytes @ 0x12
   746                           
   747  0032                     setDigit@data:	
   748                           ; 1 bytes @ 0x12
   749                           
   750  0032                     TX@i:	
   751                           ; 1 bytes @ 0x12
   752                           
   753  0032                     RX@One:	
   754                           ; 1 bytes @ 0x12
   755                           
   756  0032                     calc_crc@crc:	
   757                           ; 1 bytes @ 0x12
   758                           
   759                           
   760                           ; 1 bytes @ 0x12
   761  0032                     	ds	1
   762  0033                     ??_setDigit:	
   763  0033                     FillArrayFromEEPROM@container:	
   764                           ; 1 bytes @ 0x13
   765                           
   766  0033                     WriteArrayToEEPROM@container:	
   767                           ; 1 bytes @ 0x13
   768                           
   769  0033                     TX@One:	
   770                           ; 1 bytes @ 0x13
   771                           
   772                           
   773                           ; 1 bytes @ 0x13
   774  0033                     	ds	1
   775  0034                     FillArrayFromEEPROM@i:	
   776  0034                     WriteArrayToEEPROM@i:	
   777                           ; 1 bytes @ 0x14
   778                           
   779                           
   780                           ; 1 bytes @ 0x14
   781  0034                     	ds	1
   782  0035                     ?_FindCell:	
   783  0035                     ?_ReadCell:	
   784                           ; 1 bytes @ 0x15
   785                           
   786  0035                     setDigit@a:	
   787                           ; 1 bytes @ 0x15
   788                           
   789  0035                     FindCell@previous:	
   790                           ; 1 bytes @ 0x15
   791                           
   792  0035                     ReadCell@CellsData:	
   793                           ; 1 bytes @ 0x15
   794                           
   795                           
   796                           ; 1 bytes @ 0x15
   797  0035                     	ds	1
   798  0036                     ??_ShowError:	
   799  0036                     ??_FindCell:	
   800                           ; 1 bytes @ 0x16
   801                           
   802  0036                     ??_indData:	
   803                           ; 1 bytes @ 0x16
   804                           
   805  0036                     ??_ReadCell:	
   806                           ; 1 bytes @ 0x16
   807                           
   808  0036                     ??_CellToInd:	
   809                           ; 1 bytes @ 0x16
   810                           
   811  0036                     CellToInd@cell:	
   812                           ; 1 bytes @ 0x16
   813                           
   814  0036                     FindCell@CellsData:	
   815                           ; 1 bytes @ 0x16
   816                           
   817                           
   818                           ; 8 bytes @ 0x16
   819  0036                     	ds	1
   820  0037                     indData@v_240:	
   821  0037                     ReadCell@cell:	
   822                           ; 1 bytes @ 0x17
   823                           
   824                           
   825                           ; 1 bytes @ 0x17
   826  0037                     	ds	1
   827  0038                     indData@isPoint:	
   828  0038                     ReadCell@i:	
   829                           ; 1 bytes @ 0x18
   830                           
   831                           
   832                           ; 1 bytes @ 0x18
   833  0038                     	ds	1
   834  0039                     ??_EditAddressMemory:	
   835  0039                     indData@v:	
   836                           ; 1 bytes @ 0x19
   837                           
   838                           
   839                           ; 1 bytes @ 0x19
   840  0039                     	ds	1
   841  003A                     indData@dN:	
   842                           
   843                           ; 1 bytes @ 0x1A
   844  003A                     	ds	1
   845  003B                     indData@cd:	
   846                           
   847                           ; 1 bytes @ 0x1B
   848  003B                     	ds	3
   849  003E                     FindCell@addressNew:	
   850                           
   851                           ; 1 bytes @ 0x1E
   852  003E                     	ds	1
   853  003F                     FindCell@CellIsEmpty:	
   854                           
   855                           ; 1 bytes @ 0x1F
   856  003F                     	ds	1
   857  0040                     FindCell@addressStart:	
   858                           
   859                           ; 1 bytes @ 0x20
   860  0040                     	ds	1
   861  0041                     FindCell@i:	
   862                           
   863                           ; 1 bytes @ 0x21
   864  0041                     	ds	1
   865  0042                     FindCell@address:	
   866                           
   867                           ; 1 bytes @ 0x22
   868  0042                     	ds	1
   869  0043                     ??_main:	
   870                           
   871                           ; 1 bytes @ 0x23
   872  0043                     	ds	1
   873                           
   874                           	psect	maintext
   875  002D                     __pmaintext:	
   876 ;;
   877 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   878 ;;
   879 ;; *************** function _main *****************
   880 ;; Defined at:
   881 ;;		line 718 in file "prog.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  point_on_ind    2   14[BANK1 ] unsigned int 
   886 ;;  line            1   21[BANK1 ] unsigned char 
   887 ;;  address         1   20[BANK1 ] unsigned char 
   888 ;;  TheStart        1   19[BANK1 ] unsigned char 
   889 ;;  cell            1   18[BANK1 ] unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : B00/0
   896 ;;		On exit  : 300/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   899 ;;      Params:         0       0       0       0
   900 ;;      Locals:         0       0       8       0
   901 ;;      Temps:          0       1       0       0
   902 ;;      Totals:         0       1       8       0
   903 ;;Total ram usage:        9 bytes
   904 ;; Hardware stack levels required when called:    7
   905 ;; This function calls:
   906 ;;		_CellToInd
   907 ;;		_EditAddressMemory
   908 ;;		_FillArrayFromEEPROM
   909 ;;		_FindCell
   910 ;;		_Reset_powerOnInterval
   911 ;;		_Run_getInit
   912 ;;		_Run_getTemp
   913 ;;		_ShowError
   914 ;;		_clrInd
   915 ;;		_indData
   916 ;;		_refreshInd
   917 ;;		_setDigit
   918 ;;		_setPoint
   919 ;;		_waitInterrupt
   920 ;; This function is called by:
   921 ;;		Startup code after reset
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function _main
   927  002D                     _main:	
   928                           
   929                           ;prog.c: 720: INTCON = 0;
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   933  002D  018B               	clrf	11	;volatile
   934                           
   935                           ;prog.c: 721: OPTION_REG = 0b00000111;
   936  002E  3007               	movlw	7
   937  002F  1683               	bsf	3,5	;RP0=1, select bank1
   938  0030  0081               	movwf	1	;volatile
   939                           
   940                           ;prog.c: 722: TRISA = 0b00101110;
   941  0031  302E               	movlw	46
   942  0032  0085               	movwf	5	;volatile
   943                           
   944                           ;prog.c: 723: TRISB = 0b00000000;
   945  0033  0186               	clrf	6	;volatile
   946                           
   947                           ;prog.c: 724: PORTA = 0b00000000;
   948  0034  1283               	bcf	3,5	;RP0=0, select bank0
   949  0035  0185               	clrf	5	;volatile
   950                           
   951                           ;prog.c: 725: PORTB = 0b00000000;
   952  0036  0186               	clrf	6	;volatile
   953                           
   954                           ;prog.c: 726: TMR0 = TMR0_VALUE;
   955  0037  30EB               	movlw	235
   956  0038  0081               	movwf	1	;volatile
   957                           
   958                           ;prog.c: 727: T2CON = 0b00000100;
   959  0039  3004               	movlw	4
   960  003A  0092               	movwf	18	;volatile
   961                           
   962                           ;prog.c: 728: CMCON = 0b00000111;
   963  003B  3007               	movlw	7
   964  003C  009F               	movwf	31	;volatile
   965                           
   966                           ;prog.c: 730: clrInd();
   967  003D  2794               	fcall	_clrInd
   968                           
   969                           ;prog.c: 731: refreshInd();
   970  003E  2786               	fcall	_refreshInd
   971                           
   972                           ;prog.c: 733: INTCON = 0b10100000;
   973  003F  30A0               	movlw	160
   974  0040  008B               	movwf	11	;volatile
   975                           
   976                           ;prog.c: 735: Reset_powerOnInterval();
   977  0041  278E               	fcall	_Reset_powerOnInterval
   978  0042  3008               	movlw	8
   979                           
   980                           ;prog.c: 737: unsigned char cell = 0;
   981  0043  1683               	bsf	3,5	;RP0=1, select bank1
   982  0044  01B2               	clrf	main@cell^(0+128)
   983                           
   984                           ;prog.c: 738: unsigned char address;
   985                           ;prog.c: 739: unsigned int point_on_ind_delay = 0;
   986  0045  01AE               	clrf	main@point_on_ind_delay^(0+128)
   987  0046  01AF               	clrf	(main@point_on_ind_delay+1)^(0+128)
   988                           
   989                           ;prog.c: 740: unsigned char TheStart = 1;
   990  0047  01B3               	clrf	main@TheStart^(0+128)
   991  0048  0AB3               	incf	main@TheStart^(0+128),f
   992                           
   993                           ;prog.c: 741: unsigned char line = 0b00001000;
   994  0049  00B5               	movwf	main@line^(0+128)
   995                           
   996                           ;prog.c: 743: KeyCode = 36;
   997  004A  3024               	movlw	36
   998  004B  1283               	bcf	3,5	;RP0=0, select bank0
   999  004C  00DF               	movwf	_KeyCode	;volatile
  1000  004D                     l4077:	
  1001                           
  1002                           ;prog.c: 747: if (KeyCode == 33) {
  1003  004D  3021               	movlw	33
  1004  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1005  004F  065F               	xorwf	_KeyCode,w	;volatile
  1006  0050  1D03               	btfss	3,2
  1007  0051  2862               	goto	l4089
  1008                           
  1009                           ;prog.c: 748: KeyCode = 0;
  1010  0052  01DF               	clrf	_KeyCode	;volatile
  1011                           
  1012                           ;prog.c: 749: if (PowerBlocked != 1) {
  1013  0053  0358               	decf	_PowerBlocked,w
  1014  0054  1903               	btfsc	3,2
  1015  0055  285E               	goto	l4087
  1016  0056  30A0               	movlw	160
  1017                           
  1018                           ;prog.c: 750: PowerBlocked = 1;
  1019  0057  01D8               	clrf	_PowerBlocked
  1020  0058  0AD8               	incf	_PowerBlocked,f
  1021                           
  1022                           ;prog.c: 751: point_on_ind_delay = 4000;
  1023  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1024  005A  00AE               	movwf	main@point_on_ind_delay^(0+128)
  1025  005B  300F               	movlw	15
  1026  005C  00AF               	movwf	(main@point_on_ind_delay^(0+128)+1)
  1027                           
  1028                           ;prog.c: 752: } else {
  1029  005D  28FC               	goto	l4201
  1030  005E                     l4087:	
  1031                           
  1032                           ;prog.c: 753: powerOnInterval = 0;
  1033  005E  01DD               	clrf	_powerOnInterval
  1034  005F  01DE               	clrf	_powerOnInterval+1
  1035                           
  1036                           ;prog.c: 754: PowerBlocked = 0;
  1037  0060  01D8               	clrf	_PowerBlocked
  1038  0061  28FC               	goto	l4201
  1039  0062                     l4089:	
  1040  0062  301F               	movlw	31
  1041  0063  065F               	xorwf	_KeyCode,w	;volatile
  1042  0064  1903               	btfsc	3,2
  1043  0065  286E               	goto	l4095
  1044  0066  3020               	movlw	32
  1045  0067  065F               	xorwf	_KeyCode,w	;volatile
  1046  0068  1903               	btfsc	3,2
  1047  0069  286E               	goto	l4095
  1048  006A  3022               	movlw	34
  1049  006B  065F               	xorwf	_KeyCode,w	;volatile
  1050  006C  1D03               	btfss	3,2
  1051  006D  28CB               	goto	l4155
  1052  006E                     l4095:	
  1053                           
  1054                           ;prog.c: 757: Reset_powerOnInterval();
  1055  006E  278E               	fcall	_Reset_powerOnInterval
  1056                           
  1057                           ;prog.c: 759: if (Broadcasting && KeyCode != 34) {
  1058  006F  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1059  0070  2895               	goto	l346
  1060  0071  3022               	movlw	34
  1061  0072  065F               	xorwf	_KeyCode,w	;volatile
  1062  0073  1903               	btfsc	3,2
  1063  0074  2895               	goto	l346
  1064                           
  1065                           ;prog.c: 761: if (KeyCode == 31 && line != 0b00001000) {
  1066  0075  301F               	movlw	31
  1067  0076  065F               	xorwf	_KeyCode,w	;volatile
  1068  0077  1D03               	btfss	3,2
  1069  0078  2880               	goto	l4109
  1070  0079  3008               	movlw	8
  1071  007A  1683               	bsf	3,5	;RP0=1, select bank1
  1072  007B  0635               	xorwf	main@line^(0+128),w
  1073  007C  1903               	btfsc	3,2
  1074  007D  2880               	goto	l4109
  1075  007E  3008               	movlw	8
  1076  007F  288B               	goto	L6
  1077  0080                     l4109:	
  1078                           ;prog.c: 764: } else if (KeyCode == 32 && line != 0b00000010) {
  1079                           
  1080                           ;prog.c: 763: line = 0b00001000;
  1081                           
  1082                           ;prog.c: 762: TheStart = 1;
  1083                           
  1084  0080  3020               	movlw	32
  1085  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1086  0082  065F               	xorwf	_KeyCode,w	;volatile
  1087  0083  1D03               	btfss	3,2
  1088  0084  284D               	goto	l4077
  1089  0085  3002               	movlw	2
  1090  0086  1683               	bsf	3,5	;RP0=1, select bank1
  1091  0087  0635               	xorwf	main@line^(0+128),w
  1092  0088  1903               	btfsc	3,2
  1093  0089  284D               	goto	l4077
  1094  008A  3002               	movlw	2
  1095  008B                     L6:	
  1096                           
  1097                           ;prog.c: 765: TheStart = 1;
  1098  008B  01B3               	clrf	main@TheStart^(0+128)
  1099  008C  0AB3               	incf	main@TheStart^(0+128),f
  1100                           
  1101                           ;prog.c: 766: line = 0b00000010;
  1102  008D  00B5               	movwf	main@line^(0+128)
  1103                           
  1104                           ;prog.c: 769: }
  1105                           ;prog.c: 770: KeyCode = 0;
  1106                           
  1107                           ;prog.c: 767: } else {
  1108  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1109  008F  01DF               	clrf	_KeyCode	;volatile
  1110                           
  1111                           ;prog.c: 771: getTemp_flags.ActiveProcess = 0;
  1112  0090  1048               	bcf	_getTemp_flags+4,0
  1113                           
  1114                           ;prog.c: 772: waitInterrupt();
  1115  0091  279A               	fcall	_waitInterrupt
  1116                           
  1117                           ;prog.c: 773: Run_getTemp(line);
  1118  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1119  0093  0835               	movf	main@line^(0+128),w
  1120  0094  28FB               	goto	L2
  1121  0095                     l346:	
  1122                           ;prog.c: 775: } else {
  1123                           
  1124  0095  3022               	movlw	34
  1125                           
  1126                           ;prog.c: 776: getTemp_flags.ActiveProcess = 0;
  1127  0096  1048               	bcf	_getTemp_flags+4,0
  1128                           
  1129                           ;prog.c: 778: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1130  0097  065F               	xorwf	_KeyCode,w	;volatile
  1131  0098  1903               	btfsc	3,2
  1132  0099  28A8               	goto	l4131
  1133  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1134  009B  0832               	movf	main@cell^(0+128),w
  1135  009C  00B0               	movwf	_main$272^(0+128)
  1136  009D  01B1               	clrf	(_main$272+1)^(0+128)
  1137  009E  1003               	clrc
  1138  009F  0DB0               	rlf	_main$272^(0+128),f
  1139  00A0  0DB1               	rlf	(_main$272+1)^(0+128),f
  1140  00A1  1003               	clrc
  1141  00A2  0DB0               	rlf	_main$272^(0+128),f
  1142  00A3  0DB1               	rlf	(_main$272+1)^(0+128),f
  1143  00A4  1003               	clrc
  1144  00A5  0DB0               	rlf	_main$272^(0+128),f
  1145  00A6  0DB1               	rlf	(_main$272+1)^(0+128),f
  1146  00A7  28AC               	goto	l4133
  1147  00A8                     l4131:	
  1148  00A8  3080               	movlw	128
  1149  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  1150  00AA  00B0               	movwf	_main$272^(0+128)
  1151  00AB  01B1               	clrf	(_main$272+1)^(0+128)
  1152  00AC                     l4133:	
  1153  00AC  301F               	movlw	31
  1154  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1155  00AE  065F               	xorwf	_KeyCode,w	;volatile
  1156  00AF  1D03               	btfss	3,2
  1157  00B0  28B3               	goto	u4430
  1158  00B1  3001               	movlw	1
  1159  00B2  28B4               	goto	u4440
  1160  00B3                     u4430:	
  1161  00B3  3000               	movlw	0
  1162  00B4                     u4440:	
  1163  00B4  00B5               	movwf	FindCell@previous
  1164  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1165  00B6  0830               	movf	_main$272^(0+128),w
  1166  00B7  2426               	fcall	_FindCell
  1167                           
  1168                           ;prog.c: 779: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1169  00B8  214B               	fcall	PL4	;call to abstracted procedure
  1170                           
  1171                           ;prog.c: 780: KeyCode = 0;
  1172  00B9  01DF               	clrf	_KeyCode	;volatile
  1173                           
  1174                           ;prog.c: 781: if (Broadcasting) {
  1175  00BA  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1176  00BB  28C0               	goto	l4143
  1177                           
  1178                           ;prog.c: 782: TheStart = 1;
  1179  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  1180  00BD  01B3               	clrf	main@TheStart^(0+128)
  1181  00BE  0AB3               	incf	main@TheStart^(0+128),f
  1182                           
  1183                           ;prog.c: 783: } else {
  1184  00BF  28C4               	goto	l4149
  1185  00C0                     l4143:	
  1186                           
  1187                           ;prog.c: 784: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1188  00C0  2156               	fcall	PL8	;call to abstracted procedure
  1189  00C1  2738               	fcall	_FillArrayFromEEPROM
  1190                           
  1191                           ;prog.c: 785: cell = address / (sizeof(DS_Address));
  1192                           
  1193                           ;prog.c: 786: CellToInd(cell);
  1194  00C2  213C               	fcall	PL2	;call to abstracted procedure
  1195  00C3  2686               	fcall	_CellToInd
  1196  00C4                     l4149:	
  1197                           
  1198                           ;prog.c: 787: }
  1199                           ;prog.c: 788: line = 0b00001000;
  1200  00C4  3008               	movlw	8
  1201  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  1202  00C6  00B5               	movwf	main@line^(0+128)
  1203                           
  1204                           ;prog.c: 789: Run_getInit(line);
  1205  00C7  2714               	fcall	_Run_getInit
  1206  00C8                     l359:	
  1207                           ;prog.c: 790: while(getTemp_flags.ActiveProcess);
  1208                           
  1209  00C8  1848               	btfsc	_getTemp_flags+4,0
  1210  00C9  28C8               	goto	l359
  1211  00CA  28FA               	goto	L3
  1212  00CB                     l4155:	
  1213                           ;prog.c: 791: Run_getTemp(line);
  1214                           
  1215  00CB  3023               	movlw	35
  1216  00CC  065F               	xorwf	_KeyCode,w	;volatile
  1217  00CD  1D03               	btfss	3,2
  1218  00CE  28DE               	goto	l4173
  1219                           
  1220                           ;prog.c: 795: Reset_powerOnInterval();
  1221  00CF  278E               	fcall	_Reset_powerOnInterval
  1222                           
  1223                           ;prog.c: 796: KeyCode = 0;
  1224  00D0  01DF               	clrf	_KeyCode	;volatile
  1225  00D1  3002               	movlw	2
  1226                           
  1227                           ;prog.c: 797: Broadcasting = 1;
  1228  00D2  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1229                           
  1230                           ;prog.c: 798: line = 0b00000010;
  1231  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1232  00D4  00B5               	movwf	main@line^(0+128)
  1233                           
  1234                           ;prog.c: 799: getTemp_flags.ActiveProcess = 0;
  1235  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1236  00D6  1048               	bcf	_getTemp_flags+4,0
  1237                           
  1238                           ;prog.c: 800: waitInterrupt();
  1239  00D7  279A               	fcall	_waitInterrupt
  1240                           
  1241                           ;prog.c: 801: Run_getTemp(line);
  1242  00D8  3002               	movlw	2
  1243  00D9  26ED               	fcall	_Run_getTemp
  1244                           
  1245                           ;prog.c: 802: TheStart = 1;
  1246  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  1247  00DB  01B3               	clrf	main@TheStart^(0+128)
  1248  00DC  0AB3               	incf	main@TheStart^(0+128),f
  1249                           
  1250                           ;prog.c: 803: } else if (KeyCode == 36) {
  1251  00DD  28FC               	goto	l4201
  1252  00DE                     l4173:	
  1253  00DE  3024               	movlw	36
  1254  00DF  065F               	xorwf	_KeyCode,w	;volatile
  1255  00E0  1D03               	btfss	3,2
  1256  00E1  28FC               	goto	l4201
  1257                           
  1258                           ;prog.c: 804: KeyCode = 0;
  1259  00E2  01DF               	clrf	_KeyCode	;volatile
  1260                           
  1261                           ;prog.c: 805: if (!TheStart) {
  1262  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1263  00E4  0833               	movf	main@TheStart^(0+128),w
  1264  00E5  1D03               	btfss	3,2
  1265  00E6  28E8               	goto	l4181
  1266                           
  1267                           ;prog.c: 806: EditAddressMemory();
  1268  00E7  225F               	fcall	_EditAddressMemory
  1269  00E8                     l4181:	
  1270                           
  1271                           ;prog.c: 807: }
  1272                           ;prog.c: 809: Reset_powerOnInterval();
  1273  00E8  278E               	fcall	_Reset_powerOnInterval
  1274  00E9  3080               	movlw	128
  1275                           
  1276                           ;prog.c: 810: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1277  00EA  01B5               	clrf	FindCell@previous
  1278  00EB  2426               	fcall	_FindCell
  1279                           
  1280                           ;prog.c: 811: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1281  00EC  214B               	fcall	PL4	;call to abstracted procedure
  1282                           
  1283                           ;prog.c: 812: if (Broadcasting) {
  1284  00ED  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1285  00EE  28F3               	goto	l4191
  1286                           
  1287                           ;prog.c: 813: TheStart = 1;
  1288  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1289  00F0  01B3               	clrf	main@TheStart^(0+128)
  1290  00F1  0AB3               	incf	main@TheStart^(0+128),f
  1291                           
  1292                           ;prog.c: 814: } else {
  1293  00F2  28F7               	goto	l4197
  1294  00F3                     l4191:	
  1295                           
  1296                           ;prog.c: 815: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1297  00F3  2156               	fcall	PL8	;call to abstracted procedure
  1298  00F4  2738               	fcall	_FillArrayFromEEPROM
  1299                           
  1300                           ;prog.c: 816: cell = address / (sizeof(DS_Address));
  1301                           
  1302                           ;prog.c: 818: CellToInd(cell);
  1303  00F5  213C               	fcall	PL2	;call to abstracted procedure
  1304  00F6  2686               	fcall	_CellToInd
  1305  00F7                     l4197:	
  1306                           
  1307                           ;prog.c: 819: }
  1308                           ;prog.c: 820: line = 0b00001000;
  1309  00F7  3008               	movlw	8
  1310  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  1311  00F9  00B5               	movwf	main@line^(0+128)
  1312  00FA                     L3:	
  1313                           
  1314                           ;prog.c: 821: Run_getTemp(line);
  1315  00FA  3008               	movlw	8
  1316  00FB                     L2:	
  1317  00FB  26ED               	fcall	_Run_getTemp
  1318  00FC                     l4201:	
  1319                           
  1320                           ;prog.c: 822: }
  1321                           ;prog.c: 824: if (getTemp_flags.Error) {
  1322  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1323  00FD  1FC7               	btfss	_getTemp_flags+3,7
  1324  00FE  290F               	goto	l369
  1325                           
  1326                           ;prog.c: 825: if (Broadcasting) {
  1327  00FF  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1328  0100  2909               	goto	l4209
  1329                           
  1330                           ;prog.c: 826: if (line == 0b00000010) {
  1331  0101  3002               	movlw	2
  1332  0102  1683               	bsf	3,5	;RP0=1, select bank1
  1333  0103  0635               	xorwf	main@line^(0+128),w
  1334  0104  1D03               	btfss	3,2
  1335  0105  290B               	goto	l4213
  1336                           
  1337                           ;prog.c: 827: line = 0b00001000;
  1338  0106  3008               	movlw	8
  1339  0107  00B5               	movwf	main@line^(0+128)
  1340  0108  290B               	goto	l4213
  1341  0109                     l4209:	
  1342                           
  1343                           ;prog.c: 830: clrInd();
  1344  0109  2794               	fcall	_clrInd
  1345                           
  1346                           ;prog.c: 831: ShowError();
  1347  010A  2767               	fcall	_ShowError
  1348  010B                     l4213:	
  1349                           
  1350                           ;prog.c: 832: }
  1351                           ;prog.c: 833: Run_getTemp(line);
  1352  010B  1683               	bsf	3,5	;RP0=1, select bank1
  1353  010C  0835               	movf	main@line^(0+128),w
  1354  010D  26ED               	fcall	_Run_getTemp
  1355                           
  1356                           ;prog.c: 834: } else if (getTemp_flags.DataIsRead) {
  1357  010E  2929               	goto	l4233
  1358  010F                     l369:	
  1359  010F  1F47               	btfss	_getTemp_flags+3,6
  1360  0110  2917               	goto	l4221
  1361                           
  1362                           ;prog.c: 835: clrInd();
  1363  0111  2794               	fcall	_clrInd
  1364                           
  1365                           ;prog.c: 836: indData();
  1366  0112  23C8               	fcall	_indData
  1367                           
  1368                           ;prog.c: 837: Run_getTemp(line);
  1369  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1370  0114  0835               	movf	main@line^(0+128),w
  1371  0115  26ED               	fcall	_Run_getTemp
  1372                           
  1373                           ;prog.c: 838: } else if (TheStart) {
  1374  0116  2929               	goto	l4233
  1375  0117                     l4221:	
  1376  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1377  0118  0833               	movf	main@TheStart^(0+128),w
  1378  0119  1903               	btfsc	3,2
  1379  011A  2929               	goto	l4233
  1380                           
  1381                           ;prog.c: 839: TheStart = 0;
  1382  011B  01B3               	clrf	main@TheStart^(0+128)
  1383                           
  1384                           ;prog.c: 840: clrInd();
  1385  011C  2794               	fcall	_clrInd
  1386                           
  1387                           ;prog.c: 841: setDigit(1, 32);
  1388  011D  3020               	movlw	32
  1389  011E  00B2               	movwf	setDigit@data
  1390  011F  3001               	movlw	1
  1391  0120  2726               	fcall	_setDigit
  1392                           
  1393                           ;prog.c: 842: setDigit(2, 32);
  1394  0121  3020               	movlw	32
  1395  0122  00B2               	movwf	setDigit@data
  1396  0123  3002               	movlw	2
  1397  0124  2726               	fcall	_setDigit
  1398                           
  1399                           ;prog.c: 843: setDigit(3, 32);
  1400  0125  3020               	movlw	32
  1401  0126  00B2               	movwf	setDigit@data
  1402  0127  3003               	movlw	3
  1403  0128  2726               	fcall	_setDigit
  1404  0129                     l4233:	
  1405                           
  1406                           ;prog.c: 844: }
  1407                           ;prog.c: 846: if (point_on_ind_delay > 0) {
  1408  0129  1683               	bsf	3,5	;RP0=1, select bank1
  1409  012A  082E               	movf	main@point_on_ind_delay^(0+128),w
  1410  012B  042F               	iorwf	(main@point_on_ind_delay+1)^(0+128),w
  1411  012C  1903               	btfsc	3,2
  1412  012D  293A               	goto	l4239
  1413  012E  3001               	movlw	1
  1414                           
  1415                           ;prog.c: 847: setPoint(1, 1);
  1416  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0130  01AD               	clrf	setPoint@value
  1418  0131  0AAD               	incf	setPoint@value,f
  1419  0132  2749               	fcall	_setPoint
  1420                           
  1421                           ;prog.c: 848: point_on_ind_delay--;
  1422  0133  3001               	movlw	1
  1423  0134  1683               	bsf	3,5	;RP0=1, select bank1
  1424  0135  02AE               	subwf	main@point_on_ind_delay^(0+128),f
  1425  0136  3000               	movlw	0
  1426  0137  1C03               	skipc
  1427  0138  03AF               	decf	(main@point_on_ind_delay+1)^(0+128),f
  1428  0139  02AF               	subwf	(main@point_on_ind_delay+1)^(0+128),f
  1429  013A                     l4239:	
  1430                           
  1431                           ;prog.c: 849: }
  1432                           ;prog.c: 851: refreshInd();
  1433  013A  2786               	fcall	_refreshInd
  1434  013B  284D               	goto	l4077
  1435  013C                     __end_of_main:	
  1436  013C                     PL2:	
  1437  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1438  013D  0834               	movf	main@address^(0+128),w
  1439  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1440  013F  00C3               	movwf	??_main
  1441  0140  1003               	clrc
  1442  0141  0CC3               	rrf	??_main,f
  1443  0142  1003               	clrc
  1444  0143  0CC3               	rrf	??_main,f
  1445  0144  1003               	clrc
  1446  0145  0CC3               	rrf	??_main,f
  1447  0146  0843               	movf	??_main,w
  1448  0147  1683               	bsf	3,5	;RP0=1, select bank1
  1449  0148  00B2               	movwf	main@cell^(0+128)
  1450  0149  0832               	movf	main@cell^(0+128),w
  1451  014A  0008               	return
  1452  014B                     __end_ofPL2:	
  1453  014B                     PL4:	
  1454  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1455  014C  00B4               	movwf	main@address^(0+128)
  1456  014D  3A80               	xorlw	128
  1457  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1458  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1459  0150  1D03               	btfss	3,2
  1460  0151  2954               	goto	L4
  1461  0152  1460               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1462  0153  0008               	return
  1463  0154                     L4:	
  1464  0154  1060               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1465  0155  0008               	return
  1466  0156                     __end_ofPL4:	
  1467  0156                     PL8:	
  1468  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1469  0157  0834               	movf	main@address^(0+128),w
  1470  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1471  0159  00B0               	movwf	FillArrayFromEEPROM@address_start
  1472  015A  3008               	movlw	8
  1473  015B  00B1               	movwf	FillArrayFromEEPROM@quantity
  1474  015C  34BF               	retlw	(low (_DS_Address| 0))& (0+255)
  1475  015D                     __end_ofPL8:	
  1476                           
  1477                           	psect	text1
  1478  03C8                     __ptext1:	
  1479 ;; *************** function _indData *****************
  1480 ;; Defined at:
  1481 ;;		line 535 in file "prog.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  v               1   23[BANK0 ] unsigned char 
  1486 ;;  v               1   25[BANK0 ] unsigned char 
  1487 ;;  cd              1   27[BANK0 ] unsigned char 
  1488 ;;  dN              1   26[BANK0 ] unsigned char 
  1489 ;;  isPoint         1   24[BANK0 ] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 300/0
  1496 ;;		On exit  : 300/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1499 ;;      Params:         0       0       0       0
  1500 ;;      Locals:         0       5       0       0
  1501 ;;      Temps:          0       1       0       0
  1502 ;;      Totals:         0       6       0       0
  1503 ;;Total ram usage:        6 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    4
  1506 ;; This function calls:
  1507 ;;		___lbdiv
  1508 ;;		___lbmod
  1509 ;;		_setDigit
  1510 ;;		_setPoint
  1511 ;; This function is called by:
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           
  1517                           ;psect for function _indData
  1518  03C8                     _indData:	
  1519                           
  1520                           ;prog.c: 537: unsigned char cd = 3;
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1524  03C8  3003               	movlw	3
  1525  03C9  00BB               	movwf	indData@cd
  1526                           
  1527                           ;prog.c: 538: unsigned char dN = 3;
  1528  03CA  00BA               	movwf	indData@dN
  1529                           
  1530                           ;prog.c: 540: if (sign != 0) {
  1531  03CB  085A               	movf	_sign,w
  1532  03CC  1903               	btfsc	3,2
  1533  03CD  2BD3               	goto	l3705
  1534                           
  1535                           ;prog.c: 541: setDigit(cd, 32);
  1536  03CE  3020               	movlw	32
  1537  03CF  00B2               	movwf	setDigit@data
  1538  03D0  3003               	movlw	3
  1539  03D1  2726               	fcall	_setDigit
  1540  03D2  2BD7               	goto	l3707
  1541  03D3                     l3705:	
  1542                           ;prog.c: 544: } else if (temperature < 10) {
  1543                           
  1544                           ;prog.c: 543: dN--;
  1545                           
  1546                           ;prog.c: 542: cd--;
  1547                           
  1548  03D3  300A               	movlw	10
  1549  03D4  025C               	subwf	_temperature,w
  1550  03D5  1803               	skipnc
  1551  03D6  2BD9               	goto	l3709
  1552  03D7                     l3707:	
  1553                           
  1554                           ;prog.c: 545: cd--;
  1555  03D7  03BB               	decf	indData@cd,f
  1556                           
  1557                           ;prog.c: 546: dN--;
  1558  03D8  03BA               	decf	indData@dN,f
  1559  03D9                     l3709:	
  1560                           
  1561                           ;prog.c: 547: }
  1562                           ;prog.c: 549: unsigned char isPoint = 0;
  1563  03D9  01B8               	clrf	indData@isPoint
  1564  03DA                     l3711:	
  1565                           
  1566                           ;prog.c: 551: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1567  03DA  3064               	movlw	100
  1568  03DB  025C               	subwf	_temperature,w
  1569  03DC  1C03               	btfss	3,0
  1570  03DD  2BE0               	goto	u3790
  1571  03DE  3001               	movlw	1
  1572  03DF  2BE1               	goto	u3800
  1573  03E0                     u3790:	
  1574  03E0  3000               	movlw	0
  1575  03E1                     u3800:	
  1576  03E1  00B6               	movwf	??_indData
  1577  03E2  300A               	movlw	10
  1578  03E3  025C               	subwf	_temperature,w
  1579  03E4  1C03               	btfss	3,0
  1580  03E5  2BE8               	goto	u3810
  1581  03E6  3001               	movlw	1
  1582  03E7  2BE9               	goto	u3820
  1583  03E8                     u3810:	
  1584  03E8  3000               	movlw	0
  1585  03E9                     u3820:	
  1586  03E9  0736               	addwf	??_indData,w
  1587  03EA  00B9               	movwf	indData@v
  1588                           
  1589                           ;prog.c: 552: setDigit(cd - v, temperature % 10);
  1590  03EB  300A               	movlw	10
  1591  03EC  00AD               	movwf	___lbmod@divisor
  1592  03ED  085C               	movf	_temperature,w
  1593  03EE  264E               	fcall	___lbmod
  1594  03EF  00B2               	movwf	setDigit@data
  1595  03F0  0839               	movf	indData@v,w
  1596  03F1  023B               	subwf	indData@cd,w
  1597  03F2  2726               	fcall	_setDigit
  1598                           
  1599                           ;prog.c: 553: if (!isPoint) {
  1600  03F3  0838               	movf	indData@isPoint,w
  1601  03F4  1D03               	btfss	3,2
  1602  03F5  2BFD               	goto	l3721
  1603                           
  1604                           ;prog.c: 554: setPoint(cd - v, 1);
  1605  03F6  01AD               	clrf	setPoint@value
  1606  03F7  0AAD               	incf	setPoint@value,f
  1607  03F8  0839               	movf	indData@v,w
  1608  03F9  023B               	subwf	indData@cd,w
  1609  03FA  2749               	fcall	_setPoint
  1610                           
  1611                           ;prog.c: 555: isPoint = 1;
  1612  03FB  01B8               	clrf	indData@isPoint
  1613  03FC  0AB8               	incf	indData@isPoint,f
  1614  03FD                     l3721:	
  1615                           
  1616                           ;prog.c: 556: }
  1617                           ;prog.c: 557: temperature /= 10;
  1618  03FD  300A               	movlw	10
  1619  03FE  00AD               	movwf	___lbdiv@divisor
  1620  03FF  085C               	movf	_temperature,w
  1621  0400  26A1               	fcall	___lbdiv
  1622  0401  00DC               	movwf	_temperature
  1623                           
  1624                           ;prog.c: 558: dN--;
  1625  0402  03BA               	decf	indData@dN,f
  1626                           
  1627                           ;prog.c: 559: } while (temperature > 0);
  1628  0403  085C               	movf	_temperature,w
  1629  0404  1D03               	btfss	3,2
  1630  0405  2BDA               	goto	l3711
  1631                           
  1632                           ;prog.c: 561: if (dN > 0) {
  1633  0406  083A               	movf	indData@dN,w
  1634  0407  1903               	btfsc	3,2
  1635  0408  0008               	return
  1636                           
  1637                           ;prog.c: 562: cd = dN;
  1638  0409  083A               	movf	indData@dN,w
  1639  040A  00BB               	movwf	indData@cd
  1640                           
  1641                           ;prog.c: 563: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1642  040B  300A               	movlw	10
  1643  040C  025B               	subwf	_temp_drob,w
  1644  040D  1C03               	skipc
  1645  040E  2C16               	goto	l3735
  1646  040F  0B3A               	decfsz	indData@dN,w
  1647  0410  2C16               	goto	l3735
  1648  0411  300A               	movlw	10
  1649  0412  00AD               	movwf	___lbdiv@divisor
  1650  0413  085B               	movf	_temp_drob,w
  1651  0414  26A1               	fcall	___lbdiv
  1652  0415  00DB               	movwf	_temp_drob
  1653  0416                     l3735:	
  1654                           
  1655                           ;prog.c: 565: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1656  0416  300A               	movlw	10
  1657  0417  025B               	subwf	_temp_drob,w
  1658  0418  1C03               	btfss	3,0
  1659  0419  2C1C               	goto	u3880
  1660  041A  3001               	movlw	1
  1661  041B  2C1D               	goto	u3890
  1662  041C                     u3880:	
  1663  041C  3000               	movlw	0
  1664  041D                     u3890:	
  1665  041D  00B7               	movwf	indData@v_240
  1666                           
  1667                           ;prog.c: 566: setDigit(cd - v, temp_drob % 10);
  1668  041E  300A               	movlw	10
  1669  041F  00AD               	movwf	___lbmod@divisor
  1670  0420  085B               	movf	_temp_drob,w
  1671  0421  264E               	fcall	___lbmod
  1672  0422  00B2               	movwf	setDigit@data
  1673  0423  0837               	movf	indData@v_240,w
  1674  0424  023B               	subwf	indData@cd,w
  1675  0425  2F26               	ljmp	_setDigit
  1676  0426                     __end_of_indData:	
  1677                           
  1678                           	psect	text2
  1679  06ED                     __ptext2:	
  1680 ;; *************** function _Run_getTemp *****************
  1681 ;; Defined at:
  1682 ;;		line 682 in file "prog.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  line            1    wreg     unsigned char 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  line            1   13[BANK0 ] unsigned char 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  1    wreg      void 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0
  1691 ;; Tracked objects:
  1692 ;;		On entry : 200/100
  1693 ;;		On exit  : 300/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1696 ;;      Params:         0       0       0       0
  1697 ;;      Locals:         0       1       0       0
  1698 ;;      Temps:          0       0       0       0
  1699 ;;      Totals:         0       1       0       0
  1700 ;;Total ram usage:        1 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    3
  1703 ;; This function calls:
  1704 ;;		Nothing
  1705 ;; This function is called by:
  1706 ;;		_main
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _Run_getTemp
  1712  06ED                     _Run_getTemp:	
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1716                           ;Run_getTemp@line stored from wreg
  1717  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  1718  06EE  00AD               	movwf	Run_getTemp@line
  1719  06EF  30C3               	movlw	-61
  1720                           
  1721                           ;prog.c: 684: getTemp_flags.Init = 1;
  1722  06F0  1444               	bsf	_getTemp_flags,0
  1723                           
  1724                           ;prog.c: 685: getTemp_flags.Send_Address = 1;
  1725  06F1  14C4               	bsf	_getTemp_flags,1
  1726                           
  1727                           ;prog.c: 686: getTemp_flags.CountAddressBytes = 0;
  1728  06F2  05C4               	andwf	_getTemp_flags,f
  1729  06F3  3078               	movlw	120
  1730                           
  1731                           ;prog.c: 687: getTemp_flags.SendConvertTemp = 1;
  1732  06F4  1744               	bsf	_getTemp_flags,6
  1733                           
  1734                           ;prog.c: 688: getTemp_flags.PauseValue = 120;
  1735  06F5  00C5               	movwf	_getTemp_flags+1
  1736  06F6  30C3               	movlw	-61
  1737  06F7  01C6               	clrf	_getTemp_flags+2
  1738                           
  1739                           ;prog.c: 689: getTemp_flags.SendGetTemp = 1;
  1740  06F8  1447               	bsf	_getTemp_flags+3,0
  1741                           
  1742                           ;prog.c: 690: getTemp_flags.ReadData = 1;
  1743  06F9  14C7               	bsf	_getTemp_flags+3,1
  1744                           
  1745                           ;prog.c: 691: getTemp_flags.CountDataBytes = 0;
  1746  06FA  05C7               	andwf	_getTemp_flags+3,f
  1747                           
  1748                           ;prog.c: 692: getTemp_flags.Error = 0;
  1749  06FB  13C7               	bcf	_getTemp_flags+3,7
  1750                           
  1751                           ;prog.c: 693: getTemp_flags.DataIsRead = 0;
  1752  06FC  1347               	bcf	_getTemp_flags+3,6
  1753                           
  1754                           ;prog.c: 694: getTemp_flags.Line = line;
  1755  06FD  082D               	movf	Run_getTemp@line,w
  1756  06FE  00C9               	movwf	_getTemp_flags+5
  1757                           
  1758                           ;prog.c: 696: getTemp_flags.ActiveProcess = 1;
  1759  06FF  1448               	bsf	_getTemp_flags+4,0
  1760  0700  0008               	return
  1761  0701                     __end_of_Run_getTemp:	
  1762                           
  1763                           	psect	text3
  1764  0714                     __ptext3:	
  1765 ;; *************** function _Run_getInit *****************
  1766 ;; Defined at:
  1767 ;;		line 700 in file "prog.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  line            1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  line            1   13[BANK0 ] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0
  1776 ;; Tracked objects:
  1777 ;;		On entry : 300/100
  1778 ;;		On exit  : 300/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1781 ;;      Params:         0       0       0       0
  1782 ;;      Locals:         0       1       0       0
  1783 ;;      Temps:          0       0       0       0
  1784 ;;      Totals:         0       1       0       0
  1785 ;;Total ram usage:        1 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    3
  1788 ;; This function calls:
  1789 ;;		Nothing
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           
  1796                           ;psect for function _Run_getInit
  1797  0714                     _Run_getInit:	
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _Run_getInit: [wreg+status,2+status,0]
  1801                           ;Run_getInit@line stored from wreg
  1802  0714  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0715  00AD               	movwf	Run_getInit@line
  1804  0716  30C3               	movlw	-61
  1805                           
  1806                           ;prog.c: 702: getTemp_flags.Init = 1;
  1807  0717  1444               	bsf	_getTemp_flags,0
  1808                           
  1809                           ;prog.c: 703: getTemp_flags.Send_Address = 0;
  1810  0718  10C4               	bcf	_getTemp_flags,1
  1811                           
  1812                           ;prog.c: 704: getTemp_flags.CountAddressBytes = 0;
  1813  0719  05C4               	andwf	_getTemp_flags,f
  1814                           
  1815                           ;prog.c: 705: getTemp_flags.SendConvertTemp = 0;
  1816  071A  1344               	bcf	_getTemp_flags,6
  1817                           
  1818                           ;prog.c: 706: getTemp_flags.PauseValue = 0;
  1819  071B  01C5               	clrf	_getTemp_flags+1
  1820  071C  01C6               	clrf	_getTemp_flags+2
  1821                           
  1822                           ;prog.c: 707: getTemp_flags.SendGetTemp = 0;
  1823  071D  1047               	bcf	_getTemp_flags+3,0
  1824                           
  1825                           ;prog.c: 708: getTemp_flags.ReadData = 0;
  1826  071E  10C7               	bcf	_getTemp_flags+3,1
  1827                           
  1828                           ;prog.c: 709: getTemp_flags.CountDataBytes = 0;
  1829  071F  05C7               	andwf	_getTemp_flags+3,f
  1830                           
  1831                           ;prog.c: 710: getTemp_flags.Error = 0;
  1832  0720  13C7               	bcf	_getTemp_flags+3,7
  1833                           
  1834                           ;prog.c: 711: getTemp_flags.DataIsRead = 0;
  1835  0721  1347               	bcf	_getTemp_flags+3,6
  1836                           
  1837                           ;prog.c: 712: getTemp_flags.Line = line;
  1838  0722  082D               	movf	Run_getInit@line,w
  1839  0723  00C9               	movwf	_getTemp_flags+5
  1840                           
  1841                           ;prog.c: 714: getTemp_flags.ActiveProcess = 1;
  1842  0724  1448               	bsf	_getTemp_flags+4,0
  1843  0725  0008               	return
  1844  0726                     __end_of_Run_getInit:	
  1845                           
  1846                           	psect	text4
  1847  078E                     __ptext4:	
  1848 ;; *************** function _Reset_powerOnInterval *****************
  1849 ;; Defined at:
  1850 ;;		line 96 in file "prog.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg
  1859 ;; Tracked objects:
  1860 ;;		On entry : 200/0
  1861 ;;		On exit  : 300/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1864 ;;      Params:         0       0       0       0
  1865 ;;      Locals:         0       0       0       0
  1866 ;;      Temps:          0       0       0       0
  1867 ;;      Totals:         0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    3
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           
  1879                           ;psect for function _Reset_powerOnInterval
  1880  078E                     _Reset_powerOnInterval:	
  1881                           
  1882                           ;prog.c: 97: powerOnInterval = 700;
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1886  078E  30BC               	movlw	188
  1887  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0790  00DD               	movwf	_powerOnInterval
  1889  0791  3002               	movlw	2
  1890  0792  00DE               	movwf	_powerOnInterval+1
  1891  0793  0008               	return
  1892  0794                     __end_of_Reset_powerOnInterval:	
  1893                           
  1894                           	psect	text5
  1895  0426                     __ptext5:	
  1896 ;; *************** function _FindCell *****************
  1897 ;; Defined at:
  1898 ;;		line 394 in file "prog.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  addressStart    1    wreg     unsigned char 
  1901 ;;  previous        1   21[BANK0 ] unsigned char 
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  addressStart    1   32[BANK0 ] unsigned char 
  1904 ;;  i               1   33[BANK0 ] unsigned char 
  1905 ;;  CellsData       8   22[BANK0 ] unsigned char [8]
  1906 ;;  CellIsEmpty     1   31[BANK0 ] unsigned char 
  1907 ;;  address         1   34[BANK0 ] unsigned char 
  1908 ;;  addressNew      1   30[BANK0 ] unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      unsigned char 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 200/100
  1915 ;;		On exit  : B00/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1918 ;;      Params:         0       1       0       0
  1919 ;;      Locals:         0      13       0       0
  1920 ;;      Temps:          0       0       0       0
  1921 ;;      Totals:         0      14       0       0
  1922 ;;Total ram usage:       14 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    5
  1925 ;; This function calls:
  1926 ;;		_FillArrayFromEEPROM
  1927 ;;		_waitInterrupt
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function _FindCell
  1935  0426                     _FindCell:	
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1939                           ;FindCell@addressStart stored from wreg
  1940  0426  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0427  00C0               	movwf	FindCell@addressStart
  1942                           
  1943                           ;prog.c: 395: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1944  0428  3A80               	xorlw	128
  1945  0429  1D03               	btfss	3,2
  1946  042A  2C32               	goto	l205
  1947                           
  1948                           ;prog.c: 396: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1949  042B  0835               	movf	FindCell@previous,w
  1950  042C  1903               	btfsc	3,2
  1951  042D  2C30               	goto	l3649
  1952  042E  01C0               	clrf	FindCell@addressStart
  1953  042F  2C32               	goto	l205
  1954  0430                     l3649:	
  1955  0430  3078               	movlw	120
  1956  0431  00C0               	movwf	FindCell@addressStart
  1957  0432                     l205:	
  1958                           
  1959                           ;prog.c: 397: }
  1960                           ;prog.c: 398: unsigned char address = addressStart;
  1961  0432  0840               	movf	FindCell@addressStart,w
  1962  0433  00C2               	movwf	FindCell@address
  1963                           
  1964                           ;prog.c: 399: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  1965  0434  3080               	movlw	128
  1966  0435  00BE               	movwf	FindCell@addressNew
  1967  0436                     l3651:	
  1968                           
  1969                           ;prog.c: 402: if (!previous) {
  1970  0436  0835               	movf	FindCell@previous,w
  1971  0437  1D03               	btfss	3,2
  1972  0438  2C42               	goto	l3659
  1973                           
  1974                           ;prog.c: 403: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  1975  0439  3078               	movlw	120
  1976  043A  0642               	xorwf	FindCell@address,w
  1977  043B  1D03               	btfss	3,2
  1978  043C  2C3F               	goto	l3657
  1979  043D  01C2               	clrf	FindCell@address
  1980  043E  2C4A               	goto	l3665
  1981  043F                     l3657:	
  1982  043F  3008               	movlw	8
  1983  0440  07C2               	addwf	FindCell@address,f
  1984  0441  2C4A               	goto	l3665
  1985  0442                     l3659:	
  1986                           
  1987                           ;prog.c: 405: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  1988  0442  0842               	movf	FindCell@address,w
  1989  0443  1D03               	btfss	3,2
  1990  0444  2C48               	goto	l3663
  1991  0445  3078               	movlw	120
  1992  0446  00C2               	movwf	FindCell@address
  1993  0447  2C4A               	goto	l3665
  1994  0448                     l3663:	
  1995  0448  3008               	movlw	8
  1996  0449  02C2               	subwf	FindCell@address,f
  1997  044A                     l3665:	
  1998                           
  1999                           ;prog.c: 406: }
  2000                           ;prog.c: 408: unsigned char CellsData [(sizeof(DS_Address))];
  2001                           ;prog.c: 409: waitInterrupt();
  2002  044A  279A               	fcall	_waitInterrupt
  2003                           
  2004                           ;prog.c: 410: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  2005  044B  0842               	movf	FindCell@address,w
  2006  044C  00B0               	movwf	FillArrayFromEEPROM@address_start
  2007  044D  3008               	movlw	8
  2008  044E  00B1               	movwf	FillArrayFromEEPROM@quantity
  2009  044F  3036               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  2010  0450  2738               	fcall	_FillArrayFromEEPROM
  2011                           
  2012                           ;prog.c: 411: unsigned char CellIsEmpty = 1;
  2013  0451  01BF               	clrf	FindCell@CellIsEmpty
  2014  0452  0ABF               	incf	FindCell@CellIsEmpty,f
  2015                           
  2016                           ;prog.c: 412: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2017  0453  01C1               	clrf	FindCell@i
  2018  0454                     l3677:	
  2019                           
  2020                           ;prog.c: 413: if (CellsData[i] != 0xFF) {
  2021  0454  0841               	movf	FindCell@i,w
  2022  0455  3E36               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  2023  0456  0084               	movwf	4
  2024  0457  1383               	bcf	3,7	;select IRP bank0
  2025  0458  0F00               	incfsz	0,w
  2026                           
  2027                           ;prog.c: 414: CellIsEmpty = 0;
  2028  0459  01BF               	clrf	FindCell@CellIsEmpty
  2029  045A  3008               	movlw	8
  2030  045B  0AC1               	incf	FindCell@i,f
  2031  045C  0241               	subwf	FindCell@i,w
  2032  045D  1C03               	skipc
  2033  045E  2C54               	goto	l3677
  2034                           
  2035                           ;prog.c: 415: }
  2036                           ;prog.c: 416: }
  2037                           ;prog.c: 418: if (CellIsEmpty == 0) {
  2038  045F  083F               	movf	FindCell@CellIsEmpty,w
  2039  0460  1D03               	btfss	3,2
  2040  0461  2C65               	goto	l3689
  2041                           
  2042                           ;prog.c: 419: addressNew = address;
  2043  0462  0842               	movf	FindCell@address,w
  2044  0463  00BE               	movwf	FindCell@addressNew
  2045                           
  2046                           ;prog.c: 420: break;
  2047  0464  2C69               	goto	l3691
  2048  0465                     l3689:	
  2049                           
  2050                           ;prog.c: 421: }
  2051                           ;prog.c: 422: } while (address != addressStart);
  2052  0465  0842               	movf	FindCell@address,w
  2053  0466  0640               	xorwf	FindCell@addressStart,w
  2054  0467  1D03               	skipz
  2055  0468  2C36               	goto	l3651
  2056  0469                     l3691:	
  2057                           
  2058                           ;prog.c: 423: return addressNew;
  2059  0469  083E               	movf	FindCell@addressNew,w
  2060  046A  0008               	return
  2061  046B                     __end_of_FindCell:	
  2062                           
  2063                           	psect	text6
  2064  025F                     __ptext6:	
  2065 ;; *************** function _EditAddressMemory *****************
  2066 ;; Defined at:
  2067 ;;		line 594 in file "prog.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  i               1   11[BANK1 ] unsigned char 
  2072 ;;  i               1   12[BANK1 ] unsigned char 
  2073 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  2074 ;;  cell            1   13[BANK1 ] unsigned char 
  2075 ;;  CellIsEmpty     1   10[BANK1 ] unsigned char 
  2076 ;;  RereadCell      1    9[BANK1 ] unsigned char 
  2077 ;;  ErrorShowed     1    8[BANK1 ] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 300/100
  2084 ;;		On exit  : 300/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2087 ;;      Params:         0       0       0       0
  2088 ;;      Locals:         0       0      14       0
  2089 ;;      Temps:          0       1       0       0
  2090 ;;      Totals:         0       1      14       0
  2091 ;;Total ram usage:       15 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    6
  2094 ;; This function calls:
  2095 ;;		_CellToInd
  2096 ;;		_INIT
  2097 ;;		_RX
  2098 ;;		_ReadCell
  2099 ;;		_ShowError
  2100 ;;		_TX
  2101 ;;		_WriteArrayToEEPROM
  2102 ;;		_calc_crc
  2103 ;;		_clrInd
  2104 ;;		_refreshInd
  2105 ;;		_setPoint
  2106 ;;		_waitInterrupt
  2107 ;; This function is called by:
  2108 ;;		_main
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           
  2113                           ;psect for function _EditAddressMemory
  2114  025F                     _EditAddressMemory:	
  2115                           
  2116                           ;prog.c: 595: getTemp_flags.ActiveProcess = 0;
  2117                           
  2118                           ;incstack = 0
  2119                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2120  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2121  0260  1048               	bcf	_getTemp_flags+4,0
  2122                           
  2123                           ;prog.c: 597: PowerBlocked++;
  2124  0261  0AD8               	incf	_PowerBlocked,f
  2125                           
  2126                           ;prog.c: 599: clrInd();
  2127  0262  2794               	fcall	_clrInd
  2128                           
  2129                           ;prog.c: 601: unsigned char cell = 0;
  2130  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2131  0264  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2132                           
  2133                           ;prog.c: 602: unsigned char CellIsEmpty = 1;
  2134  0265  01AA               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2135  0266  0AAA               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2136                           
  2137                           ;prog.c: 603: unsigned char CellsData [(sizeof(DS_Address))];
  2138                           ;prog.c: 605: unsigned char ErrorShowed = 0;
  2139  0267  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2140                           
  2141                           ;prog.c: 606: unsigned char RereadCell = 1;
  2142  0268  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2143  0269  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2144  026A                     l3753:	
  2145                           
  2146                           ;prog.c: 609: if (KeyCode != 0 && ErrorShowed) {
  2147  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2148  026B  085F               	movf	_KeyCode,w	;volatile
  2149  026C  1903               	btfsc	3,2
  2150  026D  2A78               	goto	l3761
  2151  026E  1683               	bsf	3,5	;RP0=1, select bank1
  2152  026F  0828               	movf	EditAddressMemory@ErrorShowed^(0+128),w
  2153  0270  1903               	btfsc	3,2
  2154  0271  2A78               	goto	l3761
  2155                           
  2156                           ;prog.c: 610: KeyCode = 0;
  2157  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2158  0273  01DF               	clrf	_KeyCode	;volatile
  2159                           
  2160                           ;prog.c: 611: ErrorShowed = 0;
  2161  0274  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0275  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2163                           
  2164                           ;prog.c: 612: RereadCell = 1;
  2165  0276  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2166  0277  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2167  0278                     l3761:	
  2168                           
  2169                           ;prog.c: 613: }
  2170                           ;prog.c: 615: if (KeyCode == 31) {
  2171  0278  301F               	movlw	31
  2172  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2173  027A  065F               	xorwf	_KeyCode,w	;volatile
  2174  027B  1D03               	btfss	3,2
  2175  027C  2A8A               	goto	l3773
  2176                           
  2177                           ;prog.c: 616: KeyCode = 0;
  2178  027D  01DF               	clrf	_KeyCode	;volatile
  2179                           
  2180                           ;prog.c: 617: if (cell > 0) {
  2181  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2182  027F  082D               	movf	EditAddressMemory@cell^(0+128),w
  2183  0280  1903               	btfsc	3,2
  2184  0281  2A84               	goto	l3769
  2185                           
  2186                           ;prog.c: 618: cell--;
  2187  0282  03AD               	decf	EditAddressMemory@cell^(0+128),f
  2188                           
  2189                           ;prog.c: 619: } else {
  2190  0283  2A86               	goto	l3771
  2191  0284                     l3769:	
  2192                           
  2193                           ;prog.c: 620: cell = 16 - 1;
  2194  0284  300F               	movlw	15
  2195  0285  00AD               	movwf	EditAddressMemory@cell^(0+128)
  2196  0286                     l3771:	
  2197                           
  2198                           ;prog.c: 621: }
  2199                           ;prog.c: 622: RereadCell = 1;
  2200  0286  1683               	bsf	3,5	;RP0=1, select bank1
  2201  0287  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2202  0288  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2203                           
  2204                           ;prog.c: 623: } else if (KeyCode == 32) {
  2205  0289  2AFE               	goto	l3865
  2206  028A                     l3773:	
  2207  028A  3020               	movlw	32
  2208  028B  065F               	xorwf	_KeyCode,w	;volatile
  2209  028C  1D03               	btfss	3,2
  2210  028D  2A98               	goto	l3785
  2211                           
  2212                           ;prog.c: 624: KeyCode = 0;
  2213  028E  01DF               	clrf	_KeyCode	;volatile
  2214                           
  2215                           ;prog.c: 625: if (cell < 16 - 1) {
  2216  028F  300F               	movlw	15
  2217  0290  1683               	bsf	3,5	;RP0=1, select bank1
  2218  0291  022D               	subwf	EditAddressMemory@cell^(0+128),w
  2219  0292  1803               	skipnc
  2220  0293  2A96               	goto	l3781
  2221                           
  2222                           ;prog.c: 626: cell++;
  2223  0294  0AAD               	incf	EditAddressMemory@cell^(0+128),f
  2224                           
  2225                           ;prog.c: 627: } else {
  2226  0295  2A86               	goto	l3771
  2227  0296                     l3781:	
  2228                           
  2229                           ;prog.c: 628: cell = 0;
  2230  0296  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2231  0297  2A86               	goto	l3771
  2232  0298                     l3785:	
  2233  0298  3022               	movlw	34
  2234  0299  065F               	xorwf	_KeyCode,w	;volatile
  2235  029A  1D03               	btfss	3,2
  2236  029B  2AA0               	goto	l3795
  2237                           
  2238                           ;prog.c: 632: KeyCode = 0;
  2239  029C  01DF               	clrf	_KeyCode	;volatile
  2240                           
  2241                           ;prog.c: 633: clrInd();
  2242  029D  2794               	fcall	_clrInd
  2243                           
  2244                           ;prog.c: 634: refreshInd();
  2245  029E  2786               	fcall	_refreshInd
  2246                           
  2247                           ;prog.c: 635: break;
  2248  029F  2B1A               	goto	l3877
  2249  02A0                     l3795:	
  2250  02A0  3023               	movlw	35
  2251  02A1  065F               	xorwf	_KeyCode,w	;volatile
  2252  02A2  1D03               	btfss	3,2
  2253  02A3  2AE5               	goto	l3841
  2254  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  2255  02A5  0B2A               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2256  02A6  2AE5               	goto	l3841
  2257                           
  2258                           ;prog.c: 637: KeyCode = 0;
  2259  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2260  02A8  01DF               	clrf	_KeyCode	;volatile
  2261                           
  2262                           ;prog.c: 638: waitInterrupt();
  2263  02A9  279A               	fcall	_waitInterrupt
  2264                           
  2265                           ;prog.c: 639: if (INIT(0b00000010)) {
  2266  02AA  3002               	movlw	2
  2267  02AB  24B0               	fcall	_INIT
  2268  02AC  3A00               	xorlw	0
  2269  02AD  1903               	skipnz
  2270  02AE  2AE0               	goto	l3833
  2271                           
  2272                           ;prog.c: 640: waitInterrupt();
  2273  02AF  279A               	fcall	_waitInterrupt
  2274                           
  2275                           ;prog.c: 641: TX(0x33, 0b00000010);
  2276  02B0  3002               	movlw	2
  2277  02B1  00AD               	movwf	TX@line
  2278  02B2  3033               	movlw	51
  2279  02B3  24E8               	fcall	_TX
  2280                           
  2281                           ;prog.c: 642: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2282  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2283  02B5  01AB               	clrf	EditAddressMemory@i^(0+128)
  2284  02B6                     l3815:	
  2285                           
  2286                           ;prog.c: 643: waitInterrupt();
  2287  02B6  279A               	fcall	_waitInterrupt
  2288                           
  2289                           ;prog.c: 644: CellsData[i] = RX(0b00000010);
  2290  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2291  02B8  082B               	movf	EditAddressMemory@i^(0+128),w
  2292  02B9  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2293  02BA  0084               	movwf	4
  2294  02BB  3002               	movlw	2
  2295  02BC  257D               	fcall	_RX
  2296  02BD  1383               	bcf	3,7	;select IRP bank1
  2297  02BE  0080               	movwf	0
  2298  02BF  3008               	movlw	8
  2299  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  2300  02C1  0AAB               	incf	EditAddressMemory@i^(0+128),f
  2301  02C2  022B               	subwf	EditAddressMemory@i^(0+128),w
  2302  02C3  1C03               	skipc
  2303  02C4  2AB6               	goto	l3815
  2304                           
  2305                           ;prog.c: 645: }
  2306                           ;prog.c: 646: if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_
      +                          Address)) - 1)) {
  2307  02C5  3007               	movlw	7
  2308  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2309  02C7  00AD               	movwf	calc_crc@len
  2310  02C8  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2311  02C9  25F0               	fcall	_calc_crc
  2312  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2313  02CB  0627               	xorwf	(EditAddressMemory@CellsData^(0+128)+7),w
  2314  02CC  1D03               	skipz
  2315  02CD  2AE0               	goto	l3833
  2316  02CE                     l3825:	
  2317                           
  2318                           ;prog.c: 647: waitInterrupt();
  2319  02CE  279A               	fcall	_waitInterrupt
  2320                           
  2321                           ;prog.c: 648: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2322  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2323  02D0  082D               	movf	EditAddressMemory@cell^(0+128),w
  2324  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2325  02D2  00B9               	movwf	??_EditAddressMemory
  2326  02D3  1003               	clrc
  2327  02D4  0DB9               	rlf	??_EditAddressMemory,f
  2328  02D5  1003               	clrc
  2329  02D6  0DB9               	rlf	??_EditAddressMemory,f
  2330  02D7  1003               	clrc
  2331  02D8  0D39               	rlf	??_EditAddressMemory,w
  2332  02D9  00B0               	movwf	WriteArrayToEEPROM@address_start
  2333  02DA  3008               	movlw	8
  2334  02DB  00B1               	movwf	WriteArrayToEEPROM@quantity
  2335  02DC  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2336  02DD  2701               	fcall	_WriteArrayToEEPROM
  2337                           
  2338                           ;prog.c: 649: waitInterrupt();
  2339  02DE  279A               	fcall	_waitInterrupt
  2340  02DF  2A86               	goto	l3771
  2341  02E0                     l3833:	
  2342                           
  2343                           ;prog.c: 652: ShowError();
  2344  02E0  2767               	fcall	_ShowError
  2345                           
  2346                           ;prog.c: 653: ErrorShowed = 1;
  2347  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  2348  02E2  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2349  02E3  0AA8               	incf	EditAddressMemory@ErrorShowed^(0+128),f
  2350  02E4  2AFE               	goto	l3865
  2351  02E5                     l3841:	
  2352  02E5  3024               	movlw	36
  2353  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2354  02E7  065F               	xorwf	_KeyCode,w	;volatile
  2355  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2356  02E9  1D03               	btfss	3,2
  2357  02EA  2AFF               	goto	L7
  2358  02EB  082A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2359  02EC  1D03               	btfss	3,2
  2360  02ED  2AFE               	goto	l3865
  2361                           
  2362                           ;prog.c: 660: KeyCode = 0;
  2363  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2364  02EF  01DF               	clrf	_KeyCode	;volatile
  2365                           
  2366                           ;prog.c: 661: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2367  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2368  02F1  01AC               	clrf	EditAddressMemory@i_256^(0+128)
  2369  02F2                     l3851:	
  2370                           
  2371                           ;prog.c: 662: CellsData[i] = 0xFF;
  2372  02F2  082C               	movf	EditAddressMemory@i_256^(0+128),w
  2373  02F3  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2374  02F4  0084               	movwf	4
  2375  02F5  30FF               	movlw	255
  2376  02F6  1383               	bcf	3,7	;select IRP bank1
  2377  02F7  0080               	movwf	0
  2378  02F8  3008               	movlw	8
  2379  02F9  0AAC               	incf	EditAddressMemory@i_256^(0+128),f
  2380  02FA  022C               	subwf	EditAddressMemory@i_256^(0+128),w
  2381  02FB  1C03               	skipc
  2382  02FC  2AF2               	goto	l3851
  2383  02FD  2ACE               	goto	l3825
  2384  02FE                     l3865:	
  2385                           ;prog.c: 665: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2386                           
  2387                           ;prog.c: 663: }
  2388                           ;prog.c: 664: waitInterrupt();
  2389                           
  2390                           
  2391                           ;prog.c: 668: }
  2392                           ;prog.c: 670: if (RereadCell) {
  2393  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  2394  02FF                     L7:	
  2395  02FF  0829               	movf	EditAddressMemory@RereadCell^(0+128),w
  2396  0300  1903               	btfsc	3,2
  2397  0301  2A6A               	goto	l3753
  2398  0302  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2399                           
  2400                           ;prog.c: 671: RereadCell = 0;
  2401  0303  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2402                           
  2403                           ;prog.c: 672: CellIsEmpty = ReadCell(cell, CellsData);
  2404  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0305  00B5               	movwf	ReadCell@CellsData
  2406  0306  1683               	bsf	3,5	;RP0=1, select bank1
  2407  0307  082D               	movf	EditAddressMemory@cell^(0+128),w
  2408  0308  2632               	fcall	_ReadCell
  2409  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2410  030A  00AA               	movwf	EditAddressMemory@CellIsEmpty^(0+128)
  2411                           
  2412                           ;prog.c: 673: CellToInd(cell);
  2413  030B  082D               	movf	EditAddressMemory@cell^(0+128),w
  2414  030C  2686               	fcall	_CellToInd
  2415                           
  2416                           ;prog.c: 674: setPoint(1, !CellIsEmpty);
  2417  030D  1683               	bsf	3,5	;RP0=1, select bank1
  2418  030E  082A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2419  030F  1D03               	btfss	3,2
  2420  0310  2B13               	goto	u4060
  2421  0311  3001               	movlw	1
  2422  0312  2B14               	goto	u4070
  2423  0313                     u4060:	
  2424  0313  3000               	movlw	0
  2425  0314                     u4070:	
  2426  0314  1283               	bcf	3,5	;RP0=0, select bank0
  2427  0315  00AD               	movwf	setPoint@value
  2428  0316  3001               	movlw	1
  2429  0317  2749               	fcall	_setPoint
  2430                           
  2431                           ;prog.c: 675: refreshInd();
  2432  0318  2786               	fcall	_refreshInd
  2433  0319  2A6A               	goto	l3753
  2434  031A                     l3877:	
  2435                           
  2436                           ;prog.c: 676: }
  2437                           ;prog.c: 677: }
  2438                           ;prog.c: 678: waitInterrupt();
  2439  031A  279A               	fcall	_waitInterrupt
  2440                           
  2441                           ;prog.c: 679: PowerBlocked--;
  2442  031B  03D8               	decf	_PowerBlocked,f
  2443  031C  0008               	return
  2444  031D                     __end_of_EditAddressMemory:	
  2445                           
  2446                           	psect	text7
  2447  0749                     __ptext7:	
  2448 ;; *************** function _setPoint *****************
  2449 ;; Defined at:
  2450 ;;		line 108 in file "prog.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  dignum          1    wreg     unsigned char 
  2453 ;;  value           1   13[BANK0 ] unsigned char 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  dignum          1   14[BANK0 ] unsigned char 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2460 ;; Tracked objects:
  2461 ;;		On entry : 300/0
  2462 ;;		On exit  : B00/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2465 ;;      Params:         0       1       0       0
  2466 ;;      Locals:         0       1       0       0
  2467 ;;      Temps:          0       0       0       0
  2468 ;;      Totals:         0       2       0       0
  2469 ;;Total ram usage:        2 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    3
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_indData
  2476 ;;		_EditAddressMemory
  2477 ;;		_main
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481                           
  2482                           ;psect for function _setPoint
  2483  0749                     _setPoint:	
  2484                           
  2485                           ;incstack = 0
  2486                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2487                           ;setPoint@dignum stored from wreg
  2488  0749  00AE               	movwf	setPoint@dignum
  2489                           
  2490                           ;prog.c: 109: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 
      +                          0b10111111;
  2491  074A  0B2D               	decfsz	setPoint@value,w
  2492  074B  2F52               	goto	l3341
  2493  074C  082E               	movf	setPoint@dignum,w
  2494  074D  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2495  074E  0084               	movwf	4
  2496  074F  1383               	bcf	3,7	;select IRP bank0
  2497  0750  1700               	bsf	0,6
  2498  0751  0008               	return
  2499  0752                     l3341:	
  2500  0752  082E               	movf	setPoint@dignum,w
  2501  0753  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2502  0754  0084               	movwf	4
  2503  0755  1383               	bcf	3,7	;select IRP bank0
  2504  0756  1300               	bcf	0,6
  2505  0757  0008               	return
  2506  0758                     __end_of_setPoint:	
  2507                           
  2508                           	psect	text8
  2509  05F0                     __ptext8:	
  2510 ;; *************** function _calc_crc *****************
  2511 ;; Defined at:
  2512 ;;		line 279 in file "prog.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  mas             1    wreg     PTR unsigned char 
  2515 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2516 ;;  len             1   13[BANK0 ] unsigned char 
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  mas             1   16[BANK0 ] PTR unsigned char 
  2519 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2520 ;;  fb              1   15[BANK0 ] unsigned char 
  2521 ;;  i               1   17[BANK0 ] unsigned char 
  2522 ;;  dat             1   14[BANK0 ] unsigned char 
  2523 ;;  crc             1   18[BANK0 ] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      unsigned char 
  2526 ;; Registers used:
  2527 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2528 ;; Tracked objects:
  2529 ;;		On entry : B00/0
  2530 ;;		On exit  : B00/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2533 ;;      Params:         0       1       0       0
  2534 ;;      Locals:         0       5       0       0
  2535 ;;      Temps:          0       0       0       0
  2536 ;;      Totals:         0       6       0       0
  2537 ;;Total ram usage:        6 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    3
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_EditAddressMemory
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           
  2548                           ;psect for function _calc_crc
  2549  05F0                     _calc_crc:	
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2553                           ;calc_crc@mas stored from wreg
  2554  05F0  00B0               	movwf	calc_crc@mas
  2555                           
  2556                           ;prog.c: 280: unsigned char crc = 0;
  2557  05F1  01B2               	clrf	calc_crc@crc
  2558                           
  2559                           ;prog.c: 281: while (len--) {
  2560  05F2  2E0C               	goto	l3467
  2561  05F3                     l3447:	
  2562                           
  2563                           ;prog.c: 282: unsigned char dat = *mas++;
  2564  05F3  0830               	movf	calc_crc@mas,w
  2565  05F4  0084               	movwf	4
  2566  05F5  0800               	movf	0,w
  2567  05F6  00AE               	movwf	calc_crc@dat
  2568  05F7  0AB0               	incf	calc_crc@mas,f
  2569                           
  2570                           ;prog.c: 283: for (unsigned char i = 0; i < 8; i++) {
  2571  05F8  01B1               	clrf	calc_crc@i
  2572  05F9                     l3457:	
  2573                           
  2574                           ;prog.c: 284: unsigned char fb = (crc ^ dat) & 1;
  2575  05F9  0832               	movf	calc_crc@crc,w
  2576  05FA  062E               	xorwf	calc_crc@dat,w
  2577  05FB  00AF               	movwf	calc_crc@fb
  2578  05FC  3001               	movlw	1
  2579  05FD  05AF               	andwf	calc_crc@fb,f
  2580                           
  2581                           ;prog.c: 285: crc >>= 1;
  2582  05FE  1003               	clrc
  2583  05FF  0CB2               	rrf	calc_crc@crc,f
  2584                           
  2585                           ;prog.c: 286: dat >>= 1;
  2586  0600  1003               	clrc
  2587  0601  0CAE               	rrf	calc_crc@dat,f
  2588                           
  2589                           ;prog.c: 287: if (fb) crc ^= 0x8c;
  2590  0602  082F               	movf	calc_crc@fb,w
  2591  0603  1903               	btfsc	3,2
  2592  0604  2E07               	goto	l3465
  2593  0605  308C               	movlw	140
  2594  0606  06B2               	xorwf	calc_crc@crc,f
  2595  0607                     l3465:	
  2596  0607  3008               	movlw	8
  2597  0608  0AB1               	incf	calc_crc@i,f
  2598  0609  0231               	subwf	calc_crc@i,w
  2599  060A  1C03               	skipc
  2600  060B  2DF9               	goto	l3457
  2601  060C                     l3467:	
  2602  060C  03AD               	decf	calc_crc@len,f
  2603  060D  0F2D               	incfsz	calc_crc@len,w
  2604  060E  2DF3               	goto	l3447
  2605                           
  2606                           ;prog.c: 288: }
  2607                           ;prog.c: 289: }
  2608                           ;prog.c: 290: return crc;
  2609  060F  0832               	movf	calc_crc@crc,w
  2610  0610  0008               	return
  2611  0611                     __end_of_calc_crc:	
  2612                           
  2613                           	psect	text9
  2614  0701                     __ptext9:	
  2615 ;; *************** function _WriteArrayToEEPROM *****************
  2616 ;; Defined at:
  2617 ;;		line 211 in file "prog.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  container       1    wreg     PTR unsigned char 
  2620 ;;		 -> EditAddressMemory@CellsData(8), 
  2621 ;;  address_star    1   16[BANK0 ] unsigned char 
  2622 ;;  quantity        1   17[BANK0 ] unsigned char 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  container       1   19[BANK0 ] PTR unsigned char 
  2625 ;;		 -> EditAddressMemory@CellsData(8), 
  2626 ;;  i               1   20[BANK0 ] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 300/0
  2633 ;;		On exit  : 300/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2636 ;;      Params:         0       2       0       0
  2637 ;;      Locals:         0       2       0       0
  2638 ;;      Temps:          0       1       0       0
  2639 ;;      Totals:         0       5       0       0
  2640 ;;Total ram usage:        5 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    4
  2643 ;; This function calls:
  2644 ;;		_EEWR
  2645 ;;		_waitInterrupt
  2646 ;; This function is called by:
  2647 ;;		_EditAddressMemory
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _WriteArrayToEEPROM
  2653  0701                     _WriteArrayToEEPROM:	
  2654                           
  2655                           ;incstack = 0
  2656                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2657                           ;WriteArrayToEEPROM@container stored from wreg
  2658  0701  00B3               	movwf	WriteArrayToEEPROM@container
  2659                           
  2660                           ;prog.c: 212: for (unsigned char i = 0; i < quantity; i++) {
  2661  0702  01B4               	clrf	WriteArrayToEEPROM@i
  2662  0703                     l3361:	
  2663  0703  0831               	movf	WriteArrayToEEPROM@quantity,w
  2664  0704  0234               	subwf	WriteArrayToEEPROM@i,w
  2665  0705  1803               	btfsc	3,0
  2666  0706  0008               	return
  2667                           
  2668                           ;prog.c: 213: waitInterrupt();
  2669  0707  279A               	fcall	_waitInterrupt
  2670                           
  2671                           ;prog.c: 214: EEWR(address_start + i, container[i]);
  2672  0708  0834               	movf	WriteArrayToEEPROM@i,w
  2673  0709  0733               	addwf	WriteArrayToEEPROM@container,w
  2674  070A  00B2               	movwf	??_WriteArrayToEEPROM
  2675  070B  0084               	movwf	4
  2676  070C  1383               	bcf	3,7	;select IRP bank0
  2677  070D  0800               	movf	0,w
  2678  070E  00AD               	movwf	EEWR@data
  2679  070F  0834               	movf	WriteArrayToEEPROM@i,w
  2680  0710  0730               	addwf	WriteArrayToEEPROM@address_start,w
  2681  0711  26D5               	fcall	_EEWR
  2682  0712  0AB4               	incf	WriteArrayToEEPROM@i,f
  2683  0713  2F03               	goto	l3361
  2684  0714                     __end_of_WriteArrayToEEPROM:	
  2685                           
  2686                           	psect	text10
  2687  079A                     __ptext10:	
  2688 ;; *************** function _waitInterrupt *****************
  2689 ;; Defined at:
  2690 ;;		line 91 in file "prog.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		None
  2699 ;; Tracked objects:
  2700 ;;		On entry : 200/0
  2701 ;;		On exit  : 300/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       0       0       0
  2705 ;;      Locals:         0       0       0       0
  2706 ;;      Temps:          0       0       0       0
  2707 ;;      Totals:         0       0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_WriteArrayToEEPROM
  2715 ;;		_FindCell
  2716 ;;		_EditAddressMemory
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           
  2722                           ;psect for function _waitInterrupt
  2723  079A                     _waitInterrupt:	
  2724                           
  2725                           ;prog.c: 92: endInterrupt = 0;
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _waitInterrupt: []
  2729  079A  1283               	bcf	3,5	;RP0=0, select bank0
  2730  079B  10E0               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2731  079C                     l73:	
  2732                           ;prog.c: 93: while (!endInterrupt);
  2733                           
  2734  079C  18E0               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2735  079D  0008               	return
  2736  079E  2F9C               	goto	l73
  2737  079F                     __end_of_waitInterrupt:	
  2738                           
  2739                           	psect	text11
  2740  06D5                     __ptext11:	
  2741 ;; *************** function _EEWR *****************
  2742 ;; Defined at:
  2743 ;;		line 179 in file "prog.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  address         1    wreg     unsigned char 
  2746 ;;  data            1   13[BANK0 ] unsigned char 
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;  address         1   14[BANK0 ] unsigned char 
  2749 ;;  INTCON_BUP      1   15[BANK0 ] volatile unsigned char 
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg
  2754 ;; Tracked objects:
  2755 ;;		On entry : B00/0
  2756 ;;		On exit  : B00/0
  2757 ;;		Unchanged: 800/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2759 ;;      Params:         0       1       0       0
  2760 ;;      Locals:         0       2       0       0
  2761 ;;      Temps:          0       0       0       0
  2762 ;;      Totals:         0       3       0       0
  2763 ;;Total ram usage:        3 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    3
  2766 ;; This function calls:
  2767 ;;		Nothing
  2768 ;; This function is called by:
  2769 ;;		_WriteArrayToEEPROM
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _EEWR
  2775  06D5                     _EEWR:	
  2776                           
  2777                           ;incstack = 0
  2778                           ; Regs used in _EEWR: [wreg]
  2779                           ;EEWR@address stored from wreg
  2780  06D5  00AE               	movwf	EEWR@address
  2781                           
  2782                           ;prog.c: 180: volatile unsigned char INTCON_BUP = INTCON;
  2783  06D6  080B               	movf	11,w	;volatile
  2784  06D7  00AF               	movwf	EEWR@INTCON_BUP	;volatile
  2785                           
  2786                           ;prog.c: 181: INTCONbits.GIE = 0;
  2787  06D8  138B               	bcf	11,7	;volatile
  2788                           
  2789                           ;prog.c: 182: EEADR = address;
  2790  06D9  082E               	movf	EEWR@address,w
  2791  06DA  1683               	bsf	3,5	;RP0=1, select bank1
  2792  06DB  009B               	movwf	27	;volatile
  2793                           
  2794                           ;prog.c: 183: EEDATA = data;
  2795  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  2796  06DD  082D               	movf	EEWR@data,w
  2797  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  2798  06DF  009A               	movwf	26	;volatile
  2799                           
  2800                           ;prog.c: 184: EECON1bits.WREN = 1;
  2801  06E0  151C               	bsf	28,2	;volsfr
  2802                           
  2803                           ;prog.c: 185: EECON2 = 0x55;
  2804  06E1  3055               	movlw	85
  2805  06E2  009D               	movwf	29	;volsfr
  2806                           
  2807                           ;prog.c: 186: EECON2 = 0xAA;
  2808  06E3  30AA               	movlw	170
  2809  06E4  009D               	movwf	29	;volsfr
  2810                           
  2811                           ;prog.c: 187: EECON1bits.WR = 1;
  2812  06E5  149C               	bsf	28,1	;volsfr
  2813                           
  2814                           ;prog.c: 188: EECON1bits.WREN = 0;
  2815  06E6  111C               	bcf	28,2	;volsfr
  2816  06E7                     l123:	
  2817                           ;prog.c: 189: while (EECON1bits.WR == 1) {
  2818                           
  2819  06E7  189C               	btfsc	28,1	;volsfr
  2820  06E8  2EE7               	goto	l123
  2821                           
  2822                           ;prog.c: 190: }
  2823                           ;prog.c: 191: INTCON = INTCON_BUP;
  2824  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  2825  06EA  082F               	movf	EEWR@INTCON_BUP,w	;volatile
  2826  06EB  008B               	movwf	11	;volatile
  2827  06EC  0008               	return
  2828  06ED                     __end_of_EEWR:	
  2829                           
  2830                           	psect	text12
  2831  04E8                     __ptext12:	
  2832 ;; *************** function _TX *****************
  2833 ;; Defined at:
  2834 ;;		line 237 in file "prog.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  cmd             1    wreg     unsigned char 
  2837 ;;  line            1   13[BANK0 ] unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  cmd             1   15[BANK0 ] unsigned char 
  2840 ;;  One             1   19[BANK0 ] unsigned char 
  2841 ;;  i               1   18[BANK0 ] unsigned char 
  2842 ;;  Zero            1   17[BANK0 ] unsigned char 
  2843 ;;  temp            1   16[BANK0 ] unsigned char 
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  1    wreg      void 
  2846 ;; Registers used:
  2847 ;;		wreg, status,2, status,0
  2848 ;; Tracked objects:
  2849 ;;		On entry : 300/0
  2850 ;;		On exit  : 300/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2853 ;;      Params:         0       1       0       0
  2854 ;;      Locals:         0       5       0       0
  2855 ;;      Temps:          0       1       0       0
  2856 ;;      Totals:         0       7       0       0
  2857 ;;Total ram usage:        7 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:    3
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_EditAddressMemory
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           
  2868                           ;psect for function _TX
  2869  04E8                     _TX:	
  2870                           
  2871                           ;incstack = 0
  2872                           ; Regs used in _TX: [wreg+status,2+status,0]
  2873                           ;TX@cmd stored from wreg
  2874  04E8  00AF               	movwf	TX@cmd
  2875                           
  2876                           ;prog.c: 238: unsigned char One = line;
  2877  04E9  082D               	movf	TX@line,w
  2878  04EA  00B3               	movwf	TX@One
  2879                           
  2880                           ;prog.c: 239: unsigned char Zero = One ^ 0b11111111;
  2881  04EB  0933               	comf	TX@One,w
  2882  04EC  00B1               	movwf	TX@Zero
  2883                           
  2884                           ;prog.c: 242: unsigned char i = 0;
  2885  04ED  01B2               	clrf	TX@i
  2886                           
  2887                           ;prog.c: 243: temp = cmd;
  2888  04EE  082F               	movf	TX@cmd,w
  2889  04EF  00B0               	movwf	TX@temp
  2890                           
  2891                           ;prog.c: 244: for (i = 0; i < 8; i++) {
  2892  04F0  01B2               	clrf	TX@i
  2893  04F1                     l147:	
  2894                           
  2895                           ;prog.c: 245: if (temp & 0x01) {
  2896  04F1  1C30               	btfss	TX@temp,0
  2897  04F2  2D00               	goto	l3403
  2898                           
  2899                           ;prog.c: 246: TRISA &= Zero;
  2900  04F3  0831               	movf	TX@Zero,w
  2901  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  2902  04F5  0585               	andwf	5,f	;volatile
  2903                           
  2904                           ;prog.c: 247: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2905  04F6  2CF7               	nop2	;2 cycle nop
  2906  04F7  2CF8               	nop2	;2 cycle nop
  2907  04F8  0000               	nop
  2908                           
  2909                           ;prog.c: 248: TRISA |= One;
  2910  04F9  2516               	fcall	PL12	;call to abstracted procedure
  2911                           
  2912                           ;prog.c: 249: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2913  04FA  3017               	movlw	23
  2914  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2915  04FC  00AE               	movwf	??_TX
  2916  04FD                     u4617:	
  2917  04FD  0BAE               	decfsz	??_TX,f
  2918  04FE  2CFD               	goto	u4617
  2919                           
  2920                           ;prog.c: 250: } else {
  2921  04FF  2D0C               	goto	l3411
  2922  0500                     l3403:	
  2923                           
  2924                           ;prog.c: 251: TRISA &= Zero;
  2925  0500  0831               	movf	TX@Zero,w
  2926  0501  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0502  0585               	andwf	5,f	;volatile
  2928                           
  2929                           ;prog.c: 252: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2930  0503  3017               	movlw	23
  2931  0504  1283               	bcf	3,5	;RP0=0, select bank0
  2932  0505  00AE               	movwf	??_TX
  2933  0506                     u4627:	
  2934  0506  0BAE               	decfsz	??_TX,f
  2935  0507  2D06               	goto	u4627
  2936                           
  2937                           ;prog.c: 253: TRISA |= One;
  2938  0508  2516               	fcall	PL12	;call to abstracted procedure
  2939                           
  2940                           ;prog.c: 254: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2941  0509  2D0A               	nop2	;2 cycle nop
  2942  050A  2D0B               	nop2	;2 cycle nop
  2943  050B  0000               	nop
  2944  050C                     l3411:	
  2945  050C  3008               	movlw	8
  2946                           
  2947                           ;prog.c: 255: }
  2948                           ;prog.c: 256: temp >>= 1;
  2949  050D  1283               	bcf	3,5	;RP0=0, select bank0
  2950  050E  1303               	bcf	3,6	;RP1=0, select bank0
  2951  050F  1003               	clrc
  2952  0510  0CB0               	rrf	TX@temp,f
  2953  0511  0AB2               	incf	TX@i,f
  2954  0512  0232               	subwf	TX@i,w
  2955  0513  1803               	btfsc	3,0
  2956  0514  0008               	return
  2957  0515  2CF1               	goto	l147
  2958  0516                     __end_of_TX:	
  2959  0516                     PL12:	
  2960  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0518  0833               	movf	TX@One,w
  2963  0519  1683               	bsf	3,5	;RP0=1, select bank1
  2964  051A  0485               	iorwf	5,f	;volatile
  2965  051B  0008               	return
  2966  051C                     __end_ofPL12:	
  2967                           
  2968                           	psect	text13
  2969  0767                     __ptext13:	
  2970 ;; *************** function _ShowError *****************
  2971 ;; Defined at:
  2972 ;;		line 124 in file "prog.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;		None
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 200/0
  2983 ;;		On exit  : 300/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2986 ;;      Params:         0       0       0       0
  2987 ;;      Locals:         0       0       0       0
  2988 ;;      Temps:          0       0       0       0
  2989 ;;      Totals:         0       0       0       0
  2990 ;;Total ram usage:        0 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    4
  2993 ;; This function calls:
  2994 ;;		_clrInd
  2995 ;;		_refreshInd
  2996 ;;		_setDigit
  2997 ;; This function is called by:
  2998 ;;		_EditAddressMemory
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _ShowError
  3005  0767                     _ShowError:	
  3006                           
  3007                           ;prog.c: 125: clrInd();
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _ShowError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3011  0767  2794               	fcall	_clrInd
  3012                           
  3013                           ;prog.c: 126: setDigit(3, 14);
  3014  0768  300E               	movlw	14
  3015  0769  00B2               	movwf	setDigit@data
  3016  076A  3003               	movlw	3
  3017  076B  2726               	fcall	_setDigit
  3018                           
  3019                           ;prog.c: 127: setDigit(2, 24);
  3020  076C  3018               	movlw	24
  3021  076D  00B2               	movwf	setDigit@data
  3022  076E  3002               	movlw	2
  3023  076F  2726               	fcall	_setDigit
  3024                           
  3025                           ;prog.c: 128: setDigit(1, 24);
  3026  0770  3018               	movlw	24
  3027  0771  00B2               	movwf	setDigit@data
  3028  0772  3001               	movlw	1
  3029  0773  2726               	fcall	_setDigit
  3030                           
  3031                           ;prog.c: 129: refreshInd();
  3032  0774  2F86               	ljmp	l3271
  3033  0775                     __end_of_ShowError:	
  3034                           
  3035                           	psect	text14
  3036  0632                     __ptext14:	
  3037 ;; *************** function _ReadCell *****************
  3038 ;; Defined at:
  3039 ;;		line 570 in file "prog.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  cell            1    wreg     unsigned char 
  3042 ;;  CellsData       1   21[BANK0 ] PTR unsigned char 
  3043 ;;		 -> EditAddressMemory@CellsData(8), 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  cell            1   23[BANK0 ] unsigned char 
  3046 ;;  i               1   24[BANK0 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      unsigned char 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 300/100
  3053 ;;		On exit  : B00/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3056 ;;      Params:         0       1       0       0
  3057 ;;      Locals:         0       2       0       0
  3058 ;;      Temps:          0       1       0       0
  3059 ;;      Totals:         0       4       0       0
  3060 ;;Total ram usage:        4 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    5
  3063 ;; This function calls:
  3064 ;;		_FillArrayFromEEPROM
  3065 ;; This function is called by:
  3066 ;;		_EditAddressMemory
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _ReadCell
  3072  0632                     _ReadCell:	
  3073                           
  3074                           ;incstack = 0
  3075                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3076                           ;ReadCell@cell stored from wreg
  3077  0632  1283               	bcf	3,5	;RP0=0, select bank0
  3078  0633  00B7               	movwf	ReadCell@cell
  3079                           
  3080                           ;prog.c: 571: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  3081  0634  00B6               	movwf	??_ReadCell
  3082  0635  1003               	clrc
  3083  0636  0DB6               	rlf	??_ReadCell,f
  3084  0637  1003               	clrc
  3085  0638  0DB6               	rlf	??_ReadCell,f
  3086  0639  1003               	clrc
  3087  063A  0D36               	rlf	??_ReadCell,w
  3088  063B  00B0               	movwf	FillArrayFromEEPROM@address_start
  3089  063C  3008               	movlw	8
  3090  063D  00B1               	movwf	FillArrayFromEEPROM@quantity
  3091  063E  0835               	movf	ReadCell@CellsData,w
  3092  063F  2738               	fcall	_FillArrayFromEEPROM
  3093                           
  3094                           ;prog.c: 572: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  3095  0640  01B8               	clrf	ReadCell@i
  3096  0641                     l3481:	
  3097                           
  3098                           ;prog.c: 573: if (CellsData[i] != 0xFF) {
  3099  0641  0838               	movf	ReadCell@i,w
  3100  0642  0735               	addwf	ReadCell@CellsData,w
  3101  0643  00B6               	movwf	??_ReadCell
  3102  0644  0084               	movwf	4
  3103  0645  1383               	bcf	3,7	;select IRP bank0
  3104  0646  0F00               	incfsz	0,w
  3105                           
  3106                           ;prog.c: 574: return 0;
  3107  0647  3400               	retlw	0
  3108  0648  3008               	movlw	8
  3109  0649  0AB8               	incf	ReadCell@i,f
  3110  064A  0238               	subwf	ReadCell@i,w
  3111  064B  1803               	btfsc	3,0
  3112                           
  3113                           ;prog.c: 575: }
  3114                           ;prog.c: 576: }
  3115                           ;prog.c: 577: return 1;
  3116  064C  3401               	retlw	1
  3117  064D  2E41               	goto	l3481
  3118  064E                     __end_of_ReadCell:	
  3119                           
  3120                           	psect	text15
  3121  0738                     __ptext15:	
  3122 ;; *************** function _FillArrayFromEEPROM *****************
  3123 ;; Defined at:
  3124 ;;		line 205 in file "prog.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  container       1    wreg     PTR unsigned char 
  3127 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3128 ;;  address_star    1   16[BANK0 ] unsigned char 
  3129 ;;  quantity        1   17[BANK0 ] unsigned char 
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;  container       1   19[BANK0 ] PTR unsigned char 
  3132 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3133 ;;  i               1   20[BANK0 ] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  1    wreg      void 
  3136 ;; Registers used:
  3137 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 300/0
  3140 ;;		On exit  : 300/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3143 ;;      Params:         0       2       0       0
  3144 ;;      Locals:         0       2       0       0
  3145 ;;      Temps:          0       1       0       0
  3146 ;;      Totals:         0       5       0       0
  3147 ;;Total ram usage:        5 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    4
  3150 ;; This function calls:
  3151 ;;		_EERD
  3152 ;; This function is called by:
  3153 ;;		_FindCell
  3154 ;;		_ReadCell
  3155 ;;		_main
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           
  3160                           ;psect for function _FillArrayFromEEPROM
  3161  0738                     _FillArrayFromEEPROM:	
  3162                           
  3163                           ;incstack = 0
  3164                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3165                           ;FillArrayFromEEPROM@container stored from wreg
  3166  0738  00B3               	movwf	FillArrayFromEEPROM@container
  3167                           
  3168                           ;prog.c: 206: for (unsigned char i = 0; i < quantity; i++) {
  3169  0739  01B4               	clrf	FillArrayFromEEPROM@i
  3170  073A                     l3293:	
  3171  073A  0831               	movf	FillArrayFromEEPROM@quantity,w
  3172  073B  0234               	subwf	FillArrayFromEEPROM@i,w
  3173  073C  1803               	btfsc	3,0
  3174  073D  0008               	return
  3175                           
  3176                           ;prog.c: 207: container[i] = EERD(address_start + i);
  3177  073E  0834               	movf	FillArrayFromEEPROM@i,w
  3178  073F  0733               	addwf	FillArrayFromEEPROM@container,w
  3179  0740  00B2               	movwf	??_FillArrayFromEEPROM
  3180  0741  0084               	movwf	4
  3181  0742  0834               	movf	FillArrayFromEEPROM@i,w
  3182  0743  0730               	addwf	FillArrayFromEEPROM@address_start,w
  3183  0744  2758               	fcall	_EERD
  3184  0745  1383               	bcf	3,7	;select IRP bank0
  3185  0746  0080               	movwf	0
  3186  0747  0AB4               	incf	FillArrayFromEEPROM@i,f
  3187  0748  2F3A               	goto	l3293
  3188  0749                     __end_of_FillArrayFromEEPROM:	
  3189                           
  3190                           	psect	text16
  3191  0758                     __ptext16:	
  3192 ;; *************** function _EERD *****************
  3193 ;; Defined at:
  3194 ;;		line 194 in file "prog.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  address         1    wreg     unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  address         1   13[BANK0 ] unsigned char 
  3199 ;;  EEDATA_BUP      1   15[BANK0 ] volatile unsigned char 
  3200 ;;  INTCON_BUP      1   14[BANK0 ] volatile unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      unsigned char 
  3203 ;; Registers used:
  3204 ;;		wreg
  3205 ;; Tracked objects:
  3206 ;;		On entry : 300/0
  3207 ;;		On exit  : 300/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       0       0       0
  3211 ;;      Locals:         0       3       0       0
  3212 ;;      Temps:          0       0       0       0
  3213 ;;      Totals:         0       3       0       0
  3214 ;;Total ram usage:        3 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_FillArrayFromEEPROM
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _EERD
  3226  0758                     _EERD:	
  3227                           
  3228                           ;incstack = 0
  3229                           ; Regs used in _EERD: [wreg]
  3230                           ;EERD@address stored from wreg
  3231  0758  00AD               	movwf	EERD@address
  3232                           
  3233                           ;prog.c: 195: volatile unsigned char INTCON_BUP = INTCON;
  3234  0759  080B               	movf	11,w	;volatile
  3235  075A  00AE               	movwf	EERD@INTCON_BUP	;volatile
  3236                           
  3237                           ;prog.c: 196: volatile unsigned char EEDATA_BUP;
  3238                           ;prog.c: 197: INTCONbits.GIE = 0;
  3239  075B  138B               	bcf	11,7	;volatile
  3240                           
  3241                           ;prog.c: 198: EEADR = address;
  3242  075C  082D               	movf	EERD@address,w
  3243  075D  1683               	bsf	3,5	;RP0=1, select bank1
  3244  075E  009B               	movwf	27	;volatile
  3245                           
  3246                           ;prog.c: 199: EECON1bits.RD = 1;
  3247  075F  141C               	bsf	28,0	;volsfr
  3248                           
  3249                           ;prog.c: 200: EEDATA_BUP = EEDATA;
  3250  0760  081A               	movf	26,w	;volatile
  3251  0761  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0762  00AF               	movwf	EERD@EEDATA_BUP	;volatile
  3253                           
  3254                           ;prog.c: 201: INTCON = INTCON_BUP;
  3255  0763  082E               	movf	EERD@INTCON_BUP,w	;volatile
  3256  0764  008B               	movwf	11	;volatile
  3257                           
  3258                           ;prog.c: 202: return EEDATA_BUP;
  3259  0765  082F               	movf	EERD@EEDATA_BUP,w	;volatile
  3260  0766  0008               	return
  3261  0767                     __end_of_EERD:	
  3262                           
  3263                           	psect	text17
  3264  057D                     __ptext17:	
  3265 ;; *************** function _RX *****************
  3266 ;; Defined at:
  3267 ;;		line 260 in file "prog.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  line            1    wreg     unsigned char 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  line            1   14[BANK0 ] unsigned char 
  3272 ;;  i               1   17[BANK0 ] unsigned char 
  3273 ;;  One             1   18[BANK0 ] unsigned char 
  3274 ;;  d               1   16[BANK0 ] unsigned char 
  3275 ;;  Zero            1   15[BANK0 ] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      unsigned char 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0
  3280 ;; Tracked objects:
  3281 ;;		On entry : 300/100
  3282 ;;		On exit  : 300/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3285 ;;      Params:         0       0       0       0
  3286 ;;      Locals:         0       5       0       0
  3287 ;;      Temps:          0       1       0       0
  3288 ;;      Totals:         0       6       0       0
  3289 ;;Total ram usage:        6 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    3
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_EditAddressMemory
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _RX
  3301  057D                     _RX:	
  3302                           
  3303                           ;incstack = 0
  3304                           ; Regs used in _RX: [wreg+status,2+status,0]
  3305                           ;RX@line stored from wreg
  3306  057D  1283               	bcf	3,5	;RP0=0, select bank0
  3307  057E  00AE               	movwf	RX@line
  3308                           
  3309                           ;prog.c: 261: unsigned char One = line;
  3310  057F  00B2               	movwf	RX@One
  3311                           
  3312                           ;prog.c: 262: unsigned char Zero = One ^ 0b11111111;
  3313  0580  0932               	comf	RX@One,w
  3314  0581  00AF               	movwf	RX@Zero
  3315                           
  3316                           ;prog.c: 264: unsigned char d = 0;
  3317  0582  01B0               	clrf	RX@d
  3318                           
  3319                           ;prog.c: 265: for (unsigned char i = 0; i < 8; i++) {
  3320  0583  01B1               	clrf	RX@i
  3321  0584                     l3425:	
  3322                           
  3323                           ;prog.c: 266: TRISA &= Zero;
  3324  0584  082F               	movf	RX@Zero,w
  3325  0585  1683               	bsf	3,5	;RP0=1, select bank1
  3326  0586  0585               	andwf	5,f	;volatile
  3327                           
  3328                           ;prog.c: 267: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3329  0587  2D88               	nop2	;2 cycle nop
  3330  0588  2D89               	nop2	;2 cycle nop
  3331  0589  2D8A               	nop2	;2 cycle nop
  3332                           
  3333                           ;prog.c: 268: TRISA |= One;
  3334  058A  1283               	bcf	3,5	;RP0=0, select bank0
  3335  058B  1303               	bcf	3,6	;RP1=0, select bank0
  3336  058C  0832               	movf	RX@One,w
  3337  058D  1683               	bsf	3,5	;RP0=1, select bank1
  3338  058E  0485               	iorwf	5,f	;volatile
  3339                           
  3340                           ;prog.c: 269: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3341  058F  2D90               	nop2	;2 cycle nop
  3342  0590  2D91               	nop2	;2 cycle nop
  3343                           
  3344                           ;prog.c: 270: d >>= 1;
  3345  0591  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0592  1303               	bcf	3,6	;RP1=0, select bank0
  3347  0593  1003               	clrc
  3348  0594  0CB0               	rrf	RX@d,f
  3349                           
  3350                           ;prog.c: 271: if ((PORTA & One) > 0) {
  3351  0595  0805               	movf	5,w	;volatile
  3352  0596  0532               	andwf	RX@One,w
  3353  0597  1D03               	btfss	3,2
  3354                           
  3355                           ;prog.c: 272: d |= 0x80;
  3356  0598  17B0               	bsf	RX@d,7
  3357                           
  3358                           ;prog.c: 273: }
  3359                           ;prog.c: 274: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3360  0599  3013               	movlw	19
  3361  059A  00AD               	movwf	??_RX
  3362  059B                     u4637:	
  3363  059B  0BAD               	decfsz	??_RX,f
  3364  059C  2D9B               	goto	u4637
  3365  059D  2D9E               	nop2	;nop
  3366  059E  3008               	movlw	8
  3367  059F  1283               	bcf	3,5	;RP0=0, select bank0
  3368  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  3369  05A1  0AB1               	incf	RX@i,f
  3370  05A2  0231               	subwf	RX@i,w
  3371  05A3  1C03               	skipc
  3372  05A4  2D84               	goto	l3425
  3373                           
  3374                           ;prog.c: 275: }
  3375                           ;prog.c: 276: return d;
  3376  05A5  0830               	movf	RX@d,w
  3377  05A6  0008               	return
  3378  05A7                     __end_of_RX:	
  3379                           
  3380                           	psect	text18
  3381  04B0                     __ptext18:	
  3382 ;; *************** function _INIT *****************
  3383 ;; Defined at:
  3384 ;;		line 219 in file "prog.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  line            1    wreg     unsigned char 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  line            1   14[BANK0 ] unsigned char 
  3389 ;;  One             1   17[BANK0 ] unsigned char 
  3390 ;;  b               1   16[BANK0 ] unsigned char 
  3391 ;;  Zero            1   15[BANK0 ] unsigned char 
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  1    wreg      unsigned char 
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0
  3396 ;; Tracked objects:
  3397 ;;		On entry : 300/0
  3398 ;;		On exit  : 300/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3401 ;;      Params:         0       0       0       0
  3402 ;;      Locals:         0       4       0       0
  3403 ;;      Temps:          0       1       0       0
  3404 ;;      Totals:         0       5       0       0
  3405 ;;Total ram usage:        5 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    3
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_EditAddressMemory
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           
  3416                           ;psect for function _INIT
  3417  04B0                     _INIT:	
  3418                           
  3419                           ;incstack = 0
  3420                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3421                           ;INIT@line stored from wreg
  3422  04B0  00AE               	movwf	INIT@line
  3423                           
  3424                           ;prog.c: 220: unsigned char One = line;
  3425  04B1  00B1               	movwf	INIT@One
  3426                           
  3427                           ;prog.c: 221: unsigned char Zero = One ^ 0b11111111;
  3428  04B2  0931               	comf	INIT@One,w
  3429  04B3  00AF               	movwf	INIT@Zero
  3430                           
  3431                           ;prog.c: 225: TRISA |= One;
  3432  04B4  0831               	movf	INIT@One,w
  3433  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  3434  04B6  0485               	iorwf	5,f	;volatile
  3435                           
  3436                           ;prog.c: 226: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3437  04B7  3006               	movlw	6
  3438  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  3439  04B9  00AD               	movwf	??_INIT
  3440  04BA                     u4647:	
  3441  04BA  0BAD               	decfsz	??_INIT,f
  3442  04BB  2CBA               	goto	u4647
  3443  04BC  0000               	nop
  3444                           
  3445                           ;prog.c: 227: TRISA &= Zero;
  3446  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  3447  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  3448  04BF  082F               	movf	INIT@Zero,w
  3449  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  3450  04C1  0585               	andwf	5,f	;volatile
  3451                           
  3452                           ;prog.c: 228: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3453  04C2  30A6               	movlw	166
  3454  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  3455  04C4  00AD               	movwf	??_INIT
  3456  04C5                     u4657:	
  3457  04C5  0BAD               	decfsz	??_INIT,f
  3458  04C6  2CC5               	goto	u4657
  3459  04C7  0000               	nop
  3460                           
  3461                           ;prog.c: 229: TRISA |= One;
  3462  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  3463  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  3464  04CA  0831               	movf	INIT@One,w
  3465  04CB  1683               	bsf	3,5	;RP0=1, select bank1
  3466  04CC  0485               	iorwf	5,f	;volatile
  3467                           
  3468                           ;prog.c: 230: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3469  04CD  3015               	movlw	21
  3470  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3471  04CF  00AD               	movwf	??_INIT
  3472  04D0                     u4667:	
  3473  04D0  0BAD               	decfsz	??_INIT,f
  3474  04D1  2CD0               	goto	u4667
  3475  04D2  0000               	nop
  3476                           
  3477                           ;prog.c: 231: b = (PORTA & One) > 0;
  3478  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3479  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3480  04D5  0805               	movf	5,w	;volatile
  3481  04D6  0531               	andwf	INIT@One,w
  3482  04D7  1903               	btfsc	3,2
  3483  04D8  2CDB               	goto	u3310
  3484  04D9  3001               	movlw	1
  3485  04DA  2CDC               	goto	u3320
  3486  04DB                     u3310:	
  3487  04DB  3000               	movlw	0
  3488  04DC                     u3320:	
  3489  04DC  00B0               	movwf	INIT@b
  3490                           
  3491                           ;prog.c: 232: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3492  04DD  3095               	movlw	149
  3493  04DE  00AD               	movwf	??_INIT
  3494  04DF                     u4677:	
  3495  04DF  0BAD               	decfsz	??_INIT,f
  3496  04E0  2CDF               	goto	u4677
  3497  04E1  2CE2               	nop2	;nop
  3498                           
  3499                           ;prog.c: 234: return !b;
  3500  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3501  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  3502  04E4  0830               	movf	INIT@b,w
  3503  04E5  1903               	btfsc	3,2
  3504  04E6  3401               	retlw	1
  3505  04E7  3400               	retlw	0
  3506  04E8                     __end_of_INIT:	
  3507                           
  3508                           	psect	text19
  3509  0686                     __ptext19:	
  3510 ;; *************** function _CellToInd *****************
  3511 ;; Defined at:
  3512 ;;		line 580 in file "prog.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  cell            1    wreg     unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  cell            1   22[BANK0 ] unsigned char 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 300/100
  3523 ;;		On exit  : 300/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3526 ;;      Params:         0       0       0       0
  3527 ;;      Locals:         0       1       0       0
  3528 ;;      Temps:          0       0       0       0
  3529 ;;      Totals:         0       1       0       0
  3530 ;;Total ram usage:        1 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    4
  3533 ;; This function calls:
  3534 ;;		___lbdiv
  3535 ;;		___lbmod
  3536 ;;		_clrInd
  3537 ;;		_refreshInd
  3538 ;;		_setDigit
  3539 ;; This function is called by:
  3540 ;;		_EditAddressMemory
  3541 ;;		_main
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function _CellToInd
  3547  0686                     _CellToInd:	
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3551                           ;CellToInd@cell stored from wreg
  3552  0686  1283               	bcf	3,5	;RP0=0, select bank0
  3553  0687  00B6               	movwf	CellToInd@cell
  3554                           
  3555                           ;prog.c: 581: clrInd();
  3556  0688  2794               	fcall	_clrInd
  3557  0689  300A               	movlw	10
  3558                           
  3559                           ;prog.c: 582: cell++;
  3560  068A  0AB6               	incf	CellToInd@cell,f
  3561                           
  3562                           ;prog.c: 584: if (cell > 9) {
  3563  068B  0236               	subwf	CellToInd@cell,w
  3564  068C  1C03               	skipc
  3565  068D  2E9C               	goto	l3503
  3566                           
  3567                           ;prog.c: 585: setDigit(3, cell / 10);
  3568  068E  300A               	movlw	10
  3569  068F  00AD               	movwf	___lbdiv@divisor
  3570  0690  0836               	movf	CellToInd@cell,w
  3571  0691  26A1               	fcall	___lbdiv
  3572  0692  00B2               	movwf	setDigit@data
  3573  0693  3003               	movlw	3
  3574  0694  2726               	fcall	_setDigit
  3575                           
  3576                           ;prog.c: 586: setDigit(2, cell % 10);
  3577  0695  300A               	movlw	10
  3578  0696  00AD               	movwf	___lbmod@divisor
  3579  0697  0836               	movf	CellToInd@cell,w
  3580  0698  264E               	fcall	___lbmod
  3581  0699  00B2               	movwf	setDigit@data
  3582  069A  3002               	movlw	2
  3583  069B  2E9F               	goto	L8
  3584  069C                     l3503:	
  3585                           ;prog.c: 587: } else {
  3586                           
  3587                           
  3588                           ;prog.c: 588: setDigit(3, cell);
  3589  069C  0836               	movf	CellToInd@cell,w
  3590  069D  00B2               	movwf	setDigit@data
  3591  069E  3003               	movlw	3
  3592  069F                     L8:	
  3593  069F  2726               	fcall	_setDigit
  3594                           
  3595                           ;prog.c: 589: }
  3596                           ;prog.c: 591: refreshInd();
  3597  06A0  2F86               	ljmp	l3271
  3598  06A1                     __end_of_CellToInd:	
  3599                           
  3600                           	psect	text20
  3601  0726                     __ptext20:	
  3602 ;; *************** function _setDigit *****************
  3603 ;; Defined at:
  3604 ;;		line 104 in file "prog.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  a               1    wreg     unsigned char 
  3607 ;;  data            1   18[BANK0 ] unsigned char 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  a               1   21[BANK0 ] unsigned char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      void 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 300/0
  3616 ;;		On exit  : B00/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3619 ;;      Params:         0       1       0       0
  3620 ;;      Locals:         0       1       0       0
  3621 ;;      Temps:          0       2       0       0
  3622 ;;      Totals:         0       4       0       0
  3623 ;;Total ram usage:        4 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    3
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_ShowError
  3630 ;;		_indData
  3631 ;;		_CellToInd
  3632 ;;		_main
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _setDigit
  3638  0726                     _setDigit:	
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3642                           ;setDigit@a stored from wreg
  3643  0726  00B5               	movwf	setDigit@a
  3644                           
  3645                           ;prog.c: 105: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3646  0727  303F               	movlw	63
  3647  0728  0532               	andwf	setDigit@data,w
  3648  0729  00B3               	movwf	??_setDigit
  3649  072A  0835               	movf	setDigit@a,w
  3650  072B  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3651  072C  0084               	movwf	4
  3652  072D  1383               	bcf	3,7	;select IRP bank0
  3653  072E  0800               	movf	0,w
  3654  072F  39C0               	andlw	192
  3655  0730  0433               	iorwf	??_setDigit,w
  3656  0731  00B4               	movwf	??_setDigit+1
  3657  0732  0835               	movf	setDigit@a,w
  3658  0733  3E4C               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3659  0734  0084               	movwf	4
  3660  0735  0834               	movf	??_setDigit+1,w
  3661  0736  0080               	movwf	0
  3662  0737  0008               	return
  3663  0738                     __end_of_setDigit:	
  3664                           
  3665                           	psect	text21
  3666  0786                     __ptext21:	
  3667 ;; *************** function _refreshInd *****************
  3668 ;; Defined at:
  3669 ;;		line 112 in file "prog.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;		None
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;		None
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg
  3678 ;; Tracked objects:
  3679 ;;		On entry : 200/0
  3680 ;;		On exit  : 300/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3683 ;;      Params:         0       0       0       0
  3684 ;;      Locals:         0       0       0       0
  3685 ;;      Temps:          0       0       0       0
  3686 ;;      Totals:         0       0       0       0
  3687 ;;Total ram usage:        0 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    3
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_ShowError
  3694 ;;		_CellToInd
  3695 ;;		_EditAddressMemory
  3696 ;;		_main
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           
  3701                           ;psect for function _refreshInd
  3702  0786                     _refreshInd:	
  3703  0786                     l3271:	
  3704                           ;incstack = 0
  3705                           ; Regs used in _refreshInd: [wreg]
  3706                           
  3707                           
  3708                           ;prog.c: 113: digits[0] = digits_0[0];
  3709  0786  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0787  084D               	movf	_digits_0,w	;volatile
  3711  0788  00CA               	movwf	_digits	;volatile
  3712                           
  3713                           ;prog.c: 114: digits[1] = digits_0[1];
  3714  0789  084E               	movf	_digits_0+1,w	;volatile
  3715  078A  00CB               	movwf	_digits+1	;volatile
  3716                           
  3717                           ;prog.c: 115: digits[2] = digits_0[2];
  3718  078B  084F               	movf	_digits_0+2,w	;volatile
  3719  078C  00CC               	movwf	_digits+2	;volatile
  3720  078D  0008               	return
  3721  078E                     __end_of_refreshInd:	
  3722                           
  3723                           	psect	text22
  3724  0794                     __ptext22:	
  3725 ;; *************** function _clrInd *****************
  3726 ;; Defined at:
  3727 ;;		line 118 in file "prog.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg
  3736 ;; Tracked objects:
  3737 ;;		On entry : 200/0
  3738 ;;		On exit  : 300/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3741 ;;      Params:         0       0       0       0
  3742 ;;      Locals:         0       0       0       0
  3743 ;;      Temps:          0       0       0       0
  3744 ;;      Totals:         0       0       0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    3
  3748 ;; This function calls:
  3749 ;;		Nothing
  3750 ;; This function is called by:
  3751 ;;		_ShowError
  3752 ;;		_CellToInd
  3753 ;;		_EditAddressMemory
  3754 ;;		_main
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           
  3759                           ;psect for function _clrInd
  3760  0794                     _clrInd:	
  3761                           
  3762                           ;prog.c: 119: digits_0[0] = 34;
  3763                           
  3764                           ;incstack = 0
  3765                           ; Regs used in _clrInd: [wreg]
  3766  0794  3022               	movlw	34
  3767  0795  1283               	bcf	3,5	;RP0=0, select bank0
  3768  0796  00CD               	movwf	_digits_0	;volatile
  3769                           
  3770                           ;prog.c: 120: digits_0[1] = 34;
  3771  0797  00CE               	movwf	_digits_0+1	;volatile
  3772                           
  3773                           ;prog.c: 121: digits_0[2] = 34;
  3774  0798  00CF               	movwf	_digits_0+2	;volatile
  3775  0799  0008               	return
  3776  079A                     __end_of_clrInd:	
  3777                           
  3778                           	psect	text23
  3779  064E                     __ptext23:	
  3780 ;; *************** function ___lbmod *****************
  3781 ;; Defined at:
  3782 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  dividend        1    wreg     unsigned char 
  3785 ;;  divisor         1   13[BANK0 ] unsigned char 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  dividend        1   15[BANK0 ] unsigned char 
  3788 ;;  rem             1   17[BANK0 ] unsigned char 
  3789 ;;  counter         1   16[BANK0 ] unsigned char 
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      unsigned char 
  3792 ;; Registers used:
  3793 ;;		wreg, status,2, status,0
  3794 ;; Tracked objects:
  3795 ;;		On entry : 300/0
  3796 ;;		On exit  : 300/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3799 ;;      Params:         0       1       0       0
  3800 ;;      Locals:         0       3       0       0
  3801 ;;      Temps:          0       1       0       0
  3802 ;;      Totals:         0       5       0       0
  3803 ;;Total ram usage:        5 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    3
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_indData
  3810 ;;		_CellToInd
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           
  3815                           ;psect for function ___lbmod
  3816  064E                     ___lbmod:	
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3820                           ;___lbmod@dividend stored from wreg
  3821  064E  00AF               	movwf	___lbmod@dividend
  3822  064F  3008               	movlw	8
  3823  0650  00B0               	movwf	___lbmod@counter
  3824  0651  01B1               	clrf	___lbmod@rem
  3825  0652                     l3323:	
  3826  0652  082F               	movf	___lbmod@dividend,w
  3827  0653  00AE               	movwf	??___lbmod
  3828  0654  3007               	movlw	7
  3829  0655  1003               	clrc
  3830  0656                     L9:	
  3831  0656  0CAE               	rrf	??___lbmod,f
  3832  0657  3EFF               	addlw	-1
  3833  0658  1003               	clrc
  3834  0659  1D03               	skipz
  3835  065A  2E56               	goto	L9
  3836  065B  0D31               	rlf	___lbmod@rem,w
  3837  065C  042E               	iorwf	??___lbmod,w
  3838  065D  00B1               	movwf	___lbmod@rem
  3839  065E  1003               	clrc
  3840  065F  0DAF               	rlf	___lbmod@dividend,f
  3841  0660  082D               	movf	___lbmod@divisor,w
  3842  0661  0231               	subwf	___lbmod@rem,w
  3843  0662  1C03               	skipc
  3844  0663  2E66               	goto	l3331
  3845  0664  082D               	movf	___lbmod@divisor,w
  3846  0665  02B1               	subwf	___lbmod@rem,f
  3847  0666                     l3331:	
  3848  0666  0BB0               	decfsz	___lbmod@counter,f
  3849  0667  2E52               	goto	l3323
  3850  0668  0831               	movf	___lbmod@rem,w
  3851  0669  0008               	return
  3852  066A                     __end_of___lbmod:	
  3853                           
  3854                           	psect	text24
  3855  06A1                     __ptext24:	
  3856 ;; *************** function ___lbdiv *****************
  3857 ;; Defined at:
  3858 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  dividend        1    wreg     unsigned char 
  3861 ;;  divisor         1   13[BANK0 ] unsigned char 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  dividend        1   14[BANK0 ] unsigned char 
  3864 ;;  quotient        1   16[BANK0 ] unsigned char 
  3865 ;;  counter         1   15[BANK0 ] unsigned char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      unsigned char 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0
  3870 ;; Tracked objects:
  3871 ;;		On entry : 300/0
  3872 ;;		On exit  : 300/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3875 ;;      Params:         0       1       0       0
  3876 ;;      Locals:         0       3       0       0
  3877 ;;      Temps:          0       0       0       0
  3878 ;;      Totals:         0       4       0       0
  3879 ;;Total ram usage:        4 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    3
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_indData
  3886 ;;		_CellToInd
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function ___lbdiv
  3892  06A1                     ___lbdiv:	
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3896                           ;___lbdiv@dividend stored from wreg
  3897  06A1  00AE               	movwf	___lbdiv@dividend
  3898  06A2  01B0               	clrf	___lbdiv@quotient
  3899  06A3  082D               	movf	___lbdiv@divisor,w
  3900  06A4  1903               	btfsc	3,2
  3901  06A5  2EBA               	goto	l3315
  3902  06A6  01AF               	clrf	___lbdiv@counter
  3903  06A7                     l3301:	
  3904  06A7  0AAF               	incf	___lbdiv@counter,f
  3905  06A8  1BAD               	btfsc	___lbdiv@divisor,7
  3906  06A9  2EAD               	goto	l725
  3907  06AA  1003               	clrc
  3908  06AB  0DAD               	rlf	___lbdiv@divisor,f
  3909  06AC  2EA7               	goto	l3301
  3910  06AD                     l725:	
  3911  06AD  1003               	clrc
  3912  06AE  0DB0               	rlf	___lbdiv@quotient,f
  3913  06AF  082D               	movf	___lbdiv@divisor,w
  3914  06B0  022E               	subwf	___lbdiv@dividend,w
  3915  06B1  1C03               	skipc
  3916  06B2  2EB7               	goto	L10
  3917  06B3  082D               	movf	___lbdiv@divisor,w
  3918  06B4  02AE               	subwf	___lbdiv@dividend,f
  3919  06B5  1430               	bsf	___lbdiv@quotient,0
  3920  06B6  1003               	clrc
  3921  06B7                     L10:	
  3922  06B7  0CAD               	rrf	___lbdiv@divisor,f
  3923  06B8  0BAF               	decfsz	___lbdiv@counter,f
  3924  06B9  2EAD               	goto	l725
  3925  06BA                     l3315:	
  3926  06BA  0830               	movf	___lbdiv@quotient,w
  3927  06BB  0008               	return
  3928  06BC                     __end_of___lbdiv:	
  3929                           
  3930                           	psect	text25
  3931  031D                     __ptext25:	
  3932 ;; *************** function _F *****************
  3933 ;; Defined at:
  3934 ;;		line 428 in file "prog.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  CurrentKeysS    1   12[BANK0 ] unsigned char 
  3939 ;;  dig             1   11[BANK0 ] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 300/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       0       0       0
  3950 ;;      Locals:         0       2       0       0
  3951 ;;      Temps:          0       5       0       0
  3952 ;;      Totals:         0       7       0       0
  3953 ;;Total ram usage:        7 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    2
  3956 ;; This function calls:
  3957 ;;		_convDig
  3958 ;;		_get_temp_Async
  3959 ;; This function is called by:
  3960 ;;		Interrupt level 1
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           
  3965                           ;psect for function _F
  3966  031D                     _F:	
  3967                           
  3968                           ;prog.c: 429: if (T0IF) {
  3969  031D  1D0B               	btfss	11,2	;volatile
  3970  031E  2BBD               	goto	i1l278
  3971                           
  3972                           ;prog.c: 430: static unsigned char DigitNumber = 0;
  3973                           ;prog.c: 432: T0IF = 0;
  3974  031F  110B               	bcf	11,2	;volatile
  3975                           
  3976                           ;prog.c: 433: TMR0 += TMR0_VALUE;
  3977  0320  30EB               	movlw	235
  3978  0321  0781               	addwf	1,f	;volatile
  3979                           
  3980                           ;prog.c: 435: if (DigitNumber > 2) {
  3981  0322  3003               	movlw	3
  3982  0323  0255               	subwf	F@DigitNumber,w
  3983  0324  1803               	btfsc	3,0
  3984                           
  3985                           ;prog.c: 436: DigitNumber = 0;
  3986  0325  01D5               	clrf	F@DigitNumber
  3987                           
  3988                           ;prog.c: 437: }
  3989                           ;prog.c: 438: unsigned char dig = digits[DigitNumber];
  3990  0326  0855               	movf	F@DigitNumber,w
  3991  0327  3E4A               	addlw	(low (_digits| 0))& (0+255)
  3992  0328  0084               	movwf	4
  3993  0329  1383               	bcf	3,7	;select IRP bank0
  3994  032A  0800               	movf	0,w
  3995  032B  00AB               	movwf	F@dig
  3996                           
  3997                           ;prog.c: 439: digitemp = convDig(0b00111111 & dig);
  3998  032C  393F               	andlw	63
  3999  032D  266A               	fcall	_convDig
  4000  032E  00D9               	movwf	_digitemp
  4001                           
  4002                           ;prog.c: 445: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  4003  032F  1F2B               	btfss	F@dig,6
  4004  0330  2B33               	goto	i1l234
  4005  0331  1559               	bsf	_digitemp,2
  4006  0332  2B34               	goto	i1l3941
  4007  0333                     i1l234:	
  4008  0333  1159               	bcf	_digitemp,2
  4009  0334                     i1l3941:	
  4010                           
  4011                           ;prog.c: 447: PORTB = 0;
  4012  0334  0186               	clrf	6	;volatile
  4013                           
  4014                           ;prog.c: 448: PORTA = (PORTA & 0b00110100) | PortAData[DigitNumber++];
  4015  0335  0855               	movf	F@DigitNumber,w
  4016  0336  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  4017  0337  0084               	movwf	4
  4018  0338  2775               	fcall	stringdir
  4019  0339  00A6               	movwf	??_F
  4020  033A  0805               	movf	5,w	;volatile
  4021  033B  3934               	andlw	52
  4022  033C  0426               	iorwf	??_F,w
  4023  033D  0085               	movwf	5	;volatile
  4024  033E  0AD5               	incf	F@DigitNumber,f
  4025                           
  4026                           ;prog.c: 450: PORTB = digitemp;
  4027  033F  0859               	movf	_digitemp,w
  4028  0340  0086               	movwf	6	;volatile
  4029                           
  4030                           ;prog.c: 452: endInterrupt = 1;
  4031  0341  14E0               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  4032                           
  4033                           ;prog.c: 453: if (powerOnInterval == 0) {
  4034  0342  085D               	movf	_powerOnInterval,w
  4035  0343  045E               	iorwf	_powerOnInterval+1,w
  4036  0344  1D03               	btfss	3,2
  4037  0345  2B4C               	goto	i1l3957
  4038                           
  4039                           ;prog.c: 454: if (PowerBlocked == 0) {
  4040  0346  0858               	movf	_PowerBlocked,w
  4041  0347  1D03               	btfss	3,2
  4042  0348  2B50               	goto	i1l3959
  4043                           
  4044                           ;prog.c: 455: TRISA4 = 1;
  4045  0349  1683               	bsf	3,5	;RP0=1, select bank1
  4046  034A  1605               	bsf	5,4	;volatile
  4047  034B  2B50               	goto	i1l3959
  4048  034C                     i1l3957:	
  4049                           
  4050                           ;prog.c: 458: powerOnInterval--;
  4051  034C  30FF               	movlw	-1
  4052  034D  07DD               	addwf	_powerOnInterval,f
  4053  034E  1C03               	skipc
  4054  034F  03DE               	decf	_powerOnInterval+1,f
  4055  0350                     i1l3959:	
  4056                           
  4057                           ;prog.c: 459: }
  4058                           ;prog.c: 461: static unsigned int KeyTimeCounter = 0;
  4059                           ;prog.c: 462: static unsigned char LastKeysState = 0;
  4060                           ;prog.c: 463: static unsigned char long_press = 0;
  4061                           ;prog.c: 464: static unsigned char ButtonPressTimeIn1 = 0;
  4062                           ;prog.c: 465: static unsigned char ButtonPressTimeIn2 = 0;
  4063                           ;prog.c: 466: static unsigned char ButtonPressTimeOut = 0;
  4064                           ;prog.c: 467: unsigned char CurrentKeysState = 0;
  4065  0350  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0351  01AC               	clrf	F@CurrentKeysState
  4067                           
  4068                           ;prog.c: 469: if (ButtonPressTimeOut > 0) {
  4069  0352  0854               	movf	F@ButtonPressTimeOut,w
  4070  0353  1903               	btfsc	3,2
  4071  0354  2B57               	goto	i1l3965
  4072                           
  4073                           ;prog.c: 470: ButtonPressTimeOut--;
  4074  0355  03D4               	decf	F@ButtonPressTimeOut,f
  4075                           
  4076                           ;prog.c: 471: } else {
  4077  0356  2BBC               	goto	i1l4045
  4078  0357                     i1l3965:	
  4079                           
  4080                           ;prog.c: 473: KeyCode = 0;
  4081  0357  01DF               	clrf	_KeyCode	;volatile
  4082                           
  4083                           ;prog.c: 475: if (RA5) {
  4084  0358  1E85               	btfss	5,5	;volatile
  4085  0359  2B5E               	goto	i1l3973
  4086  035A  3019               	movlw	25
  4087                           
  4088                           ;prog.c: 476: CurrentKeysState = CurrentKeysState | 0b00000001;
  4089  035B  142C               	bsf	F@CurrentKeysState,0
  4090                           
  4091                           ;prog.c: 477: ButtonPressTimeIn1 = 25;
  4092  035C  00D2               	movwf	F@ButtonPressTimeIn1
  4093                           
  4094                           ;prog.c: 478: } else {
  4095  035D  2B64               	goto	i1l3979
  4096  035E                     i1l3973:	
  4097                           
  4098                           ;prog.c: 479: if (ButtonPressTimeIn1 == 0) {
  4099  035E  0852               	movf	F@ButtonPressTimeIn1,w
  4100  035F  1D03               	btfss	3,2
  4101  0360  2B63               	goto	i1l3977
  4102                           
  4103                           ;prog.c: 480: CurrentKeysState = CurrentKeysState & 0b11111110;
  4104  0361  102C               	bcf	F@CurrentKeysState,0
  4105                           
  4106                           ;prog.c: 481: } else {
  4107  0362  2B64               	goto	i1l3979
  4108  0363                     i1l3977:	
  4109                           
  4110                           ;prog.c: 482: ButtonPressTimeIn1--;
  4111  0363  03D2               	decf	F@ButtonPressTimeIn1,f
  4112  0364                     i1l3979:	
  4113                           
  4114                           ;prog.c: 483: }
  4115                           ;prog.c: 484: }
  4116                           ;prog.c: 486: if (RA2) {
  4117  0364  1D05               	btfss	5,2	;volatile
  4118  0365  2B6A               	goto	i1l3985
  4119  0366  3019               	movlw	25
  4120                           
  4121                           ;prog.c: 487: CurrentKeysState = CurrentKeysState | 0b00000010;
  4122  0367  14AC               	bsf	F@CurrentKeysState,1
  4123                           
  4124                           ;prog.c: 488: ButtonPressTimeIn2 = 25;
  4125  0368  00D3               	movwf	F@ButtonPressTimeIn2
  4126                           
  4127                           ;prog.c: 489: } else {
  4128  0369  2B70               	goto	i1l3991
  4129  036A                     i1l3985:	
  4130                           
  4131                           ;prog.c: 490: if (ButtonPressTimeIn2 == 0) {
  4132  036A  0853               	movf	F@ButtonPressTimeIn2,w
  4133  036B  1D03               	btfss	3,2
  4134  036C  2B6F               	goto	i1l3989
  4135                           
  4136                           ;prog.c: 491: CurrentKeysState = CurrentKeysState & 0b11111101;
  4137  036D  10AC               	bcf	F@CurrentKeysState,1
  4138                           
  4139                           ;prog.c: 492: } else {
  4140  036E  2B70               	goto	i1l3991
  4141  036F                     i1l3989:	
  4142                           
  4143                           ;prog.c: 493: ButtonPressTimeIn2--;
  4144  036F  03D3               	decf	F@ButtonPressTimeIn2,f
  4145  0370                     i1l3991:	
  4146                           
  4147                           ;prog.c: 494: }
  4148                           ;prog.c: 495: }
  4149                           ;prog.c: 497: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4150  0370  0852               	movf	F@ButtonPressTimeIn1,w
  4151  0371  1903               	btfsc	3,2
  4152  0372  2B77               	goto	i1l3995
  4153  0373  3019               	movlw	25
  4154  0374  0652               	xorwf	F@ButtonPressTimeIn1,w
  4155  0375  1D03               	btfss	3,2
  4156  0376  2BBC               	goto	i1l4045
  4157  0377                     i1l3995:	
  4158  0377  0853               	movf	F@ButtonPressTimeIn2,w
  4159  0378  1903               	btfsc	3,2
  4160  0379  2B7E               	goto	i1l3999
  4161  037A  3019               	movlw	25
  4162  037B  0653               	xorwf	F@ButtonPressTimeIn2,w
  4163  037C  1D03               	btfss	3,2
  4164  037D  2BBC               	goto	i1l4045
  4165  037E                     i1l3999:	
  4166                           
  4167                           ;prog.c: 498: if (CurrentKeysState > 0) {
  4168  037E  082C               	movf	F@CurrentKeysState,w
  4169  037F  1903               	btfsc	3,2
  4170  0380  2BA8               	goto	i1l4025
  4171                           
  4172                           ;prog.c: 499: if (LastKeysState != CurrentKeysState) {
  4173  0381  0856               	movf	F@LastKeysState,w
  4174  0382  062C               	xorwf	F@CurrentKeysState,w
  4175  0383  1903               	skipnz
  4176  0384  2B8B               	goto	i1l4007
  4177                           
  4178                           ;prog.c: 500: KeyTimeCounter = 0;
  4179  0385  01D0               	clrf	F@KeyTimeCounter
  4180  0386  01D1               	clrf	F@KeyTimeCounter+1
  4181                           
  4182                           ;prog.c: 501: long_press = 0;
  4183  0387  01D7               	clrf	F@long_press
  4184                           
  4185                           ;prog.c: 502: LastKeysState = CurrentKeysState;
  4186  0388  082C               	movf	F@CurrentKeysState,w
  4187  0389  00D6               	movwf	F@LastKeysState
  4188                           
  4189                           ;prog.c: 503: } else if (KeyTimeCounter < 150) {
  4190  038A  2BA0               	goto	i1l4017
  4191  038B                     i1l4007:	
  4192  038B  3000               	movlw	0
  4193  038C  0251               	subwf	F@KeyTimeCounter+1,w
  4194  038D  3096               	movlw	150
  4195  038E  1903               	skipnz
  4196  038F  0250               	subwf	F@KeyTimeCounter,w
  4197  0390  1803               	skipnc
  4198  0391  2B96               	goto	i1l4011
  4199                           
  4200                           ;prog.c: 504: KeyTimeCounter++;
  4201  0392  0AD0               	incf	F@KeyTimeCounter,f
  4202  0393  1903               	skipnz
  4203  0394  0AD1               	incf	F@KeyTimeCounter+1,f
  4204                           
  4205                           ;prog.c: 505: } else if (KeyTimeCounter == 150 && !long_press) {
  4206  0395  2BA0               	goto	i1l4017
  4207  0396                     i1l4011:	
  4208  0396  3096               	movlw	150
  4209  0397  0650               	xorwf	F@KeyTimeCounter,w
  4210  0398  0451               	iorwf	F@KeyTimeCounter+1,w
  4211  0399  1D03               	btfss	3,2
  4212  039A  2BA0               	goto	i1l4017
  4213  039B  0857               	movf	F@long_press,w
  4214  039C  1D03               	btfss	3,2
  4215  039D  2BA0               	goto	i1l4017
  4216                           
  4217                           ;prog.c: 506: long_press = 1;
  4218  039E  01D7               	clrf	F@long_press
  4219  039F  0AD7               	incf	F@long_press,f
  4220  03A0                     i1l4017:	
  4221                           
  4222                           ;prog.c: 507: }
  4223                           ;prog.c: 509: if (long_press == 1) {
  4224  03A0  0B57               	decfsz	F@long_press,w
  4225  03A1  2BBC               	goto	i1l4045
  4226                           
  4227                           ;prog.c: 510: KeyCode = 30 + LastKeysState + 3;
  4228  03A2  0856               	movf	F@LastKeysState,w
  4229  03A3  3E21               	addlw	33
  4230  03A4  00DF               	movwf	_KeyCode	;volatile
  4231                           
  4232                           ;prog.c: 511: long_press = 2;
  4233  03A5  3002               	movlw	2
  4234  03A6  00D7               	movwf	F@long_press
  4235  03A7  2BBA               	goto	i1l4023
  4236  03A8                     i1l4025:	
  4237  03A8  0856               	movf	F@LastKeysState,w
  4238  03A9  1903               	btfsc	3,2
  4239  03AA  2BB2               	goto	i1l4039
  4240  03AB  0857               	movf	F@long_press,w
  4241  03AC  1D03               	btfss	3,2
  4242  03AD  2BB2               	goto	i1l4039
  4243                           
  4244                           ;prog.c: 516: KeyCode = 30 + LastKeysState;
  4245  03AE  0856               	movf	F@LastKeysState,w
  4246  03AF  3E1E               	addlw	30
  4247  03B0  00DF               	movwf	_KeyCode	;volatile
  4248  03B1  2BB6               	goto	i1l4041
  4249  03B2                     i1l4039:	
  4250                           ;prog.c: 519: long_press = 0;
  4251                           
  4252                           ;prog.c: 518: KeyTimeCounter = 0;
  4253                           
  4254                           ;prog.c: 517: LastKeysState = 0;
  4255                           
  4256  03B2  3002               	movlw	2
  4257  03B3  0657               	xorwf	F@long_press,w
  4258  03B4  1D03               	btfss	3,2
  4259  03B5  2BBC               	goto	i1l4045
  4260  03B6                     i1l4041:	
  4261                           
  4262                           ;prog.c: 523: LastKeysState = 0;
  4263  03B6  01D6               	clrf	F@LastKeysState
  4264                           
  4265                           ;prog.c: 524: KeyTimeCounter = 0;
  4266  03B7  01D0               	clrf	F@KeyTimeCounter
  4267  03B8  01D1               	clrf	F@KeyTimeCounter+1
  4268                           
  4269                           ;prog.c: 525: long_press = 0;
  4270  03B9  01D7               	clrf	F@long_press
  4271  03BA                     i1l4023:	
  4272                           
  4273                           ;prog.c: 512: ButtonPressTimeOut = 40;
  4274  03BA  3028               	movlw	40
  4275  03BB  00D4               	movwf	F@ButtonPressTimeOut
  4276  03BC                     i1l4045:	
  4277                           
  4278                           ;prog.c: 527: }
  4279                           ;prog.c: 528: }
  4280                           ;prog.c: 529: }
  4281                           ;prog.c: 531: get_temp_Async();
  4282  03BC  215D               	fcall	_get_temp_Async
  4283  03BD                     i1l278:	
  4284  03BD  082A               	movf	??_F+4,w
  4285  03BE  00FF               	movwf	127
  4286  03BF  0829               	movf	??_F+3,w
  4287  03C0  008A               	movwf	10
  4288  03C1  0828               	movf	??_F+2,w
  4289  03C2  0084               	movwf	4
  4290  03C3  0E27               	swapf	(??_F+1)^0,w
  4291  03C4  0083               	movwf	3
  4292  03C5  0EFE               	swapf	126,f
  4293  03C6  0E7E               	swapf	126,w
  4294  03C7  0009               	retfie
  4295  03C8                     __end_of_F:	
  4296                           
  4297                           	psect	intentry
  4298  0004                     __pintentry:	
  4299                           ;incstack = 0
  4300                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4301                           
  4302  0004                     interrupt_function:	
  4303  007E                     saved_w	set	btemp
  4304  0004  00FE               	movwf	btemp
  4305  0005  0E03               	swapf	3,w
  4306  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4307  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4308  0008  00A7               	movwf	??_F+1
  4309  0009  0804               	movf	4,w
  4310  000A  00A8               	movwf	??_F+2
  4311  000B  080A               	movf	10,w
  4312  000C  00A9               	movwf	??_F+3
  4313  000D  087F               	movf	btemp+1,w
  4314  000E  00AA               	movwf	??_F+4
  4315  000F  2B1D               	ljmp	_F
  4316                           
  4317                           	psect	text26
  4318  015D                     __ptext26:	
  4319 ;; *************** function _get_temp_Async *****************
  4320 ;; Defined at:
  4321 ;;		line 294 in file "prog.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  temp2           1    4[BANK0 ] unsigned char 
  4326 ;;  temp1           1    3[BANK0 ] unsigned char 
  4327 ;;  i               1    2[BANK0 ] unsigned char 
  4328 ;;  line            1    5[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 300/0
  4335 ;;		On exit  : 300/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4338 ;;      Params:         0       0       0       0
  4339 ;;      Locals:         0       4       0       0
  4340 ;;      Temps:          0       2       0       0
  4341 ;;      Totals:         0       6       0       0
  4342 ;;Total ram usage:        6 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    1
  4345 ;; This function calls:
  4346 ;;		___awdiv
  4347 ;;		___wmul
  4348 ;;		i1_INIT
  4349 ;;		i1_RX
  4350 ;;		i1_TX
  4351 ;;		i1_calc_crc
  4352 ;; This function is called by:
  4353 ;;		_F
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _get_temp_Async
  4359  015D                     _get_temp_Async:	
  4360                           
  4361                           ;prog.c: 296: if (!getTemp_flags.ActiveProcess) {
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4365  015D  1C48               	btfss	_getTemp_flags+4,0
  4366  015E  0008               	return
  4367                           
  4368                           ;prog.c: 298: }
  4369                           ;prog.c: 300: unsigned char line = getTemp_flags.Line;
  4370                           
  4371                           ;prog.c: 297: return;
  4372  015F  0849               	movf	_getTemp_flags+5,w
  4373  0160  00A5               	movwf	get_temp_Async@line
  4374                           
  4375                           ;prog.c: 303: if (getTemp_flags.Init) {
  4376  0161  1C44               	btfss	_getTemp_flags,0
  4377  0162  2972               	goto	i1l171
  4378                           
  4379                           ;prog.c: 304: if (INIT(line)) {
  4380  0163  0825               	movf	get_temp_Async@line,w
  4381  0164  251C               	fcall	i1_INIT
  4382  0165  3A00               	xorlw	0
  4383                           
  4384                           ;prog.c: 305: getTemp_flags.Init = 0;
  4385  0166  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0167  1303               	bcf	3,6	;RP1=0, select bank0
  4387  0168  1903               	skipnz
  4388  0169  296F               	goto	L11
  4389  016A  30C3               	movlw	-61
  4390  016B  1044               	bcf	_getTemp_flags,0
  4391                           
  4392                           ;prog.c: 307: getTemp_flags.Send_Address = 1;
  4393  016C  14C4               	bsf	_getTemp_flags,1
  4394                           
  4395                           ;prog.c: 308: getTemp_flags.CountAddressBytes = 0;
  4396  016D  05C4               	andwf	_getTemp_flags,f
  4397                           
  4398                           ;prog.c: 309: } else {
  4399  016E  0008               	return
  4400  016F                     L11:	
  4401                           ;prog.c: 310: getTemp_flags.ActiveProcess = 0;
  4402                           
  4403  016F  1048               	bcf	_getTemp_flags+4,0
  4404                           
  4405                           ;prog.c: 311: getTemp_flags.Error = 1;
  4406  0170  17C7               	bsf	_getTemp_flags+3,7
  4407  0171  0008               	return
  4408  0172                     i1l171:	
  4409                           
  4410                           ;prog.c: 315: if (getTemp_flags.Send_Address) {
  4411  0172  1CC4               	btfss	_getTemp_flags,1
  4412  0173  29B3               	goto	i1l175
  4413                           
  4414                           ;prog.c: 316: if (Broadcasting) {
  4415  0174  1C60               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4416  0175  2982               	goto	i1l3559
  4417                           
  4418                           ;prog.c: 317: TX(0xCC, line);
  4419  0176  0825               	movf	get_temp_Async@line,w
  4420  0177  00F0               	movwf	i1TX@line
  4421  0178  30CC               	movlw	204
  4422  0179  254D               	fcall	i1_TX
  4423                           
  4424                           ;prog.c: 318: getTemp_flags.CountAddressBytes = 1;
  4425  017A  1283               	bcf	3,5	;RP0=0, select bank0
  4426  017B  1303               	bcf	3,6	;RP1=0, select bank0
  4427  017C  0844               	movf	_getTemp_flags,w
  4428  017D  39C3               	andlw	-61
  4429  017E  3804               	iorlw	4
  4430  017F  00C4               	movwf	_getTemp_flags
  4431  0180                     i1l3557:	
  4432                           
  4433                           ;prog.c: 319: getTemp_flags.Send_Address = 0;
  4434  0180  10C4               	bcf	_getTemp_flags,1
  4435                           
  4436                           ;prog.c: 320: } else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
  4437  0181  0008               	return
  4438  0182                     i1l3559:	
  4439  0182  0C44               	rrf	_getTemp_flags,w
  4440  0183  00A0               	movwf	??_get_temp_Async
  4441  0184  0C20               	rrf	??_get_temp_Async,w
  4442  0185  390F               	andlw	15
  4443  0186  00A1               	movwf	??_get_temp_Async+1
  4444  0187  3008               	movlw	8
  4445  0188  0221               	subwf	??_get_temp_Async+1,w
  4446  0189  1803               	skipnc
  4447  018A  0008               	return
  4448                           
  4449                           ;prog.c: 321: if (getTemp_flags.CountAddressBytes == 0) {
  4450  018B  0C44               	rrf	_getTemp_flags,w
  4451  018C  00A0               	movwf	??_get_temp_Async
  4452  018D  0C20               	rrf	??_get_temp_Async,w
  4453  018E  390F               	andlw	15
  4454  018F  1D03               	skipz
  4455  0190  2995               	goto	i1l3565
  4456                           
  4457                           ;prog.c: 322: TX(0x55, line);
  4458  0191  0825               	movf	get_temp_Async@line,w
  4459  0192  00F0               	movwf	i1TX@line
  4460  0193  3055               	movlw	85
  4461  0194  254D               	fcall	i1_TX
  4462  0195                     i1l3565:	
  4463                           
  4464                           ;prog.c: 323: }
  4465                           ;prog.c: 324: TX(DS_Address[getTemp_flags.CountAddressBytes], line);
  4466  0195  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0196  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0197  0825               	movf	get_temp_Async@line,w
  4469  0198  00F0               	movwf	i1TX@line
  4470  0199  0C44               	rrf	_getTemp_flags,w
  4471  019A  00A0               	movwf	??_get_temp_Async
  4472  019B  0C20               	rrf	??_get_temp_Async,w
  4473  019C  390F               	andlw	15
  4474  019D  3EBF               	addlw	(low (_DS_Address| 0))& (0+255)
  4475  019E  0084               	movwf	4
  4476  019F  1383               	bcf	3,7	;select IRP bank1
  4477  01A0  0800               	movf	0,w
  4478  01A1  254D               	fcall	i1_TX
  4479                           
  4480                           ;prog.c: 325: getTemp_flags.CountAddressBytes++;
  4481  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4482  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4483  01A4  0C44               	rrf	_getTemp_flags,w
  4484  01A5  2257               	fcall	PL10	;call to abstracted procedure
  4485  01A6  0844               	movf	_getTemp_flags,w
  4486  01A7  0620               	xorwf	??_get_temp_Async,w
  4487  01A8  39C3               	andlw	-61
  4488  01A9  0620               	xorwf	??_get_temp_Async,w
  4489  01AA  00C4               	movwf	_getTemp_flags
  4490                           
  4491                           ;prog.c: 327: if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
  4492  01AB  0C44               	rrf	_getTemp_flags,w
  4493  01AC  00A0               	movwf	??_get_temp_Async
  4494  01AD  0C20               	rrf	??_get_temp_Async,w
  4495  01AE  390F               	andlw	15
  4496  01AF  3A08               	xorlw	8
  4497  01B0  1D03               	skipz
  4498  01B1  0008               	return
  4499  01B2  2980               	goto	i1l3557
  4500  01B3                     i1l175:	
  4501                           
  4502                           ;prog.c: 333: if (getTemp_flags.SendConvertTemp) {
  4503  01B3  1F44               	btfss	_getTemp_flags,6
  4504  01B4  29BD               	goto	i1l3577
  4505                           
  4506                           ;prog.c: 334: TX(0x44, line);
  4507  01B5  0825               	movf	get_temp_Async@line,w
  4508  01B6  00F0               	movwf	i1TX@line
  4509  01B7  3044               	movlw	68
  4510  01B8  254D               	fcall	i1_TX
  4511                           
  4512                           ;prog.c: 335: getTemp_flags.SendConvertTemp = 0;
  4513  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  4514  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  4515  01BB  1344               	bcf	_getTemp_flags,6
  4516                           
  4517                           ;prog.c: 337: } else
  4518  01BC  0008               	return
  4519  01BD                     i1l3577:	
  4520                           
  4521                           ;prog.c: 339: if (getTemp_flags.PauseValue > 0) {
  4522  01BD  0845               	movf	_getTemp_flags+1,w
  4523  01BE  0446               	iorwf	_getTemp_flags+2,w
  4524  01BF  1903               	btfsc	3,2
  4525  01C0  29CC               	goto	i1l184
  4526                           
  4527                           ;prog.c: 340: getTemp_flags.PauseValue--;
  4528  01C1  3001               	movlw	1
  4529  01C2  02C5               	subwf	_getTemp_flags+1,f
  4530  01C3  3000               	movlw	0
  4531  01C4  1C03               	skipc
  4532  01C5  03C6               	decf	_getTemp_flags+2,f
  4533  01C6  02C6               	subwf	_getTemp_flags+2,f
  4534                           
  4535                           ;prog.c: 341: if (getTemp_flags.PauseValue == 0) {
  4536  01C7  0845               	movf	_getTemp_flags+1,w
  4537  01C8  0446               	iorwf	_getTemp_flags+2,w
  4538  01C9  1903               	btfsc	3,2
  4539                           
  4540                           ;prog.c: 342: getTemp_flags.Init = 1;
  4541  01CA  1444               	bsf	_getTemp_flags,0
  4542  01CB  0008               	return
  4543  01CC                     i1l184:	
  4544                           
  4545                           ;prog.c: 346: if (getTemp_flags.SendGetTemp) {
  4546  01CC  1C47               	btfss	_getTemp_flags+3,0
  4547  01CD  29D6               	goto	i1l187
  4548                           
  4549                           ;prog.c: 347: TX(0xBE, line);
  4550  01CE  0825               	movf	get_temp_Async@line,w
  4551  01CF  00F0               	movwf	i1TX@line
  4552  01D0  30BE               	movlw	190
  4553  01D1  254D               	fcall	i1_TX
  4554                           
  4555                           ;prog.c: 348: getTemp_flags.SendGetTemp = 0;
  4556  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  4557  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  4558  01D4  1047               	bcf	_getTemp_flags+3,0
  4559                           
  4560                           ;prog.c: 349: } else
  4561  01D5  0008               	return
  4562  01D6                     i1l187:	
  4563                           
  4564                           ;prog.c: 351: if (getTemp_flags.ReadData) {
  4565  01D6  1CC7               	btfss	_getTemp_flags+3,1
  4566  01D7  2A4D               	goto	i1l189
  4567                           
  4568                           ;prog.c: 352: if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
  4569  01D8  224F               	fcall	PL6	;call to abstracted procedure
  4570  01D9  1803               	skipnc
  4571  01DA  0008               	return
  4572                           
  4573                           ;prog.c: 353: for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (
      +                          DS_ReadData); i++) {
  4574  01DB  01A2               	clrf	get_temp_Async@i
  4575  01DC  29F4               	goto	i1l3599
  4576  01DD                     i1l3601:	
  4577  01DD  224F               	fcall	PL6	;call to abstracted procedure
  4578  01DE  1803               	btfsc	3,0
  4579  01DF  29F8               	goto	i1l3603
  4580                           
  4581                           ;prog.c: 354: DS_ReadData[getTemp_flags.CountDataBytes] = RX(line);
  4582  01E0  0C47               	rrf	_getTemp_flags+3,w
  4583  01E1  00A0               	movwf	??_get_temp_Async
  4584  01E2  0C20               	rrf	??_get_temp_Async,w
  4585  01E3  390F               	andlw	15
  4586  01E4  3EB6               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4587  01E5  0084               	movwf	4
  4588  01E6  0825               	movf	get_temp_Async@line,w
  4589  01E7  25A7               	fcall	i1_RX
  4590  01E8  1383               	bcf	3,7	;select IRP bank1
  4591  01E9  0080               	movwf	0
  4592                           
  4593                           ;prog.c: 355: getTemp_flags.CountDataBytes++;
  4594  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  4595  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  4596  01EC  0C47               	rrf	_getTemp_flags+3,w
  4597  01ED  2257               	fcall	PL10	;call to abstracted procedure
  4598  01EE  0847               	movf	_getTemp_flags+3,w
  4599  01EF  0620               	xorwf	??_get_temp_Async,w
  4600  01F0  39C3               	andlw	-61
  4601  01F1  0620               	xorwf	??_get_temp_Async,w
  4602  01F2  00C7               	movwf	_getTemp_flags+3
  4603  01F3  0AA2               	incf	get_temp_Async@i,f
  4604  01F4                     i1l3599:	
  4605  01F4  3003               	movlw	3
  4606  01F5  0222               	subwf	get_temp_Async@i,w
  4607  01F6  1C03               	btfss	3,0
  4608  01F7  29DD               	goto	i1l3601
  4609  01F8                     i1l3603:	
  4610                           
  4611                           ;prog.c: 356: }
  4612                           ;prog.c: 357: if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
  4613  01F8  0C47               	rrf	_getTemp_flags+3,w
  4614  01F9  00A0               	movwf	??_get_temp_Async
  4615  01FA  0C20               	rrf	??_get_temp_Async,w
  4616  01FB  390F               	andlw	15
  4617  01FC  3A09               	xorlw	9
  4618  01FD  1D03               	skipz
  4619  01FE  0008               	return
  4620                           
  4621                           ;prog.c: 358: if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof 
      +                          (DS_ReadData) - 1)) {
  4622  01FF  3008               	movlw	8
  4623  0200  00F0               	movwf	i1calc_crc@len
  4624  0201  30B6               	movlw	(low (_DS_ReadData| 0))& (0+255)
  4625  0202  25CE               	fcall	i1_calc_crc
  4626  0203  1683               	bsf	3,5	;RP0=1, select bank1
  4627  0204  063E               	xorwf	(_DS_ReadData^(0+128)+8),w
  4628  0205  1903               	skipnz
  4629  0206  2A0A               	goto	i1l3609
  4630                           
  4631                           ;prog.c: 359: getTemp_flags.Error = 1;
  4632  0207  1283               	bcf	3,5	;RP0=0, select bank0
  4633  0208  17C7               	bsf	_getTemp_flags+3,7
  4634                           
  4635                           ;prog.c: 360: } else {
  4636  0209  2A49               	goto	i1l3637
  4637  020A                     i1l3609:	
  4638                           
  4639                           ;prog.c: 362: unsigned char temp1 = DS_ReadData[0];
  4640  020A  0836               	movf	_DS_ReadData^(0+128),w
  4641  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4642  020C  00A3               	movwf	get_temp_Async@temp1
  4643                           
  4644                           ;prog.c: 363: unsigned char temp2 = DS_ReadData[1];
  4645  020D  1683               	bsf	3,5	;RP0=1, select bank1
  4646  020E  0837               	movf	(_DS_ReadData^(0+128)+1),w
  4647  020F  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0210  00A4               	movwf	get_temp_Async@temp2
  4649                           
  4650                           ;prog.c: 365: temp_drob = temp1 & 0b00001111;
  4651  0211  0823               	movf	get_temp_Async@temp1,w
  4652  0212  00DB               	movwf	_temp_drob
  4653  0213  300F               	movlw	15
  4654  0214  05DB               	andwf	_temp_drob,f
  4655                           
  4656                           ;prog.c: 366: temp_drob = ((temp_drob * 6) + 2) / 10;
  4657  0215  300A               	movlw	10
  4658  0216  00F6               	movwf	___awdiv@divisor
  4659  0217  01F7               	clrf	___awdiv@divisor+1
  4660  0218  085B               	movf	_temp_drob,w
  4661  0219  00F0               	movwf	___wmul@multiplier
  4662  021A  3006               	movlw	6
  4663  021B  01F1               	clrf	___wmul@multiplier+1
  4664  021C  00F2               	movwf	___wmul@multiplicand
  4665  021D  01F3               	clrf	___wmul@multiplicand+1
  4666  021E  26BC               	fcall	___wmul
  4667  021F  0870               	movf	?___wmul,w
  4668  0220  3E02               	addlw	2
  4669  0221  00F8               	movwf	___awdiv@dividend
  4670  0222  0871               	movf	?___wmul+1,w
  4671  0223  1803               	skipnc
  4672  0224  3E01               	addlw	1
  4673  0225  3E00               	addlw	0
  4674  0226  00F9               	movwf	___awdiv@dividend+1
  4675  0227  246B               	fcall	___awdiv
  4676  0228  0876               	movf	?___awdiv,w
  4677  0229  00DB               	movwf	_temp_drob
  4678  022A  300F               	movlw	15
  4679                           
  4680                           ;prog.c: 367: temp1 >>= 4;
  4681  022B  0EA3               	swapf	get_temp_Async@temp1,f
  4682  022C  05A3               	andwf	get_temp_Async@temp1,f
  4683                           
  4684                           ;prog.c: 368: sign = temp2 & 0x80;
  4685  022D  0824               	movf	get_temp_Async@temp2,w
  4686  022E  00DA               	movwf	_sign
  4687  022F  3080               	movlw	128
  4688  0230  05DA               	andwf	_sign,f
  4689  0231  30F0               	movlw	240
  4690                           
  4691                           ;prog.c: 369: temp2 <<= 4;
  4692  0232  0EA4               	swapf	get_temp_Async@temp2,f
  4693  0233  05A4               	andwf	get_temp_Async@temp2,f
  4694                           
  4695                           ;prog.c: 370: temp2 &= 0b01110000;
  4696  0234  3070               	movlw	112
  4697  0235  05A4               	andwf	get_temp_Async@temp2,f
  4698                           
  4699                           ;prog.c: 371: temp2 |= temp1;
  4700  0236  0823               	movf	get_temp_Async@temp1,w
  4701  0237  04A4               	iorwf	get_temp_Async@temp2,f
  4702                           
  4703                           ;prog.c: 373: if (sign) {
  4704  0238  085A               	movf	_sign,w
  4705  0239  1903               	btfsc	3,2
  4706  023A  2A47               	goto	i1l3635
  4707                           
  4708                           ;prog.c: 374: temperature = 127 - temp2;
  4709  023B  0824               	movf	get_temp_Async@temp2,w
  4710  023C  3C7F               	sublw	127
  4711  023D  00DC               	movwf	_temperature
  4712                           
  4713                           ;prog.c: 375: temp_drob = 10 - temp_drob;
  4714  023E  085B               	movf	_temp_drob,w
  4715  023F  3C0A               	sublw	10
  4716  0240  00DB               	movwf	_temp_drob
  4717                           
  4718                           ;prog.c: 376: if (temp_drob == 10) {
  4719  0241  3A0A               	xorlw	10
  4720  0242  1D03               	btfss	3,2
  4721  0243  2A49               	goto	i1l3637
  4722                           
  4723                           ;prog.c: 377: temp_drob = 0;
  4724  0244  01DB               	clrf	_temp_drob
  4725                           
  4726                           ;prog.c: 378: temperature++;
  4727  0245  0ADC               	incf	_temperature,f
  4728  0246  2A49               	goto	i1l3637
  4729  0247                     i1l3635:	
  4730                           
  4731                           ;prog.c: 381: temperature = temp2;
  4732  0247  0824               	movf	get_temp_Async@temp2,w
  4733  0248  00DC               	movwf	_temperature
  4734  0249                     i1l3637:	
  4735                           
  4736                           ;prog.c: 382: }
  4737                           ;prog.c: 383: }
  4738                           ;prog.c: 384: getTemp_flags.ReadData = 0;
  4739  0249  10C7               	bcf	_getTemp_flags+3,1
  4740                           
  4741                           ;prog.c: 385: getTemp_flags.ActiveProcess = 0;
  4742  024A  1048               	bcf	_getTemp_flags+4,0
  4743                           
  4744                           ;prog.c: 386: getTemp_flags.DataIsRead = 1;
  4745  024B  1747               	bsf	_getTemp_flags+3,6
  4746  024C  0008               	return
  4747  024D                     i1l189:	
  4748                           
  4749                           ;prog.c: 390: getTemp_flags.ActiveProcess = 0;
  4750  024D  1048               	bcf	_getTemp_flags+4,0
  4751  024E  0008               	return
  4752  024F                     __end_of_get_temp_Async:	
  4753  024F                     PL6:	
  4754  024F  0C47               	rrf	_getTemp_flags+3,w
  4755  0250  00A0               	movwf	??_get_temp_Async
  4756  0251  0C20               	rrf	??_get_temp_Async,w
  4757  0252  390F               	andlw	15
  4758  0253  00A1               	movwf	??_get_temp_Async+1
  4759  0254  3009               	movlw	9
  4760  0255  0221               	subwf	??_get_temp_Async+1,w
  4761  0256  0008               	return
  4762  0257                     __end_ofPL6:	
  4763  0257                     PL10:	
  4764  0257  00A0               	movwf	??_get_temp_Async
  4765  0258  0C20               	rrf	??_get_temp_Async,w
  4766  0259  390F               	andlw	15
  4767  025A  00A0               	movwf	??_get_temp_Async
  4768  025B  0AA0               	incf	??_get_temp_Async,f
  4769  025C  0DA0               	rlf	??_get_temp_Async,f
  4770  025D  0DA0               	rlf	??_get_temp_Async,f
  4771  025E  0008               	return
  4772  025F                     __end_ofPL10:	
  4773                           
  4774                           	psect	text27
  4775  05CE                     __ptext27:	
  4776 ;; *************** function i1_calc_crc *****************
  4777 ;; Defined at:
  4778 ;;		line 279 in file "prog.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;  mas             1    wreg     PTR unsigned char 
  4781 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4782 ;;  len             1    0[COMMON] unsigned char 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  mas             1    1[COMMON] PTR unsigned char 
  4785 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4786 ;;  calc_crc        1    5[COMMON] unsigned char 
  4787 ;;  calc_crc        1    4[COMMON] unsigned char 
  4788 ;;  calc_crc        1    3[COMMON] unsigned char 
  4789 ;;  calc_crc        1    2[COMMON] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      unsigned char 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4794 ;; Tracked objects:
  4795 ;;		On entry : 300/0
  4796 ;;		On exit  : 300/0
  4797 ;;		Unchanged: 300/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4799 ;;      Params:         1       0       0       0
  4800 ;;      Locals:         5       0       0       0
  4801 ;;      Temps:          0       0       0       0
  4802 ;;      Totals:         6       0       0       0
  4803 ;;Total ram usage:        6 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_get_temp_Async
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function i1_calc_crc
  4814  05CE                     i1_calc_crc:	
  4815                           
  4816                           ;incstack = 0
  4817                           ; Regs used in i1_calc_crc: [wreg-fsr0h+status,2+status,0]
  4818                           ;i1calc_crc@mas stored from wreg
  4819  05CE  00F1               	movwf	i1calc_crc@mas
  4820                           
  4821                           ;prog.c: 280: unsigned char crc = 0;
  4822  05CF  01F5               	clrf	i1calc_crc@crc
  4823                           
  4824                           ;prog.c: 281: while (len--) {
  4825  05D0  2DEB               	goto	i1l3529
  4826  05D1                     i1l3509:	
  4827                           
  4828                           ;prog.c: 282: unsigned char dat = *mas++;
  4829  05D1  0871               	movf	i1calc_crc@mas,w
  4830  05D2  0084               	movwf	4
  4831  05D3  1383               	bcf	3,7	;select IRP bank0
  4832  05D4  0800               	movf	0,w
  4833  05D5  00F2               	movwf	i1calc_crc@dat
  4834  05D6  0AF1               	incf	i1calc_crc@mas,f
  4835                           
  4836                           ;prog.c: 283: for (unsigned char i = 0; i < 8; i++) {
  4837  05D7  01F4               	clrf	i1calc_crc@i
  4838  05D8                     i1l3519:	
  4839                           
  4840                           ;prog.c: 284: unsigned char fb = (crc ^ dat) & 1;
  4841  05D8  0875               	movf	i1calc_crc@crc,w
  4842  05D9  0672               	xorwf	i1calc_crc@dat,w
  4843  05DA  00F3               	movwf	i1calc_crc@fb
  4844  05DB  3001               	movlw	1
  4845  05DC  05F3               	andwf	i1calc_crc@fb,f
  4846                           
  4847                           ;prog.c: 285: crc >>= 1;
  4848  05DD  1003               	clrc
  4849  05DE  0CF5               	rrf	i1calc_crc@crc,f
  4850                           
  4851                           ;prog.c: 286: dat >>= 1;
  4852  05DF  1003               	clrc
  4853  05E0  0CF2               	rrf	i1calc_crc@dat,f
  4854                           
  4855                           ;prog.c: 287: if (fb) crc ^= 0x8c;
  4856  05E1  0873               	movf	i1calc_crc@fb,w
  4857  05E2  1903               	btfsc	3,2
  4858  05E3  2DE6               	goto	i1l3527
  4859  05E4  308C               	movlw	140
  4860  05E5  06F5               	xorwf	i1calc_crc@crc,f
  4861  05E6                     i1l3527:	
  4862  05E6  3008               	movlw	8
  4863  05E7  0AF4               	incf	i1calc_crc@i,f
  4864  05E8  0274               	subwf	i1calc_crc@i,w
  4865  05E9  1C03               	skipc
  4866  05EA  2DD8               	goto	i1l3519
  4867  05EB                     i1l3529:	
  4868  05EB  03F0               	decf	i1calc_crc@len,f
  4869  05EC  0F70               	incfsz	i1calc_crc@len,w
  4870  05ED  2DD1               	goto	i1l3509
  4871                           
  4872                           ;prog.c: 288: }
  4873                           ;prog.c: 289: }
  4874                           ;prog.c: 290: return crc;
  4875  05EE  0875               	movf	i1calc_crc@crc,w
  4876  05EF  0008               	return
  4877  05F0                     __end_ofi1_calc_crc:	
  4878                           
  4879                           	psect	text28
  4880  054D                     __ptext28:	
  4881 ;; *************** function i1_TX *****************
  4882 ;; Defined at:
  4883 ;;		line 237 in file "prog.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  cmd             1    wreg     unsigned char 
  4886 ;;  line            1    0[COMMON] unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  cmd             1    2[COMMON] unsigned char 
  4889 ;;  TX              1    6[COMMON] unsigned char 
  4890 ;;  TX              1    5[COMMON] unsigned char 
  4891 ;;  TX              1    4[COMMON] unsigned char 
  4892 ;;  TX              1    3[COMMON] unsigned char 
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  1    wreg      void 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0
  4897 ;; Tracked objects:
  4898 ;;		On entry : 300/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4902 ;;      Params:         1       0       0       0
  4903 ;;      Locals:         5       0       0       0
  4904 ;;      Temps:          1       0       0       0
  4905 ;;      Totals:         7       0       0       0
  4906 ;;Total ram usage:        7 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_get_temp_Async
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           
  4916                           ;psect for function i1_TX
  4917  054D                     i1_TX:	
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  4921                           ;i1TX@cmd stored from wreg
  4922  054D  00F2               	movwf	i1TX@cmd
  4923                           
  4924                           ;prog.c: 238: unsigned char One = line;
  4925  054E  0870               	movf	i1TX@line,w
  4926  054F  00F6               	movwf	i1TX@One
  4927                           
  4928                           ;prog.c: 239: unsigned char Zero = One ^ 0b11111111;
  4929  0550  0976               	comf	i1TX@One,w
  4930  0551  00F4               	movwf	i1TX@Zero
  4931                           
  4932                           ;prog.c: 242: unsigned char i = 0;
  4933  0552  01F5               	clrf	i1TX@i
  4934                           
  4935                           ;prog.c: 243: temp = cmd;
  4936  0553  0872               	movf	i1TX@cmd,w
  4937  0554  00F3               	movwf	i1TX@temp
  4938                           
  4939                           ;prog.c: 244: for (i = 0; i < 8; i++) {
  4940  0555  01F5               	clrf	i1TX@i
  4941  0556                     i1l147:	
  4942                           
  4943                           ;prog.c: 245: if (temp & 0x01) {
  4944  0556  1C73               	btfss	i1TX@temp,0
  4945  0557  2D62               	goto	i1l2397
  4946                           
  4947                           ;prog.c: 246: TRISA &= Zero;
  4948  0558  2573               	fcall	PL14	;call to abstracted procedure
  4949                           
  4950                           ;prog.c: 247: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4951  0559  2D5A               	nop2	;2 cycle nop
  4952  055A  2D5B               	nop2	;2 cycle nop
  4953  055B  0000               	nop
  4954                           
  4955                           ;prog.c: 248: TRISA |= One;
  4956  055C  2578               	fcall	PL16	;call to abstracted procedure
  4957                           
  4958                           ;prog.c: 249: _delay((unsigned long)((70)*(4000000/4000000.0)));
  4959  055D  3017               	movlw	23
  4960  055E  00F1               	movwf	??i1_TX
  4961  055F                     u468_27:	
  4962  055F  0BF1               	decfsz	??i1_TX,f
  4963  0560  2D5F               	goto	u468_27
  4964                           
  4965                           ;prog.c: 250: } else {
  4966  0561  2D6B               	goto	i1l2405
  4967  0562                     i1l2397:	
  4968                           
  4969                           ;prog.c: 251: TRISA &= Zero;
  4970  0562  2573               	fcall	PL14	;call to abstracted procedure
  4971                           
  4972                           ;prog.c: 252: _delay((unsigned long)((70)*(4000000/4000000.0)));
  4973  0563  3017               	movlw	23
  4974  0564  00F1               	movwf	??i1_TX
  4975  0565                     u469_27:	
  4976  0565  0BF1               	decfsz	??i1_TX,f
  4977  0566  2D65               	goto	u469_27
  4978                           
  4979                           ;prog.c: 253: TRISA |= One;
  4980  0567  2578               	fcall	PL16	;call to abstracted procedure
  4981                           
  4982                           ;prog.c: 254: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4983  0568  2D69               	nop2	;2 cycle nop
  4984  0569  2D6A               	nop2	;2 cycle nop
  4985  056A  0000               	nop
  4986  056B                     i1l2405:	
  4987  056B  3008               	movlw	8
  4988                           
  4989                           ;prog.c: 255: }
  4990                           ;prog.c: 256: temp >>= 1;
  4991  056C  1003               	clrc
  4992  056D  0CF3               	rrf	i1TX@temp,f
  4993  056E  0AF5               	incf	i1TX@i,f
  4994  056F  0275               	subwf	i1TX@i,w
  4995  0570  1803               	btfsc	3,0
  4996  0571  0008               	return
  4997  0572  2D56               	goto	i1l147
  4998  0573                     __end_ofi1_TX:	
  4999  0573                     PL14:	
  5000  0573  0874               	movf	i1TX@Zero,w
  5001  0574  1683               	bsf	3,5	;RP0=1, select bank1
  5002  0575  1303               	bcf	3,6	;RP1=0, select bank1
  5003  0576  0585               	andwf	5,f	;volatile
  5004  0577  0008               	return
  5005  0578                     __end_ofPL14:	
  5006  0578                     PL16:	
  5007  0578  0876               	movf	i1TX@One,w
  5008  0579  1683               	bsf	3,5	;RP0=1, select bank1
  5009  057A  1303               	bcf	3,6	;RP1=0, select bank1
  5010  057B  0485               	iorwf	5,f	;volatile
  5011  057C  0008               	return
  5012  057D                     __end_ofPL16:	
  5013                           
  5014                           	psect	text29
  5015  05A7                     __ptext29:	
  5016 ;; *************** function i1_RX *****************
  5017 ;; Defined at:
  5018 ;;		line 260 in file "prog.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  line            1    wreg     unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  line            1    1[COMMON] unsigned char 
  5023 ;;  RX              1    5[COMMON] unsigned char 
  5024 ;;  RX              1    4[COMMON] unsigned char 
  5025 ;;  RX              1    3[COMMON] unsigned char 
  5026 ;;  RX              1    2[COMMON] unsigned char 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      unsigned char 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 300/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5036 ;;      Params:         0       0       0       0
  5037 ;;      Locals:         5       0       0       0
  5038 ;;      Temps:          1       0       0       0
  5039 ;;      Totals:         6       0       0       0
  5040 ;;Total ram usage:        6 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_get_temp_Async
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function i1_RX
  5051  05A7                     i1_RX:	
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  5055                           ;i1RX@line stored from wreg
  5056  05A7  00F1               	movwf	i1RX@line
  5057                           
  5058                           ;prog.c: 261: unsigned char One = line;
  5059  05A8  00F5               	movwf	i1RX@One
  5060                           
  5061                           ;prog.c: 262: unsigned char Zero = One ^ 0b11111111;
  5062  05A9  0975               	comf	i1RX@One,w
  5063  05AA  00F2               	movwf	i1RX@Zero
  5064                           
  5065                           ;prog.c: 264: unsigned char d = 0;
  5066  05AB  01F3               	clrf	i1RX@d
  5067                           
  5068                           ;prog.c: 265: for (unsigned char i = 0; i < 8; i++) {
  5069  05AC  01F4               	clrf	i1RX@i
  5070  05AD                     i1l2419:	
  5071                           
  5072                           ;prog.c: 266: TRISA &= Zero;
  5073  05AD  0872               	movf	i1RX@Zero,w
  5074  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  5075  05AF  1303               	bcf	3,6	;RP1=0, select bank1
  5076  05B0  0585               	andwf	5,f	;volatile
  5077                           
  5078                           ;prog.c: 267: _delay((unsigned long)((6)*(4000000/4000000.0)));
  5079  05B1  2DB2               	nop2	;2 cycle nop
  5080  05B2  2DB3               	nop2	;2 cycle nop
  5081  05B3  2DB4               	nop2	;2 cycle nop
  5082                           
  5083                           ;prog.c: 268: TRISA |= One;
  5084  05B4  0875               	movf	i1RX@One,w
  5085  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  5086  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  5087  05B7  0485               	iorwf	5,f	;volatile
  5088                           
  5089                           ;prog.c: 269: _delay((unsigned long)((4)*(4000000/4000000.0)));
  5090  05B8  2DB9               	nop2	;2 cycle nop
  5091  05B9  2DBA               	nop2	;2 cycle nop
  5092                           
  5093                           ;prog.c: 270: d >>= 1;
  5094  05BA  1003               	clrc
  5095  05BB  0CF3               	rrf	i1RX@d,f
  5096                           
  5097                           ;prog.c: 271: if ((PORTA & One) > 0) {
  5098  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  5099  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  5100  05BE  0805               	movf	5,w	;volatile
  5101  05BF  0575               	andwf	i1RX@One,w
  5102  05C0  1D03               	btfss	3,2
  5103                           
  5104                           ;prog.c: 272: d |= 0x80;
  5105  05C1  17F3               	bsf	i1RX@d,7
  5106                           
  5107                           ;prog.c: 273: }
  5108                           ;prog.c: 274: _delay((unsigned long)((60)*(4000000/4000000.0)));
  5109  05C2  3013               	movlw	19
  5110  05C3  00F0               	movwf	??i1_RX
  5111  05C4                     u470_27:	
  5112  05C4  0BF0               	decfsz	??i1_RX,f
  5113  05C5  2DC4               	goto	u470_27
  5114  05C6  2DC7               	nop2	;nop
  5115  05C7  3008               	movlw	8
  5116  05C8  0AF4               	incf	i1RX@i,f
  5117  05C9  0274               	subwf	i1RX@i,w
  5118  05CA  1C03               	skipc
  5119  05CB  2DAD               	goto	i1l2419
  5120                           
  5121                           ;prog.c: 275: }
  5122                           ;prog.c: 276: return d;
  5123  05CC  0873               	movf	i1RX@d,w
  5124  05CD  0008               	return
  5125  05CE                     __end_ofi1_RX:	
  5126                           
  5127                           	psect	text30
  5128  051C                     __ptext30:	
  5129 ;; *************** function i1_INIT *****************
  5130 ;; Defined at:
  5131 ;;		line 219 in file "prog.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  line            1    wreg     unsigned char 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  line            1    1[COMMON] unsigned char 
  5136 ;;  INIT            1    4[COMMON] unsigned char 
  5137 ;;  INIT            1    3[COMMON] unsigned char 
  5138 ;;  INIT            1    2[COMMON] unsigned char 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      unsigned char 
  5141 ;; Registers used:
  5142 ;;		wreg, status,2, status,0
  5143 ;; Tracked objects:
  5144 ;;		On entry : 300/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5148 ;;      Params:         0       0       0       0
  5149 ;;      Locals:         4       0       0       0
  5150 ;;      Temps:          1       0       0       0
  5151 ;;      Totals:         5       0       0       0
  5152 ;;Total ram usage:        5 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_get_temp_Async
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function i1_INIT
  5163  051C                     i1_INIT:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  5167                           ;i1INIT@line stored from wreg
  5168  051C  00F1               	movwf	i1INIT@line
  5169                           
  5170                           ;prog.c: 220: unsigned char One = line;
  5171  051D  00F4               	movwf	i1INIT@One
  5172                           
  5173                           ;prog.c: 221: unsigned char Zero = One ^ 0b11111111;
  5174  051E  0974               	comf	i1INIT@One,w
  5175  051F  00F2               	movwf	i1INIT@Zero
  5176                           
  5177                           ;prog.c: 225: TRISA |= One;
  5178  0520  0874               	movf	i1INIT@One,w
  5179  0521  1683               	bsf	3,5	;RP0=1, select bank1
  5180  0522  0485               	iorwf	5,f	;volatile
  5181                           
  5182                           ;prog.c: 226: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5183  0523  3006               	movlw	6
  5184  0524  00F0               	movwf	??i1_INIT
  5185  0525                     u471_27:	
  5186  0525  0BF0               	decfsz	??i1_INIT,f
  5187  0526  2D25               	goto	u471_27
  5188  0527  0000               	nop
  5189                           
  5190                           ;prog.c: 227: TRISA &= Zero;
  5191  0528  0872               	movf	i1INIT@Zero,w
  5192  0529  1683               	bsf	3,5	;RP0=1, select bank1
  5193  052A  1303               	bcf	3,6	;RP1=0, select bank1
  5194  052B  0585               	andwf	5,f	;volatile
  5195                           
  5196                           ;prog.c: 228: _delay((unsigned long)((500)*(4000000/4000000.0)));
  5197  052C  30A6               	movlw	166
  5198  052D  00F0               	movwf	??i1_INIT
  5199  052E                     u472_27:	
  5200  052E  0BF0               	decfsz	??i1_INIT,f
  5201  052F  2D2E               	goto	u472_27
  5202  0530  0000               	nop
  5203                           
  5204                           ;prog.c: 229: TRISA |= One;
  5205  0531  0874               	movf	i1INIT@One,w
  5206  0532  1683               	bsf	3,5	;RP0=1, select bank1
  5207  0533  1303               	bcf	3,6	;RP1=0, select bank1
  5208  0534  0485               	iorwf	5,f	;volatile
  5209                           
  5210                           ;prog.c: 230: _delay((unsigned long)((65)*(4000000/4000000.0)));
  5211  0535  3015               	movlw	21
  5212  0536  00F0               	movwf	??i1_INIT
  5213  0537                     u473_27:	
  5214  0537  0BF0               	decfsz	??i1_INIT,f
  5215  0538  2D37               	goto	u473_27
  5216  0539  0000               	nop
  5217                           
  5218                           ;prog.c: 231: b = (PORTA & One) > 0;
  5219  053A  1283               	bcf	3,5	;RP0=0, select bank0
  5220  053B  1303               	bcf	3,6	;RP1=0, select bank0
  5221  053C  0805               	movf	5,w	;volatile
  5222  053D  0574               	andwf	i1INIT@One,w
  5223  053E  1903               	btfsc	3,2
  5224  053F  2D42               	goto	u195_20
  5225  0540  3001               	movlw	1
  5226  0541  2D43               	goto	u196_20
  5227  0542                     u195_20:	
  5228  0542  3000               	movlw	0
  5229  0543                     u196_20:	
  5230  0543  00F3               	movwf	i1INIT@b
  5231                           
  5232                           ;prog.c: 232: _delay((unsigned long)((450)*(4000000/4000000.0)));
  5233  0544  3095               	movlw	149
  5234  0545  00F0               	movwf	??i1_INIT
  5235  0546                     u474_27:	
  5236  0546  0BF0               	decfsz	??i1_INIT,f
  5237  0547  2D46               	goto	u474_27
  5238  0548  2D49               	nop2	;nop
  5239                           
  5240                           ;prog.c: 234: return !b;
  5241  0549  0873               	movf	i1INIT@b,w
  5242  054A  1903               	btfsc	3,2
  5243  054B  3401               	retlw	1
  5244  054C  3400               	retlw	0
  5245  054D                     __end_ofi1_INIT:	
  5246                           
  5247                           	psect	text31
  5248  06BC                     __ptext31:	
  5249 ;; *************** function ___wmul *****************
  5250 ;; Defined at:
  5251 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  multiplier      2    0[COMMON] unsigned int 
  5254 ;;  multiplicand    2    2[COMMON] unsigned int 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  product         2    4[COMMON] unsigned int 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  2    0[COMMON] unsigned int 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0
  5261 ;; Tracked objects:
  5262 ;;		On entry : 300/0
  5263 ;;		On exit  : 300/0
  5264 ;;		Unchanged: 300/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5266 ;;      Params:         4       0       0       0
  5267 ;;      Locals:         2       0       0       0
  5268 ;;      Temps:          0       0       0       0
  5269 ;;      Totals:         6       0       0       0
  5270 ;;Total ram usage:        6 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; This function calls:
  5273 ;;		Nothing
  5274 ;; This function is called by:
  5275 ;;		_get_temp_Async
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function ___wmul
  5281  06BC                     ___wmul:	
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5285  06BC  01F4               	clrf	___wmul@product
  5286  06BD  01F5               	clrf	___wmul@product+1
  5287  06BE                     i1l2299:	
  5288  06BE  1C70               	btfss	___wmul@multiplier,0
  5289  06BF  2EC6               	goto	i1l2303
  5290  06C0  0872               	movf	___wmul@multiplicand,w
  5291  06C1  07F4               	addwf	___wmul@product,f
  5292  06C2  1803               	skipnc
  5293  06C3  0AF5               	incf	___wmul@product+1,f
  5294  06C4  0873               	movf	___wmul@multiplicand+1,w
  5295  06C5  07F5               	addwf	___wmul@product+1,f
  5296  06C6                     i1l2303:	
  5297  06C6  1003               	clrc
  5298  06C7  0DF2               	rlf	___wmul@multiplicand,f
  5299  06C8  0DF3               	rlf	___wmul@multiplicand+1,f
  5300  06C9  1003               	clrc
  5301  06CA  0CF1               	rrf	___wmul@multiplier+1,f
  5302  06CB  0CF0               	rrf	___wmul@multiplier,f
  5303  06CC  0870               	movf	___wmul@multiplier,w
  5304  06CD  0471               	iorwf	___wmul@multiplier+1,w
  5305  06CE  1D03               	btfss	3,2
  5306  06CF  2EBE               	goto	i1l2299
  5307  06D0  0875               	movf	___wmul@product+1,w
  5308  06D1  00F1               	movwf	?___wmul+1
  5309  06D2  0874               	movf	___wmul@product,w
  5310  06D3  00F0               	movwf	?___wmul
  5311  06D4  0008               	return
  5312  06D5                     __end_of___wmul:	
  5313                           
  5314                           	psect	text32
  5315  046B                     __ptext32:	
  5316 ;; *************** function ___awdiv *****************
  5317 ;; Defined at:
  5318 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  divisor         2    6[COMMON] int 
  5321 ;;  dividend        2    8[COMMON] int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  quotient        2   12[COMMON] int 
  5324 ;;  sign            1   11[COMMON] unsigned char 
  5325 ;;  counter         1   10[COMMON] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2    6[COMMON] int 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 300/0
  5332 ;;		On exit  : 300/0
  5333 ;;		Unchanged: 300/0
  5334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5335 ;;      Params:         4       0       0       0
  5336 ;;      Locals:         4       0       0       0
  5337 ;;      Temps:          0       0       0       0
  5338 ;;      Totals:         8       0       0       0
  5339 ;;Total ram usage:        8 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; This function calls:
  5342 ;;		Nothing
  5343 ;; This function is called by:
  5344 ;;		_get_temp_Async
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           
  5349                           ;psect for function ___awdiv
  5350  046B                     ___awdiv:	
  5351                           
  5352                           ;incstack = 0
  5353                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5354  046B  01FB               	clrf	___awdiv@sign
  5355  046C  1FF7               	btfss	___awdiv@divisor+1,7
  5356  046D  2C75               	goto	i1l2321
  5357  046E  09F6               	comf	___awdiv@divisor,f
  5358  046F  09F7               	comf	___awdiv@divisor+1,f
  5359  0470  0AF6               	incf	___awdiv@divisor,f
  5360  0471  1903               	skipnz
  5361  0472  0AF7               	incf	___awdiv@divisor+1,f
  5362  0473  01FB               	clrf	___awdiv@sign
  5363  0474  0AFB               	incf	___awdiv@sign,f
  5364  0475                     i1l2321:	
  5365  0475  1FF9               	btfss	___awdiv@dividend+1,7
  5366  0476  2C7E               	goto	i1l2327
  5367  0477  09F8               	comf	___awdiv@dividend,f
  5368  0478  09F9               	comf	___awdiv@dividend+1,f
  5369  0479  0AF8               	incf	___awdiv@dividend,f
  5370  047A  1903               	skipnz
  5371  047B  0AF9               	incf	___awdiv@dividend+1,f
  5372  047C  3001               	movlw	1
  5373  047D  06FB               	xorwf	___awdiv@sign,f
  5374  047E                     i1l2327:	
  5375  047E  01FC               	clrf	___awdiv@quotient
  5376  047F  01FD               	clrf	___awdiv@quotient+1
  5377  0480  0876               	movf	___awdiv@divisor,w
  5378  0481  0477               	iorwf	___awdiv@divisor+1,w
  5379  0482  1903               	btfsc	3,2
  5380  0483  2CA3               	goto	i1l2349
  5381  0484  01FA               	clrf	___awdiv@counter
  5382  0485                     L12:	
  5383  0485  0AFA               	incf	___awdiv@counter,f
  5384  0486  1BF7               	btfsc	___awdiv@divisor+1,7
  5385  0487  2C8C               	goto	i1l2337
  5386  0488  1003               	clrc
  5387  0489  0DF6               	rlf	___awdiv@divisor,f
  5388  048A  0DF7               	rlf	___awdiv@divisor+1,f
  5389  048B  2C85               	goto	L12
  5390  048C                     i1l2337:	
  5391  048C  1003               	clrc
  5392  048D  0DFC               	rlf	___awdiv@quotient,f
  5393  048E  0DFD               	rlf	___awdiv@quotient+1,f
  5394  048F  0877               	movf	___awdiv@divisor+1,w
  5395  0490  0279               	subwf	___awdiv@dividend+1,w
  5396  0491  1D03               	skipz
  5397  0492  2C95               	goto	u192_25
  5398  0493  0876               	movf	___awdiv@divisor,w
  5399  0494  0278               	subwf	___awdiv@dividend,w
  5400  0495                     u192_25:	
  5401  0495  1C03               	skipc
  5402  0496  2C9F               	goto	L13
  5403  0497  0876               	movf	___awdiv@divisor,w
  5404  0498  02F8               	subwf	___awdiv@dividend,f
  5405  0499  0877               	movf	___awdiv@divisor+1,w
  5406  049A  1C03               	skipc
  5407  049B  03F9               	decf	___awdiv@dividend+1,f
  5408  049C  02F9               	subwf	___awdiv@dividend+1,f
  5409  049D  147C               	bsf	___awdiv@quotient,0
  5410  049E  1003               	clrc
  5411  049F                     L13:	
  5412  049F  0CF7               	rrf	___awdiv@divisor+1,f
  5413  04A0  0CF6               	rrf	___awdiv@divisor,f
  5414  04A1  0BFA               	decfsz	___awdiv@counter,f
  5415  04A2  2C8C               	goto	i1l2337
  5416  04A3                     i1l2349:	
  5417  04A3  087B               	movf	___awdiv@sign,w
  5418  04A4  1903               	btfsc	3,2
  5419  04A5  2CAB               	goto	i1l2353
  5420  04A6  09FC               	comf	___awdiv@quotient,f
  5421  04A7  09FD               	comf	___awdiv@quotient+1,f
  5422  04A8  0AFC               	incf	___awdiv@quotient,f
  5423  04A9  1903               	skipnz
  5424  04AA  0AFD               	incf	___awdiv@quotient+1,f
  5425  04AB                     i1l2353:	
  5426  04AB  087D               	movf	___awdiv@quotient+1,w
  5427  04AC  00F7               	movwf	?___awdiv+1
  5428  04AD  087C               	movf	___awdiv@quotient,w
  5429  04AE  00F6               	movwf	?___awdiv
  5430  04AF  0008               	return
  5431  04B0                     __end_of___awdiv:	
  5432                           
  5433                           	psect	text33
  5434  066A                     __ptext33:	
  5435 ;; *************** function _convDig *****************
  5436 ;; Defined at:
  5437 ;;		line 132 in file "prog.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;  dig             1    wreg     unsigned char 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  dig             1    0[COMMON] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      unsigned char 
  5444 ;; Registers used:
  5445 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5446 ;; Tracked objects:
  5447 ;;		On entry : B00/0
  5448 ;;		On exit  : B00/0
  5449 ;;		Unchanged: B00/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5451 ;;      Params:         0       0       0       0
  5452 ;;      Locals:         1       0       0       0
  5453 ;;      Temps:          0       0       0       0
  5454 ;;      Totals:         1       0       0       0
  5455 ;;Total ram usage:        1 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_F
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           
  5465                           ;psect for function _convDig
  5466  066A                     _convDig:	
  5467                           
  5468                           ;incstack = 0
  5469                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5470                           ;convDig@dig stored from wreg
  5471  066A  00F0               	movwf	convDig@dig
  5472                           
  5473                           ;prog.c: 133: switch (dig) {
  5474  066B  2E7A               	goto	i1l2529
  5475  066C                     i1l2471:	
  5476  066C  34DB               	retlw	219
  5477  066D                     i1l2475:	
  5478  066D  3418               	retlw	24
  5479  066E                     i1l2479:	
  5480  066E  34B3               	retlw	179
  5481  066F                     i1l2483:	
  5482  066F  34BA               	retlw	186
  5483  0670                     i1l2487:	
  5484  0670  3478               	retlw	120
  5485  0671                     i1l2491:	
  5486  0671  34EA               	retlw	234
  5487  0672                     i1l2495:	
  5488  0672  34EB               	retlw	235
  5489  0673                     i1l2499:	
  5490  0673  3498               	retlw	152
  5491  0674                     i1l2503:	
  5492  0674  34FB               	retlw	251
  5493  0675                     i1l2507:	
  5494  0675  34FA               	retlw	250
  5495  0676                     i1l2511:	
  5496  0676  34E3               	retlw	227
  5497  0677                     i1l2515:	
  5498  0677  3421               	retlw	33
  5499  0678                     i1l2519:	
  5500  0678  3420               	retlw	32
  5501  0679                     i1l2523:	
  5502  0679  3400               	retlw	0
  5503  067A                     i1l2529:	
  5504  067A  0870               	movf	convDig@dig,w
  5505                           
  5506                           ; Switch size 1, requested type "space"
  5507                           ; Number of cases is 13, Range of values is 0 to 32
  5508                           ; switch strategies available:
  5509                           ; Name         Instructions Cycles
  5510                           ; direct_byte           39     6 (fixed)
  5511                           ; simple_byte           40    21 (average)
  5512                           ; jumptable            260     6 (fixed)
  5513                           ;	Chosen strategy is direct_byte
  5514  067B  0084               	movwf	4
  5515  067C  3021               	movlw	33
  5516  067D  0204               	subwf	4,w
  5517  067E  1803               	skipnc
  5518  067F  3400               	retlw	0
  5519  0680  3006               	movlw	high i1S4261
  5520  0681  008A               	movwf	10
  5521  0682  3011               	movlw	low i1S4261
  5522  0683  0704               	addwf	4,w
  5523  0684  0082               	movwf	2
  5524  0685  0008               	return
  5525  0686                     __end_of_convDig:	
  5526  007E                     btemp	set	126	;btemp
  5527  007E                     wtemp	set	126
  5528  007E                     wtemp0	set	126
  5529  0080                     wtemp1	set	128
  5530  0082                     wtemp2	set	130
  5531  0084                     wtemp3	set	132
  5532  0086                     wtemp4	set	134
  5533  0088                     wtemp5	set	136
  5534  007F                     wtemp6	set	127
  5535  007E                     ttemp	set	126
  5536  007E                     ttemp0	set	126
  5537  0081                     ttemp1	set	129
  5538  0084                     ttemp2	set	132
  5539  0087                     ttemp3	set	135
  5540  007F                     ttemp4	set	127
  5541  007E                     ltemp	set	126
  5542  007E                     ltemp0	set	126
  5543  0082                     ltemp1	set	130
  5544  0086                     ltemp2	set	134
  5545  0080                     ltemp3	set	128
  5546                           
  5547                           	psect	swtext1
  5548  0611                     __pswtext1:	
  5549  0611                     i1S4261:	
  5550  0611  2E6C               	ljmp	i1l2471
  5551  0612  2E6D               	ljmp	i1l2475
  5552  0613  2E6E               	ljmp	i1l2479
  5553  0614  2E6F               	ljmp	i1l2483
  5554  0615  2E70               	ljmp	i1l2487
  5555  0616  2E71               	ljmp	i1l2491
  5556  0617  2E72               	ljmp	i1l2495
  5557  0618  2E73               	ljmp	i1l2499
  5558  0619  2E74               	ljmp	i1l2503
  5559  061A  2E75               	ljmp	i1l2507
  5560  061B  2E79               	ljmp	i1l2523
  5561  061C  2E79               	ljmp	i1l2523
  5562  061D  2E79               	ljmp	i1l2523
  5563  061E  2E79               	ljmp	i1l2523
  5564  061F  2E76               	ljmp	i1l2511
  5565  0620  2E79               	ljmp	i1l2523
  5566  0621  2E79               	ljmp	i1l2523
  5567  0622  2E79               	ljmp	i1l2523
  5568  0623  2E79               	ljmp	i1l2523
  5569  0624  2E79               	ljmp	i1l2523
  5570  0625  2E79               	ljmp	i1l2523
  5571  0626  2E79               	ljmp	i1l2523
  5572  0627  2E79               	ljmp	i1l2523
  5573  0628  2E79               	ljmp	i1l2523
  5574  0629  2E77               	ljmp	i1l2515
  5575  062A  2E79               	ljmp	i1l2523
  5576  062B  2E79               	ljmp	i1l2523
  5577  062C  2E79               	ljmp	i1l2523
  5578  062D  2E79               	ljmp	i1l2523
  5579  062E  2E79               	ljmp	i1l2523
  5580  062F  2E79               	ljmp	i1l2523
  5581  0630  2E79               	ljmp	i1l2523
  5582  0631  2E78               	ljmp	i1l2519


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         25
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      65
    BANK1            80     22      39
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 9
		 -> EditAddressMemory@CellsData(BANK1[8]), DS_ReadData(BANK1[9]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_ReadCell
    _WriteArrayToEEPROM->_EEWR
    _ShowError->_setDigit
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___lbmod

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   16923
                                             35 BANK0      1     1      0
                                             14 BANK1      8     8      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
              _Reset_powerOnInterval
                        _Run_getInit
                        _Run_getTemp
                          _ShowError
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2401
                                             22 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Run_getInit                                          1     1      0      31
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            14    13      1    1636
                                             21 BANK0     14    13      1
                _FillArrayFromEEPROM
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   15    15      0    7208
                                             25 BANK0      1     1      0
                                              0 BANK1     14    14      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                          _ShowError
                                 _TX
                 _WriteArrayToEEPROM
                           _calc_crc
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     288
                                             13 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     433
                                             13 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     673
                                             16 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     161
                                             13 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _TX                                                   7     6      1     549
                                             13 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ShowError                                            0     0      0     873
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             4     3      1    1188
                                             21 BANK0      4     3      1
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2     931
                                             16 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             13 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   6     6      0     269
                                             13 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _INIT                                                 5     5      0     229
                                             13 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    1863
                                             22 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1     873
                                             18 BANK0      4     3      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     427
                                             13 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     436
                                             13 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    7     7      0    2241
                                              6 BANK0      7     7      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       6     6      0    2046
                                              0 BANK0      6     6      0
                            ___awdiv
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                         i1_calc_crc
 ---------------------------------------------------------------------------------
 (7) i1_calc_crc                                           6     5      1     313
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 7     6      1     358
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 6     6      0     183
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               5     5      0     158
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     406
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___lbdiv
     ___lbmod
     _clrInd
     _refreshInd
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___lbdiv
       ___lbmod
       _clrInd
       _refreshInd
       _setDigit
         ___lbdiv (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _ShowError
       _clrInd
       _refreshInd
       _setDigit
         ___lbdiv (ARG)
         ___lbmod (ARG)
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _calc_crc
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _waitInterrupt
   _Reset_powerOnInterval
   _Run_getInit
   _Run_getTemp
   _ShowError
     _clrInd
     _refreshInd
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___lbdiv (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___lbdiv (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___awdiv
       ___wmul (ARG)
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1_calc_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      27       7       48.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      41       3       81.3%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76      10        0.0%
ABS                  0      0      76       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Dec 15 00:27:03 2016

                      __CFG_CP$ON 0000                                 _F 031D              FindCell@addressStart 0040  
                               pc 0002                                ?_F 0070                                PL2 013C  
                              PL4 014B                                PL6 024F                                PL8 0156  
                              l73 079C                                _RX 057D                                _TX 04E8  
                    ___awdiv@sign 007B                                fsr 0004               ___wmul@multiplicand 0072  
                      i1_calc_crc 05CE                               ??_F 0026                               PL10 0257  
                             PL12 0516                               PL14 0573                               PL16 0578  
                             ?_RX 0070                               ?_TX 002D                               l123 06E7  
                             l205 0432                               l147 04F1                               l346 0095  
                             l359 00C8                               l369 010F                               RX@d 0030  
                             l725 06AD                               RX@i 0031                               TX@i 0032  
                             _RA2 002A                               _RA5 002D                      __CFG_CPD$OFF 0000  
                             fsr0 0004                               indf 0000                       main@address 00B4  
                 ?_get_temp_Async 0070                      main@TheStart 00B3                              ??_RX 002D  
                            ??_TX 002E                      __CFG_LVP$OFF 0000                              F@dig 002B  
                  setPoint@dignum 002E                              l3301 06A7                              l4201 00FC  
                            l3315 06BA                              l3331 0666                              l3323 0652  
                            l3411 050C                              l3403 0500                              l4131 00A8  
                            l3341 0752                              l4221 0117                              l4213 010B  
                            l4133 00AC                              l4109 0080                              l3271 0786  
                            l3503 069C                              l4143 00C0                              l3425 0584  
                            l3361 0703                              l4233 0129                              l4209 0109  
                            l4155 00CB                              l3293 073A                              l4181 00E8  
                            l4173 00DE                              l4149 00C4                              l4077 004D  
                            l3447 05F3                              l3711 03DA                              l4239 013A  
                            l4191 00F3                              l4095 006E                              l4087 005E  
                            l3481 0641                              l3465 0607                              l3457 05F9  
                            l3721 03FD                              l3705 03D3                              l4089 0062  
                            l3467 060C                              l3651 0436                              l3707 03D7  
                            l3709 03D9                              l4197 00F7                              l3815 02B6  
                            l3663 0448                              l3735 0416                              l3825 02CE  
                            l3833 02E0                              l3841 02E5                              l3761 0278  
                            l3753 026A                              l3665 044A                              l3657 043F  
                            l3649 0430                              l3851 02F2                              l3771 0286  
                            l3691 0469                              l3659 0442                              l3781 0296  
                            l3773 028A                              l3677 0454                              l3785 0298  
                            l3865 02FE                              l3769 0284                              l3689 0465  
                            l3795 02A0                              l3877 031A                              _EERD 0758  
                            _T0IF 005A                              _EEWR 06D5                              u3310 04DB  
                            u3320 04DC                              u4060 0313                              u4070 0314  
                            u4430 00B3                              _INIT 04B0                              u3800 03E1  
                            u4440 00B4                              u3810 03E8                              u3820 03E9  
                            u4617 04FD                              u4627 0506                              u4637 059B  
                            u3790 03E0                              u4647 04BA                              u3880 041C  
                            u4657 04C5                              u3890 041D                              u4667 04D0  
                            u4677 04DF                              i1_RX 05A7                              i1_TX 054D  
                            _TMR0 0001                              _main 002D                              _sign 005A  
                            btemp 007E                              ltemp 007E                              start 0010  
                            ttemp 007E                              wtemp 007E        WriteArrayToEEPROM@quantity 0031  
                  EEWR@INTCON_BUP 002F       WriteArrayToEEPROM@container 0033                       i1calc_crc@i 0074  
    __size_of_FillArrayFromEEPROM 0011                             ?_EERD 0070                             ?_EEWR 002D  
                           ?_INIT 0070                             ?i1_RX 0070                             ?i1_TX 0070  
                           INIT@b 0030                             ?_main 0070                   __end_of___awdiv 04B0  
                 __end_of___lbdiv 06BC                             _EEADR 009B                             RX@One 0032  
                   __CFG_WDTE$OFF 0000                   __end_of___lbmod 066A                             _CMCON 001F  
                           TX@One 0033                   ___awdiv@divisor 0076                             _T2CON 0012  
                           TX@cmd 002F                             i1l234 0333                             i1l147 0556  
                           i1l171 0172                             i1l175 01B3                             i1l184 01CC  
                           i1l187 01D6                             i1l189 024D                             i1l278 03BD  
                           i1RX@d 0073                             i1RX@i 0074                             i1TX@i 0075  
                 ___awdiv@counter 007A                             _PORTA 0005                             _PORTB 0006  
                           _TRISA 0085                             _TRISB 0086                     __CFG_PWRTE$ON 0000  
                 __end_of_indData 0426                   __end_of_convDig 0686                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
                 ___lbdiv@divisor 002D            main@point_on_ind_delay 00AE                   ___lbdiv@counter 002F  
                __end_of_FindCell 046B                      __end_of_EERD 0767                      __end_of_EEWR 06ED  
                    __end_of_INIT 04E8                      __end_ofi1_RX 05CE                      __end_ofi1_TX 0573  
                  __CFG_MCLRE$OFF 0000                   __initialization 0011                      __end_of_main 013C  
                    i1calc_crc@fb 0073                __size_of_CellToInd 001B                    EERD@EEDATA_BUP 002F  
                __end_of_ReadCell 064E                            ??_EERD 002D                            ??_EEWR 002E  
                          ??_INIT 002D                            ??i1_RX 0070                            ??i1_TX 0071  
                     ?i1_calc_crc 0070                            ??_main 0043           ??_Reset_powerOnInterval 002D  
                    ReadCell@cell 0037                            i1S4261 0611                            _EEDATA 009A  
                          _EECON2 009D                  ___awdiv@dividend 0078                            RX@Zero 002F  
                          TX@Zero 0031                            RX@line 002E                 F@CurrentKeysState 002C  
                          i1l2303 06C6                            i1l2321 0475                            i1l4011 0396  
                          i1l2405 056B                            i1l2511 0676                            i1l2503 0674  
                          i1l2327 047E                            i1l4023 03BA                            i1l4007 038B  
                          i1l2353 04AB                            i1l2337 048C                            i1l4041 03B6  
                          i1l4017 03A0                            i1l4025 03A8                            i1l2523 0679  
                          i1l2515 0677                            i1l2507 0675                            i1l2419 05AD  
                          i1l2349 04A3                            i1l4045 03BC                            i1l2519 0678  
                          i1l2471 066C                            i1l4039 03B2                            i1l2529 067A  
                          i1l3601 01DD                            i1l2491 0671                            i1l2483 066F  
                          i1l2475 066D                            i1l2299 06BE                            i1l3603 01F8  
                          i1l2397 0562                            i1l3509 05D1                            i1l2495 0672  
                          i1l2487 0670                            i1l2479 066E                            i1l3527 05E6  
                          i1l3519 05D8                            i1l3529 05EB                            i1l3609 020A  
                          i1l2499 0673                            i1l3635 0247                            i1l3637 0249  
                          i1l3565 0195                            i1l3557 0180                            i1l3559 0182  
                          i1l3577 01BD                            i1l3941 0334                            i1l3599 01F4  
                          i1l3973 035E                            i1l3965 0357                            i1l3957 034C  
                          i1l3991 0370                            i1l3959 0350                            i1l3985 036A  
                          i1l3977 0363                            i1l3995 0377                            i1l3979 0364  
                          i1l3989 036F                            TX@line 002D                            i1l3999 037E  
                          _INTCON 000B                            TX@temp 0030                            u192_25 0495  
                          u195_20 0542                            u196_20 0543                            i1_INIT 051C  
                          u470_27 05C4                            u471_27 0525                            u472_27 052E  
                          u473_27 0537                            u474_27 0546                            u468_27 055F  
                          u469_27 0565                  __end_of_calc_crc 0611                            _TRISA4 042C  
                          ___wmul 06BC                         ??___awdiv 007A                         ??___lbdiv 002E  
                       ??___lbmod 002E                            _clrInd 0794                            _digits 004A  
                ___awdiv@quotient 007C                         ??_indData 0036                  __end_of_setDigit 0738  
                       ??_convDig 0070                __size_of_ShowError 000E                  __end_of_setPoint 0758  
                          saved_w 007E                 _EditAddressMemory 025F                 __end_of_CellToInd 06A1  
                ___lbdiv@dividend 002E                ?_EditAddressMemory 0070                   ___lbmod@divisor 002D  
         __end_of__initialization 002B                    EERD@INTCON_BUP 002E                   ___lbmod@counter 0030  
             __size_ofi1_calc_crc 0022        __end_of_WriteArrayToEEPROM 0714               ??_EditAddressMemory 0039  
                  __pcstackCOMMON 0070                      __pidataBANK1 0000             __end_of_waitInterrupt 079F  
                   ??_Run_getInit 002D                     ??_Run_getTemp 002D                     i1calc_crc@dat 0072  
                   i1calc_crc@crc 0075                     i1calc_crc@len 0070                     i1calc_crc@mas 0071  
                      __end_ofPL2 014B                        __end_ofPL4 0156                        __end_ofPL6 0257  
                      __end_ofPL8 015D                  ___lbdiv@quotient 0030                        __end_of_RX 05A7  
                      __end_of_TX 0516                  ??_get_temp_Async 0020                       F@long_press 0057  
      EditAddressMemory@CellsData 00A0         __end_of_EditAddressMemory 031D                         ?_FindCell 0035  
             _FillArrayFromEEPROM 0738       EditAddressMemory@RereadCell 00A9                        __pbssBANK0 0044  
                         ?i1_INIT 0070                         ?_ReadCell 0035                           INIT@One 0031  
               __end_of_PortAData 077E                 __end_of_ShowError 0775                        __pmaintext 002D  
    EditAddressMemory@CellIsEmpty 00AA                      _endInterrupt 0301              ?_FillArrayFromEEPROM 0030  
                         ?___wmul 0070                           ?_clrInd 0070                        __pintentry 0004  
                         i1INIT@b 0073                        __size_of_F 00AB                         ?_calc_crc 002D  
             __end_of_Run_getInit 0726                           i1RX@One 0075               __end_of_Run_getTemp 0701  
                         i1TX@One 0076                           i1TX@cmd 0072  FillArrayFromEEPROM@address_start 0030  
                      ??_FindCell 0036                        calc_crc@fb 002F                   Run_getInit@line 002D  
                    _Broadcasting 0300                        __stringtab 0775                 ReadCell@CellsData 0035  
                      ??_ReadCell 0036                   __size_ofi1_INIT 0031                           _KeyCode 005F  
                       ?_setDigit 0032                         ?_setPoint 002D               get_temp_Async@temp1 0023  
             get_temp_Async@temp2 0024             ??_FillArrayFromEEPROM 0032                   Run_getTemp@line 002D  
                         ___awdiv 046B                           ___lbdiv 06A1                           ___lbmod 064E  
                 __size_of___wmul 0019                   __size_of_clrInd 0006                      ??i1_calc_crc 0071  
                       i1INIT@One 0074                           __ptext1 03C8                           __ptext2 06ED  
                         __ptext3 0714                           __ptext4 078E                           __ptext5 0426  
                         __ptext6 025F                           __ptext7 0749                           __ptext8 05F0  
                         __ptext9 0701                           _indData 03C8                           _convDig 066A  
                      ??_calc_crc 002E        __size_of_EditAddressMemory 00BE    __size_of_Reset_powerOnInterval 0006  
   __end_of_Reset_powerOnInterval 0794                           clrloop0 077F              end_of_initialization 002B  
                      _refreshInd 0786                __end_ofi1_calc_crc 05F0                        ??_setDigit 0033  
                      ??_setPoint 002E                         FindCell@i 0041                       _Run_getInit 0714  
                     _Run_getTemp 06ED                  FindCell@previous 0035                  ___lbmod@dividend 002F  
             WriteArrayToEEPROM@i 0034                        convDig@dig 0070                       ___lbmod@rem 0031  
                 F@KeyTimeCounter 0050                         _CellToInd 0686                         ReadCell@i 0038  
                  __end_ofi1_INIT 054D                     setPoint@value 002D                    __end_of___wmul 06D5  
    EditAddressMemory@ErrorShowed 00A8                    __end_of_clrInd 079A                     __pbitbssBANK0 0300  
              _WriteArrayToEEPROM 0701                       __end_ofPL10 025F                       __end_ofPL12 051C  
                     __end_ofPL14 0578                       __end_ofPL16 057D               start_initialization 0011  
 WriteArrayToEEPROM@address_start 0030               ?_WriteArrayToEEPROM 0030                 __size_of_FindCell 0045  
                     ?_refreshInd 0070                          ??i1_INIT 0070      FillArrayFromEEPROM@container 0033  
                      ?_CellToInd 0070                 __size_of_ReadCell 001C                         _PortAData 077B  
            ??_WriteArrayToEEPROM 0032                EditAddressMemory@i 00AB                         _ShowError 0767  
                        ??___wmul 0074                          ??_clrInd 002D                       __pdataBANK1 00B6  
                        EEWR@data 002D                      setDigit@data 0032                         ___latbits 0000  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                 __size_of_calc_crc 0021  
          EditAddressMemory@i_256 00AC                          INIT@Zero 002F                          INIT@line 002E  
                       __end_of_F 03C8            __size_of_waitInterrupt 0005                         __pnvBANK0 005D  
               __size_of_setDigit 0012                        ?_ShowError 0070                 __size_of_setPoint 000F  
                        ?___awdiv 0076                          ?___lbdiv 002D                          ?___lbmod 002D  
             __size_of_refreshInd 0008                         __pstrings 0775                         calc_crc@i 0031  
                        ?_indData 0070                         __pswtext1 0611                          ?_convDig 0070  
              get_temp_Async@line 0025           __size_of_get_temp_Async 00F2                   get_temp_Async@i 0022  
                     __size_of_RX 002A                       __size_of_TX 002E                 interrupt_function 0004  
                 FindCell@address 0042                    ___wmul@product 0074                       ??_CellToInd 0036  
     __end_of_FillArrayFromEEPROM 0749                          i1RX@Zero 0072                         clear_ram0 077E  
                        i1TX@Zero 0074                          i1RX@line 0071                          i1TX@line 0070  
                        i1TX@temp 0073                         _temp_drob 005B                       calc_crc@dat 002E  
                     calc_crc@crc 0032                       calc_crc@len 002D                       calc_crc@mas 0030  
                       indData@dN 003A                         indData@cd 003B                     _waitInterrupt 079A  
                    ?_Run_getInit 0070                      ?_Run_getTemp 0070                FindCell@addressNew 003E  
                     __stringbase 077A                 FindCell@CellsData 0036                 ___wmul@multiplier 0070  
                 _powerOnInterval 005D                    F@LastKeysState 0056                          _FindCell 0426  
           _Reset_powerOnInterval 078E                          _ReadCell 0632                        _EECON1bits 009C  
            FillArrayFromEEPROM@i 0034                    indData@isPoint 0038                       ??_ShowError 0036  
                  ?_waitInterrupt 0070                  __size_of___awdiv 0045                  __size_of___lbdiv 001B  
                __size_of___lbmod 001C                     _getTemp_flags 0044                __end_of__stringtab 077B  
           EditAddressMemory@cell 00AD       FillArrayFromEEPROM@quantity 0031                          _calc_crc 05F0  
                __size_of_indData 005E                  __size_of_convDig 001C                      F@DigitNumber 0055  
                       setDigit@a 0035                        i1INIT@Zero 0072                          _main$272 00B0  
                     EERD@address 002D                        i1INIT@line 0071                          _digits_0 004D  
                        _digitemp 0059                          __ptext10 079A                          __ptext11 06D5  
                        __ptext20 0726                          __ptext12 04E8                          __ptext21 0786  
                        __ptext13 0767                          __ptext30 051C                          __ptext22 0794  
                        __ptext14 0632                          __ptext31 06BC                          __ptext23 064E  
                        __ptext15 0738                          __ptext32 046B                          __ptext24 06A1  
                        __ptext16 0758                          __ptext33 066A                          __ptext25 031D  
                        __ptext17 057D                          __ptext26 015D                          __ptext18 04B0  
                        __ptext27 05CE                          __ptext19 0686                          __ptext28 054D  
                        __ptext29 05A7                      ??_refreshInd 002D                     __size_of_EERD 000F  
                   __size_of_EEWR 0018                     __size_of_INIT 0038                     __size_ofi1_RX 0027  
                   __size_ofi1_TX 0026                       _DS_ReadData 00B6                     __size_of_main 010F  
                        _setDigit 0726                          _setPoint 0749                          indData@v 0039  
                    _PowerBlocked 0058                          main@cell 00B2                          main@line 00B5  
              __end_of_refreshInd 078E                        _INTCONbits 000B            ?_Reset_powerOnInterval 0070  
                  _get_temp_Async 015D                          intlevel1 0000                        _DS_Address 00BF  
                       stringcode 0775                   ??_waitInterrupt 002D                       EEWR@address 002E  
             F@ButtonPressTimeIn1 0052               F@ButtonPressTimeIn2 0053       __size_of_WriteArrayToEEPROM 0013  
             F@ButtonPressTimeOut 0054                     CellToInd@cell 0036                      indData@v_240 0037  
            __size_of_Run_getInit 0012              __size_of_Run_getTemp 0014                        _OPTION_REG 0081  
                     _temperature 005C                          stringdir 0775                          stringtab 0775  
          __end_of_get_temp_Async 024F                __CFG_FOSC$INTOSCIO 0000               FindCell@CellIsEmpty 003F  
