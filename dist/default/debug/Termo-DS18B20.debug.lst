

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Sat Dec 03 23:41:34 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	swtext1,local,class=CONST,delta=2
    51                           	psect	pa_nodes,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0092                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009F                     	;# 
    90                           
    91                           	psect	idataBANK1
    92  0000                     __pidataBANK1:	
    93                           
    94                           	psect	strings
    95  07B3                     __pstrings:	
    96  07B3                     stringtab:	
    97  07B3                     __stringtab:	
    98  07B3                     stringcode:	
    99                           ;	String table - string pointers are 1 byte each
   100                           
   101  07B3                     stringdir:	
   102  07B3  3007               	movlw	high stringdir
   103  07B4  008A               	movwf	10
   104  07B5  0804               	movf	4,w
   105  07B6  0A84               	incf	4,f
   106  07B7  0782               	addwf	2,f
   107  07B8                     __stringbase:	
   108  07B8  3400               	retlw	0
   109  07B9                     __end_of__stringtab:	
   110  07B9                     _PortAData:	
   111  07B9  3480               	retlw	128
   112  07BA  3440               	retlw	64
   113  07BB  3401               	retlw	1
   114  07BC                     __end_of_PortAData:	
   115  001F                     _CMCON	set	31
   116  000B                     _INTCON	set	11
   117  000B                     _INTCONbits	set	11
   118  0005                     _PORTA	set	5
   119  0006                     _PORTB	set	6
   120  0012                     _T2CON	set	18
   121  0001                     _TMR0	set	1
   122  002A                     _RA2	set	42
   123  002B                     _RA3	set	43
   124  002D                     _RA5	set	45
   125  005A                     _T0IF	set	90
   126  009B                     _EEADR	set	155
   127  009C                     _EECON1bits	set	156
   128  009D                     _EECON2	set	157
   129  009A                     _EEDATA	set	154
   130  0081                     _OPTION_REG	set	129
   131  0085                     _TRISA	set	133
   132  0086                     _TRISB	set	134
   133  042B                     _TRISA3	set	1067
   134  042C                     _TRISA4	set	1068
   135                           
   136                           ; #config settings
   137  0000                     
   138                           	psect	cinit
   139  0011                     start_initialization:	
   140  0011                     __initialization:	
   141  0011  30FF               	movlw	255
   142                           
   143                           ; Initialize objects allocated to BANK1
   144  0012  1683               	bsf	3,5	;RP0=1, select bank1
   145                           
   146                           ;initializer for _DS_ReadData
   147  0013  00B7               	movwf	__pdataBANK1& (0+127)
   148  0014  00B8               	movwf	(__pdataBANK1+1)& (0+127)
   149  0015  00B9               	movwf	(__pdataBANK1+2)& (0+127)
   150  0016  00BA               	movwf	(__pdataBANK1+3)& (0+127)
   151  0017  00BB               	movwf	(__pdataBANK1+4)& (0+127)
   152  0018  00BC               	movwf	(__pdataBANK1+5)& (0+127)
   153  0019  00BD               	movwf	(__pdataBANK1+6)& (0+127)
   154  001A  00BE               	movwf	(__pdataBANK1+7)& (0+127)
   155  001B  00BF               	movwf	(__pdataBANK1+8)& (0+127)
   156                           
   157                           ;initializer for _DS_Address
   158  001C  00C0               	movwf	(__pdataBANK1+9)& (0+127)
   159  001D  00C1               	movwf	(__pdataBANK1+10)& (0+127)
   160  001E  00C2               	movwf	(__pdataBANK1+11)& (0+127)
   161  001F  00C3               	movwf	(__pdataBANK1+12)& (0+127)
   162  0020  00C4               	movwf	(__pdataBANK1+13)& (0+127)
   163  0021  00C5               	movwf	(__pdataBANK1+14)& (0+127)
   164  0022  00C6               	movwf	(__pdataBANK1+15)& (0+127)
   165  0023  00C7               	movwf	(__pdataBANK1+16)& (0+127)
   166  0024  3043               	movlw	low __pbssBANK0
   167                           
   168                           ; Clear objects allocated to BANK0
   169  0025  1383               	bcf	3,7	;select IRP bank0
   170  0026  0084               	movwf	4
   171  0027  305E               	movlw	low (__pbssBANK0+27)
   172  0028  27BC               	fcall	clear_ram0
   173                           
   174                           ; Clear objects allocated to BITBANK0
   175  0029  1283               	bcf	3,5	;RP0=0, select bank0
   176  002A  01DE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   177  002B                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  002B                     __end_of__initialization:	
   181  002B  0183               	clrf	3
   182  002C  291E               	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	bssBANK0
   185  0043                     __pbssBANK0:	
   186  0043                     _getTemp_flags:	
   187  0043                     	ds	5
   188  0048                     _digits:	
   189  0048                     	ds	3
   190  004B                     _digits_0:	
   191  004B                     	ds	3
   192  004E                     F@KeyTimeCounter:	
   193  004E                     	ds	2
   194  0050                     _powerOnInterval:	
   195  0050                     	ds	2
   196  0052                     F@ButtonPressTimeIn1:	
   197  0052                     	ds	1
   198  0053                     F@ButtonPressTimeIn2:	
   199  0053                     	ds	1
   200  0054                     F@ButtonPressTimeOut:	
   201  0054                     	ds	1
   202  0055                     F@DigitNumber:	
   203  0055                     	ds	1
   204  0056                     F@LastKeysState:	
   205  0056                     	ds	1
   206  0057                     F@long_press:	
   207  0057                     	ds	1
   208  0058                     _KeyCode:	
   209  0058                     	ds	1
   210  0059                     _PowerBlocked:	
   211  0059                     	ds	1
   212  005A                     _digitemp:	
   213  005A                     	ds	1
   214  005B                     _sign:	
   215  005B                     	ds	1
   216  005C                     _temp_drob:	
   217  005C                     	ds	1
   218  005D                     _temperature:	
   219  005D                     	ds	1
   220                           
   221                           	psect	bitbssBANK0
   222  02F0                     __pbitbssBANK0:	
   223  02F0                     INIT@b:	
   224  02F0                     	ds	1
   225  02F1                     _Broadcasting:	
   226  02F1                     	ds	1
   227  02F2                     _endInterrupt:	
   228  02F2                     	ds	1
   229                           
   230                           	psect	dataBANK1
   231  00B7                     __pdataBANK1:	
   232  00B7                     _DS_ReadData:	
   233  00B7                     	ds	9
   234  00C0                     _DS_Address:	
   235  00C0                     	ds	8
   236                           
   237                           	psect	clrtext
   238  07BC                     clear_ram0:	
   239                           ;	Called with FSR containing the base address, and
   240                           ;	W with the last address+1
   241                           
   242  07BC  0064               	clrwdt	;clear the watchdog before getting into this loop
   243  07BD                     clrloop0:	
   244  07BD  0180               	clrf	0	;clear RAM location pointed to by FSR
   245  07BE  0A84               	incf	4,f	;increment pointer
   246  07BF  0604               	xorwf	4,w	;XOR with final address
   247  07C0  1903               	btfsc	3,2	;have we reached the end yet?
   248  07C1  3400               	retlw	0	;all done for this memory range, return
   249  07C2  0604               	xorwf	4,w	;XOR again to restore value
   250  07C3  2FBD               	goto	clrloop0	;do the next byte
   251                           
   252                           	psect	cstackBANK1
   253  00A0                     __pcstackBANK1:	
   254  00A0                     EditAddressMemory@CellsData:	
   255                           
   256                           ; 8 bytes @ 0x0
   257  00A0                     	ds	8
   258  00A8                     EditAddressMemory@ErrorShowed:	
   259                           
   260                           ; 1 bytes @ 0x8
   261  00A8                     	ds	1
   262  00A9                     EditAddressMemory@RereadCell:	
   263                           
   264                           ; 1 bytes @ 0x9
   265  00A9                     	ds	1
   266  00AA                     EditAddressMemory@i:	
   267                           
   268                           ; 1 bytes @ 0xA
   269  00AA                     	ds	1
   270  00AB                     EditAddressMemory@i_261:	
   271                           
   272                           ; 1 bytes @ 0xB
   273  00AB                     	ds	1
   274  00AC                     EditAddressMemory@CellIsEmpty:	
   275                           
   276                           ; 1 bytes @ 0xC
   277  00AC                     	ds	1
   278  00AD                     EditAddressMemory@cell:	
   279                           
   280                           ; 1 bytes @ 0xD
   281  00AD                     	ds	1
   282  00AE                     main@X:	
   283                           
   284                           ; 1 bytes @ 0xE
   285  00AE                     	ds	1
   286  00AF                     main@point_on_ind_delay:	
   287                           
   288                           ; 2 bytes @ 0xF
   289  00AF                     	ds	2
   290  00B1                     _main$273:	
   291                           
   292                           ; 2 bytes @ 0x11
   293  00B1                     	ds	2
   294  00B3                     main@TheStart:	
   295                           
   296                           ; 1 bytes @ 0x13
   297  00B3                     	ds	1
   298  00B4                     main@cell:	
   299                           
   300                           ; 1 bytes @ 0x14
   301  00B4                     	ds	1
   302  00B5                     main@address:	
   303                           
   304                           ; 1 bytes @ 0x15
   305  00B5                     	ds	1
   306  00B6                     main@Z:	
   307                           
   308                           ; 1 bytes @ 0x16
   309  00B6                     	ds	1
   310                           
   311                           	psect	cstackCOMMON
   312  0070                     __pcstackCOMMON:	
   313  0070                     ?_INIT:	
   314  0070                     ?i1_INIT:	
   315                           ; 1 bit 
   316                           
   317  0070                     ?_waitInterrupt:	
   318                           ; 1 bit 
   319                           
   320  0070                     ?_Reset_powerOnInterval:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_refreshInd:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_clrInd:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_ShowError:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_convDig:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ??_convDig:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_EERD:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_TX:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_RX:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_get_temp_Async:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_F:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_indData:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_CellToInd:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_EditAddressMemory:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_Run_getTemp:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??i1_INIT:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?i1_TX:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ??i1_TX:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?i1_RX:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ??i1_RX:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?i1_calc_crc:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?___wmul:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     convDig@dig:	
   390                           ; 2 bytes @ 0x0
   391                           
   392  0070                     i1calc_crc@len:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ___wmul@multiplier:	
   396                           ; 1 bytes @ 0x0
   397                           
   398                           
   399                           ; 2 bytes @ 0x0
   400  0070                     	ds	1
   401  0071                     ??i1_calc_crc:	
   402  0071                     i1TX@cmd:	
   403                           ; 1 bytes @ 0x1
   404                           
   405  0071                     i1RX@d:	
   406                           ; 1 bytes @ 0x1
   407                           
   408  0071                     i1calc_crc@mas:	
   409                           ; 1 bytes @ 0x1
   410                           
   411                           
   412                           ; 1 bytes @ 0x1
   413  0071                     	ds	1
   414  0072                     i1TX@temp:	
   415  0072                     i1RX@i:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     i1calc_crc@dat:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ___wmul@multiplicand:	
   422                           ; 1 bytes @ 0x2
   423                           
   424                           
   425                           ; 2 bytes @ 0x2
   426  0072                     	ds	1
   427  0073                     i1TX@i:	
   428  0073                     i1calc_crc@fb:	
   429                           ; 1 bytes @ 0x3
   430                           
   431                           
   432                           ; 1 bytes @ 0x3
   433  0073                     	ds	1
   434  0074                     ??___wmul:	
   435  0074                     i1calc_crc@i:	
   436                           ; 1 bytes @ 0x4
   437                           
   438  0074                     ___wmul@product:	
   439                           ; 1 bytes @ 0x4
   440                           
   441                           
   442                           ; 2 bytes @ 0x4
   443  0074                     	ds	1
   444  0075                     i1calc_crc@crc:	
   445                           
   446                           ; 1 bytes @ 0x5
   447  0075                     	ds	1
   448  0076                     ?i1___awdiv:	
   449  0076                     i1___awdiv@divisor:	
   450                           ; 2 bytes @ 0x6
   451                           
   452                           
   453                           ; 2 bytes @ 0x6
   454  0076                     	ds	2
   455  0078                     i1___awdiv@dividend:	
   456                           
   457                           ; 2 bytes @ 0x8
   458  0078                     	ds	2
   459  007A                     ??i1___awdiv:	
   460  007A                     i1___awdiv@counter:	
   461                           ; 1 bytes @ 0xA
   462                           
   463                           
   464                           ; 1 bytes @ 0xA
   465  007A                     	ds	1
   466  007B                     i1___awdiv@sign:	
   467                           
   468                           ; 1 bytes @ 0xB
   469  007B                     	ds	1
   470  007C                     i1___awdiv@quotient:	
   471                           
   472                           ; 2 bytes @ 0xC
   473  007C                     	ds	2
   474                           
   475                           	psect	cstackBANK0
   476  0020                     __pcstackBANK0:	
   477  0020                     ??_get_temp_Async:	
   478                           
   479                           ; 1 bytes @ 0x0
   480  0020                     	ds	2
   481  0022                     get_temp_Async@i:	
   482                           
   483                           ; 1 bytes @ 0x2
   484  0022                     	ds	1
   485  0023                     get_temp_Async@temp1:	
   486                           
   487                           ; 1 bytes @ 0x3
   488  0023                     	ds	1
   489  0024                     get_temp_Async@temp2:	
   490                           
   491                           ; 1 bytes @ 0x4
   492  0024                     	ds	1
   493  0025                     ??_F:	
   494                           
   495                           ; 1 bytes @ 0x5
   496  0025                     	ds	5
   497  002A                     F@dig:	
   498                           
   499                           ; 1 bytes @ 0xA
   500  002A                     	ds	1
   501  002B                     F@CurrentKeysState:	
   502                           
   503                           ; 1 bytes @ 0xB
   504  002B                     	ds	1
   505  002C                     ??_waitInterrupt:	
   506  002C                     ??_Reset_powerOnInterval:	
   507                           ; 1 bytes @ 0xC
   508                           
   509  002C                     ?_setPoint:	
   510                           ; 1 bytes @ 0xC
   511                           
   512  002C                     ??_refreshInd:	
   513                           ; 1 bytes @ 0xC
   514                           
   515  002C                     ??_clrInd:	
   516                           ; 1 bytes @ 0xC
   517                           
   518  002C                     ?_EEWR:	
   519                           ; 1 bytes @ 0xC
   520                           
   521  002C                     ??_EERD:	
   522                           ; 1 bytes @ 0xC
   523                           
   524  002C                     ??_INIT:	
   525                           ; 1 bytes @ 0xC
   526                           
   527  002C                     ??_TX:	
   528                           ; 1 bytes @ 0xC
   529                           
   530  002C                     ??_RX:	
   531                           ; 1 bytes @ 0xC
   532                           
   533  002C                     ?_calc_crc:	
   534                           ; 1 bytes @ 0xC
   535                           
   536  002C                     ??_Run_getTemp:	
   537                           ; 1 bytes @ 0xC
   538                           
   539  002C                     ?___lbdiv:	
   540                           ; 1 bytes @ 0xC
   541                           
   542  002C                     ?___lbmod:	
   543                           ; 1 bytes @ 0xC
   544                           
   545  002C                     ?___awdiv:	
   546                           ; 1 bytes @ 0xC
   547                           
   548  002C                     ?___awmod:	
   549                           ; 2 bytes @ 0xC
   550                           
   551  002C                     setPoint@value:	
   552                           ; 2 bytes @ 0xC
   553                           
   554  002C                     clrInd@a:	
   555                           ; 1 bytes @ 0xC
   556                           
   557  002C                     EEWR@data:	
   558                           ; 1 bytes @ 0xC
   559                           
   560  002C                     EERD@address:	
   561                           ; 1 bytes @ 0xC
   562                           
   563  002C                     calc_crc@len:	
   564                           ; 1 bytes @ 0xC
   565                           
   566  002C                     ___lbdiv@divisor:	
   567                           ; 1 bytes @ 0xC
   568                           
   569  002C                     ___lbmod@divisor:	
   570                           ; 1 bytes @ 0xC
   571                           
   572  002C                     ___awdiv@divisor:	
   573                           ; 1 bytes @ 0xC
   574                           
   575  002C                     ___awmod@divisor:	
   576                           ; 2 bytes @ 0xC
   577                           
   578                           
   579                           ; 2 bytes @ 0xC
   580  002C                     	ds	1
   581  002D                     ??_setPoint:	
   582  002D                     ??_EEWR:	
   583                           ; 1 bytes @ 0xD
   584                           
   585  002D                     ??_calc_crc:	
   586                           ; 1 bytes @ 0xD
   587                           
   588  002D                     ??___lbdiv:	
   589                           ; 1 bytes @ 0xD
   590                           
   591  002D                     ??___lbmod:	
   592                           ; 1 bytes @ 0xD
   593                           
   594  002D                     setPoint@dignum:	
   595                           ; 1 bytes @ 0xD
   596                           
   597  002D                     refreshInd@a:	
   598                           ; 1 bytes @ 0xD
   599                           
   600  002D                     EEWR@address:	
   601                           ; 1 bytes @ 0xD
   602                           
   603  002D                     EERD@INTCON_BUP:	
   604                           ; 1 bytes @ 0xD
   605                           
   606  002D                     TX@cmd:	
   607                           ; 1 bytes @ 0xD
   608                           
   609  002D                     RX@d:	
   610                           ; 1 bytes @ 0xD
   611                           
   612  002D                     calc_crc@dat:	
   613                           ; 1 bytes @ 0xD
   614                           
   615  002D                     ___lbdiv@dividend:	
   616                           ; 1 bytes @ 0xD
   617                           
   618                           
   619                           ; 1 bytes @ 0xD
   620  002D                     	ds	1
   621  002E                     EEWR@INTCON_BUP:	
   622  002E                     EERD@EEDATA_BUP:	
   623                           ; 1 bytes @ 0xE
   624                           
   625  002E                     TX@temp:	
   626                           ; 1 bytes @ 0xE
   627                           
   628  002E                     RX@i:	
   629                           ; 1 bytes @ 0xE
   630                           
   631  002E                     calc_crc@fb:	
   632                           ; 1 bytes @ 0xE
   633                           
   634  002E                     ___lbdiv@counter:	
   635                           ; 1 bytes @ 0xE
   636                           
   637  002E                     ___lbmod@dividend:	
   638                           ; 1 bytes @ 0xE
   639                           
   640  002E                     ___awdiv@dividend:	
   641                           ; 1 bytes @ 0xE
   642                           
   643  002E                     ___awmod@dividend:	
   644                           ; 2 bytes @ 0xE
   645                           
   646                           
   647                           ; 2 bytes @ 0xE
   648  002E                     	ds	1
   649  002F                     ?_FillArrayFromEEPROM:	
   650  002F                     ?_WriteArrayToEEPROM:	
   651                           ; 1 bytes @ 0xF
   652                           
   653  002F                     FillArrayFromEEPROM@address_start:	
   654                           ; 1 bytes @ 0xF
   655                           
   656  002F                     WriteArrayToEEPROM@address_start:	
   657                           ; 1 bytes @ 0xF
   658                           
   659  002F                     TX@i:	
   660                           ; 1 bytes @ 0xF
   661                           
   662  002F                     calc_crc@mas:	
   663                           ; 1 bytes @ 0xF
   664                           
   665  002F                     ___lbdiv@quotient:	
   666                           ; 1 bytes @ 0xF
   667                           
   668  002F                     ___lbmod@counter:	
   669                           ; 1 bytes @ 0xF
   670                           
   671                           
   672                           ; 1 bytes @ 0xF
   673  002F                     	ds	1
   674  0030                     ??___awdiv:	
   675  0030                     ??___awmod:	
   676                           ; 1 bytes @ 0x10
   677                           
   678  0030                     FillArrayFromEEPROM@quantity:	
   679                           ; 1 bytes @ 0x10
   680                           
   681  0030                     WriteArrayToEEPROM@quantity:	
   682                           ; 1 bytes @ 0x10
   683                           
   684  0030                     calc_crc@i:	
   685                           ; 1 bytes @ 0x10
   686                           
   687  0030                     ___awdiv@counter:	
   688                           ; 1 bytes @ 0x10
   689                           
   690  0030                     ___awmod@counter:	
   691                           ; 1 bytes @ 0x10
   692                           
   693  0030                     ___lbmod@rem:	
   694                           ; 1 bytes @ 0x10
   695                           
   696                           
   697                           ; 1 bytes @ 0x10
   698  0030                     	ds	1
   699  0031                     ??_FillArrayFromEEPROM:	
   700  0031                     ??_WriteArrayToEEPROM:	
   701                           ; 1 bytes @ 0x11
   702                           
   703  0031                     calc_crc@crc:	
   704                           ; 1 bytes @ 0x11
   705                           
   706  0031                     ___awdiv@sign:	
   707                           ; 1 bytes @ 0x11
   708                           
   709  0031                     ___awmod@sign:	
   710                           ; 1 bytes @ 0x11
   711                           
   712                           
   713                           ; 1 bytes @ 0x11
   714  0031                     	ds	1
   715  0032                     FillArrayFromEEPROM@container:	
   716  0032                     WriteArrayToEEPROM@container:	
   717                           ; 1 bytes @ 0x12
   718                           
   719  0032                     ___awdiv@quotient:	
   720                           ; 1 bytes @ 0x12
   721                           
   722                           
   723                           ; 2 bytes @ 0x12
   724  0032                     	ds	1
   725  0033                     FillArrayFromEEPROM@i:	
   726  0033                     WriteArrayToEEPROM@i:	
   727                           ; 1 bytes @ 0x13
   728                           
   729                           
   730                           ; 1 bytes @ 0x13
   731  0033                     	ds	1
   732  0034                     ?_setDigit:	
   733  0034                     ?_FindCell:	
   734                           ; 1 bytes @ 0x14
   735                           
   736  0034                     ?_ReadCell:	
   737                           ; 1 bytes @ 0x14
   738                           
   739  0034                     setDigit@data:	
   740                           ; 1 bytes @ 0x14
   741                           
   742  0034                     FindCell@previous:	
   743                           ; 1 bytes @ 0x14
   744                           
   745  0034                     ReadCell@CellsData:	
   746                           ; 1 bytes @ 0x14
   747                           
   748                           
   749                           ; 1 bytes @ 0x14
   750  0034                     	ds	1
   751  0035                     ??_setDigit:	
   752  0035                     ??_FindCell:	
   753                           ; 1 bytes @ 0x15
   754                           
   755  0035                     ReadCell@CellIsEmpty:	
   756                           ; 1 bytes @ 0x15
   757                           
   758  0035                     FindCell@CellsData:	
   759                           ; 1 bytes @ 0x15
   760                           
   761                           
   762                           ; 8 bytes @ 0x15
   763  0035                     	ds	1
   764  0036                     ??_ReadCell:	
   765                           
   766                           ; 1 bytes @ 0x16
   767  0036                     	ds	1
   768  0037                     setDigit@a:	
   769  0037                     ReadCell@cell:	
   770                           ; 1 bytes @ 0x17
   771                           
   772                           
   773                           ; 1 bytes @ 0x17
   774  0037                     	ds	1
   775  0038                     ??_ShowError:	
   776  0038                     ??_indData:	
   777                           ; 1 bytes @ 0x18
   778                           
   779  0038                     ??_CellToInd:	
   780                           ; 1 bytes @ 0x18
   781                           
   782  0038                     ReadCell@_CellIsEmpty:	
   783                           ; 1 bytes @ 0x18
   784                           
   785  0038                     CellToInd@cell:	
   786                           ; 1 bytes @ 0x18
   787                           
   788                           
   789                           ; 1 bytes @ 0x18
   790  0038                     	ds	1
   791  0039                     indData@v_241:	
   792  0039                     ReadCell@i:	
   793                           ; 1 bytes @ 0x19
   794                           
   795                           
   796                           ; 1 bytes @ 0x19
   797  0039                     	ds	1
   798  003A                     ??_EditAddressMemory:	
   799  003A                     indData@isPoint:	
   800                           ; 1 bytes @ 0x1A
   801                           
   802                           
   803                           ; 1 bytes @ 0x1A
   804  003A                     	ds	1
   805  003B                     indData@v:	
   806                           
   807                           ; 1 bytes @ 0x1B
   808  003B                     	ds	1
   809  003C                     indData@cd:	
   810                           
   811                           ; 1 bytes @ 0x1C
   812  003C                     	ds	1
   813  003D                     FindCell@addressNew:	
   814  003D                     indData@dN:	
   815                           ; 1 bytes @ 0x1D
   816                           
   817                           
   818                           ; 1 bytes @ 0x1D
   819  003D                     	ds	1
   820  003E                     FindCell@CellIsEmpty:	
   821                           
   822                           ; 1 bytes @ 0x1E
   823  003E                     	ds	1
   824  003F                     FindCell@addressStart:	
   825                           
   826                           ; 1 bytes @ 0x1F
   827  003F                     	ds	1
   828  0040                     FindCell@i:	
   829                           
   830                           ; 1 bytes @ 0x20
   831  0040                     	ds	1
   832  0041                     FindCell@address:	
   833                           
   834                           ; 1 bytes @ 0x21
   835  0041                     	ds	1
   836  0042                     ??_main:	
   837                           
   838                           ; 1 bytes @ 0x22
   839  0042                     	ds	1
   840                           
   841                           	psect	maintext
   842  011E                     __pmaintext:	
   843 ;;
   844 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   845 ;;
   846 ;; *************** function _main *****************
   847 ;; Defined at:
   848 ;;		line 760 in file "prog.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;  point_on_ind    2   15[BANK1 ] unsigned int 
   853 ;;  data_on_ind_    2    0        unsigned int 
   854 ;;  address         1   21[BANK1 ] unsigned char 
   855 ;;  cell            1   20[BANK1 ] unsigned char 
   856 ;;  TheStart        1   19[BANK1 ] unsigned char 
   857 ;;  Z               1   22[BANK1 ] volatile unsigned char 
   858 ;;  X               1   14[BANK1 ] volatile unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : B00/0
   865 ;;		On exit  : B00/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   868 ;;      Params:         0       0       0       0
   869 ;;      Locals:         0       0       9       0
   870 ;;      Temps:          0       1       0       0
   871 ;;      Totals:         0       1       9       0
   872 ;;Total ram usage:       10 bytes
   873 ;; Hardware stack levels required when called:    7
   874 ;; This function calls:
   875 ;;		_CellToInd
   876 ;;		_EditAddressMemory
   877 ;;		_FillArrayFromEEPROM
   878 ;;		_FindCell
   879 ;;		_Reset_powerOnInterval
   880 ;;		_Run_getTemp
   881 ;;		_ShowError
   882 ;;		_clrInd
   883 ;;		_indData
   884 ;;		_refreshInd
   885 ;;		_setDigit
   886 ;;		_setPoint
   887 ;;		_waitInterrupt
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           
   894                           ;psect for function _main
   895  011E                     _main:	
   896                           
   897                           ;prog.c: 763: INTCON = 0;
   898                           
   899                           ;incstack = 0
   900                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   901  011E  018B               	clrf	11	;volatile
   902                           
   903                           ;prog.c: 764: OPTION_REG = 0b00000111;
   904  011F  3007               	movlw	7
   905  0120  1683               	bsf	3,5	;RP0=1, select bank1
   906  0121  0081               	movwf	1	;volatile
   907                           
   908                           ;prog.c: 765: TRISA = 0b00101110;
   909  0122  302E               	movlw	46
   910  0123  0085               	movwf	5	;volatile
   911                           
   912                           ;prog.c: 766: TRISB = 0b00000000;
   913  0124  0186               	clrf	6	;volatile
   914                           
   915                           ;prog.c: 767: PORTA = 0b00000000;
   916  0125  1283               	bcf	3,5	;RP0=0, select bank0
   917  0126  0185               	clrf	5	;volatile
   918                           
   919                           ;prog.c: 768: PORTB = 0b00000000;
   920  0127  0186               	clrf	6	;volatile
   921                           
   922                           ;prog.c: 769: TMR0 = TMR0_VALUE;
   923  0128  30EB               	movlw	235
   924  0129  0081               	movwf	1	;volatile
   925                           
   926                           ;prog.c: 770: T2CON = 0b00000100;
   927  012A  3004               	movlw	4
   928  012B  0092               	movwf	18	;volatile
   929                           
   930                           ;prog.c: 771: CMCON = 0b00000111;
   931  012C  3007               	movlw	7
   932  012D  009F               	movwf	31	;volatile
   933                           
   934                           ;prog.c: 773: volatile unsigned char Z = 0b11110111;
   935  012E  30F7               	movlw	247
   936  012F  1683               	bsf	3,5	;RP0=1, select bank1
   937  0130  00B6               	movwf	main@Z^(0+128)	;volatile
   938                           
   939                           ;prog.c: 774: volatile unsigned char X = Z ^ 0b11111111;
   940  0131  0936               	comf	main@Z^(0+128),w	;volatile
   941  0132  00AE               	movwf	main@X^(0+128)	;volatile
   942                           
   943                           ;prog.c: 777: clrInd();
   944  0133  27A5               	fcall	_clrInd
   945                           
   946                           ;prog.c: 778: refreshInd();
   947  0134  2732               	fcall	_refreshInd
   948                           
   949                           ;prog.c: 780: INTCON = 0b10100000;
   950  0135  30A0               	movlw	160
   951  0136  008B               	movwf	11	;volatile
   952                           
   953                           ;prog.c: 782: Reset_powerOnInterval();
   954  0137  27C4               	fcall	_Reset_powerOnInterval
   955                           
   956                           ;prog.c: 784: waitInterrupt();
   957  0138  27CA               	fcall	_waitInterrupt
   958  0139  3024               	movlw	36
   959                           
   960                           ;prog.c: 788: unsigned char address;
   961                           ;prog.c: 789: unsigned int data_on_ind_delay = 0;
   962  013A  1683               	bsf	3,5	;RP0=1, select bank1
   963  013B  01B4               	clrf	main@cell^(0+128)
   964                           
   965                           ;prog.c: 790: unsigned int point_on_ind_delay = 0;
   966  013C  01AF               	clrf	main@point_on_ind_delay^(0+128)
   967  013D  01B0               	clrf	(main@point_on_ind_delay+1)^(0+128)
   968                           
   969                           ;prog.c: 792: unsigned char TheStart = 1;
   970  013E  01B3               	clrf	main@TheStart^(0+128)
   971  013F  0AB3               	incf	main@TheStart^(0+128),f
   972                           
   973                           ;prog.c: 794: KeyCode = 36;
   974  0140  1283               	bcf	3,5	;RP0=0, select bank0
   975  0141  00D8               	movwf	_KeyCode	;volatile
   976  0142                     l4358:	
   977                           
   978                           ;prog.c: 798: if (KeyCode == 33) {
   979  0142  3021               	movlw	33
   980  0143  0658               	xorwf	_KeyCode,w	;volatile
   981  0144  1D03               	btfss	3,2
   982  0145  2954               	goto	l404
   983                           
   984                           ;prog.c: 799: KeyCode = 0;
   985  0146  01D8               	clrf	_KeyCode	;volatile
   986                           
   987                           ;prog.c: 800: if (PowerBlocked != 1) {
   988  0147  0359               	decf	_PowerBlocked,w
   989  0148  1903               	btfsc	3,2
   990  0149  2952               	goto	l4368
   991  014A  3010               	movlw	16
   992                           
   993                           ;prog.c: 801: PowerBlocked = 1;
   994  014B  01D9               	clrf	_PowerBlocked
   995  014C  0AD9               	incf	_PowerBlocked,f
   996                           
   997                           ;prog.c: 802: point_on_ind_delay = 10000;
   998  014D  1683               	bsf	3,5	;RP0=1, select bank1
   999  014E  00AF               	movwf	main@point_on_ind_delay^(0+128)
  1000  014F  3027               	movlw	39
  1001  0150  00B0               	movwf	(main@point_on_ind_delay^(0+128)+1)
  1002                           
  1003                           ;prog.c: 803: } else {
  1004  0151  29C2               	goto	l4428
  1005  0152                     l4368:	
  1006                           
  1007                           ;prog.c: 804: PowerBlocked = 0;
  1008  0152  01D9               	clrf	_PowerBlocked
  1009  0153  29C2               	goto	l4428
  1010  0154                     l404:	
  1011  0154  18DE               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1012  0155  298C               	goto	l4402
  1013  0156  301F               	movlw	31
  1014  0157  0658               	xorwf	_KeyCode,w	;volatile
  1015  0158  1903               	btfsc	3,2
  1016  0159  2962               	goto	l4376
  1017  015A  3020               	movlw	32
  1018  015B  0658               	xorwf	_KeyCode,w	;volatile
  1019  015C  1903               	btfsc	3,2
  1020  015D  2962               	goto	l4376
  1021  015E  3022               	movlw	34
  1022  015F  0658               	xorwf	_KeyCode,w	;volatile
  1023  0160  1D03               	btfss	3,2
  1024  0161  298C               	goto	l4402
  1025  0162                     l4376:	
  1026                           
  1027                           ;prog.c: 807: Reset_powerOnInterval();
  1028  0162  27C4               	fcall	_Reset_powerOnInterval
  1029  0163  3022               	movlw	34
  1030                           
  1031                           ;prog.c: 808: getTemp_flags.ActiveProcess = 0;
  1032  0164  1047               	bcf	_getTemp_flags+4,0
  1033                           
  1034                           ;prog.c: 809: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1035  0165  0658               	xorwf	_KeyCode,w	;volatile
  1036  0166  1903               	btfsc	3,2
  1037  0167  2976               	goto	l4386
  1038  0168  1683               	bsf	3,5	;RP0=1, select bank1
  1039  0169  0834               	movf	main@cell^(0+128),w
  1040  016A  00B1               	movwf	_main$273^(0+128)
  1041  016B  01B2               	clrf	(_main$273+1)^(0+128)
  1042  016C  1003               	clrc
  1043  016D  0DB1               	rlf	_main$273^(0+128),f
  1044  016E  0DB2               	rlf	(_main$273+1)^(0+128),f
  1045  016F  1003               	clrc
  1046  0170  0DB1               	rlf	_main$273^(0+128),f
  1047  0171  0DB2               	rlf	(_main$273+1)^(0+128),f
  1048  0172  1003               	clrc
  1049  0173  0DB1               	rlf	_main$273^(0+128),f
  1050  0174  0DB2               	rlf	(_main$273+1)^(0+128),f
  1051  0175  297A               	goto	l4388
  1052  0176                     l4386:	
  1053  0176  3080               	movlw	128
  1054  0177  1683               	bsf	3,5	;RP0=1, select bank1
  1055  0178  00B1               	movwf	_main$273^(0+128)
  1056  0179  01B2               	clrf	(_main$273+1)^(0+128)
  1057  017A                     l4388:	
  1058  017A  301F               	movlw	31
  1059  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1060  017C  0658               	xorwf	_KeyCode,w	;volatile
  1061  017D  1D03               	btfss	3,2
  1062  017E  2981               	goto	u4610
  1063  017F  3001               	movlw	1
  1064  0180  2982               	goto	u4620
  1065  0181                     u4610:	
  1066  0181  3000               	movlw	0
  1067  0182                     u4620:	
  1068  0182  00B4               	movwf	FindCell@previous
  1069  0183  1683               	bsf	3,5	;RP0=1, select bank1
  1070  0184  0831               	movf	_main$273^(0+128),w
  1071  0185  23D4               	fcall	_FindCell
  1072  0186  1683               	bsf	3,5	;RP0=1, select bank1
  1073  0187  00B5               	movwf	main@address^(0+128)
  1074                           
  1075                           ;prog.c: 810: KeyCode = 0;
  1076  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0189  01D8               	clrf	_KeyCode	;volatile
  1078                           
  1079                           ;prog.c: 812: waitInterrupt();
  1080  018A  27CA               	fcall	_waitInterrupt
  1081  018B  29AA               	goto	l4420
  1082  018C                     l4402:	
  1083                           ;prog.c: 821: } else if (KeyCode == 36) {
  1084                           
  1085                           ;prog.c: 817: data_on_ind_delay = 18000;
  1086                           
  1087                           ;prog.c: 814: cell = address / (sizeof(DS_Address));
  1088                           
  1089                           ;prog.c: 813: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1090                           
  1091  018C  3024               	movlw	36
  1092  018D  0658               	xorwf	_KeyCode,w	;volatile
  1093  018E  1D03               	btfss	3,2
  1094  018F  29C2               	goto	l4428
  1095                           
  1096                           ;prog.c: 822: KeyCode = 0;
  1097  0190  01D8               	clrf	_KeyCode	;volatile
  1098                           
  1099                           ;prog.c: 823: if(!TheStart){
  1100  0191  1683               	bsf	3,5	;RP0=1, select bank1
  1101  0192  0833               	movf	main@TheStart^(0+128),w
  1102  0193  1D03               	btfss	3,2
  1103  0194  2996               	goto	l4410
  1104                           
  1105                           ;prog.c: 824: EditAddressMemory();
  1106  0195  21F3               	fcall	_EditAddressMemory
  1107  0196                     l4410:	
  1108                           
  1109                           ;prog.c: 825: }
  1110                           ;prog.c: 827: Reset_powerOnInterval();
  1111  0196  27C4               	fcall	_Reset_powerOnInterval
  1112  0197  3080               	movlw	128
  1113                           
  1114                           ;prog.c: 828: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1115  0198  01B4               	clrf	FindCell@previous
  1116  0199  23D4               	fcall	_FindCell
  1117  019A  1683               	bsf	3,5	;RP0=1, select bank1
  1118  019B  00B5               	movwf	main@address^(0+128)
  1119                           
  1120                           ;prog.c: 829: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1121  019C  3A80               	xorlw	128
  1122  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1123  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1124  019F  1D03               	btfss	3,2
  1125  01A0  29A3               	goto	L1
  1126  01A1  14DE               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1127  01A2  29A4               	goto	l4416
  1128  01A3                     L1:	
  1129  01A3  10DE               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1130  01A4                     l4416:	
  1131                           
  1132                           ;prog.c: 830: if (Broadcasting) {
  1133  01A4  1CDE               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1134  01A5  29AA               	goto	l4420
  1135                           
  1136                           ;prog.c: 831: TheStart = 1;
  1137  01A6  1683               	bsf	3,5	;RP0=1, select bank1
  1138  01A7  01B3               	clrf	main@TheStart^(0+128)
  1139  01A8  0AB3               	incf	main@TheStart^(0+128),f
  1140                           
  1141                           ;prog.c: 832: } else {
  1142  01A9  29C1               	goto	l4400
  1143  01AA                     l4420:	
  1144                           
  1145                           ;prog.c: 833: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1146  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  1147  01AB  0835               	movf	main@address^(0+128),w
  1148  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1149  01AD  00AF               	movwf	FillArrayFromEEPROM@address_start
  1150  01AE  3008               	movlw	8
  1151  01AF  00B0               	movwf	FillArrayFromEEPROM@quantity
  1152  01B0  30C0               	movlw	(low (_DS_Address| 0))& (0+255)
  1153  01B1  2768               	fcall	_FillArrayFromEEPROM
  1154                           
  1155                           ;prog.c: 834: cell = address / (sizeof(DS_Address));
  1156  01B2  1683               	bsf	3,5	;RP0=1, select bank1
  1157  01B3  0835               	movf	main@address^(0+128),w
  1158  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1159  01B5  00C2               	movwf	??_main
  1160  01B6  1003               	clrc
  1161  01B7  0CC2               	rrf	??_main,f
  1162  01B8  1003               	clrc
  1163  01B9  0CC2               	rrf	??_main,f
  1164  01BA  1003               	clrc
  1165  01BB  0CC2               	rrf	??_main,f
  1166  01BC  0842               	movf	??_main,w
  1167  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1168  01BE  00B4               	movwf	main@cell^(0+128)
  1169                           
  1170                           ;prog.c: 837: data_on_ind_delay = 18000;
  1171  01BF  0834               	movf	main@cell^(0+128),w
  1172  01C0  2540               	fcall	_CellToInd
  1173  01C1                     l4400:	
  1174                           
  1175                           ;prog.c: 819: Run_getTemp();
  1176  01C1  2757               	fcall	_Run_getTemp
  1177  01C2                     l4428:	
  1178                           
  1179                           ;prog.c: 840: }
  1180                           ;prog.c: 842: if (getTemp_flags.Error) {
  1181  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1182  01C3  1FC6               	btfss	_getTemp_flags+3,7
  1183  01C4  29C9               	goto	l420
  1184                           
  1185                           ;prog.c: 843: clrInd();
  1186  01C5  27A5               	fcall	_clrInd
  1187                           
  1188                           ;prog.c: 844: ShowError();
  1189  01C6  2797               	fcall	_ShowError
  1190  01C7                     l4432:	
  1191                           
  1192                           ;prog.c: 845: Run_getTemp();
  1193  01C7  2757               	fcall	_Run_getTemp
  1194                           
  1195                           ;prog.c: 846: } else if (getTemp_flags.DataIsRead) {
  1196  01C8  29E0               	goto	l4448
  1197  01C9                     l420:	
  1198  01C9  1F46               	btfss	_getTemp_flags+3,6
  1199  01CA  29CE               	goto	l4438
  1200                           
  1201                           ;prog.c: 847: clrInd();
  1202  01CB  27A5               	fcall	_clrInd
  1203                           
  1204                           ;prog.c: 848: indData();
  1205  01CC  2360               	fcall	_indData
  1206  01CD  29C7               	goto	l4432
  1207  01CE                     l4438:	
  1208  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1209  01CF  0833               	movf	main@TheStart^(0+128),w
  1210  01D0  1903               	btfsc	3,2
  1211  01D1  29E0               	goto	l4448
  1212  01D2  3020               	movlw	32
  1213                           
  1214                           ;prog.c: 851: TheStart = 0;
  1215  01D3  01B3               	clrf	main@TheStart^(0+128)
  1216                           
  1217                           ;prog.c: 852: setDigit(1, 32);
  1218  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1219  01D5  00B4               	movwf	setDigit@data
  1220  01D6  3001               	movlw	1
  1221  01D7  2745               	fcall	_setDigit
  1222                           
  1223                           ;prog.c: 853: setDigit(2, 32);
  1224  01D8  3020               	movlw	32
  1225  01D9  00B4               	movwf	setDigit@data
  1226  01DA  3002               	movlw	2
  1227  01DB  2745               	fcall	_setDigit
  1228                           
  1229                           ;prog.c: 854: setDigit(3, 32);
  1230  01DC  3020               	movlw	32
  1231  01DD  00B4               	movwf	setDigit@data
  1232  01DE  3003               	movlw	3
  1233  01DF  2745               	fcall	_setDigit
  1234  01E0                     l4448:	
  1235                           
  1236                           ;prog.c: 855: }
  1237                           ;prog.c: 857: if (point_on_ind_delay > 0) {
  1238  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1239  01E1  082F               	movf	main@point_on_ind_delay^(0+128),w
  1240  01E2  0430               	iorwf	(main@point_on_ind_delay+1)^(0+128),w
  1241  01E3  1903               	btfsc	3,2
  1242  01E4  29F1               	goto	l4454
  1243  01E5  3001               	movlw	1
  1244                           
  1245                           ;prog.c: 858: setPoint(1, 1);
  1246  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1247  01E7  01AC               	clrf	setPoint@value
  1248  01E8  0AAC               	incf	setPoint@value,f
  1249  01E9  2779               	fcall	_setPoint
  1250                           
  1251                           ;prog.c: 859: point_on_ind_delay--;
  1252  01EA  3001               	movlw	1
  1253  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1254  01EC  02AF               	subwf	main@point_on_ind_delay^(0+128),f
  1255  01ED  3000               	movlw	0
  1256  01EE  1C03               	skipc
  1257  01EF  03B0               	decf	(main@point_on_ind_delay+1)^(0+128),f
  1258  01F0  02B0               	subwf	(main@point_on_ind_delay+1)^(0+128),f
  1259  01F1                     l4454:	
  1260                           
  1261                           ;prog.c: 860: }
  1262                           ;prog.c: 862: refreshInd();
  1263  01F1  2732               	fcall	_refreshInd
  1264  01F2  2942               	goto	l4358
  1265  01F3                     __end_of_main:	
  1266                           
  1267                           	psect	text1
  1268  0360                     __ptext1:	
  1269 ;; *************** function _indData *****************
  1270 ;; Defined at:
  1271 ;;		line 585 in file "prog.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  v               1   25[BANK0 ] unsigned char 
  1276 ;;  v               1   27[BANK0 ] unsigned char 
  1277 ;;  dN              1   29[BANK0 ] unsigned char 
  1278 ;;  cd              1   28[BANK0 ] unsigned char 
  1279 ;;  isPoint         1   26[BANK0 ] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : B00/0
  1286 ;;		On exit  : 300/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1289 ;;      Params:         0       0       0       0
  1290 ;;      Locals:         0       5       0       0
  1291 ;;      Temps:          0       1       0       0
  1292 ;;      Totals:         0       6       0       0
  1293 ;;Total ram usage:        6 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    4
  1296 ;; This function calls:
  1297 ;;		___lbdiv
  1298 ;;		___lbmod
  1299 ;;		_setDigit
  1300 ;;		_setPoint
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _indData
  1308  0360                     _indData:	
  1309                           
  1310                           ;prog.c: 587: unsigned char cd = 3;
  1311                           
  1312                           ;incstack = 0
  1313                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1314  0360  3003               	movlw	3
  1315  0361  00BC               	movwf	indData@cd
  1316                           
  1317                           ;prog.c: 588: unsigned char dN = 3;
  1318  0362  00BD               	movwf	indData@dN
  1319                           
  1320                           ;prog.c: 590: if (sign != 0) {
  1321  0363  085B               	movf	_sign,w
  1322  0364  1903               	btfsc	3,2
  1323  0365  2B6C               	goto	l3992
  1324                           
  1325                           ;prog.c: 591: setDigit(cd, 32);
  1326  0366  3020               	movlw	32
  1327  0367  00B4               	movwf	setDigit@data
  1328  0368  3003               	movlw	3
  1329  0369  2745               	fcall	_setDigit
  1330                           
  1331                           ;prog.c: 592: cd--;
  1332  036A  03BC               	decf	indData@cd,f
  1333                           
  1334                           ;prog.c: 593: dN--;
  1335  036B  03BD               	decf	indData@dN,f
  1336  036C                     l3992:	
  1337                           
  1338                           ;prog.c: 594: }
  1339                           ;prog.c: 595: unsigned char isPoint = 0;
  1340  036C  01BA               	clrf	indData@isPoint
  1341  036D                     l3994:	
  1342                           
  1343                           ;prog.c: 597: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1344  036D  3064               	movlw	100
  1345  036E  025D               	subwf	_temperature,w
  1346  036F  1C03               	btfss	3,0
  1347  0370  2B73               	goto	u3990
  1348  0371  3001               	movlw	1
  1349  0372  2B74               	goto	u4000
  1350  0373                     u3990:	
  1351  0373  3000               	movlw	0
  1352  0374                     u4000:	
  1353  0374  00B8               	movwf	??_indData
  1354  0375  300A               	movlw	10
  1355  0376  025D               	subwf	_temperature,w
  1356  0377  1C03               	btfss	3,0
  1357  0378  2B7B               	goto	u4010
  1358  0379  3001               	movlw	1
  1359  037A  2B7C               	goto	u4020
  1360  037B                     u4010:	
  1361  037B  3000               	movlw	0
  1362  037C                     u4020:	
  1363  037C  0738               	addwf	??_indData,w
  1364  037D  00BB               	movwf	indData@v
  1365                           
  1366                           ;prog.c: 598: setDigit(cd - v, temperature % 10);
  1367  037E  300A               	movlw	10
  1368  037F  00AC               	movwf	___lbmod@divisor
  1369  0380  085D               	movf	_temperature,w
  1370  0381  26B7               	fcall	___lbmod
  1371  0382  00B4               	movwf	setDigit@data
  1372  0383  083B               	movf	indData@v,w
  1373  0384  023C               	subwf	indData@cd,w
  1374  0385  2745               	fcall	_setDigit
  1375                           
  1376                           ;prog.c: 599: if (!isPoint) {
  1377  0386  083A               	movf	indData@isPoint,w
  1378  0387  1D03               	btfss	3,2
  1379  0388  2B90               	goto	l4004
  1380                           
  1381                           ;prog.c: 600: setPoint(cd - v, 1);
  1382  0389  01AC               	clrf	setPoint@value
  1383  038A  0AAC               	incf	setPoint@value,f
  1384  038B  083B               	movf	indData@v,w
  1385  038C  023C               	subwf	indData@cd,w
  1386  038D  2779               	fcall	_setPoint
  1387                           
  1388                           ;prog.c: 601: isPoint = 1;
  1389  038E  01BA               	clrf	indData@isPoint
  1390  038F  0ABA               	incf	indData@isPoint,f
  1391  0390                     l4004:	
  1392                           
  1393                           ;prog.c: 602: }
  1394                           ;prog.c: 603: temperature /= 10;
  1395  0390  300A               	movlw	10
  1396  0391  00AC               	movwf	___lbdiv@divisor
  1397  0392  085D               	movf	_temperature,w
  1398  0393  26D3               	fcall	___lbdiv
  1399  0394  00DD               	movwf	_temperature
  1400                           
  1401                           ;prog.c: 604: dN--;
  1402  0395  03BD               	decf	indData@dN,f
  1403                           
  1404                           ;prog.c: 605: } while (temperature > 0);
  1405  0396  085D               	movf	_temperature,w
  1406  0397  1D03               	btfss	3,2
  1407  0398  2B6D               	goto	l3994
  1408                           
  1409                           ;prog.c: 607: if (dN > 0) {
  1410  0399  083D               	movf	indData@dN,w
  1411  039A  1903               	btfsc	3,2
  1412  039B  2BD0               	goto	l4036
  1413                           
  1414                           ;prog.c: 608: cd = dN;
  1415  039C  083D               	movf	indData@dN,w
  1416  039D  00BC               	movwf	indData@cd
  1417                           
  1418                           ;prog.c: 609: if (temp_drob > 99) temp_drob /= 10;
  1419  039E  3064               	movlw	100
  1420  039F  025C               	subwf	_temp_drob,w
  1421  03A0  300A               	movlw	10
  1422  03A1  1C03               	skipc
  1423  03A2  2BA8               	goto	L2
  1424  03A3  00AC               	movwf	___lbdiv@divisor
  1425  03A4  085C               	movf	_temp_drob,w
  1426  03A5  26D3               	fcall	___lbdiv
  1427  03A6  00DC               	movwf	_temp_drob
  1428                           
  1429                           ;prog.c: 610: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1430  03A7  300A               	movlw	10
  1431  03A8                     L2:	
  1432  03A8  025C               	subwf	_temp_drob,w
  1433  03A9  1C03               	skipc
  1434  03AA  2BB2               	goto	l4022
  1435  03AB  0B3D               	decfsz	indData@dN,w
  1436  03AC  2BB2               	goto	l4022
  1437  03AD  300A               	movlw	10
  1438  03AE  00AC               	movwf	___lbdiv@divisor
  1439  03AF  085C               	movf	_temp_drob,w
  1440  03B0  26D3               	fcall	___lbdiv
  1441  03B1  00DC               	movwf	_temp_drob
  1442  03B2                     l4022:	
  1443                           
  1444                           ;prog.c: 612: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1445  03B2  300A               	movlw	10
  1446  03B3  025C               	subwf	_temp_drob,w
  1447  03B4  1C03               	btfss	3,0
  1448  03B5  2BB8               	goto	u4090
  1449  03B6  3001               	movlw	1
  1450  03B7  2BB9               	goto	u4100
  1451  03B8                     u4090:	
  1452  03B8  3000               	movlw	0
  1453  03B9                     u4100:	
  1454  03B9  00B9               	movwf	indData@v_241
  1455                           
  1456                           ;prog.c: 613: setDigit(cd - v, temp_drob % 10);
  1457  03BA  300A               	movlw	10
  1458  03BB  00AC               	movwf	___lbmod@divisor
  1459  03BC  085C               	movf	_temp_drob,w
  1460  03BD  26B7               	fcall	___lbmod
  1461  03BE  00B4               	movwf	setDigit@data
  1462  03BF  0839               	movf	indData@v_241,w
  1463  03C0  023C               	subwf	indData@cd,w
  1464  03C1  2745               	fcall	_setDigit
  1465                           
  1466                           ;prog.c: 614: temp_drob /= 10;
  1467  03C2  300A               	movlw	10
  1468  03C3  00AC               	movwf	___lbdiv@divisor
  1469  03C4  085C               	movf	_temp_drob,w
  1470  03C5  26D3               	fcall	___lbdiv
  1471  03C6  00DC               	movwf	_temp_drob
  1472                           
  1473                           ;prog.c: 615: dN--;
  1474  03C7  03BD               	decf	indData@dN,f
  1475                           
  1476                           ;prog.c: 616: } while (temp_drob > 0);
  1477  03C8  085C               	movf	_temp_drob,w
  1478  03C9  1903               	btfsc	3,2
  1479  03CA  2BD0               	goto	l4036
  1480  03CB  2BB2               	goto	l4022
  1481  03CC                     l4032:	
  1482                           
  1483                           ;prog.c: 620: setDigit(dN, 0);
  1484  03CC  01B4               	clrf	setDigit@data
  1485  03CD  083D               	movf	indData@dN,w
  1486  03CE  2745               	fcall	_setDigit
  1487                           
  1488                           ;prog.c: 621: dN--;
  1489  03CF  03BD               	decf	indData@dN,f
  1490  03D0                     l4036:	
  1491  03D0  083D               	movf	indData@dN,w
  1492  03D1  1903               	btfsc	3,2
  1493  03D2  0008               	return
  1494  03D3  2BCC               	goto	l4032
  1495  03D4                     __end_of_indData:	
  1496                           
  1497                           	psect	text2
  1498  06B7                     __ptext2:	
  1499 ;; *************** function ___lbmod *****************
  1500 ;; Defined at:
  1501 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  dividend        1    wreg     unsigned char 
  1504 ;;  divisor         1   12[BANK0 ] unsigned char 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  dividend        1   14[BANK0 ] unsigned char 
  1507 ;;  rem             1   16[BANK0 ] unsigned char 
  1508 ;;  counter         1   15[BANK0 ] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      unsigned char 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0
  1513 ;; Tracked objects:
  1514 ;;		On entry : 300/0
  1515 ;;		On exit  : 300/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1518 ;;      Params:         0       1       0       0
  1519 ;;      Locals:         0       3       0       0
  1520 ;;      Temps:          0       1       0       0
  1521 ;;      Totals:         0       5       0       0
  1522 ;;Total ram usage:        5 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    3
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_indData
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           
  1533                           ;psect for function ___lbmod
  1534  06B7                     ___lbmod:	
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1538                           ;___lbmod@dividend stored from wreg
  1539  06B7  00AE               	movwf	___lbmod@dividend
  1540  06B8  3008               	movlw	8
  1541  06B9  00AF               	movwf	___lbmod@counter
  1542  06BA  01B0               	clrf	___lbmod@rem
  1543  06BB                     l3782:	
  1544  06BB  082E               	movf	___lbmod@dividend,w
  1545  06BC  00AD               	movwf	??___lbmod
  1546  06BD  3007               	movlw	7
  1547  06BE  1003               	clrc
  1548  06BF                     L3:	
  1549  06BF  0CAD               	rrf	??___lbmod,f
  1550  06C0  3EFF               	addlw	-1
  1551  06C1  1003               	clrc
  1552  06C2  1D03               	skipz
  1553  06C3  2EBF               	goto	L3
  1554  06C4  0D30               	rlf	___lbmod@rem,w
  1555  06C5  042D               	iorwf	??___lbmod,w
  1556  06C6  00B0               	movwf	___lbmod@rem
  1557  06C7  1003               	clrc
  1558  06C8  0DAE               	rlf	___lbmod@dividend,f
  1559  06C9  082C               	movf	___lbmod@divisor,w
  1560  06CA  0230               	subwf	___lbmod@rem,w
  1561  06CB  1C03               	skipc
  1562  06CC  2ECF               	goto	l3790
  1563  06CD  082C               	movf	___lbmod@divisor,w
  1564  06CE  02B0               	subwf	___lbmod@rem,f
  1565  06CF                     l3790:	
  1566  06CF  0BAF               	decfsz	___lbmod@counter,f
  1567  06D0  2EBB               	goto	l3782
  1568  06D1  0830               	movf	___lbmod@rem,w
  1569  06D2  0008               	return
  1570  06D3                     __end_of___lbmod:	
  1571                           
  1572                           	psect	text3
  1573  06D3                     __ptext3:	
  1574 ;; *************** function ___lbdiv *****************
  1575 ;; Defined at:
  1576 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  dividend        1    wreg     unsigned char 
  1579 ;;  divisor         1   12[BANK0 ] unsigned char 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  dividend        1   13[BANK0 ] unsigned char 
  1582 ;;  quotient        1   15[BANK0 ] unsigned char 
  1583 ;;  counter         1   14[BANK0 ] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      unsigned char 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0
  1588 ;; Tracked objects:
  1589 ;;		On entry : 300/0
  1590 ;;		On exit  : 300/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1593 ;;      Params:         0       1       0       0
  1594 ;;      Locals:         0       3       0       0
  1595 ;;      Temps:          0       0       0       0
  1596 ;;      Totals:         0       4       0       0
  1597 ;;Total ram usage:        4 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    3
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_indData
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function ___lbdiv
  1609  06D3                     ___lbdiv:	
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1613                           ;___lbdiv@dividend stored from wreg
  1614  06D3  00AD               	movwf	___lbdiv@dividend
  1615  06D4  01AF               	clrf	___lbdiv@quotient
  1616  06D5  082C               	movf	___lbdiv@divisor,w
  1617  06D6  1903               	btfsc	3,2
  1618  06D7  2EEC               	goto	l3774
  1619  06D8  01AE               	clrf	___lbdiv@counter
  1620  06D9                     l3760:	
  1621  06D9  0AAE               	incf	___lbdiv@counter,f
  1622  06DA  1BAC               	btfsc	___lbdiv@divisor,7
  1623  06DB  2EDF               	goto	l774
  1624  06DC  1003               	clrc
  1625  06DD  0DAC               	rlf	___lbdiv@divisor,f
  1626  06DE  2ED9               	goto	l3760
  1627  06DF                     l774:	
  1628  06DF  1003               	clrc
  1629  06E0  0DAF               	rlf	___lbdiv@quotient,f
  1630  06E1  082C               	movf	___lbdiv@divisor,w
  1631  06E2  022D               	subwf	___lbdiv@dividend,w
  1632  06E3  1C03               	skipc
  1633  06E4  2EE9               	goto	L4
  1634  06E5  082C               	movf	___lbdiv@divisor,w
  1635  06E6  02AD               	subwf	___lbdiv@dividend,f
  1636  06E7  142F               	bsf	___lbdiv@quotient,0
  1637  06E8  1003               	clrc
  1638  06E9                     L4:	
  1639  06E9  0CAC               	rrf	___lbdiv@divisor,f
  1640  06EA  0BAE               	decfsz	___lbdiv@counter,f
  1641  06EB  2EDF               	goto	l774
  1642  06EC                     l3774:	
  1643  06EC  082F               	movf	___lbdiv@quotient,w
  1644  06ED  0008               	return
  1645  06EE                     __end_of___lbdiv:	
  1646                           
  1647                           	psect	text4
  1648  0757                     __ptext4:	
  1649 ;; *************** function _Run_getTemp *****************
  1650 ;; Defined at:
  1651 ;;		line 743 in file "prog.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0
  1660 ;; Tracked objects:
  1661 ;;		On entry : 200/0
  1662 ;;		On exit  : 300/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1665 ;;      Params:         0       0       0       0
  1666 ;;      Locals:         0       0       0       0
  1667 ;;      Temps:          0       0       0       0
  1668 ;;      Totals:         0       0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    3
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _Run_getTemp
  1681  0757                     _Run_getTemp:	
  1682  0757  30C3               	movlw	-61
  1683                           
  1684                           ;prog.c: 745: getTemp_flags.Init = 1;
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1688  0758  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0759  1443               	bsf	_getTemp_flags,0
  1690                           
  1691                           ;prog.c: 746: getTemp_flags.Send_Address = 1;
  1692  075A  14C3               	bsf	_getTemp_flags,1
  1693                           
  1694                           ;prog.c: 747: getTemp_flags.CountAddressBytes = 0;
  1695  075B  05C3               	andwf	_getTemp_flags,f
  1696  075C  3078               	movlw	120
  1697                           
  1698                           ;prog.c: 748: getTemp_flags.SendConvertTemp = 1;
  1699  075D  1743               	bsf	_getTemp_flags,6
  1700                           
  1701                           ;prog.c: 749: getTemp_flags.PauseValue = 120;
  1702  075E  00C4               	movwf	_getTemp_flags+1
  1703  075F  30C3               	movlw	-61
  1704  0760  01C5               	clrf	_getTemp_flags+2
  1705                           
  1706                           ;prog.c: 750: getTemp_flags.SendGetTemp = 1;
  1707  0761  1446               	bsf	_getTemp_flags+3,0
  1708                           
  1709                           ;prog.c: 751: getTemp_flags.ReadData = 1;
  1710  0762  14C6               	bsf	_getTemp_flags+3,1
  1711                           
  1712                           ;prog.c: 752: getTemp_flags.CountDataBytes = 0;
  1713  0763  05C6               	andwf	_getTemp_flags+3,f
  1714                           
  1715                           ;prog.c: 753: getTemp_flags.Error = 0;
  1716  0764  13C6               	bcf	_getTemp_flags+3,7
  1717                           
  1718                           ;prog.c: 755: getTemp_flags.ActiveProcess = 1;
  1719  0765  1447               	bsf	_getTemp_flags+4,0
  1720                           
  1721                           ;prog.c: 756: getTemp_flags.DataIsRead = 0;
  1722  0766  1346               	bcf	_getTemp_flags+3,6
  1723  0767  0008               	return
  1724  0768                     __end_of_Run_getTemp:	
  1725                           
  1726                           	psect	text5
  1727  07C4                     __ptext5:	
  1728 ;; *************** function _Reset_powerOnInterval *****************
  1729 ;; Defined at:
  1730 ;;		line 85 in file "prog.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg
  1739 ;; Tracked objects:
  1740 ;;		On entry : 200/0
  1741 ;;		On exit  : 300/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1744 ;;      Params:         0       0       0       0
  1745 ;;      Locals:         0       0       0       0
  1746 ;;      Temps:          0       0       0       0
  1747 ;;      Totals:         0       0       0       0
  1748 ;;Total ram usage:        0 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    3
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           
  1759                           ;psect for function _Reset_powerOnInterval
  1760  07C4                     _Reset_powerOnInterval:	
  1761                           
  1762                           ;prog.c: 86: powerOnInterval = 700;
  1763                           
  1764                           ;incstack = 0
  1765                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1766  07C4  30BC               	movlw	188
  1767  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  1768  07C6  00D0               	movwf	_powerOnInterval
  1769  07C7  3002               	movlw	2
  1770  07C8  00D1               	movwf	_powerOnInterval+1
  1771  07C9  0008               	return
  1772  07CA                     __end_of_Reset_powerOnInterval:	
  1773                           
  1774                           	psect	text6
  1775  03D4                     __ptext6:	
  1776 ;; *************** function _FindCell *****************
  1777 ;; Defined at:
  1778 ;;		line 444 in file "prog.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  addressStart    1    wreg     unsigned char 
  1781 ;;  previous        1   20[BANK0 ] unsigned char 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  addressStart    1   31[BANK0 ] unsigned char 
  1784 ;;  i               1   32[BANK0 ] unsigned char 
  1785 ;;  CellsData       8   21[BANK0 ] unsigned char [8]
  1786 ;;  CellIsEmpty     1   30[BANK0 ] unsigned char 
  1787 ;;  address         1   33[BANK0 ] unsigned char 
  1788 ;;  addressNew      1   29[BANK0 ] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      unsigned char 
  1791 ;; Registers used:
  1792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : 200/100
  1795 ;;		On exit  : B00/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1798 ;;      Params:         0       1       0       0
  1799 ;;      Locals:         0      13       0       0
  1800 ;;      Temps:          0       0       0       0
  1801 ;;      Totals:         0      14       0       0
  1802 ;;Total ram usage:       14 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    5
  1805 ;; This function calls:
  1806 ;;		_FillArrayFromEEPROM
  1807 ;;		_waitInterrupt
  1808 ;; This function is called by:
  1809 ;;		_main
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _FindCell
  1815  03D4                     _FindCell:	
  1816                           
  1817                           ;incstack = 0
  1818                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1819                           ;FindCell@addressStart stored from wreg
  1820  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1821  03D5  00BF               	movwf	FindCell@addressStart
  1822                           
  1823                           ;prog.c: 445: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1824  03D6  3A80               	xorlw	128
  1825  03D7  1D03               	btfss	3,2
  1826  03D8  2BE0               	goto	l271
  1827                           
  1828                           ;prog.c: 446: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1829  03D9  0834               	movf	FindCell@previous,w
  1830  03DA  1903               	btfsc	3,2
  1831  03DB  2BDE               	goto	l3936
  1832  03DC  01BF               	clrf	FindCell@addressStart
  1833  03DD  2BE0               	goto	l271
  1834  03DE                     l3936:	
  1835  03DE  3078               	movlw	120
  1836  03DF  00BF               	movwf	FindCell@addressStart
  1837  03E0                     l271:	
  1838                           
  1839                           ;prog.c: 447: }
  1840                           ;prog.c: 448: unsigned char address = addressStart;
  1841  03E0  083F               	movf	FindCell@addressStart,w
  1842  03E1  00C1               	movwf	FindCell@address
  1843                           
  1844                           ;prog.c: 449: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  1845  03E2  3080               	movlw	128
  1846  03E3  00BD               	movwf	FindCell@addressNew
  1847  03E4                     l3938:	
  1848                           
  1849                           ;prog.c: 452: if (!previous) {
  1850  03E4  0834               	movf	FindCell@previous,w
  1851  03E5  1D03               	btfss	3,2
  1852  03E6  2BF0               	goto	l3946
  1853                           
  1854                           ;prog.c: 453: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  1855  03E7  3078               	movlw	120
  1856  03E8  0641               	xorwf	FindCell@address,w
  1857  03E9  1D03               	btfss	3,2
  1858  03EA  2BED               	goto	l3944
  1859  03EB  01C1               	clrf	FindCell@address
  1860  03EC  2BF8               	goto	l3952
  1861  03ED                     l3944:	
  1862  03ED  3008               	movlw	8
  1863  03EE  07C1               	addwf	FindCell@address,f
  1864  03EF  2BF8               	goto	l3952
  1865  03F0                     l3946:	
  1866                           
  1867                           ;prog.c: 455: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  1868  03F0  0841               	movf	FindCell@address,w
  1869  03F1  1D03               	btfss	3,2
  1870  03F2  2BF6               	goto	l3950
  1871  03F3  3078               	movlw	120
  1872  03F4  00C1               	movwf	FindCell@address
  1873  03F5  2BF8               	goto	l3952
  1874  03F6                     l3950:	
  1875  03F6  3008               	movlw	8
  1876  03F7  02C1               	subwf	FindCell@address,f
  1877  03F8                     l3952:	
  1878                           
  1879                           ;prog.c: 456: }
  1880                           ;prog.c: 458: unsigned char CellsData [(sizeof(DS_Address))];
  1881                           ;prog.c: 459: waitInterrupt();
  1882  03F8  27CA               	fcall	_waitInterrupt
  1883                           
  1884                           ;prog.c: 460: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  1885  03F9  0841               	movf	FindCell@address,w
  1886  03FA  00AF               	movwf	FillArrayFromEEPROM@address_start
  1887  03FB  3008               	movlw	8
  1888  03FC  00B0               	movwf	FillArrayFromEEPROM@quantity
  1889  03FD  3035               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  1890  03FE  2768               	fcall	_FillArrayFromEEPROM
  1891                           
  1892                           ;prog.c: 461: unsigned char CellIsEmpty = 1;
  1893  03FF  01BE               	clrf	FindCell@CellIsEmpty
  1894  0400  0ABE               	incf	FindCell@CellIsEmpty,f
  1895                           
  1896                           ;prog.c: 462: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  1897  0401  01C0               	clrf	FindCell@i
  1898  0402                     l3964:	
  1899                           
  1900                           ;prog.c: 463: if (CellsData[i] != 0xFF) {
  1901  0402  0840               	movf	FindCell@i,w
  1902  0403  3E35               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  1903  0404  0084               	movwf	4
  1904  0405  1383               	bcf	3,7	;select IRP bank0
  1905  0406  0F00               	incfsz	0,w
  1906                           
  1907                           ;prog.c: 464: CellIsEmpty = 0;
  1908  0407  01BE               	clrf	FindCell@CellIsEmpty
  1909  0408  3008               	movlw	8
  1910  0409  0AC0               	incf	FindCell@i,f
  1911  040A  0240               	subwf	FindCell@i,w
  1912  040B  1C03               	skipc
  1913  040C  2C02               	goto	l3964
  1914                           
  1915                           ;prog.c: 465: }
  1916                           ;prog.c: 466: }
  1917                           ;prog.c: 468: if (CellIsEmpty == 0) {
  1918  040D  083E               	movf	FindCell@CellIsEmpty,w
  1919  040E  1D03               	btfss	3,2
  1920  040F  2C13               	goto	l3976
  1921                           
  1922                           ;prog.c: 469: addressNew = address;
  1923  0410  0841               	movf	FindCell@address,w
  1924  0411  00BD               	movwf	FindCell@addressNew
  1925                           
  1926                           ;prog.c: 470: break;
  1927  0412  2C17               	goto	l3978
  1928  0413                     l3976:	
  1929                           
  1930                           ;prog.c: 471: }
  1931                           ;prog.c: 472: } while (address != addressStart);
  1932  0413  0841               	movf	FindCell@address,w
  1933  0414  063F               	xorwf	FindCell@addressStart,w
  1934  0415  1D03               	skipz
  1935  0416  2BE4               	goto	l3938
  1936  0417                     l3978:	
  1937                           
  1938                           ;prog.c: 473: return addressNew;
  1939  0417  083D               	movf	FindCell@addressNew,w
  1940  0418  0008               	return
  1941  0419                     __end_of_FindCell:	
  1942                           
  1943                           	psect	text7
  1944  01F3                     __ptext7:	
  1945 ;; *************** function _EditAddressMemory *****************
  1946 ;; Defined at:
  1947 ;;		line 652 in file "prog.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  i               1   10[BANK1 ] unsigned char 
  1952 ;;  i               1   11[BANK1 ] unsigned char 
  1953 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  1954 ;;  cell            1   13[BANK1 ] unsigned char 
  1955 ;;  CellIsEmpty     1   12[BANK1 ] unsigned char 
  1956 ;;  RereadCell      1    9[BANK1 ] unsigned char 
  1957 ;;  ErrorShowed     1    8[BANK1 ] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 300/100
  1964 ;;		On exit  : B00/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1967 ;;      Params:         0       0       0       0
  1968 ;;      Locals:         0       0      14       0
  1969 ;;      Temps:          0       1       0       0
  1970 ;;      Totals:         0       1      14       0
  1971 ;;Total ram usage:       15 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    6
  1974 ;; This function calls:
  1975 ;;		_CellToInd
  1976 ;;		_INIT
  1977 ;;		_RX
  1978 ;;		_ReadCell
  1979 ;;		_ShowError
  1980 ;;		_TX
  1981 ;;		_WriteArrayToEEPROM
  1982 ;;		_calc_crc
  1983 ;;		_clrInd
  1984 ;;		_refreshInd
  1985 ;;		_setPoint
  1986 ;;		_waitInterrupt
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _EditAddressMemory
  1994  01F3                     _EditAddressMemory:	
  1995                           
  1996                           ;prog.c: 653: getTemp_flags.ActiveProcess = 0;
  1997                           
  1998                           ;incstack = 0
  1999                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2000  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2001  01F4  1047               	bcf	_getTemp_flags+4,0
  2002                           
  2003                           ;prog.c: 655: PowerBlocked++;
  2004  01F5  0AD9               	incf	_PowerBlocked,f
  2005                           
  2006                           ;prog.c: 657: clrInd();
  2007  01F6  27A5               	fcall	_clrInd
  2008  01F7  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2009                           
  2010                           ;prog.c: 659: unsigned char cell = 0;
  2011  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  2012  01F9  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2013                           
  2014                           ;prog.c: 660: unsigned char CellIsEmpty = 1;
  2015  01FA  01AC               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2016  01FB  0AAC               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2017                           
  2018                           ;prog.c: 661: unsigned char CellsData [(sizeof(DS_Address))];
  2019                           ;prog.c: 663: ReadCell(cell, CellsData, &CellIsEmpty);
  2020  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  2021  01FD  00B4               	movwf	ReadCell@CellsData
  2022  01FE  30AC               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2023  01FF  00B5               	movwf	ReadCell@CellIsEmpty
  2024  0200  3000               	movlw	0
  2025  0201  25EC               	fcall	_ReadCell
  2026                           
  2027                           ;prog.c: 664: CellToInd(cell);
  2028  0202  3000               	movlw	0
  2029  0203  2540               	fcall	_CellToInd
  2030                           
  2031                           ;prog.c: 666: unsigned char ErrorShowed = 0;
  2032                           
  2033                           ;prog.c: 667: unsigned char RereadCell = 1;
  2034  0204  22B1               	fcall	PL6	;call to abstracted procedure
  2035  0205                     l4056:	
  2036                           
  2037                           ;prog.c: 670: if(KeyCode != 0 && ErrorShowed) {
  2038  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0206  0858               	movf	_KeyCode,w	;volatile
  2040  0207  1903               	btfsc	3,2
  2041  0208  2A10               	goto	l4064
  2042  0209  1683               	bsf	3,5	;RP0=1, select bank1
  2043  020A  0828               	movf	EditAddressMemory@ErrorShowed^(0+128),w
  2044  020B  1903               	btfsc	3,2
  2045  020C  2A10               	goto	l4064
  2046                           
  2047                           ;prog.c: 671: KeyCode = 0;
  2048  020D  1283               	bcf	3,5	;RP0=0, select bank0
  2049  020E  01D8               	clrf	_KeyCode	;volatile
  2050                           
  2051                           ;prog.c: 672: ErrorShowed = 0;
  2052                           
  2053                           ;prog.c: 673: RereadCell = 1;
  2054  020F  22B1               	fcall	PL6	;call to abstracted procedure
  2055  0210                     l4064:	
  2056                           
  2057                           ;prog.c: 674: }
  2058                           ;prog.c: 676: if (KeyCode == 31) {
  2059  0210  301F               	movlw	31
  2060  0211  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0212  0658               	xorwf	_KeyCode,w	;volatile
  2062  0213  1D03               	btfss	3,2
  2063  0214  2A22               	goto	l4076
  2064                           
  2065                           ;prog.c: 677: KeyCode = 0;
  2066  0215  01D8               	clrf	_KeyCode	;volatile
  2067                           
  2068                           ;prog.c: 678: if (cell > 0) {
  2069  0216  1683               	bsf	3,5	;RP0=1, select bank1
  2070  0217  082D               	movf	EditAddressMemory@cell^(0+128),w
  2071  0218  1903               	btfsc	3,2
  2072  0219  2A1C               	goto	l4072
  2073                           
  2074                           ;prog.c: 679: cell--;
  2075  021A  03AD               	decf	EditAddressMemory@cell^(0+128),f
  2076                           
  2077                           ;prog.c: 680: } else {
  2078  021B  2A1E               	goto	l4074
  2079  021C                     l4072:	
  2080                           
  2081                           ;prog.c: 681: cell = 16 - 1;
  2082  021C  300F               	movlw	15
  2083  021D  00AD               	movwf	EditAddressMemory@cell^(0+128)
  2084  021E                     l4074:	
  2085                           
  2086                           ;prog.c: 682: }
  2087                           ;prog.c: 683: RereadCell = 1;
  2088  021E  1683               	bsf	3,5	;RP0=1, select bank1
  2089  021F  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2090  0220  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2091                           
  2092                           ;prog.c: 684: } else if (KeyCode == 32) {
  2093  0221  2A92               	goto	l4170
  2094  0222                     l4076:	
  2095  0222  3020               	movlw	32
  2096  0223  0658               	xorwf	_KeyCode,w	;volatile
  2097  0224  1D03               	btfss	3,2
  2098  0225  2A30               	goto	l4088
  2099                           
  2100                           ;prog.c: 685: KeyCode = 0;
  2101  0226  01D8               	clrf	_KeyCode	;volatile
  2102                           
  2103                           ;prog.c: 686: if (cell < 16 - 1) {
  2104  0227  300F               	movlw	15
  2105  0228  1683               	bsf	3,5	;RP0=1, select bank1
  2106  0229  022D               	subwf	EditAddressMemory@cell^(0+128),w
  2107  022A  1803               	skipnc
  2108  022B  2A2E               	goto	l4084
  2109                           
  2110                           ;prog.c: 687: cell++;
  2111  022C  0AAD               	incf	EditAddressMemory@cell^(0+128),f
  2112                           
  2113                           ;prog.c: 688: } else {
  2114  022D  2A1E               	goto	l4074
  2115  022E                     l4084:	
  2116                           
  2117                           ;prog.c: 689: cell = 0;
  2118  022E  01AD               	clrf	EditAddressMemory@cell^(0+128)
  2119  022F  2A1E               	goto	l4074
  2120  0230                     l4088:	
  2121  0230  3022               	movlw	34
  2122  0231  0658               	xorwf	_KeyCode,w	;volatile
  2123  0232  1D03               	btfss	3,2
  2124  0233  2A38               	goto	l4098
  2125                           
  2126                           ;prog.c: 693: KeyCode = 0;
  2127  0234  01D8               	clrf	_KeyCode	;volatile
  2128                           
  2129                           ;prog.c: 694: clrInd();
  2130  0235  27A5               	fcall	_clrInd
  2131                           
  2132                           ;prog.c: 695: refreshInd();
  2133  0236  2732               	fcall	_refreshInd
  2134                           
  2135                           ;prog.c: 696: break;
  2136  0237  2AAF               	goto	l4182
  2137  0238                     l4098:	
  2138  0238  3023               	movlw	35
  2139  0239  0658               	xorwf	_KeyCode,w	;volatile
  2140  023A  1D03               	btfss	3,2
  2141  023B  2A79               	goto	l4146
  2142  023C  1683               	bsf	3,5	;RP0=1, select bank1
  2143  023D  0B2C               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2144  023E  2A79               	goto	l4146
  2145                           
  2146                           ;prog.c: 698: KeyCode = 0;
  2147  023F  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0240  01D8               	clrf	_KeyCode	;volatile
  2149                           
  2150                           ;prog.c: 699: waitInterrupt();
  2151  0241  27CA               	fcall	_waitInterrupt
  2152                           
  2153                           ;prog.c: 700: if (INIT()) {
  2154  0242  2511               	fcall	_INIT
  2155  0243  1C03               	btfss	3,0
  2156  0244  2A74               	goto	l4138
  2157                           
  2158                           ;prog.c: 701: waitInterrupt();
  2159  0245  27CA               	fcall	_waitInterrupt
  2160                           
  2161                           ;prog.c: 702: TX(0x33);
  2162  0246  3033               	movlw	51
  2163  0247  256E               	fcall	_TX
  2164                           
  2165                           ;prog.c: 703: waitInterrupt();
  2166  0248  27CA               	fcall	_waitInterrupt
  2167                           
  2168                           ;prog.c: 704: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2169  0249  1683               	bsf	3,5	;RP0=1, select bank1
  2170  024A  01AA               	clrf	EditAddressMemory@i^(0+128)
  2171  024B                     l4120:	
  2172                           
  2173                           ;prog.c: 705: waitInterrupt();
  2174  024B  27CA               	fcall	_waitInterrupt
  2175                           
  2176                           ;prog.c: 706: CellsData[i] = RX();
  2177  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2178  024D  082A               	movf	EditAddressMemory@i^(0+128),w
  2179  024E  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2180  024F  0084               	movwf	4
  2181  0250  2677               	fcall	_RX
  2182  0251  1383               	bcf	3,7	;select IRP bank1
  2183  0252  0080               	movwf	0
  2184  0253  3008               	movlw	8
  2185  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2186  0255  0AAA               	incf	EditAddressMemory@i^(0+128),f
  2187  0256  022A               	subwf	EditAddressMemory@i^(0+128),w
  2188  0257  1C03               	skipc
  2189  0258  2A4B               	goto	l4120
  2190                           
  2191                           ;prog.c: 707: }
  2192                           ;prog.c: 708: if (CellsData[(sizeof(DS_Address)) - 1] == calc_crc(CellsData, (sizeof(DS_
      +                          Address)) - 1)) {
  2193  0259  3007               	movlw	7
  2194  025A  1283               	bcf	3,5	;RP0=0, select bank0
  2195  025B  00AC               	movwf	calc_crc@len
  2196  025C  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2197  025D  2656               	fcall	_calc_crc
  2198  025E  1683               	bsf	3,5	;RP0=1, select bank1
  2199  025F  0627               	xorwf	(EditAddressMemory@CellsData^(0+128)+7),w
  2200  0260  1D03               	skipz
  2201  0261  2A74               	goto	l4138
  2202  0262                     l4130:	
  2203                           
  2204                           ;prog.c: 709: waitInterrupt();
  2205  0262  27CA               	fcall	_waitInterrupt
  2206                           
  2207                           ;prog.c: 710: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2208  0263  1683               	bsf	3,5	;RP0=1, select bank1
  2209  0264  082D               	movf	EditAddressMemory@cell^(0+128),w
  2210  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2211  0266  00BA               	movwf	??_EditAddressMemory
  2212  0267  1003               	clrc
  2213  0268  0DBA               	rlf	??_EditAddressMemory,f
  2214  0269  1003               	clrc
  2215  026A  0DBA               	rlf	??_EditAddressMemory,f
  2216  026B  1003               	clrc
  2217  026C  0D3A               	rlf	??_EditAddressMemory,w
  2218  026D  00AF               	movwf	WriteArrayToEEPROM@address_start
  2219  026E  3008               	movlw	8
  2220  026F  00B0               	movwf	WriteArrayToEEPROM@quantity
  2221  0270  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2222  0271  271F               	fcall	_WriteArrayToEEPROM
  2223                           
  2224                           ;prog.c: 711: waitInterrupt();
  2225  0272  27CA               	fcall	_waitInterrupt
  2226  0273  2A1E               	goto	l4074
  2227  0274                     l4138:	
  2228                           
  2229                           ;prog.c: 714: ShowError();
  2230  0274  2797               	fcall	_ShowError
  2231                           
  2232                           ;prog.c: 715: ErrorShowed = 1;
  2233  0275  1683               	bsf	3,5	;RP0=1, select bank1
  2234  0276  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2235  0277  0AA8               	incf	EditAddressMemory@ErrorShowed^(0+128),f
  2236  0278  2A92               	goto	l4170
  2237  0279                     l4146:	
  2238  0279  3024               	movlw	36
  2239  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2240  027B  0658               	xorwf	_KeyCode,w	;volatile
  2241  027C  1683               	bsf	3,5	;RP0=1, select bank1
  2242  027D  1D03               	btfss	3,2
  2243  027E  2A93               	goto	L5
  2244  027F  082C               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2245  0280  1D03               	btfss	3,2
  2246  0281  2A92               	goto	l4170
  2247                           
  2248                           ;prog.c: 722: KeyCode = 0;
  2249  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0283  01D8               	clrf	_KeyCode	;volatile
  2251                           
  2252                           ;prog.c: 723: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2253  0284  1683               	bsf	3,5	;RP0=1, select bank1
  2254  0285  01AB               	clrf	EditAddressMemory@i_261^(0+128)
  2255  0286                     l4156:	
  2256                           
  2257                           ;prog.c: 724: CellsData[i] = 0xFF;
  2258  0286  082B               	movf	EditAddressMemory@i_261^(0+128),w
  2259  0287  3EA0               	addlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2260  0288  0084               	movwf	4
  2261  0289  30FF               	movlw	255
  2262  028A  1383               	bcf	3,7	;select IRP bank1
  2263  028B  0080               	movwf	0
  2264  028C  3008               	movlw	8
  2265  028D  0AAB               	incf	EditAddressMemory@i_261^(0+128),f
  2266  028E  022B               	subwf	EditAddressMemory@i_261^(0+128),w
  2267  028F  1C03               	skipc
  2268  0290  2A86               	goto	l4156
  2269  0291  2A62               	goto	l4130
  2270  0292                     l4170:	
  2271                           ;prog.c: 727: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2272                           
  2273                           ;prog.c: 725: }
  2274                           ;prog.c: 726: waitInterrupt();
  2275                           
  2276                           
  2277                           ;prog.c: 730: }
  2278                           ;prog.c: 732: if(RereadCell){
  2279  0292  1683               	bsf	3,5	;RP0=1, select bank1
  2280  0293                     L5:	
  2281  0293  0829               	movf	EditAddressMemory@RereadCell^(0+128),w
  2282  0294  1903               	btfsc	3,2
  2283  0295  2A05               	goto	l4056
  2284  0296  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2285                           
  2286                           ;prog.c: 733: RereadCell = 0;
  2287  0297  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2288                           
  2289                           ;prog.c: 734: ReadCell(cell, CellsData, &CellIsEmpty);
  2290  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0299  00B4               	movwf	ReadCell@CellsData
  2292  029A  30AC               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2293  029B  00B5               	movwf	ReadCell@CellIsEmpty
  2294  029C  1683               	bsf	3,5	;RP0=1, select bank1
  2295  029D  082D               	movf	EditAddressMemory@cell^(0+128),w
  2296  029E  25EC               	fcall	_ReadCell
  2297                           
  2298                           ;prog.c: 735: CellToInd(cell);
  2299  029F  1683               	bsf	3,5	;RP0=1, select bank1
  2300  02A0  082D               	movf	EditAddressMemory@cell^(0+128),w
  2301  02A1  2540               	fcall	_CellToInd
  2302                           
  2303                           ;prog.c: 736: setPoint(1, !CellIsEmpty);
  2304  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  2305  02A3  082C               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2306  02A4  1D03               	btfss	3,2
  2307  02A5  2AA8               	goto	u4290
  2308  02A6  3001               	movlw	1
  2309  02A7  2AA9               	goto	u4300
  2310  02A8                     u4290:	
  2311  02A8  3000               	movlw	0
  2312  02A9                     u4300:	
  2313  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  2314  02AA  00AC               	movwf	setPoint@value
  2315  02AB  3001               	movlw	1
  2316  02AC  2779               	fcall	_setPoint
  2317                           
  2318                           ;prog.c: 737: refreshInd();
  2319  02AD  2732               	fcall	_refreshInd
  2320  02AE  2A05               	goto	l4056
  2321  02AF                     l4182:	
  2322                           
  2323                           ;prog.c: 738: }
  2324                           ;prog.c: 739: }
  2325                           ;prog.c: 740: PowerBlocked--;
  2326  02AF  03D9               	decf	_PowerBlocked,f
  2327  02B0  0008               	return
  2328  02B1                     __end_of_EditAddressMemory:	
  2329  02B1                     PL6:	
  2330  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2331  02B2  01A8               	clrf	EditAddressMemory@ErrorShowed^(0+128)
  2332  02B3  01A9               	clrf	EditAddressMemory@RereadCell^(0+128)
  2333  02B4  0AA9               	incf	EditAddressMemory@RereadCell^(0+128),f
  2334  02B5  0008               	return
  2335  02B6                     __end_ofPL6:	
  2336                           
  2337                           	psect	text8
  2338  0779                     __ptext8:	
  2339 ;; *************** function _setPoint *****************
  2340 ;; Defined at:
  2341 ;;		line 97 in file "prog.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  dignum          1    wreg     unsigned char 
  2344 ;;  value           1   12[BANK0 ] unsigned char 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;  dignum          1   13[BANK0 ] unsigned char 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2351 ;; Tracked objects:
  2352 ;;		On entry : 300/0
  2353 ;;		On exit  : B00/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2356 ;;      Params:         0       1       0       0
  2357 ;;      Locals:         0       1       0       0
  2358 ;;      Temps:          0       0       0       0
  2359 ;;      Totals:         0       2       0       0
  2360 ;;Total ram usage:        2 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    3
  2363 ;; This function calls:
  2364 ;;		Nothing
  2365 ;; This function is called by:
  2366 ;;		_indData
  2367 ;;		_EditAddressMemory
  2368 ;;		_main
  2369 ;; This function uses a non-reentrant model
  2370 ;;
  2371                           
  2372                           
  2373                           ;psect for function _setPoint
  2374  0779                     _setPoint:	
  2375                           
  2376                           ;incstack = 0
  2377                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2378                           ;setPoint@dignum stored from wreg
  2379  0779  00AD               	movwf	setPoint@dignum
  2380                           
  2381                           ;prog.c: 98: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 0
      +                          b10111111;
  2382  077A  0B2C               	decfsz	setPoint@value,w
  2383  077B  2F82               	goto	l3624
  2384  077C  082D               	movf	setPoint@dignum,w
  2385  077D  3E4A               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2386  077E  0084               	movwf	4
  2387  077F  1383               	bcf	3,7	;select IRP bank0
  2388  0780  1700               	bsf	0,6
  2389  0781  0008               	return
  2390  0782                     l3624:	
  2391  0782  082D               	movf	setPoint@dignum,w
  2392  0783  3E4A               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2393  0784  0084               	movwf	4
  2394  0785  1383               	bcf	3,7	;select IRP bank0
  2395  0786  1300               	bcf	0,6
  2396  0787  0008               	return
  2397  0788                     __end_of_setPoint:	
  2398                           
  2399                           	psect	text9
  2400  0656                     __ptext9:	
  2401 ;; *************** function _calc_crc *****************
  2402 ;; Defined at:
  2403 ;;		line 256 in file "prog.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  mas             1    wreg     PTR unsigned char 
  2406 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2407 ;;  len             1   12[BANK0 ] unsigned char 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  mas             1   15[BANK0 ] PTR unsigned char 
  2410 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  2411 ;;  fb              1   14[BANK0 ] unsigned char 
  2412 ;;  i               1   16[BANK0 ] unsigned char 
  2413 ;;  dat             1   13[BANK0 ] unsigned char 
  2414 ;;  crc             1   17[BANK0 ] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      unsigned char 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2419 ;; Tracked objects:
  2420 ;;		On entry : B00/0
  2421 ;;		On exit  : B00/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2424 ;;      Params:         0       1       0       0
  2425 ;;      Locals:         0       5       0       0
  2426 ;;      Temps:          0       0       0       0
  2427 ;;      Totals:         0       6       0       0
  2428 ;;Total ram usage:        6 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    3
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_EditAddressMemory
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function _calc_crc
  2440  0656                     _calc_crc:	
  2441                           
  2442                           ;incstack = 0
  2443                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2444                           ;calc_crc@mas stored from wreg
  2445  0656  00AF               	movwf	calc_crc@mas
  2446                           
  2447                           ;prog.c: 257: unsigned char crc = 0;
  2448  0657  01B1               	clrf	calc_crc@crc
  2449                           
  2450                           ;prog.c: 258: while (len--) {
  2451  0658  2E72               	goto	l3720
  2452  0659                     l3700:	
  2453                           
  2454                           ;prog.c: 259: unsigned char dat = *mas++;
  2455  0659  082F               	movf	calc_crc@mas,w
  2456  065A  0084               	movwf	4
  2457  065B  0800               	movf	0,w
  2458  065C  00AD               	movwf	calc_crc@dat
  2459  065D  0AAF               	incf	calc_crc@mas,f
  2460                           
  2461                           ;prog.c: 260: for (unsigned char i = 0; i < 8; i++) {
  2462  065E  01B0               	clrf	calc_crc@i
  2463  065F                     l3710:	
  2464                           
  2465                           ;prog.c: 261: unsigned char fb = (crc ^ dat) & 1;
  2466  065F  0831               	movf	calc_crc@crc,w
  2467  0660  062D               	xorwf	calc_crc@dat,w
  2468  0661  00AE               	movwf	calc_crc@fb
  2469  0662  3001               	movlw	1
  2470  0663  05AE               	andwf	calc_crc@fb,f
  2471                           
  2472                           ;prog.c: 262: crc >>= 1;
  2473  0664  1003               	clrc
  2474  0665  0CB1               	rrf	calc_crc@crc,f
  2475                           
  2476                           ;prog.c: 263: dat >>= 1;
  2477  0666  1003               	clrc
  2478  0667  0CAD               	rrf	calc_crc@dat,f
  2479                           
  2480                           ;prog.c: 264: if (fb) crc ^= 0x8c;
  2481  0668  082E               	movf	calc_crc@fb,w
  2482  0669  1903               	btfsc	3,2
  2483  066A  2E6D               	goto	l3718
  2484  066B  308C               	movlw	140
  2485  066C  06B1               	xorwf	calc_crc@crc,f
  2486  066D                     l3718:	
  2487  066D  3008               	movlw	8
  2488  066E  0AB0               	incf	calc_crc@i,f
  2489  066F  0230               	subwf	calc_crc@i,w
  2490  0670  1C03               	skipc
  2491  0671  2E5F               	goto	l3710
  2492  0672                     l3720:	
  2493  0672  03AC               	decf	calc_crc@len,f
  2494  0673  0F2C               	incfsz	calc_crc@len,w
  2495  0674  2E59               	goto	l3700
  2496                           
  2497                           ;prog.c: 265: }
  2498                           ;prog.c: 266: }
  2499                           ;prog.c: 267: return crc;
  2500  0675  0831               	movf	calc_crc@crc,w
  2501  0676  0008               	return
  2502  0677                     __end_of_calc_crc:	
  2503                           
  2504                           	psect	text10
  2505  071F                     __ptext10:	
  2506 ;; *************** function _WriteArrayToEEPROM *****************
  2507 ;; Defined at:
  2508 ;;		line 195 in file "prog.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  container       1    wreg     PTR unsigned char 
  2511 ;;		 -> EditAddressMemory@CellsData(8), 
  2512 ;;  address_star    1   15[BANK0 ] unsigned char 
  2513 ;;  quantity        1   16[BANK0 ] unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  container       1   18[BANK0 ] PTR unsigned char 
  2516 ;;		 -> EditAddressMemory@CellsData(8), 
  2517 ;;  i               1   19[BANK0 ] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 300/0
  2524 ;;		On exit  : 300/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2527 ;;      Params:         0       2       0       0
  2528 ;;      Locals:         0       2       0       0
  2529 ;;      Temps:          0       1       0       0
  2530 ;;      Totals:         0       5       0       0
  2531 ;;Total ram usage:        5 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    4
  2534 ;; This function calls:
  2535 ;;		_EEWR
  2536 ;;		_waitInterrupt
  2537 ;; This function is called by:
  2538 ;;		_EditAddressMemory
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           
  2543                           ;psect for function _WriteArrayToEEPROM
  2544  071F                     _WriteArrayToEEPROM:	
  2545                           
  2546                           ;incstack = 0
  2547                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2548                           ;WriteArrayToEEPROM@container stored from wreg
  2549  071F  00B2               	movwf	WriteArrayToEEPROM@container
  2550                           
  2551                           ;prog.c: 196: for (unsigned char i = 0; i < quantity; i++) {
  2552  0720  01B3               	clrf	WriteArrayToEEPROM@i
  2553  0721                     l3636:	
  2554  0721  0830               	movf	WriteArrayToEEPROM@quantity,w
  2555  0722  0233               	subwf	WriteArrayToEEPROM@i,w
  2556  0723  1803               	btfsc	3,0
  2557  0724  0008               	return
  2558                           
  2559                           ;prog.c: 197: waitInterrupt();
  2560  0725  27CA               	fcall	_waitInterrupt
  2561                           
  2562                           ;prog.c: 198: EEWR(address_start + i, container[i]);
  2563  0726  0833               	movf	WriteArrayToEEPROM@i,w
  2564  0727  0732               	addwf	WriteArrayToEEPROM@container,w
  2565  0728  00B1               	movwf	??_WriteArrayToEEPROM
  2566  0729  0084               	movwf	4
  2567  072A  1383               	bcf	3,7	;select IRP bank0
  2568  072B  0800               	movf	0,w
  2569  072C  00AC               	movwf	EEWR@data
  2570  072D  0833               	movf	WriteArrayToEEPROM@i,w
  2571  072E  072F               	addwf	WriteArrayToEEPROM@address_start,w
  2572  072F  2707               	fcall	_EEWR
  2573  0730  0AB3               	incf	WriteArrayToEEPROM@i,f
  2574  0731  2F21               	goto	l3636
  2575  0732                     __end_of_WriteArrayToEEPROM:	
  2576                           
  2577                           	psect	text11
  2578  07CA                     __ptext11:	
  2579 ;; *************** function _waitInterrupt *****************
  2580 ;; Defined at:
  2581 ;;		line 80 in file "prog.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		None
  2590 ;; Tracked objects:
  2591 ;;		On entry : 200/0
  2592 ;;		On exit  : 300/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2595 ;;      Params:         0       0       0       0
  2596 ;;      Locals:         0       0       0       0
  2597 ;;      Temps:          0       0       0       0
  2598 ;;      Totals:         0       0       0       0
  2599 ;;Total ram usage:        0 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    3
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_WriteArrayToEEPROM
  2606 ;;		_FindCell
  2607 ;;		_EditAddressMemory
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           
  2613                           ;psect for function _waitInterrupt
  2614  07CA                     _waitInterrupt:	
  2615                           
  2616                           ;prog.c: 81: endInterrupt = 0;
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _waitInterrupt: []
  2620  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  2621  07CB  115E               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2622  07CC                     l81:	
  2623                           ;prog.c: 82: while (!endInterrupt);
  2624                           
  2625  07CC  195E               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2626  07CD  0008               	return
  2627  07CE  2FCC               	goto	l81
  2628  07CF                     __end_of_waitInterrupt:	
  2629                           
  2630                           	psect	text12
  2631  0707                     __ptext12:	
  2632 ;; *************** function _EEWR *****************
  2633 ;; Defined at:
  2634 ;;		line 162 in file "prog.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  address         1    wreg     unsigned char 
  2637 ;;  data            1   12[BANK0 ] unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  address         1   13[BANK0 ] unsigned char 
  2640 ;;  INTCON_BUP      1   14[BANK0 ] volatile unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg
  2645 ;; Tracked objects:
  2646 ;;		On entry : B00/0
  2647 ;;		On exit  : B00/0
  2648 ;;		Unchanged: 800/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2650 ;;      Params:         0       1       0       0
  2651 ;;      Locals:         0       2       0       0
  2652 ;;      Temps:          0       0       0       0
  2653 ;;      Totals:         0       3       0       0
  2654 ;;Total ram usage:        3 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    3
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_WriteArrayToEEPROM
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           
  2665                           ;psect for function _EEWR
  2666  0707                     _EEWR:	
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _EEWR: [wreg]
  2670                           ;EEWR@address stored from wreg
  2671  0707  00AD               	movwf	EEWR@address
  2672                           
  2673                           ;prog.c: 163: volatile unsigned char INTCON_BUP = INTCON;
  2674  0708  080B               	movf	11,w	;volatile
  2675  0709  00AE               	movwf	EEWR@INTCON_BUP	;volatile
  2676                           
  2677                           ;prog.c: 164: INTCONbits.GIE = 0;
  2678  070A  138B               	bcf	11,7	;volatile
  2679                           
  2680                           ;prog.c: 165: EEADR = address;
  2681  070B  082D               	movf	EEWR@address,w
  2682  070C  1683               	bsf	3,5	;RP0=1, select bank1
  2683  070D  009B               	movwf	27	;volatile
  2684                           
  2685                           ;prog.c: 166: EEDATA = data;
  2686  070E  1283               	bcf	3,5	;RP0=0, select bank0
  2687  070F  082C               	movf	EEWR@data,w
  2688  0710  1683               	bsf	3,5	;RP0=1, select bank1
  2689  0711  009A               	movwf	26	;volatile
  2690                           
  2691                           ;prog.c: 167: EECON1bits.WREN = 1;
  2692  0712  151C               	bsf	28,2	;volsfr
  2693                           
  2694                           ;prog.c: 168: EECON2 = 0x55;
  2695  0713  3055               	movlw	85
  2696  0714  009D               	movwf	29	;volsfr
  2697                           
  2698                           ;prog.c: 169: EECON2 = 0xAA;
  2699  0715  30AA               	movlw	170
  2700  0716  009D               	movwf	29	;volsfr
  2701                           
  2702                           ;prog.c: 170: EECON1bits.WR = 1;
  2703  0717  149C               	bsf	28,1	;volsfr
  2704                           
  2705                           ;prog.c: 171: EECON1bits.WREN = 0;
  2706  0718  111C               	bcf	28,2	;volsfr
  2707  0719                     l157:	
  2708                           ;prog.c: 172: while (EECON1bits.WR == 1) {
  2709                           
  2710  0719  189C               	btfsc	28,1	;volsfr
  2711  071A  2F19               	goto	l157
  2712                           
  2713                           ;prog.c: 173: }
  2714                           ;prog.c: 174: INTCON = INTCON_BUP;
  2715  071B  1283               	bcf	3,5	;RP0=0, select bank0
  2716  071C  082E               	movf	EEWR@INTCON_BUP,w	;volatile
  2717  071D  008B               	movwf	11	;volatile
  2718  071E  0008               	return
  2719  071F                     __end_of_EEWR:	
  2720                           
  2721                           	psect	text13
  2722  056E                     __ptext13:	
  2723 ;; *************** function _TX *****************
  2724 ;; Defined at:
  2725 ;;		line 218 in file "prog.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  cmd             1    wreg     unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  cmd             1   13[BANK0 ] unsigned char 
  2730 ;;  i               1   15[BANK0 ] unsigned char 
  2731 ;;  temp            1   14[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 300/0
  2738 ;;		On exit  : 300/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2741 ;;      Params:         0       0       0       0
  2742 ;;      Locals:         0       3       0       0
  2743 ;;      Temps:          0       1       0       0
  2744 ;;      Totals:         0       4       0       0
  2745 ;;Total ram usage:        4 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    3
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_EditAddressMemory
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function _TX
  2757  056E                     _TX:	
  2758                           
  2759                           ;incstack = 0
  2760                           ; Regs used in _TX: [wreg+status,2+status,0]
  2761                           ;TX@cmd stored from wreg
  2762  056E  00AD               	movwf	TX@cmd
  2763                           
  2764                           ;prog.c: 224: unsigned char i = 0;
  2765  056F  01AF               	clrf	TX@i
  2766                           
  2767                           ;prog.c: 225: temp = cmd;
  2768  0570  00AE               	movwf	TX@temp
  2769                           
  2770                           ;prog.c: 226: for (i = 0; i < 8; i++) {
  2771  0571  01AF               	clrf	TX@i
  2772  0572                     l183:	
  2773                           
  2774                           ;prog.c: 227: if (temp & 0x01) {
  2775  0572  1C2E               	btfss	TX@temp,0
  2776  0573  2D82               	goto	l185
  2777                           
  2778                           ;prog.c: 228: TRISA3 = 0;
  2779  0574  1683               	bsf	3,5	;RP0=1, select bank1
  2780  0575  1185               	bcf	5,3	;volatile
  2781                           
  2782                           ;prog.c: 229: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2783  0576  2D77               	nop2	;2 cycle nop
  2784  0577  2D78               	nop2	;2 cycle nop
  2785  0578  0000               	nop
  2786                           
  2787                           ;prog.c: 230: TRISA3 = 1;
  2788  0579  1683               	bsf	3,5	;RP0=1, select bank1
  2789  057A  1303               	bcf	3,6	;RP1=0, select bank1
  2790  057B  1585               	bsf	5,3	;volatile
  2791                           
  2792                           ;prog.c: 231: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2793  057C  3017               	movlw	23
  2794  057D  1283               	bcf	3,5	;RP0=0, select bank0
  2795  057E  00AC               	movwf	??_TX
  2796  057F                     u4727:	
  2797  057F  0BAC               	decfsz	??_TX,f
  2798  0580  2D7F               	goto	u4727
  2799                           
  2800                           ;prog.c: 232: } else {
  2801  0581  2D8F               	goto	l3674
  2802  0582                     l185:	
  2803                           
  2804                           ;prog.c: 233: TRISA3 = 0;
  2805  0582  1683               	bsf	3,5	;RP0=1, select bank1
  2806  0583  1185               	bcf	5,3	;volatile
  2807                           
  2808                           ;prog.c: 234: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2809  0584  3017               	movlw	23
  2810  0585  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0586  00AC               	movwf	??_TX
  2812  0587                     u4737:	
  2813  0587  0BAC               	decfsz	??_TX,f
  2814  0588  2D87               	goto	u4737
  2815                           
  2816                           ;prog.c: 235: TRISA3 = 1;
  2817  0589  1683               	bsf	3,5	;RP0=1, select bank1
  2818  058A  1303               	bcf	3,6	;RP1=0, select bank1
  2819  058B  1585               	bsf	5,3	;volatile
  2820                           
  2821                           ;prog.c: 236: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2822  058C  2D8D               	nop2	;2 cycle nop
  2823  058D  2D8E               	nop2	;2 cycle nop
  2824  058E  0000               	nop
  2825  058F                     l3674:	
  2826  058F  3008               	movlw	8
  2827                           
  2828                           ;prog.c: 237: }
  2829                           ;prog.c: 238: temp >>= 1;
  2830  0590  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0591  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0592  1003               	clrc
  2833  0593  0CAE               	rrf	TX@temp,f
  2834  0594  0AAF               	incf	TX@i,f
  2835  0595  022F               	subwf	TX@i,w
  2836  0596  1803               	btfsc	3,0
  2837  0597  0008               	return
  2838  0598  2D72               	goto	l183
  2839  0599                     __end_of_TX:	
  2840                           
  2841                           	psect	text14
  2842  0797                     __ptext14:	
  2843 ;; *************** function _ShowError *****************
  2844 ;; Defined at:
  2845 ;;		line 113 in file "prog.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 200/0
  2856 ;;		On exit  : B00/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2859 ;;      Params:         0       0       0       0
  2860 ;;      Locals:         0       0       0       0
  2861 ;;      Temps:          0       0       0       0
  2862 ;;      Totals:         0       0       0       0
  2863 ;;Total ram usage:        0 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    4
  2866 ;; This function calls:
  2867 ;;		_clrInd
  2868 ;;		_refreshInd
  2869 ;;		_setDigit
  2870 ;; This function is called by:
  2871 ;;		_EditAddressMemory
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           
  2877                           ;psect for function _ShowError
  2878  0797                     _ShowError:	
  2879                           
  2880                           ;prog.c: 114: clrInd();
  2881                           
  2882                           ;incstack = 0
  2883                           ; Regs used in _ShowError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2884  0797  27A5               	fcall	_clrInd
  2885                           
  2886                           ;prog.c: 115: setDigit(3, 14);
  2887  0798  300E               	movlw	14
  2888  0799  00B4               	movwf	setDigit@data
  2889  079A  3003               	movlw	3
  2890  079B  2745               	fcall	_setDigit
  2891                           
  2892                           ;prog.c: 116: setDigit(2, 24);
  2893  079C  3018               	movlw	24
  2894  079D  00B4               	movwf	setDigit@data
  2895  079E  3002               	movlw	2
  2896  079F  2745               	fcall	_setDigit
  2897                           
  2898                           ;prog.c: 117: setDigit(1, 24);
  2899  07A0  3018               	movlw	24
  2900  07A1  00B4               	movwf	setDigit@data
  2901  07A2  3001               	movlw	1
  2902  07A3  2745               	fcall	_setDigit
  2903                           
  2904                           ;prog.c: 118: refreshInd();
  2905  07A4  2F32               	ljmp	l3496
  2906  07A5                     __end_of_ShowError:	
  2907                           
  2908                           	psect	text15
  2909  05EC                     __ptext15:	
  2910 ;; *************** function _ReadCell *****************
  2911 ;; Defined at:
  2912 ;;		line 625 in file "prog.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  cell            1    wreg     unsigned char 
  2915 ;;  CellsData       1   20[BANK0 ] PTR unsigned char 
  2916 ;;		 -> EditAddressMemory@CellsData(8), 
  2917 ;;  CellIsEmpty     1   21[BANK0 ] PTR unsigned char 
  2918 ;;		 -> EditAddressMemory@CellIsEmpty(1), 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  cell            1   23[BANK0 ] unsigned char 
  2921 ;;  i               1   25[BANK0 ] unsigned char 
  2922 ;;  _CellIsEmpty    1   24[BANK0 ] unsigned char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 200/0
  2929 ;;		On exit  : B00/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2932 ;;      Params:         0       2       0       0
  2933 ;;      Locals:         0       3       0       0
  2934 ;;      Temps:          0       1       0       0
  2935 ;;      Totals:         0       6       0       0
  2936 ;;Total ram usage:        6 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    5
  2939 ;; This function calls:
  2940 ;;		_FillArrayFromEEPROM
  2941 ;; This function is called by:
  2942 ;;		_EditAddressMemory
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           
  2947                           ;psect for function _ReadCell
  2948  05EC                     _ReadCell:	
  2949                           
  2950                           ;incstack = 0
  2951                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2952                           ;ReadCell@cell stored from wreg
  2953  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  2954  05ED  00B7               	movwf	ReadCell@cell
  2955                           
  2956                           ;prog.c: 626: unsigned char _CellIsEmpty = 1;
  2957  05EE  01B8               	clrf	ReadCell@_CellIsEmpty
  2958  05EF  0AB8               	incf	ReadCell@_CellIsEmpty,f
  2959                           
  2960                           ;prog.c: 627: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  2961  05F0  00B6               	movwf	??_ReadCell
  2962  05F1  1003               	clrc
  2963  05F2  0DB6               	rlf	??_ReadCell,f
  2964  05F3  1003               	clrc
  2965  05F4  0DB6               	rlf	??_ReadCell,f
  2966  05F5  1003               	clrc
  2967  05F6  0D36               	rlf	??_ReadCell,w
  2968  05F7  00AF               	movwf	FillArrayFromEEPROM@address_start
  2969  05F8  3008               	movlw	8
  2970  05F9  00B0               	movwf	FillArrayFromEEPROM@quantity
  2971  05FA  0834               	movf	ReadCell@CellsData,w
  2972  05FB  2768               	fcall	_FillArrayFromEEPROM
  2973                           
  2974                           ;prog.c: 628: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2975  05FC  01B9               	clrf	ReadCell@i
  2976  05FD                     l3736:	
  2977                           
  2978                           ;prog.c: 629: if (CellsData[i] != 0xFF) {
  2979  05FD  0839               	movf	ReadCell@i,w
  2980  05FE  0734               	addwf	ReadCell@CellsData,w
  2981  05FF  00B6               	movwf	??_ReadCell
  2982  0600  0084               	movwf	4
  2983  0601  1383               	bcf	3,7	;select IRP bank0
  2984  0602  0A00               	incf	0,w
  2985  0603  1903               	btfsc	3,2
  2986  0604  2E07               	goto	l3740
  2987                           
  2988                           ;prog.c: 630: _CellIsEmpty = 0;
  2989  0605  01B8               	clrf	ReadCell@_CellIsEmpty
  2990                           
  2991                           ;prog.c: 631: break;
  2992  0606  2E0C               	goto	l3744
  2993  0607                     l3740:	
  2994  0607  3008               	movlw	8
  2995  0608  0AB9               	incf	ReadCell@i,f
  2996  0609  0239               	subwf	ReadCell@i,w
  2997  060A  1C03               	skipc
  2998  060B  2DFD               	goto	l3736
  2999  060C                     l3744:	
  3000                           
  3001                           ;prog.c: 632: }
  3002                           ;prog.c: 633: }
  3003                           ;prog.c: 634: *CellIsEmpty = _CellIsEmpty;
  3004  060C  0835               	movf	ReadCell@CellIsEmpty,w
  3005  060D  0084               	movwf	4
  3006  060E  0838               	movf	ReadCell@_CellIsEmpty,w
  3007  060F  0080               	movwf	0
  3008  0610  0008               	return
  3009  0611                     __end_of_ReadCell:	
  3010                           
  3011                           	psect	text16
  3012  0768                     __ptext16:	
  3013 ;; *************** function _FillArrayFromEEPROM *****************
  3014 ;; Defined at:
  3015 ;;		line 188 in file "prog.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  container       1    wreg     PTR unsigned char 
  3018 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3019 ;;  address_star    1   15[BANK0 ] unsigned char 
  3020 ;;  quantity        1   16[BANK0 ] unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  container       1   18[BANK0 ] PTR unsigned char 
  3023 ;;		 -> EditAddressMemory@CellsData(8), FindCell@CellsData(8), DS_Address(8), 
  3024 ;;  i               1   19[BANK0 ] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 300/0
  3031 ;;		On exit  : 300/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3034 ;;      Params:         0       2       0       0
  3035 ;;      Locals:         0       2       0       0
  3036 ;;      Temps:          0       1       0       0
  3037 ;;      Totals:         0       5       0       0
  3038 ;;Total ram usage:        5 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    4
  3041 ;; This function calls:
  3042 ;;		_EERD
  3043 ;; This function is called by:
  3044 ;;		_FindCell
  3045 ;;		_ReadCell
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _FillArrayFromEEPROM
  3052  0768                     _FillArrayFromEEPROM:	
  3053                           
  3054                           ;incstack = 0
  3055                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3056                           ;FillArrayFromEEPROM@container stored from wreg
  3057  0768  00B2               	movwf	FillArrayFromEEPROM@container
  3058                           
  3059                           ;prog.c: 189: for (unsigned char i = 0; i < quantity; i++) {
  3060  0769  01B3               	clrf	FillArrayFromEEPROM@i
  3061  076A                     l3538:	
  3062  076A  0830               	movf	FillArrayFromEEPROM@quantity,w
  3063  076B  0233               	subwf	FillArrayFromEEPROM@i,w
  3064  076C  1803               	btfsc	3,0
  3065  076D  0008               	return
  3066                           
  3067                           ;prog.c: 191: container[i] = EERD(address_start + i);
  3068  076E  0833               	movf	FillArrayFromEEPROM@i,w
  3069  076F  0732               	addwf	FillArrayFromEEPROM@container,w
  3070  0770  00B1               	movwf	??_FillArrayFromEEPROM
  3071  0771  0084               	movwf	4
  3072  0772  0833               	movf	FillArrayFromEEPROM@i,w
  3073  0773  072F               	addwf	FillArrayFromEEPROM@address_start,w
  3074  0774  2788               	fcall	_EERD
  3075  0775  1383               	bcf	3,7	;select IRP bank0
  3076  0776  0080               	movwf	0
  3077  0777  0AB3               	incf	FillArrayFromEEPROM@i,f
  3078  0778  2F6A               	goto	l3538
  3079  0779                     __end_of_FillArrayFromEEPROM:	
  3080                           
  3081                           	psect	text17
  3082  0788                     __ptext17:	
  3083 ;; *************** function _EERD *****************
  3084 ;; Defined at:
  3085 ;;		line 177 in file "prog.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  address         1    wreg     unsigned char 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  address         1   12[BANK0 ] unsigned char 
  3090 ;;  EEDATA_BUP      1   14[BANK0 ] volatile unsigned char 
  3091 ;;  INTCON_BUP      1   13[BANK0 ] volatile unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      unsigned char 
  3094 ;; Registers used:
  3095 ;;		wreg
  3096 ;; Tracked objects:
  3097 ;;		On entry : 300/0
  3098 ;;		On exit  : 300/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3101 ;;      Params:         0       0       0       0
  3102 ;;      Locals:         0       3       0       0
  3103 ;;      Temps:          0       0       0       0
  3104 ;;      Totals:         0       3       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    3
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_FillArrayFromEEPROM
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           
  3116                           ;psect for function _EERD
  3117  0788                     _EERD:	
  3118                           
  3119                           ;incstack = 0
  3120                           ; Regs used in _EERD: [wreg]
  3121                           ;EERD@address stored from wreg
  3122  0788  00AC               	movwf	EERD@address
  3123                           
  3124                           ;prog.c: 178: volatile unsigned char INTCON_BUP = INTCON;
  3125  0789  080B               	movf	11,w	;volatile
  3126  078A  00AD               	movwf	EERD@INTCON_BUP	;volatile
  3127                           
  3128                           ;prog.c: 179: volatile unsigned char EEDATA_BUP;
  3129                           ;prog.c: 180: INTCONbits.GIE = 0;
  3130  078B  138B               	bcf	11,7	;volatile
  3131                           
  3132                           ;prog.c: 181: EEADR = address;
  3133  078C  082C               	movf	EERD@address,w
  3134  078D  1683               	bsf	3,5	;RP0=1, select bank1
  3135  078E  009B               	movwf	27	;volatile
  3136                           
  3137                           ;prog.c: 182: EECON1bits.RD = 1;
  3138  078F  141C               	bsf	28,0	;volsfr
  3139                           
  3140                           ;prog.c: 183: EEDATA_BUP = EEDATA;
  3141  0790  081A               	movf	26,w	;volatile
  3142  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0792  00AE               	movwf	EERD@EEDATA_BUP	;volatile
  3144                           
  3145                           ;prog.c: 184: INTCON = INTCON_BUP;
  3146  0793  082D               	movf	EERD@INTCON_BUP,w	;volatile
  3147  0794  008B               	movwf	11	;volatile
  3148                           
  3149                           ;prog.c: 185: return EEDATA_BUP;
  3150  0795  082E               	movf	EERD@EEDATA_BUP,w	;volatile
  3151  0796  0008               	return
  3152  0797                     __end_of_EERD:	
  3153                           
  3154                           	psect	text18
  3155  0677                     __ptext18:	
  3156 ;; *************** function _RX *****************
  3157 ;; Defined at:
  3158 ;;		line 242 in file "prog.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  i               1   14[BANK0 ] unsigned char 
  3163 ;;  d               1   13[BANK0 ] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      unsigned char 
  3166 ;; Registers used:
  3167 ;;		wreg, status,2, status,0
  3168 ;; Tracked objects:
  3169 ;;		On entry : 300/100
  3170 ;;		On exit  : 300/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3173 ;;      Params:         0       0       0       0
  3174 ;;      Locals:         0       2       0       0
  3175 ;;      Temps:          0       1       0       0
  3176 ;;      Totals:         0       3       0       0
  3177 ;;Total ram usage:        3 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    3
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_EditAddressMemory
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _RX
  3189  0677                     _RX:	
  3190                           
  3191                           ;prog.c: 243: unsigned char d = 0;
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _RX: [wreg+status,2+status,0]
  3195  0677  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0678  01AD               	clrf	RX@d
  3197                           
  3198                           ;prog.c: 244: for (unsigned char i = 0; i < 8; i++) {
  3199  0679  01AE               	clrf	RX@i
  3200  067A                     l190:	
  3201                           
  3202                           ;prog.c: 245: TRISA3 = 0;
  3203  067A  1683               	bsf	3,5	;RP0=1, select bank1
  3204  067B  1185               	bcf	5,3	;volatile
  3205                           
  3206                           ;prog.c: 246: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3207  067C  2E7D               	nop2	;2 cycle nop
  3208  067D  2E7E               	nop2	;2 cycle nop
  3209  067E  2E7F               	nop2	;2 cycle nop
  3210                           
  3211                           ;prog.c: 247: TRISA3 = 1;
  3212  067F  1683               	bsf	3,5	;RP0=1, select bank1
  3213  0680  1303               	bcf	3,6	;RP1=0, select bank1
  3214  0681  1585               	bsf	5,3	;volatile
  3215                           
  3216                           ;prog.c: 248: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3217  0682  2E83               	nop2	;2 cycle nop
  3218  0683  2E84               	nop2	;2 cycle nop
  3219                           
  3220                           ;prog.c: 249: d >>= 1;
  3221  0684  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0685  1303               	bcf	3,6	;RP1=0, select bank0
  3223  0686  1003               	clrc
  3224  0687  0CAD               	rrf	RX@d,f
  3225                           
  3226                           ;prog.c: 250: if (RA3 == 1) d |= 0x80;
  3227  0688  1985               	btfsc	5,3	;volatile
  3228  0689  17AD               	bsf	RX@d,7
  3229                           
  3230                           ;prog.c: 251: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3231  068A  3013               	movlw	19
  3232  068B  00AC               	movwf	??_RX
  3233  068C                     u4747:	
  3234  068C  0BAC               	decfsz	??_RX,f
  3235  068D  2E8C               	goto	u4747
  3236  068E  2E8F               	nop2	;nop
  3237  068F  3008               	movlw	8
  3238  0690  1283               	bcf	3,5	;RP0=0, select bank0
  3239  0691  1303               	bcf	3,6	;RP1=0, select bank0
  3240  0692  0AAE               	incf	RX@i,f
  3241  0693  022E               	subwf	RX@i,w
  3242  0694  1C03               	skipc
  3243  0695  2E7A               	goto	l190
  3244                           
  3245                           ;prog.c: 252: }
  3246                           ;prog.c: 253: return d;
  3247  0696  082D               	movf	RX@d,w
  3248  0697  0008               	return
  3249  0698                     __end_of_RX:	
  3250                           
  3251                           	psect	text19
  3252  0511                     __ptext19:	
  3253 ;; *************** function _INIT *****************
  3254 ;; Defined at:
  3255 ;;		line 203 in file "prog.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;		None               void
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0
  3264 ;; Tracked objects:
  3265 ;;		On entry : 300/0
  3266 ;;		On exit  : 300/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3269 ;;      Params:         0       0       0       0
  3270 ;;      Locals:         0       0       0       0
  3271 ;;      Temps:          0       1       0       0
  3272 ;;      Totals:         0       1       0       0
  3273 ;;Total ram usage:        1 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    3
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_EditAddressMemory
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _INIT
  3285  0511                     _INIT:	
  3286                           
  3287                           ;prog.c: 204: static bit b;
  3288                           ;prog.c: 205: b = 0;
  3289                           
  3290                           ;incstack = 0
  3291                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3292  0511  105E               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  3293                           
  3294                           ;prog.c: 206: TRISA3 = 1;
  3295  0512  1683               	bsf	3,5	;RP0=1, select bank1
  3296  0513  1585               	bsf	5,3	;volatile
  3297                           
  3298                           ;prog.c: 207: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3299  0514  3006               	movlw	6
  3300  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3301  0516  00AC               	movwf	??_INIT
  3302  0517                     u4757:	
  3303  0517  0BAC               	decfsz	??_INIT,f
  3304  0518  2D17               	goto	u4757
  3305  0519  0000               	nop
  3306                           
  3307                           ;prog.c: 208: TRISA3 = 0;
  3308  051A  1683               	bsf	3,5	;RP0=1, select bank1
  3309  051B  1303               	bcf	3,6	;RP1=0, select bank1
  3310  051C  1185               	bcf	5,3	;volatile
  3311                           
  3312                           ;prog.c: 209: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3313  051D  30A6               	movlw	166
  3314  051E  1283               	bcf	3,5	;RP0=0, select bank0
  3315  051F  00AC               	movwf	??_INIT
  3316  0520                     u4767:	
  3317  0520  0BAC               	decfsz	??_INIT,f
  3318  0521  2D20               	goto	u4767
  3319  0522  0000               	nop
  3320                           
  3321                           ;prog.c: 210: TRISA3 = 1;
  3322  0523  1683               	bsf	3,5	;RP0=1, select bank1
  3323  0524  1303               	bcf	3,6	;RP1=0, select bank1
  3324  0525  1585               	bsf	5,3	;volatile
  3325                           
  3326                           ;prog.c: 211: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3327  0526  3015               	movlw	21
  3328  0527  1283               	bcf	3,5	;RP0=0, select bank0
  3329  0528  00AC               	movwf	??_INIT
  3330  0529                     u4777:	
  3331  0529  0BAC               	decfsz	??_INIT,f
  3332  052A  2D29               	goto	u4777
  3333  052B  0000               	nop
  3334                           
  3335                           ;prog.c: 212: b = RA3;
  3336  052C  1283               	bcf	3,5	;RP0=0, select bank0
  3337  052D  1303               	bcf	3,6	;RP1=0, select bank0
  3338  052E  105E               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  3339  052F  1985               	btfsc	5,3	;volatile
  3340  0530  145E               	bsf	INIT@b/(0+8),INIT@b& (0+7)
  3341                           
  3342                           ;prog.c: 213: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3343  0531  3095               	movlw	149
  3344  0532  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0533  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0534  00AC               	movwf	??_INIT
  3347  0535                     u4787:	
  3348  0535  0BAC               	decfsz	??_INIT,f
  3349  0536  2D35               	goto	u4787
  3350  0537  2D38               	nop2	;nop
  3351                           
  3352                           ;prog.c: 215: return !b;
  3353  0538  1283               	bcf	3,5	;RP0=0, select bank0
  3354  0539  1303               	bcf	3,6	;RP1=0, select bank0
  3355  053A  1C5E               	btfss	INIT@b/(0+8),INIT@b& (0+7)
  3356  053B  2D3E               	goto	l3652
  3357  053C  1003               	clrc
  3358  053D  0008               	return
  3359  053E                     l3652:	
  3360  053E  1403               	setc
  3361  053F  0008               	return
  3362  0540                     __end_of_INIT:	
  3363                           
  3364                           	psect	text20
  3365  0540                     __ptext20:	
  3366 ;; *************** function _CellToInd *****************
  3367 ;; Defined at:
  3368 ;;		line 637 in file "prog.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  cell            1    wreg     unsigned char 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  cell            1   24[BANK0 ] unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 200/100
  3379 ;;		On exit  : B00/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3382 ;;      Params:         0       0       0       0
  3383 ;;      Locals:         0       1       0       0
  3384 ;;      Temps:          0       0       0       0
  3385 ;;      Totals:         0       1       0       0
  3386 ;;Total ram usage:        1 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    4
  3389 ;; This function calls:
  3390 ;;		___awdiv
  3391 ;;		___awmod
  3392 ;;		_clrInd
  3393 ;;		_refreshInd
  3394 ;;		_setDigit
  3395 ;; This function is called by:
  3396 ;;		_EditAddressMemory
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function _CellToInd
  3403  0540                     _CellToInd:	
  3404                           
  3405                           ;incstack = 0
  3406                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3407                           ;CellToInd@cell stored from wreg
  3408  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0541  00B8               	movwf	CellToInd@cell
  3410                           
  3411                           ;prog.c: 638: clrInd();
  3412  0542  27A5               	fcall	_clrInd
  3413                           
  3414                           ;prog.c: 640: if (cell >= 9) {
  3415  0543  3009               	movlw	9
  3416  0544  0238               	subwf	CellToInd@cell,w
  3417                           
  3418                           ;prog.c: 641: setDigit(3, (1 + cell) / 10);
  3419  0545  0838               	movf	CellToInd@cell,w
  3420  0546  1C03               	skipc
  3421  0547  2D61               	goto	L7
  3422  0548  00AE               	movwf	___awdiv@dividend
  3423  0549  01AF               	clrf	___awdiv@dividend+1
  3424  054A  0AAE               	incf	___awdiv@dividend,f
  3425  054B  1903               	skipnz
  3426  054C  0AAF               	incf	___awdiv@dividend+1,f
  3427  054D  300A               	movlw	10
  3428  054E  00AC               	movwf	___awdiv@divisor
  3429  054F  01AD               	clrf	___awdiv@divisor+1
  3430  0550  2419               	fcall	___awdiv
  3431  0551  082C               	movf	?___awdiv,w
  3432  0552  00B4               	movwf	setDigit@data
  3433  0553  3003               	movlw	3
  3434  0554  2745               	fcall	_setDigit
  3435                           
  3436                           ;prog.c: 642: setDigit(2, (1 + cell) % 10);
  3437  0555  0838               	movf	CellToInd@cell,w
  3438  0556  00AE               	movwf	___awmod@dividend
  3439  0557  01AF               	clrf	___awmod@dividend+1
  3440  0558  0AAE               	incf	___awmod@dividend,f
  3441  0559  1903               	skipnz
  3442  055A  0AAF               	incf	___awmod@dividend+1,f
  3443  055B  300A               	movlw	10
  3444  055C  00AC               	movwf	___awmod@divisor
  3445  055D  01AD               	clrf	___awmod@divisor+1
  3446  055E  24A3               	fcall	___awmod
  3447  055F  082C               	movf	?___awmod,w
  3448  0560  2D66               	goto	L6
  3449  0561                     L7:	
  3450                           ;prog.c: 644: setDigit(3, 1 + cell);
  3451                           
  3452                           ;prog.c: 643: } else {
  3453                           
  3454  0561  3E01               	addlw	1
  3455  0562  00B4               	movwf	setDigit@data
  3456  0563  3003               	movlw	3
  3457  0564  2745               	fcall	_setDigit
  3458                           
  3459                           ;prog.c: 645: setDigit(2, 34);
  3460  0565  3022               	movlw	34
  3461  0566                     L6:	
  3462  0566  00B4               	movwf	setDigit@data
  3463  0567  3002               	movlw	2
  3464  0568  2745               	fcall	_setDigit
  3465                           
  3466                           ;prog.c: 646: }
  3467                           ;prog.c: 647: setDigit(1, 34);
  3468  0569  3022               	movlw	34
  3469  056A  00B4               	movwf	setDigit@data
  3470  056B  3001               	movlw	1
  3471  056C  2745               	fcall	_setDigit
  3472                           
  3473                           ;prog.c: 649: refreshInd();
  3474  056D  2F32               	ljmp	l3496
  3475  056E                     __end_of_CellToInd:	
  3476                           
  3477                           	psect	text21
  3478  0745                     __ptext21:	
  3479 ;; *************** function _setDigit *****************
  3480 ;; Defined at:
  3481 ;;		line 93 in file "prog.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  a               1    wreg     unsigned char 
  3484 ;;  data            1   20[BANK0 ] unsigned char 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  a               1   23[BANK0 ] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 300/0
  3493 ;;		On exit  : B00/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3496 ;;      Params:         0       1       0       0
  3497 ;;      Locals:         0       1       0       0
  3498 ;;      Temps:          0       2       0       0
  3499 ;;      Totals:         0       4       0       0
  3500 ;;Total ram usage:        4 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    3
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_ShowError
  3507 ;;		_indData
  3508 ;;		_CellToInd
  3509 ;;		_main
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _setDigit
  3515  0745                     _setDigit:	
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3519                           ;setDigit@a stored from wreg
  3520  0745  00B7               	movwf	setDigit@a
  3521                           
  3522                           ;prog.c: 94: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3523  0746  303F               	movlw	63
  3524  0747  0534               	andwf	setDigit@data,w
  3525  0748  00B5               	movwf	??_setDigit
  3526  0749  0837               	movf	setDigit@a,w
  3527  074A  3E4A               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3528  074B  0084               	movwf	4
  3529  074C  1383               	bcf	3,7	;select IRP bank0
  3530  074D  0800               	movf	0,w
  3531  074E  39C0               	andlw	192
  3532  074F  0435               	iorwf	??_setDigit,w
  3533  0750  00B6               	movwf	??_setDigit+1
  3534  0751  0837               	movf	setDigit@a,w
  3535  0752  3E4A               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3536  0753  0084               	movwf	4
  3537  0754  0836               	movf	??_setDigit+1,w
  3538  0755  0080               	movwf	0
  3539  0756  0008               	return
  3540  0757                     __end_of_setDigit:	
  3541                           
  3542                           	psect	text22
  3543  0732                     __ptext22:	
  3544 ;; *************** function _refreshInd *****************
  3545 ;; Defined at:
  3546 ;;		line 101 in file "prog.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;		None
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  a               1   13[BANK0 ] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3555 ;; Tracked objects:
  3556 ;;		On entry : 200/0
  3557 ;;		On exit  : B00/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3560 ;;      Params:         0       0       0       0
  3561 ;;      Locals:         0       1       0       0
  3562 ;;      Temps:          0       1       0       0
  3563 ;;      Totals:         0       2       0       0
  3564 ;;Total ram usage:        2 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    3
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_ShowError
  3571 ;;		_CellToInd
  3572 ;;		_EditAddressMemory
  3573 ;;		_main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _refreshInd
  3579  0732                     _refreshInd:	
  3580  0732                     l3496:	
  3581                           ;incstack = 0
  3582                           ; Regs used in _refreshInd: [wreg-fsr0h+status,2+status,0]
  3583                           
  3584                           
  3585                           ;prog.c: 102: for (char a = 0; a < 3; a++) {
  3586  0732  1283               	bcf	3,5	;RP0=0, select bank0
  3587  0733  01AD               	clrf	refreshInd@a
  3588  0734                     l3502:	
  3589                           
  3590                           ;prog.c: 103: digits[a] = digits_0[a];
  3591  0734  082D               	movf	refreshInd@a,w
  3592  0735  3E4B               	addlw	(low (_digits_0| 0))& (0+255)
  3593  0736  0084               	movwf	4
  3594  0737  1383               	bcf	3,7	;select IRP bank0
  3595  0738  0800               	movf	0,w
  3596  0739  00AC               	movwf	??_refreshInd
  3597  073A  082D               	movf	refreshInd@a,w
  3598  073B  3E48               	addlw	(low (_digits| 0))& (0+255)
  3599  073C  0084               	movwf	4
  3600  073D  082C               	movf	??_refreshInd,w
  3601  073E  0080               	movwf	0
  3602  073F  3003               	movlw	3
  3603  0740  0AAD               	incf	refreshInd@a,f
  3604  0741  022D               	subwf	refreshInd@a,w
  3605  0742  1803               	btfsc	3,0
  3606  0743  0008               	return
  3607  0744  2F34               	goto	l3502
  3608  0745                     __end_of_refreshInd:	
  3609                           
  3610                           	psect	text23
  3611  07A5                     __ptext23:	
  3612 ;; *************** function _clrInd *****************
  3613 ;; Defined at:
  3614 ;;		line 107 in file "prog.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  a               1   12[BANK0 ] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3623 ;; Tracked objects:
  3624 ;;		On entry : 200/100
  3625 ;;		On exit  : B00/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3628 ;;      Params:         0       0       0       0
  3629 ;;      Locals:         0       1       0       0
  3630 ;;      Temps:          0       0       0       0
  3631 ;;      Totals:         0       1       0       0
  3632 ;;Total ram usage:        1 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    3
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_ShowError
  3639 ;;		_CellToInd
  3640 ;;		_EditAddressMemory
  3641 ;;		_main
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           
  3646                           ;psect for function _clrInd
  3647  07A5                     _clrInd:	
  3648                           
  3649                           ;prog.c: 108: for (char a = 0; a < 3; a++) {
  3650                           
  3651                           ;incstack = 0
  3652                           ; Regs used in _clrInd: [wreg-fsr0h+status,2+status,0]
  3653  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  3654  07A6  01AC               	clrf	clrInd@a
  3655  07A7                     l3514:	
  3656                           
  3657                           ;prog.c: 109: digits_0[a] = 34;
  3658  07A7  082C               	movf	clrInd@a,w
  3659  07A8  3E4B               	addlw	(low (_digits_0| 0))& (0+255)
  3660  07A9  0084               	movwf	4
  3661  07AA  3022               	movlw	34
  3662  07AB  1383               	bcf	3,7	;select IRP bank0
  3663  07AC  0080               	movwf	0
  3664  07AD  3003               	movlw	3
  3665  07AE  0AAC               	incf	clrInd@a,f
  3666  07AF  022C               	subwf	clrInd@a,w
  3667  07B0  1803               	btfsc	3,0
  3668  07B1  0008               	return
  3669  07B2  2FA7               	goto	l3514
  3670  07B3                     __end_of_clrInd:	
  3671                           
  3672                           	psect	text24
  3673  04A3                     __ptext24:	
  3674 ;; *************** function ___awmod *****************
  3675 ;; Defined at:
  3676 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  divisor         2   12[BANK0 ] int 
  3679 ;;  dividend        2   14[BANK0 ] int 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  sign            1   17[BANK0 ] unsigned char 
  3682 ;;  counter         1   16[BANK0 ] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  2   12[BANK0 ] int 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0
  3687 ;; Tracked objects:
  3688 ;;		On entry : B00/0
  3689 ;;		On exit  : B00/0
  3690 ;;		Unchanged: 800/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3692 ;;      Params:         0       4       0       0
  3693 ;;      Locals:         0       2       0       0
  3694 ;;      Temps:          0       0       0       0
  3695 ;;      Totals:         0       6       0       0
  3696 ;;Total ram usage:        6 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    3
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_CellToInd
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function ___awmod
  3708  04A3                     ___awmod:	
  3709                           
  3710                           ;incstack = 0
  3711                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3712  04A3  01B1               	clrf	___awmod@sign
  3713  04A4  1FAF               	btfss	___awmod@dividend+1,7
  3714  04A5  2CAD               	goto	l3592
  3715  04A6  09AE               	comf	___awmod@dividend,f
  3716  04A7  09AF               	comf	___awmod@dividend+1,f
  3717  04A8  0AAE               	incf	___awmod@dividend,f
  3718  04A9  1903               	skipnz
  3719  04AA  0AAF               	incf	___awmod@dividend+1,f
  3720  04AB  01B1               	clrf	___awmod@sign
  3721  04AC  0AB1               	incf	___awmod@sign,f
  3722  04AD                     l3592:	
  3723  04AD  1FAD               	btfss	___awmod@divisor+1,7
  3724  04AE  2CB4               	goto	l3596
  3725  04AF  09AC               	comf	___awmod@divisor,f
  3726  04B0  09AD               	comf	___awmod@divisor+1,f
  3727  04B1  0AAC               	incf	___awmod@divisor,f
  3728  04B2  1903               	skipnz
  3729  04B3  0AAD               	incf	___awmod@divisor+1,f
  3730  04B4                     l3596:	
  3731  04B4  082C               	movf	___awmod@divisor,w
  3732  04B5  042D               	iorwf	___awmod@divisor+1,w
  3733  04B6  1903               	btfsc	3,2
  3734  04B7  2CD3               	goto	l3612
  3735  04B8  01B0               	clrf	___awmod@counter
  3736  04B9                     L8:	
  3737  04B9  0AB0               	incf	___awmod@counter,f
  3738  04BA  1BAD               	btfsc	___awmod@divisor+1,7
  3739  04BB  2CC0               	goto	l3604
  3740  04BC  1003               	clrc
  3741  04BD  0DAC               	rlf	___awmod@divisor,f
  3742  04BE  0DAD               	rlf	___awmod@divisor+1,f
  3743  04BF  2CB9               	goto	L8
  3744  04C0                     l3604:	
  3745  04C0  082D               	movf	___awmod@divisor+1,w
  3746  04C1  022F               	subwf	___awmod@dividend+1,w
  3747  04C2  1D03               	skipz
  3748  04C3  2CC6               	goto	u3415
  3749  04C4  082C               	movf	___awmod@divisor,w
  3750  04C5  022E               	subwf	___awmod@dividend,w
  3751  04C6                     u3415:	
  3752  04C6  1C03               	skipc
  3753  04C7  2CCF               	goto	L9
  3754  04C8  082C               	movf	___awmod@divisor,w
  3755  04C9  02AE               	subwf	___awmod@dividend,f
  3756  04CA  082D               	movf	___awmod@divisor+1,w
  3757  04CB  1C03               	skipc
  3758  04CC  03AF               	decf	___awmod@dividend+1,f
  3759  04CD  02AF               	subwf	___awmod@dividend+1,f
  3760  04CE  1003               	clrc
  3761  04CF                     L9:	
  3762  04CF  0CAD               	rrf	___awmod@divisor+1,f
  3763  04D0  0CAC               	rrf	___awmod@divisor,f
  3764  04D1  0BB0               	decfsz	___awmod@counter,f
  3765  04D2  2CC0               	goto	l3604
  3766  04D3                     l3612:	
  3767  04D3  0831               	movf	___awmod@sign,w
  3768  04D4  1903               	btfsc	3,2
  3769  04D5  2CDB               	goto	l3616
  3770  04D6  09AE               	comf	___awmod@dividend,f
  3771  04D7  09AF               	comf	___awmod@dividend+1,f
  3772  04D8  0AAE               	incf	___awmod@dividend,f
  3773  04D9  1903               	skipnz
  3774  04DA  0AAF               	incf	___awmod@dividend+1,f
  3775  04DB                     l3616:	
  3776  04DB  082F               	movf	___awmod@dividend+1,w
  3777  04DC  00AD               	movwf	?___awmod+1
  3778  04DD  082E               	movf	___awmod@dividend,w
  3779  04DE  00AC               	movwf	?___awmod
  3780  04DF  0008               	return
  3781  04E0                     __end_of___awmod:	
  3782                           
  3783                           	psect	text25
  3784  0419                     __ptext25:	
  3785 ;; *************** function ___awdiv *****************
  3786 ;; Defined at:
  3787 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  divisor         2   12[BANK0 ] int 
  3790 ;;  dividend        2   14[BANK0 ] int 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  quotient        2   18[BANK0 ] int 
  3793 ;;  sign            1   17[BANK0 ] unsigned char 
  3794 ;;  counter         1   16[BANK0 ] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  2   12[BANK0 ] int 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0
  3799 ;; Tracked objects:
  3800 ;;		On entry : B00/0
  3801 ;;		On exit  : B00/0
  3802 ;;		Unchanged: 800/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3804 ;;      Params:         0       4       0       0
  3805 ;;      Locals:         0       4       0       0
  3806 ;;      Temps:          0       0       0       0
  3807 ;;      Totals:         0       8       0       0
  3808 ;;Total ram usage:        8 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    3
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_CellToInd
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function ___awdiv
  3820  0419                     ___awdiv:	
  3821                           
  3822                           ;incstack = 0
  3823                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3824  0419  01B1               	clrf	___awdiv@sign
  3825  041A  1FAD               	btfss	___awdiv@divisor+1,7
  3826  041B  2C23               	goto	l3548
  3827  041C  09AC               	comf	___awdiv@divisor,f
  3828  041D  09AD               	comf	___awdiv@divisor+1,f
  3829  041E  0AAC               	incf	___awdiv@divisor,f
  3830  041F  1903               	skipnz
  3831  0420  0AAD               	incf	___awdiv@divisor+1,f
  3832  0421  01B1               	clrf	___awdiv@sign
  3833  0422  0AB1               	incf	___awdiv@sign,f
  3834  0423                     l3548:	
  3835  0423  1FAF               	btfss	___awdiv@dividend+1,7
  3836  0424  2C2C               	goto	l3554
  3837  0425  09AE               	comf	___awdiv@dividend,f
  3838  0426  09AF               	comf	___awdiv@dividend+1,f
  3839  0427  0AAE               	incf	___awdiv@dividend,f
  3840  0428  1903               	skipnz
  3841  0429  0AAF               	incf	___awdiv@dividend+1,f
  3842  042A  3001               	movlw	1
  3843  042B  06B1               	xorwf	___awdiv@sign,f
  3844  042C                     l3554:	
  3845  042C  01B2               	clrf	___awdiv@quotient
  3846  042D  01B3               	clrf	___awdiv@quotient+1
  3847  042E  082C               	movf	___awdiv@divisor,w
  3848  042F  042D               	iorwf	___awdiv@divisor+1,w
  3849  0430  1903               	btfsc	3,2
  3850  0431  2C51               	goto	l3576
  3851  0432  01B0               	clrf	___awdiv@counter
  3852  0433                     L10:	
  3853  0433  0AB0               	incf	___awdiv@counter,f
  3854  0434  1BAD               	btfsc	___awdiv@divisor+1,7
  3855  0435  2C3A               	goto	l3564
  3856  0436  1003               	clrc
  3857  0437  0DAC               	rlf	___awdiv@divisor,f
  3858  0438  0DAD               	rlf	___awdiv@divisor+1,f
  3859  0439  2C33               	goto	L10
  3860  043A                     l3564:	
  3861  043A  1003               	clrc
  3862  043B  0DB2               	rlf	___awdiv@quotient,f
  3863  043C  0DB3               	rlf	___awdiv@quotient+1,f
  3864  043D  082D               	movf	___awdiv@divisor+1,w
  3865  043E  022F               	subwf	___awdiv@dividend+1,w
  3866  043F  1D03               	skipz
  3867  0440  2C43               	goto	u3345
  3868  0441  082C               	movf	___awdiv@divisor,w
  3869  0442  022E               	subwf	___awdiv@dividend,w
  3870  0443                     u3345:	
  3871  0443  1C03               	skipc
  3872  0444  2C4D               	goto	L11
  3873  0445  082C               	movf	___awdiv@divisor,w
  3874  0446  02AE               	subwf	___awdiv@dividend,f
  3875  0447  082D               	movf	___awdiv@divisor+1,w
  3876  0448  1C03               	skipc
  3877  0449  03AF               	decf	___awdiv@dividend+1,f
  3878  044A  02AF               	subwf	___awdiv@dividend+1,f
  3879  044B  1432               	bsf	___awdiv@quotient,0
  3880  044C  1003               	clrc
  3881  044D                     L11:	
  3882  044D  0CAD               	rrf	___awdiv@divisor+1,f
  3883  044E  0CAC               	rrf	___awdiv@divisor,f
  3884  044F  0BB0               	decfsz	___awdiv@counter,f
  3885  0450  2C3A               	goto	l3564
  3886  0451                     l3576:	
  3887  0451  0831               	movf	___awdiv@sign,w
  3888  0452  1903               	btfsc	3,2
  3889  0453  2C59               	goto	l3580
  3890  0454  09B2               	comf	___awdiv@quotient,f
  3891  0455  09B3               	comf	___awdiv@quotient+1,f
  3892  0456  0AB2               	incf	___awdiv@quotient,f
  3893  0457  1903               	skipnz
  3894  0458  0AB3               	incf	___awdiv@quotient+1,f
  3895  0459                     l3580:	
  3896  0459  0833               	movf	___awdiv@quotient+1,w
  3897  045A  00AD               	movwf	?___awdiv+1
  3898  045B  0832               	movf	___awdiv@quotient,w
  3899  045C  00AC               	movwf	?___awdiv
  3900  045D  0008               	return
  3901  045E                     __end_of___awdiv:	
  3902                           
  3903                           	psect	text26
  3904  02B6                     __ptext26:	
  3905 ;; *************** function _F *****************
  3906 ;; Defined at:
  3907 ;;		line 478 in file "prog.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;		None
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  CurrentKeysS    1   11[BANK0 ] unsigned char 
  3912 ;;  dig             1   10[BANK0 ] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 300/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3922 ;;      Params:         0       0       0       0
  3923 ;;      Locals:         0       2       0       0
  3924 ;;      Temps:          0       5       0       0
  3925 ;;      Totals:         0       7       0       0
  3926 ;;Total ram usage:        7 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    2
  3929 ;; This function calls:
  3930 ;;		_convDig
  3931 ;;		_get_temp_Async
  3932 ;; This function is called by:
  3933 ;;		Interrupt level 1
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function _F
  3939  02B6                     _F:	
  3940                           
  3941                           ;prog.c: 479: if (T0IF) {
  3942  02B6  1D0B               	btfss	11,2	;volatile
  3943  02B7  2B55               	goto	i1l342
  3944                           
  3945                           ;prog.c: 480: static unsigned char DigitNumber = 0;
  3946                           ;prog.c: 482: T0IF = 0;
  3947  02B8  110B               	bcf	11,2	;volatile
  3948                           
  3949                           ;prog.c: 483: TMR0 += TMR0_VALUE;
  3950  02B9  30EB               	movlw	235
  3951  02BA  0781               	addwf	1,f	;volatile
  3952                           
  3953                           ;prog.c: 485: if (DigitNumber > 2) {
  3954  02BB  3003               	movlw	3
  3955  02BC  0255               	subwf	F@DigitNumber,w
  3956  02BD  1803               	btfsc	3,0
  3957                           
  3958                           ;prog.c: 486: DigitNumber = 0;
  3959  02BE  01D5               	clrf	F@DigitNumber
  3960                           
  3961                           ;prog.c: 487: }
  3962                           ;prog.c: 488: unsigned char dig = digits[DigitNumber];
  3963  02BF  0855               	movf	F@DigitNumber,w
  3964  02C0  3E48               	addlw	(low (_digits| 0))& (0+255)
  3965  02C1  0084               	movwf	4
  3966  02C2  1383               	bcf	3,7	;select IRP bank0
  3967  02C3  0800               	movf	0,w
  3968  02C4  00AA               	movwf	F@dig
  3969                           
  3970                           ;prog.c: 489: digitemp = convDig(0b00111111 & dig);
  3971  02C5  393F               	andlw	63
  3972  02C6  24E0               	fcall	_convDig
  3973  02C7  00DA               	movwf	_digitemp
  3974                           
  3975                           ;prog.c: 495: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  3976  02C8  1F2A               	btfss	F@dig,6
  3977  02C9  2ACC               	goto	i1l300
  3978  02CA  155A               	bsf	_digitemp,2
  3979  02CB  2ACD               	goto	i1l4222
  3980  02CC                     i1l300:	
  3981  02CC  115A               	bcf	_digitemp,2
  3982  02CD                     i1l4222:	
  3983                           
  3984                           ;prog.c: 497: PORTB = 0;
  3985  02CD  0186               	clrf	6	;volatile
  3986                           
  3987                           ;prog.c: 498: PORTA = (PORTA & 0b00110100) | PortAData[DigitNumber];
  3988  02CE  0855               	movf	F@DigitNumber,w
  3989  02CF  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  3990  02D0  0084               	movwf	4
  3991  02D1  27B3               	fcall	stringdir
  3992  02D2  00A5               	movwf	??_F
  3993  02D3  0805               	movf	5,w	;volatile
  3994  02D4  3934               	andlw	52
  3995  02D5  0425               	iorwf	??_F,w
  3996  02D6  0085               	movwf	5	;volatile
  3997                           
  3998                           ;prog.c: 500: DigitNumber++;
  3999  02D7  0AD5               	incf	F@DigitNumber,f
  4000                           
  4001                           ;prog.c: 502: PORTB = digitemp;
  4002  02D8  085A               	movf	_digitemp,w
  4003  02D9  0086               	movwf	6	;volatile
  4004  02DA  30FF               	movlw	-1
  4005                           
  4006                           ;prog.c: 504: endInterrupt = 1;
  4007  02DB  155E               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  4008                           
  4009                           ;prog.c: 505: powerOnInterval--;
  4010  02DC  07D0               	addwf	_powerOnInterval,f
  4011  02DD  1C03               	skipc
  4012  02DE  03D1               	decf	_powerOnInterval+1,f
  4013                           
  4014                           ;prog.c: 506: if (powerOnInterval == 0 && PowerBlocked == 0) {
  4015  02DF  0850               	movf	_powerOnInterval,w
  4016  02E0  0451               	iorwf	_powerOnInterval+1,w
  4017  02E1  1D03               	btfss	3,2
  4018  02E2  2AE8               	goto	i1l4240
  4019                           
  4020                           ;prog.c: 507: powerOff = 1;
  4021  02E3  0859               	movf	_PowerBlocked,w
  4022                           
  4023                           ;prog.c: 508: TRISA4 = 1;
  4024  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  4025  02E5  1D03               	btfss	3,2
  4026  02E6  2AE8               	goto	i1l4240
  4027  02E7  1605               	bsf	5,4	;volatile
  4028  02E8                     i1l4240:	
  4029                           
  4030                           ;prog.c: 509: }
  4031                           ;prog.c: 511: static unsigned int KeyTimeCounter = 0;
  4032                           ;prog.c: 512: static unsigned char LastKeysState = 0;
  4033                           ;prog.c: 513: static unsigned char long_press = 0;
  4034                           ;prog.c: 514: static unsigned char ButtonPressTimeIn1 = 0;
  4035                           ;prog.c: 515: static unsigned char ButtonPressTimeIn2 = 0;
  4036                           ;prog.c: 516: static unsigned char ButtonPressTimeOut = 0;
  4037                           ;prog.c: 517: unsigned char CurrentKeysState = 0;
  4038  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  4039  02E9  01AB               	clrf	F@CurrentKeysState
  4040                           
  4041                           ;prog.c: 519: if (ButtonPressTimeOut > 0) {
  4042  02EA  0854               	movf	F@ButtonPressTimeOut,w
  4043  02EB  1903               	btfsc	3,2
  4044  02EC  2AEF               	goto	i1l4246
  4045                           
  4046                           ;prog.c: 520: ButtonPressTimeOut--;
  4047  02ED  03D4               	decf	F@ButtonPressTimeOut,f
  4048                           
  4049                           ;prog.c: 521: } else {
  4050  02EE  2B54               	goto	i1l4326
  4051  02EF                     i1l4246:	
  4052                           
  4053                           ;prog.c: 523: KeyCode = 0;
  4054  02EF  01D8               	clrf	_KeyCode	;volatile
  4055                           
  4056                           ;prog.c: 525: if (RA5) {
  4057  02F0  1E85               	btfss	5,5	;volatile
  4058  02F1  2AF6               	goto	i1l4254
  4059  02F2  3019               	movlw	25
  4060                           
  4061                           ;prog.c: 526: CurrentKeysState = CurrentKeysState | 0b00000001;
  4062  02F3  142B               	bsf	F@CurrentKeysState,0
  4063                           
  4064                           ;prog.c: 527: ButtonPressTimeIn1 = 25;
  4065  02F4  00D2               	movwf	F@ButtonPressTimeIn1
  4066                           
  4067                           ;prog.c: 528: } else {
  4068  02F5  2AFC               	goto	i1l4260
  4069  02F6                     i1l4254:	
  4070                           
  4071                           ;prog.c: 529: if (ButtonPressTimeIn1 == 0) {
  4072  02F6  0852               	movf	F@ButtonPressTimeIn1,w
  4073  02F7  1D03               	btfss	3,2
  4074  02F8  2AFB               	goto	i1l4258
  4075                           
  4076                           ;prog.c: 530: CurrentKeysState = CurrentKeysState & 0b11111110;
  4077  02F9  102B               	bcf	F@CurrentKeysState,0
  4078                           
  4079                           ;prog.c: 531: } else {
  4080  02FA  2AFC               	goto	i1l4260
  4081  02FB                     i1l4258:	
  4082                           
  4083                           ;prog.c: 532: ButtonPressTimeIn1--;
  4084  02FB  03D2               	decf	F@ButtonPressTimeIn1,f
  4085  02FC                     i1l4260:	
  4086                           
  4087                           ;prog.c: 533: }
  4088                           ;prog.c: 534: }
  4089                           ;prog.c: 536: if (RA2) {
  4090  02FC  1D05               	btfss	5,2	;volatile
  4091  02FD  2B02               	goto	i1l4266
  4092  02FE  3019               	movlw	25
  4093                           
  4094                           ;prog.c: 537: CurrentKeysState = CurrentKeysState | 0b00000010;
  4095  02FF  14AB               	bsf	F@CurrentKeysState,1
  4096                           
  4097                           ;prog.c: 538: ButtonPressTimeIn2 = 25;
  4098  0300  00D3               	movwf	F@ButtonPressTimeIn2
  4099                           
  4100                           ;prog.c: 539: } else {
  4101  0301  2B08               	goto	i1l4272
  4102  0302                     i1l4266:	
  4103                           
  4104                           ;prog.c: 540: if (ButtonPressTimeIn2 == 0) {
  4105  0302  0853               	movf	F@ButtonPressTimeIn2,w
  4106  0303  1D03               	btfss	3,2
  4107  0304  2B07               	goto	i1l4270
  4108                           
  4109                           ;prog.c: 541: CurrentKeysState = CurrentKeysState & 0b11111101;
  4110  0305  10AB               	bcf	F@CurrentKeysState,1
  4111                           
  4112                           ;prog.c: 542: } else {
  4113  0306  2B08               	goto	i1l4272
  4114  0307                     i1l4270:	
  4115                           
  4116                           ;prog.c: 543: ButtonPressTimeIn2--;
  4117  0307  03D3               	decf	F@ButtonPressTimeIn2,f
  4118  0308                     i1l4272:	
  4119                           
  4120                           ;prog.c: 544: }
  4121                           ;prog.c: 545: }
  4122                           ;prog.c: 547: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4123  0308  0852               	movf	F@ButtonPressTimeIn1,w
  4124  0309  1903               	btfsc	3,2
  4125  030A  2B0F               	goto	i1l4276
  4126  030B  3019               	movlw	25
  4127  030C  0652               	xorwf	F@ButtonPressTimeIn1,w
  4128  030D  1D03               	btfss	3,2
  4129  030E  2B54               	goto	i1l4326
  4130  030F                     i1l4276:	
  4131  030F  0853               	movf	F@ButtonPressTimeIn2,w
  4132  0310  1903               	btfsc	3,2
  4133  0311  2B16               	goto	i1l4280
  4134  0312  3019               	movlw	25
  4135  0313  0653               	xorwf	F@ButtonPressTimeIn2,w
  4136  0314  1D03               	btfss	3,2
  4137  0315  2B54               	goto	i1l4326
  4138  0316                     i1l4280:	
  4139                           
  4140                           ;prog.c: 548: if (CurrentKeysState > 0) {
  4141  0316  082B               	movf	F@CurrentKeysState,w
  4142  0317  1903               	btfsc	3,2
  4143  0318  2B40               	goto	i1l4306
  4144                           
  4145                           ;prog.c: 549: if (LastKeysState != CurrentKeysState) {
  4146  0319  0856               	movf	F@LastKeysState,w
  4147  031A  062B               	xorwf	F@CurrentKeysState,w
  4148  031B  1903               	skipnz
  4149  031C  2B23               	goto	i1l4288
  4150                           
  4151                           ;prog.c: 550: KeyTimeCounter = 0;
  4152  031D  01CE               	clrf	F@KeyTimeCounter
  4153  031E  01CF               	clrf	F@KeyTimeCounter+1
  4154                           
  4155                           ;prog.c: 551: long_press = 0;
  4156  031F  01D7               	clrf	F@long_press
  4157                           
  4158                           ;prog.c: 552: LastKeysState = CurrentKeysState;
  4159  0320  082B               	movf	F@CurrentKeysState,w
  4160  0321  00D6               	movwf	F@LastKeysState
  4161                           
  4162                           ;prog.c: 553: } else if (KeyTimeCounter < 150) {
  4163  0322  2B38               	goto	i1l4298
  4164  0323                     i1l4288:	
  4165  0323  3000               	movlw	0
  4166  0324  024F               	subwf	F@KeyTimeCounter+1,w
  4167  0325  3096               	movlw	150
  4168  0326  1903               	skipnz
  4169  0327  024E               	subwf	F@KeyTimeCounter,w
  4170  0328  1803               	skipnc
  4171  0329  2B2E               	goto	i1l4292
  4172                           
  4173                           ;prog.c: 554: KeyTimeCounter++;
  4174  032A  0ACE               	incf	F@KeyTimeCounter,f
  4175  032B  1903               	skipnz
  4176  032C  0ACF               	incf	F@KeyTimeCounter+1,f
  4177                           
  4178                           ;prog.c: 555: } else if (KeyTimeCounter == 150 && !long_press) {
  4179  032D  2B38               	goto	i1l4298
  4180  032E                     i1l4292:	
  4181  032E  3096               	movlw	150
  4182  032F  064E               	xorwf	F@KeyTimeCounter,w
  4183  0330  044F               	iorwf	F@KeyTimeCounter+1,w
  4184  0331  1D03               	btfss	3,2
  4185  0332  2B38               	goto	i1l4298
  4186  0333  0857               	movf	F@long_press,w
  4187  0334  1D03               	btfss	3,2
  4188  0335  2B38               	goto	i1l4298
  4189                           
  4190                           ;prog.c: 556: long_press = 1;
  4191  0336  01D7               	clrf	F@long_press
  4192  0337  0AD7               	incf	F@long_press,f
  4193  0338                     i1l4298:	
  4194                           
  4195                           ;prog.c: 557: }
  4196                           ;prog.c: 559: if (long_press == 1) {
  4197  0338  0B57               	decfsz	F@long_press,w
  4198  0339  2B54               	goto	i1l4326
  4199                           
  4200                           ;prog.c: 560: KeyCode = 30 + LastKeysState + 3;
  4201  033A  0856               	movf	F@LastKeysState,w
  4202  033B  3E21               	addlw	33
  4203  033C  00D8               	movwf	_KeyCode	;volatile
  4204                           
  4205                           ;prog.c: 561: long_press = 2;
  4206  033D  3002               	movlw	2
  4207  033E  00D7               	movwf	F@long_press
  4208  033F  2B52               	goto	i1l4304
  4209  0340                     i1l4306:	
  4210  0340  0856               	movf	F@LastKeysState,w
  4211  0341  1903               	btfsc	3,2
  4212  0342  2B4A               	goto	i1l4320
  4213  0343  0857               	movf	F@long_press,w
  4214  0344  1D03               	btfss	3,2
  4215  0345  2B4A               	goto	i1l4320
  4216                           
  4217                           ;prog.c: 566: KeyCode = 30 + LastKeysState;
  4218  0346  0856               	movf	F@LastKeysState,w
  4219  0347  3E1E               	addlw	30
  4220  0348  00D8               	movwf	_KeyCode	;volatile
  4221  0349  2B4E               	goto	i1l4322
  4222  034A                     i1l4320:	
  4223                           ;prog.c: 569: long_press = 0;
  4224                           
  4225                           ;prog.c: 568: KeyTimeCounter = 0;
  4226                           
  4227                           ;prog.c: 567: LastKeysState = 0;
  4228                           
  4229  034A  3002               	movlw	2
  4230  034B  0657               	xorwf	F@long_press,w
  4231  034C  1D03               	btfss	3,2
  4232  034D  2B54               	goto	i1l4326
  4233  034E                     i1l4322:	
  4234                           
  4235                           ;prog.c: 573: LastKeysState = 0;
  4236  034E  01D6               	clrf	F@LastKeysState
  4237                           
  4238                           ;prog.c: 574: KeyTimeCounter = 0;
  4239  034F  01CE               	clrf	F@KeyTimeCounter
  4240  0350  01CF               	clrf	F@KeyTimeCounter+1
  4241                           
  4242                           ;prog.c: 575: long_press = 0;
  4243  0351  01D7               	clrf	F@long_press
  4244  0352                     i1l4304:	
  4245                           
  4246                           ;prog.c: 562: ButtonPressTimeOut = 40;
  4247  0352  3028               	movlw	40
  4248  0353  00D4               	movwf	F@ButtonPressTimeOut
  4249  0354                     i1l4326:	
  4250                           
  4251                           ;prog.c: 577: }
  4252                           ;prog.c: 578: }
  4253                           ;prog.c: 579: }
  4254                           ;prog.c: 581: get_temp_Async();
  4255  0354  202D               	fcall	_get_temp_Async
  4256  0355                     i1l342:	
  4257  0355  0829               	movf	??_F+4,w
  4258  0356  00FF               	movwf	127
  4259  0357  0828               	movf	??_F+3,w
  4260  0358  008A               	movwf	10
  4261  0359  0827               	movf	??_F+2,w
  4262  035A  0084               	movwf	4
  4263  035B  0E26               	swapf	(??_F+1)^0,w
  4264  035C  0083               	movwf	3
  4265  035D  0EFE               	swapf	126,f
  4266  035E  0E7E               	swapf	126,w
  4267  035F  0009               	retfie
  4268  0360                     __end_of_F:	
  4269                           
  4270                           	psect	intentry
  4271  0004                     __pintentry:	
  4272                           ;incstack = 0
  4273                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4274                           
  4275  0004                     interrupt_function:	
  4276  007E                     saved_w	set	btemp
  4277  0004  00FE               	movwf	btemp
  4278  0005  0E03               	swapf	3,w
  4279  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4280  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4281  0008  00A6               	movwf	??_F+1
  4282  0009  0804               	movf	4,w
  4283  000A  00A7               	movwf	??_F+2
  4284  000B  080A               	movf	10,w
  4285  000C  00A8               	movwf	??_F+3
  4286  000D  087F               	movf	btemp+1,w
  4287  000E  00A9               	movwf	??_F+4
  4288  000F  2AB6               	ljmp	_F
  4289                           
  4290                           	psect	text27
  4291  002D                     __ptext27:	
  4292 ;; *************** function _get_temp_Async *****************
  4293 ;; Defined at:
  4294 ;;		line 347 in file "prog.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;  temp2           1    4[BANK0 ] unsigned char 
  4299 ;;  temp1           1    3[BANK0 ] unsigned char 
  4300 ;;  i               1    2[BANK0 ] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 300/0
  4307 ;;		On exit  : 300/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4310 ;;      Params:         0       0       0       0
  4311 ;;      Locals:         0       3       0       0
  4312 ;;      Temps:          0       2       0       0
  4313 ;;      Totals:         0       5       0       0
  4314 ;;Total ram usage:        5 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    1
  4317 ;; This function calls:
  4318 ;;		___wmul
  4319 ;;		i1_INIT
  4320 ;;		i1_RX
  4321 ;;		i1_TX
  4322 ;;		i1___awdiv
  4323 ;;		i1_calc_crc
  4324 ;; This function is called by:
  4325 ;;		_F
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _get_temp_Async
  4331  002D                     _get_temp_Async:	
  4332                           
  4333                           ;prog.c: 349: if (!getTemp_flags.ActiveProcess) {
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4337  002D  1C47               	btfss	_getTemp_flags+4,0
  4338  002E  0008               	return
  4339                           
  4340                           ;prog.c: 351: }
  4341                           ;prog.c: 354: if (getTemp_flags.Init) {
  4342                           
  4343                           ;prog.c: 350: return;
  4344  002F  1C43               	btfss	_getTemp_flags,0
  4345  0030  283C               	goto	i1l236
  4346                           
  4347                           ;prog.c: 355: if (INIT()) {
  4348  0031  2599               	fcall	i1_INIT
  4349  0032  1C03               	btfss	3,0
  4350  0033  2839               	goto	i1l237
  4351  0034  30C3               	movlw	-61
  4352                           
  4353                           ;prog.c: 356: getTemp_flags.Init = 0;
  4354  0035  1043               	bcf	_getTemp_flags,0
  4355                           
  4356                           ;prog.c: 358: getTemp_flags.Send_Address = 1;
  4357  0036  14C3               	bsf	_getTemp_flags,1
  4358                           
  4359                           ;prog.c: 359: getTemp_flags.CountAddressBytes = 0;
  4360  0037  05C3               	andwf	_getTemp_flags,f
  4361                           
  4362                           ;prog.c: 360: } else {
  4363  0038  0008               	return
  4364  0039                     i1l237:	
  4365                           
  4366                           ;prog.c: 361: getTemp_flags.ActiveProcess = 0;
  4367  0039  1047               	bcf	_getTemp_flags+4,0
  4368                           
  4369                           ;prog.c: 362: getTemp_flags.Error = 1;
  4370  003A  17C6               	bsf	_getTemp_flags+3,7
  4371  003B  0008               	return
  4372  003C                     i1l236:	
  4373                           
  4374                           ;prog.c: 366: if (getTemp_flags.Send_Address) {
  4375  003C  1CC3               	btfss	_getTemp_flags,1
  4376  003D  2879               	goto	i1l240
  4377                           
  4378                           ;prog.c: 367: if (Broadcasting || getTemp_flags.SendConvertTemp) {
  4379  003E  18DE               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4380  003F  2842               	goto	i1l3840
  4381  0040  1F43               	btfss	_getTemp_flags,6
  4382  0041  284C               	goto	i1l3846
  4383  0042                     i1l3840:	
  4384                           
  4385                           ;prog.c: 368: TX(0xCC);
  4386  0042  30CC               	movlw	204
  4387  0043  25C3               	fcall	i1_TX
  4388                           
  4389                           ;prog.c: 369: getTemp_flags.CountAddressBytes = 1;
  4390  0044  1283               	bcf	3,5	;RP0=0, select bank0
  4391  0045  1303               	bcf	3,6	;RP1=0, select bank0
  4392  0046  0843               	movf	_getTemp_flags,w
  4393  0047  39C3               	andlw	-61
  4394  0048  3804               	iorlw	4
  4395  0049  00C3               	movwf	_getTemp_flags
  4396  004A                     i1l3844:	
  4397                           
  4398                           ;prog.c: 370: getTemp_flags.Send_Address = 0;
  4399  004A  10C3               	bcf	_getTemp_flags,1
  4400                           
  4401                           ;prog.c: 371: } else if (getTemp_flags.CountAddressBytes < sizeof (DS_Address)) {
  4402  004B  0008               	return
  4403  004C                     i1l3846:	
  4404  004C  0C43               	rrf	_getTemp_flags,w
  4405  004D  00A0               	movwf	??_get_temp_Async
  4406  004E  0C20               	rrf	??_get_temp_Async,w
  4407  004F  390F               	andlw	15
  4408  0050  00A1               	movwf	??_get_temp_Async+1
  4409  0051  3008               	movlw	8
  4410  0052  0221               	subwf	??_get_temp_Async+1,w
  4411  0053  1803               	skipnc
  4412  0054  0008               	return
  4413                           
  4414                           ;prog.c: 372: if (getTemp_flags.CountAddressBytes == 0) {
  4415  0055  0C43               	rrf	_getTemp_flags,w
  4416  0056  00A0               	movwf	??_get_temp_Async
  4417  0057  0C20               	rrf	??_get_temp_Async,w
  4418  0058  390F               	andlw	15
  4419  0059  1D03               	skipz
  4420  005A  285D               	goto	i1l3852
  4421                           
  4422                           ;prog.c: 373: TX(0x55);
  4423  005B  3055               	movlw	85
  4424  005C  25C3               	fcall	i1_TX
  4425  005D                     i1l3852:	
  4426                           
  4427                           ;prog.c: 374: }
  4428                           ;prog.c: 375: TX(DS_Address[getTemp_flags.CountAddressBytes]);
  4429  005D  1283               	bcf	3,5	;RP0=0, select bank0
  4430  005E  1303               	bcf	3,6	;RP1=0, select bank0
  4431  005F  0C43               	rrf	_getTemp_flags,w
  4432  0060  00A0               	movwf	??_get_temp_Async
  4433  0061  0C20               	rrf	??_get_temp_Async,w
  4434  0062  390F               	andlw	15
  4435  0063  3EC0               	addlw	(low (_DS_Address| 0))& (0+255)
  4436  0064  0084               	movwf	4
  4437  0065  1383               	bcf	3,7	;select IRP bank1
  4438  0066  0800               	movf	0,w
  4439  0067  25C3               	fcall	i1_TX
  4440                           
  4441                           ;prog.c: 376: getTemp_flags.CountAddressBytes++;
  4442  0068  1283               	bcf	3,5	;RP0=0, select bank0
  4443  0069  1303               	bcf	3,6	;RP1=0, select bank0
  4444  006A  0C43               	rrf	_getTemp_flags,w
  4445  006B  210E               	fcall	PL2	;call to abstracted procedure
  4446  006C  0843               	movf	_getTemp_flags,w
  4447  006D  0620               	xorwf	??_get_temp_Async,w
  4448  006E  39C3               	andlw	-61
  4449  006F  0620               	xorwf	??_get_temp_Async,w
  4450  0070  00C3               	movwf	_getTemp_flags
  4451                           
  4452                           ;prog.c: 378: if (getTemp_flags.CountAddressBytes == sizeof (DS_Address)) {
  4453  0071  0C43               	rrf	_getTemp_flags,w
  4454  0072  00A0               	movwf	??_get_temp_Async
  4455  0073  0C20               	rrf	??_get_temp_Async,w
  4456  0074  390F               	andlw	15
  4457  0075  3A08               	xorlw	8
  4458  0076  1D03               	skipz
  4459  0077  0008               	return
  4460  0078  284A               	goto	i1l3844
  4461  0079                     i1l240:	
  4462                           
  4463                           ;prog.c: 384: if (getTemp_flags.SendConvertTemp) {
  4464  0079  1F43               	btfss	_getTemp_flags,6
  4465  007A  2881               	goto	i1l3864
  4466                           
  4467                           ;prog.c: 385: TX(0x44);
  4468  007B  3044               	movlw	68
  4469  007C  25C3               	fcall	i1_TX
  4470                           
  4471                           ;prog.c: 386: getTemp_flags.SendConvertTemp = 0;
  4472  007D  1283               	bcf	3,5	;RP0=0, select bank0
  4473  007E  1303               	bcf	3,6	;RP1=0, select bank0
  4474  007F  1343               	bcf	_getTemp_flags,6
  4475                           
  4476                           ;prog.c: 388: } else
  4477  0080  0008               	return
  4478  0081                     i1l3864:	
  4479                           
  4480                           ;prog.c: 390: if (getTemp_flags.PauseValue > 0) {
  4481  0081  0844               	movf	_getTemp_flags+1,w
  4482  0082  0445               	iorwf	_getTemp_flags+2,w
  4483  0083  1903               	btfsc	3,2
  4484  0084  2890               	goto	i1l251
  4485                           
  4486                           ;prog.c: 391: getTemp_flags.PauseValue--;
  4487  0085  3001               	movlw	1
  4488  0086  02C4               	subwf	_getTemp_flags+1,f
  4489  0087  3000               	movlw	0
  4490  0088  1C03               	skipc
  4491  0089  03C5               	decf	_getTemp_flags+2,f
  4492  008A  02C5               	subwf	_getTemp_flags+2,f
  4493                           
  4494                           ;prog.c: 392: if (getTemp_flags.PauseValue == 0) {
  4495  008B  0844               	movf	_getTemp_flags+1,w
  4496  008C  0445               	iorwf	_getTemp_flags+2,w
  4497  008D  1903               	btfsc	3,2
  4498                           
  4499                           ;prog.c: 393: getTemp_flags.Init = 1;
  4500  008E  1443               	bsf	_getTemp_flags,0
  4501  008F  0008               	return
  4502  0090                     i1l251:	
  4503                           
  4504                           ;prog.c: 397: if (getTemp_flags.SendGetTemp) {
  4505  0090  1C46               	btfss	_getTemp_flags+3,0
  4506  0091  2898               	goto	i1l254
  4507                           
  4508                           ;prog.c: 398: TX(0xBE);
  4509  0092  30BE               	movlw	190
  4510  0093  25C3               	fcall	i1_TX
  4511                           
  4512                           ;prog.c: 399: getTemp_flags.SendGetTemp = 0;
  4513  0094  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0095  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0096  1046               	bcf	_getTemp_flags+3,0
  4516                           
  4517                           ;prog.c: 400: } else
  4518  0097  0008               	return
  4519  0098                     i1l254:	
  4520                           
  4521                           ;prog.c: 402: if (getTemp_flags.ReadData) {
  4522  0098  1CC6               	btfss	_getTemp_flags+3,1
  4523  0099  0008               	return
  4524                           
  4525                           ;prog.c: 403: if (getTemp_flags.CountDataBytes < sizeof (DS_ReadData)) {
  4526  009A  2116               	fcall	PL4	;call to abstracted procedure
  4527  009B  1803               	skipnc
  4528  009C  0008               	return
  4529                           
  4530                           ;prog.c: 404: for (unsigned char i = 0; i < 3 && getTemp_flags.CountDataBytes < sizeof (
      +                          DS_ReadData); i++) {
  4531  009D  01A2               	clrf	get_temp_Async@i
  4532  009E  28B5               	goto	i1l3886
  4533  009F                     i1l3888:	
  4534  009F  2116               	fcall	PL4	;call to abstracted procedure
  4535  00A0  1803               	btfsc	3,0
  4536  00A1  28B9               	goto	i1l3890
  4537                           
  4538                           ;prog.c: 405: DS_ReadData[getTemp_flags.CountDataBytes] = RX();
  4539  00A2  0C46               	rrf	_getTemp_flags+3,w
  4540  00A3  00A0               	movwf	??_get_temp_Async
  4541  00A4  0C20               	rrf	??_get_temp_Async,w
  4542  00A5  390F               	andlw	15
  4543  00A6  3EB7               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4544  00A7  0084               	movwf	4
  4545  00A8  2698               	fcall	i1_RX
  4546  00A9  1383               	bcf	3,7	;select IRP bank1
  4547  00AA  0080               	movwf	0
  4548                           
  4549                           ;prog.c: 406: getTemp_flags.CountDataBytes++;
  4550  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  4551  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  4552  00AD  0C46               	rrf	_getTemp_flags+3,w
  4553  00AE  210E               	fcall	PL2	;call to abstracted procedure
  4554  00AF  0846               	movf	_getTemp_flags+3,w
  4555  00B0  0620               	xorwf	??_get_temp_Async,w
  4556  00B1  39C3               	andlw	-61
  4557  00B2  0620               	xorwf	??_get_temp_Async,w
  4558  00B3  00C6               	movwf	_getTemp_flags+3
  4559  00B4  0AA2               	incf	get_temp_Async@i,f
  4560  00B5                     i1l3886:	
  4561  00B5  3003               	movlw	3
  4562  00B6  0222               	subwf	get_temp_Async@i,w
  4563  00B7  1C03               	btfss	3,0
  4564  00B8  289F               	goto	i1l3888
  4565  00B9                     i1l3890:	
  4566                           
  4567                           ;prog.c: 407: }
  4568                           ;prog.c: 408: if (getTemp_flags.CountDataBytes == sizeof (DS_ReadData)) {
  4569  00B9  0C46               	rrf	_getTemp_flags+3,w
  4570  00BA  00A0               	movwf	??_get_temp_Async
  4571  00BB  0C20               	rrf	??_get_temp_Async,w
  4572  00BC  390F               	andlw	15
  4573  00BD  3A09               	xorlw	9
  4574  00BE  1D03               	skipz
  4575  00BF  0008               	return
  4576                           
  4577                           ;prog.c: 409: if (DS_ReadData[sizeof (DS_ReadData) - 1] != calc_crc(DS_ReadData, sizeof 
      +                          (DS_ReadData) - 1)) {
  4578  00C0  3008               	movlw	8
  4579  00C1  00F0               	movwf	i1calc_crc@len
  4580  00C2  30B7               	movlw	(low (_DS_ReadData| 0))& (0+255)
  4581  00C3  2634               	fcall	i1_calc_crc
  4582  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  4583  00C5  063F               	xorwf	(_DS_ReadData^(0+128)+8),w
  4584  00C6  1903               	skipnz
  4585  00C7  28CB               	goto	i1l3896
  4586                           
  4587                           ;prog.c: 410: getTemp_flags.Error = 1;
  4588  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  4589  00C9  17C6               	bsf	_getTemp_flags+3,7
  4590                           
  4591                           ;prog.c: 411: } else {
  4592  00CA  290A               	goto	i1l3924
  4593  00CB                     i1l3896:	
  4594                           
  4595                           ;prog.c: 413: unsigned char temp1 = DS_ReadData[0];
  4596  00CB  0837               	movf	_DS_ReadData^(0+128),w
  4597  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4598  00CD  00A3               	movwf	get_temp_Async@temp1
  4599                           
  4600                           ;prog.c: 414: unsigned char temp2 = DS_ReadData[1];
  4601  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  4602  00CF  0838               	movf	(_DS_ReadData^(0+128)+1),w
  4603  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  4604  00D1  00A4               	movwf	get_temp_Async@temp2
  4605                           
  4606                           ;prog.c: 416: temp_drob = temp1 & 0b00001111;
  4607  00D2  0823               	movf	get_temp_Async@temp1,w
  4608  00D3  00DC               	movwf	_temp_drob
  4609  00D4  300F               	movlw	15
  4610  00D5  05DC               	andwf	_temp_drob,f
  4611                           
  4612                           ;prog.c: 417: temp_drob = ((temp_drob * 6) + 2) / 10;
  4613  00D6  300A               	movlw	10
  4614  00D7  00F6               	movwf	i1___awdiv@divisor
  4615  00D8  01F7               	clrf	i1___awdiv@divisor+1
  4616  00D9  085C               	movf	_temp_drob,w
  4617  00DA  00F0               	movwf	___wmul@multiplier
  4618  00DB  3006               	movlw	6
  4619  00DC  01F1               	clrf	___wmul@multiplier+1
  4620  00DD  00F2               	movwf	___wmul@multiplicand
  4621  00DE  01F3               	clrf	___wmul@multiplicand+1
  4622  00DF  26EE               	fcall	___wmul
  4623  00E0  0870               	movf	?___wmul,w
  4624  00E1  3E02               	addlw	2
  4625  00E2  00F8               	movwf	i1___awdiv@dividend
  4626  00E3  0871               	movf	?___wmul+1,w
  4627  00E4  1803               	skipnc
  4628  00E5  3E01               	addlw	1
  4629  00E6  3E00               	addlw	0
  4630  00E7  00F9               	movwf	i1___awdiv@dividend+1
  4631  00E8  245E               	fcall	i1___awdiv
  4632  00E9  0876               	movf	?i1___awdiv,w
  4633  00EA  00DC               	movwf	_temp_drob
  4634  00EB  300F               	movlw	15
  4635                           
  4636                           ;prog.c: 418: temp1 >>= 4;
  4637  00EC  0EA3               	swapf	get_temp_Async@temp1,f
  4638  00ED  05A3               	andwf	get_temp_Async@temp1,f
  4639                           
  4640                           ;prog.c: 419: sign = temp2 & 0x80;
  4641  00EE  0824               	movf	get_temp_Async@temp2,w
  4642  00EF  00DB               	movwf	_sign
  4643  00F0  3080               	movlw	128
  4644  00F1  05DB               	andwf	_sign,f
  4645  00F2  30F0               	movlw	240
  4646                           
  4647                           ;prog.c: 420: temp2 <<= 4;
  4648  00F3  0EA4               	swapf	get_temp_Async@temp2,f
  4649  00F4  05A4               	andwf	get_temp_Async@temp2,f
  4650                           
  4651                           ;prog.c: 421: temp2 &= 0b01110000;
  4652  00F5  3070               	movlw	112
  4653  00F6  05A4               	andwf	get_temp_Async@temp2,f
  4654                           
  4655                           ;prog.c: 422: temp2 |= temp1;
  4656  00F7  0823               	movf	get_temp_Async@temp1,w
  4657  00F8  04A4               	iorwf	get_temp_Async@temp2,f
  4658                           
  4659                           ;prog.c: 424: if (sign) {
  4660  00F9  085B               	movf	_sign,w
  4661  00FA  1903               	btfsc	3,2
  4662  00FB  2908               	goto	i1l3922
  4663                           
  4664                           ;prog.c: 425: temperature = 127 - temp2;
  4665  00FC  0824               	movf	get_temp_Async@temp2,w
  4666  00FD  3C7F               	sublw	127
  4667  00FE  00DD               	movwf	_temperature
  4668                           
  4669                           ;prog.c: 426: temp_drob = 10 - temp_drob;
  4670  00FF  085C               	movf	_temp_drob,w
  4671  0100  3C0A               	sublw	10
  4672  0101  00DC               	movwf	_temp_drob
  4673                           
  4674                           ;prog.c: 427: if (temp_drob == 10) {
  4675  0102  3A0A               	xorlw	10
  4676  0103  1D03               	btfss	3,2
  4677  0104  290A               	goto	i1l3924
  4678                           
  4679                           ;prog.c: 428: temp_drob = 0;
  4680  0105  01DC               	clrf	_temp_drob
  4681                           
  4682                           ;prog.c: 429: temperature++;
  4683  0106  0ADD               	incf	_temperature,f
  4684  0107  290A               	goto	i1l3924
  4685  0108                     i1l3922:	
  4686                           
  4687                           ;prog.c: 432: temperature = temp2;
  4688  0108  0824               	movf	get_temp_Async@temp2,w
  4689  0109  00DD               	movwf	_temperature
  4690  010A                     i1l3924:	
  4691                           
  4692                           ;prog.c: 433: }
  4693                           ;prog.c: 435: }
  4694                           ;prog.c: 436: getTemp_flags.ReadData = 0;
  4695  010A  10C6               	bcf	_getTemp_flags+3,1
  4696                           
  4697                           ;prog.c: 437: getTemp_flags.ActiveProcess = 0;
  4698  010B  1047               	bcf	_getTemp_flags+4,0
  4699                           
  4700                           ;prog.c: 438: getTemp_flags.DataIsRead = 1;
  4701  010C  1746               	bsf	_getTemp_flags+3,6
  4702  010D  0008               	return
  4703  010E                     __end_of_get_temp_Async:	
  4704  010E                     PL2:	
  4705  010E  00A0               	movwf	??_get_temp_Async
  4706  010F  0C20               	rrf	??_get_temp_Async,w
  4707  0110  390F               	andlw	15
  4708  0111  00A0               	movwf	??_get_temp_Async
  4709  0112  0AA0               	incf	??_get_temp_Async,f
  4710  0113  0DA0               	rlf	??_get_temp_Async,f
  4711  0114  0DA0               	rlf	??_get_temp_Async,f
  4712  0115  0008               	return
  4713  0116                     __end_ofPL2:	
  4714  0116                     PL4:	
  4715  0116  0C46               	rrf	_getTemp_flags+3,w
  4716  0117  00A0               	movwf	??_get_temp_Async
  4717  0118  0C20               	rrf	??_get_temp_Async,w
  4718  0119  390F               	andlw	15
  4719  011A  00A1               	movwf	??_get_temp_Async+1
  4720  011B  3009               	movlw	9
  4721  011C  0221               	subwf	??_get_temp_Async+1,w
  4722  011D  0008               	return
  4723  011E                     __end_ofPL4:	
  4724                           
  4725                           	psect	text28
  4726  0634                     __ptext28:	
  4727 ;; *************** function i1_calc_crc *****************
  4728 ;; Defined at:
  4729 ;;		line 256 in file "prog.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  mas             1    wreg     PTR unsigned char 
  4732 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4733 ;;  len             1    0[COMMON] unsigned char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  mas             1    1[COMMON] PTR unsigned char 
  4736 ;;		 -> EditAddressMemory@CellsData(8), DS_ReadData(9), 
  4737 ;;  calc_crc        1    5[COMMON] unsigned char 
  4738 ;;  calc_crc        1    4[COMMON] unsigned char 
  4739 ;;  calc_crc        1    3[COMMON] unsigned char 
  4740 ;;  calc_crc        1    2[COMMON] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      unsigned char 
  4743 ;; Registers used:
  4744 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 300/0
  4747 ;;		On exit  : 300/0
  4748 ;;		Unchanged: 300/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4750 ;;      Params:         1       0       0       0
  4751 ;;      Locals:         5       0       0       0
  4752 ;;      Temps:          0       0       0       0
  4753 ;;      Totals:         6       0       0       0
  4754 ;;Total ram usage:        6 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_get_temp_Async
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           
  4764                           ;psect for function i1_calc_crc
  4765  0634                     i1_calc_crc:	
  4766                           
  4767                           ;incstack = 0
  4768                           ; Regs used in i1_calc_crc: [wreg-fsr0h+status,2+status,0]
  4769                           ;i1calc_crc@mas stored from wreg
  4770  0634  00F1               	movwf	i1calc_crc@mas
  4771                           
  4772                           ;prog.c: 257: unsigned char crc = 0;
  4773  0635  01F5               	clrf	i1calc_crc@crc
  4774                           
  4775                           ;prog.c: 258: while (len--) {
  4776  0636  2E51               	goto	i1l3818
  4777  0637                     i1l3798:	
  4778                           
  4779                           ;prog.c: 259: unsigned char dat = *mas++;
  4780  0637  0871               	movf	i1calc_crc@mas,w
  4781  0638  0084               	movwf	4
  4782  0639  1383               	bcf	3,7	;select IRP bank0
  4783  063A  0800               	movf	0,w
  4784  063B  00F2               	movwf	i1calc_crc@dat
  4785  063C  0AF1               	incf	i1calc_crc@mas,f
  4786                           
  4787                           ;prog.c: 260: for (unsigned char i = 0; i < 8; i++) {
  4788  063D  01F4               	clrf	i1calc_crc@i
  4789  063E                     i1l3808:	
  4790                           
  4791                           ;prog.c: 261: unsigned char fb = (crc ^ dat) & 1;
  4792  063E  0875               	movf	i1calc_crc@crc,w
  4793  063F  0672               	xorwf	i1calc_crc@dat,w
  4794  0640  00F3               	movwf	i1calc_crc@fb
  4795  0641  3001               	movlw	1
  4796  0642  05F3               	andwf	i1calc_crc@fb,f
  4797                           
  4798                           ;prog.c: 262: crc >>= 1;
  4799  0643  1003               	clrc
  4800  0644  0CF5               	rrf	i1calc_crc@crc,f
  4801                           
  4802                           ;prog.c: 263: dat >>= 1;
  4803  0645  1003               	clrc
  4804  0646  0CF2               	rrf	i1calc_crc@dat,f
  4805                           
  4806                           ;prog.c: 264: if (fb) crc ^= 0x8c;
  4807  0647  0873               	movf	i1calc_crc@fb,w
  4808  0648  1903               	btfsc	3,2
  4809  0649  2E4C               	goto	i1l3816
  4810  064A  308C               	movlw	140
  4811  064B  06F5               	xorwf	i1calc_crc@crc,f
  4812  064C                     i1l3816:	
  4813  064C  3008               	movlw	8
  4814  064D  0AF4               	incf	i1calc_crc@i,f
  4815  064E  0274               	subwf	i1calc_crc@i,w
  4816  064F  1C03               	skipc
  4817  0650  2E3E               	goto	i1l3808
  4818  0651                     i1l3818:	
  4819  0651  03F0               	decf	i1calc_crc@len,f
  4820  0652  0F70               	incfsz	i1calc_crc@len,w
  4821  0653  2E37               	goto	i1l3798
  4822                           
  4823                           ;prog.c: 265: }
  4824                           ;prog.c: 266: }
  4825                           ;prog.c: 267: return crc;
  4826  0654  0875               	movf	i1calc_crc@crc,w
  4827  0655  0008               	return
  4828  0656                     __end_ofi1_calc_crc:	
  4829                           
  4830                           	psect	text29
  4831  045E                     __ptext29:	
  4832 ;; *************** function i1___awdiv *****************
  4833 ;; Defined at:
  4834 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  divisor         2    6[COMMON] int 
  4837 ;;  dividend        2    8[COMMON] int 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  __awdiv         2   12[COMMON] int 
  4840 ;;  __awdiv         1   11[COMMON] unsigned char 
  4841 ;;  __awdiv         1   10[COMMON] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  2    6[COMMON] int 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0
  4846 ;; Tracked objects:
  4847 ;;		On entry : 300/0
  4848 ;;		On exit  : 300/0
  4849 ;;		Unchanged: 300/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4851 ;;      Params:         4       0       0       0
  4852 ;;      Locals:         4       0       0       0
  4853 ;;      Temps:          0       0       0       0
  4854 ;;      Totals:         8       0       0       0
  4855 ;;Total ram usage:        8 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; This function calls:
  4858 ;;		Nothing
  4859 ;; This function is called by:
  4860 ;;		_get_temp_Async
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           
  4865                           ;psect for function i1___awdiv
  4866  045E                     i1___awdiv:	
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4870  045E  01FB               	clrf	i1___awdiv@sign
  4871  045F  1FF7               	btfss	i1___awdiv@divisor+1,7
  4872  0460  2C68               	goto	i1l2638
  4873  0461  09F6               	comf	i1___awdiv@divisor,f
  4874  0462  09F7               	comf	i1___awdiv@divisor+1,f
  4875  0463  0AF6               	incf	i1___awdiv@divisor,f
  4876  0464  1903               	skipnz
  4877  0465  0AF7               	incf	i1___awdiv@divisor+1,f
  4878  0466  01FB               	clrf	i1___awdiv@sign
  4879  0467  0AFB               	incf	i1___awdiv@sign,f
  4880  0468                     i1l2638:	
  4881  0468  1FF9               	btfss	i1___awdiv@dividend+1,7
  4882  0469  2C71               	goto	i1l2644
  4883  046A  09F8               	comf	i1___awdiv@dividend,f
  4884  046B  09F9               	comf	i1___awdiv@dividend+1,f
  4885  046C  0AF8               	incf	i1___awdiv@dividend,f
  4886  046D  1903               	skipnz
  4887  046E  0AF9               	incf	i1___awdiv@dividend+1,f
  4888  046F  3001               	movlw	1
  4889  0470  06FB               	xorwf	i1___awdiv@sign,f
  4890  0471                     i1l2644:	
  4891  0471  01FC               	clrf	i1___awdiv@quotient
  4892  0472  01FD               	clrf	i1___awdiv@quotient+1
  4893  0473  0876               	movf	i1___awdiv@divisor,w
  4894  0474  0477               	iorwf	i1___awdiv@divisor+1,w
  4895  0475  1903               	btfsc	3,2
  4896  0476  2C96               	goto	i1l2666
  4897  0477  01FA               	clrf	i1___awdiv@counter
  4898  0478                     L12:	
  4899  0478  0AFA               	incf	i1___awdiv@counter,f
  4900  0479  1BF7               	btfsc	i1___awdiv@divisor+1,7
  4901  047A  2C7F               	goto	i1l2654
  4902  047B  1003               	clrc
  4903  047C  0DF6               	rlf	i1___awdiv@divisor,f
  4904  047D  0DF7               	rlf	i1___awdiv@divisor+1,f
  4905  047E  2C78               	goto	L12
  4906  047F                     i1l2654:	
  4907  047F  1003               	clrc
  4908  0480  0DFC               	rlf	i1___awdiv@quotient,f
  4909  0481  0DFD               	rlf	i1___awdiv@quotient+1,f
  4910  0482  0877               	movf	i1___awdiv@divisor+1,w
  4911  0483  0279               	subwf	i1___awdiv@dividend+1,w
  4912  0484  1D03               	skipz
  4913  0485  2C88               	goto	u218_25
  4914  0486  0876               	movf	i1___awdiv@divisor,w
  4915  0487  0278               	subwf	i1___awdiv@dividend,w
  4916  0488                     u218_25:	
  4917  0488  1C03               	skipc
  4918  0489  2C92               	goto	L13
  4919  048A  0876               	movf	i1___awdiv@divisor,w
  4920  048B  02F8               	subwf	i1___awdiv@dividend,f
  4921  048C  0877               	movf	i1___awdiv@divisor+1,w
  4922  048D  1C03               	skipc
  4923  048E  03F9               	decf	i1___awdiv@dividend+1,f
  4924  048F  02F9               	subwf	i1___awdiv@dividend+1,f
  4925  0490  147C               	bsf	i1___awdiv@quotient,0
  4926  0491  1003               	clrc
  4927  0492                     L13:	
  4928  0492  0CF7               	rrf	i1___awdiv@divisor+1,f
  4929  0493  0CF6               	rrf	i1___awdiv@divisor,f
  4930  0494  0BFA               	decfsz	i1___awdiv@counter,f
  4931  0495  2C7F               	goto	i1l2654
  4932  0496                     i1l2666:	
  4933  0496  087B               	movf	i1___awdiv@sign,w
  4934  0497  1903               	btfsc	3,2
  4935  0498  2C9E               	goto	i1l2670
  4936  0499  09FC               	comf	i1___awdiv@quotient,f
  4937  049A  09FD               	comf	i1___awdiv@quotient+1,f
  4938  049B  0AFC               	incf	i1___awdiv@quotient,f
  4939  049C  1903               	skipnz
  4940  049D  0AFD               	incf	i1___awdiv@quotient+1,f
  4941  049E                     i1l2670:	
  4942  049E  087D               	movf	i1___awdiv@quotient+1,w
  4943  049F  00F7               	movwf	?i1___awdiv+1
  4944  04A0  087C               	movf	i1___awdiv@quotient,w
  4945  04A1  00F6               	movwf	?i1___awdiv
  4946  04A2  0008               	return
  4947  04A3                     __end_ofi1___awdiv:	
  4948                           
  4949                           	psect	text30
  4950  05C3                     __ptext30:	
  4951 ;; *************** function i1_TX *****************
  4952 ;; Defined at:
  4953 ;;		line 218 in file "prog.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  cmd             1    wreg     unsigned char 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  cmd             1    1[COMMON] unsigned char 
  4958 ;;  TX              1    3[COMMON] unsigned char 
  4959 ;;  TX              1    2[COMMON] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      void 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, status,0
  4964 ;; Tracked objects:
  4965 ;;		On entry : 300/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4969 ;;      Params:         0       0       0       0
  4970 ;;      Locals:         3       0       0       0
  4971 ;;      Temps:          1       0       0       0
  4972 ;;      Totals:         4       0       0       0
  4973 ;;Total ram usage:        4 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; This function calls:
  4976 ;;		Nothing
  4977 ;; This function is called by:
  4978 ;;		_get_temp_Async
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           
  4983                           ;psect for function i1_TX
  4984  05C3                     i1_TX:	
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  4988                           ;i1TX@cmd stored from wreg
  4989  05C3  00F1               	movwf	i1TX@cmd
  4990                           
  4991                           ;prog.c: 224: unsigned char i = 0;
  4992  05C4  01F3               	clrf	i1TX@i
  4993                           
  4994                           ;prog.c: 225: temp = cmd;
  4995  05C5  00F2               	movwf	i1TX@temp
  4996                           
  4997                           ;prog.c: 226: for (i = 0; i < 8; i++) {
  4998  05C6  01F3               	clrf	i1TX@i
  4999  05C7                     i1l183:	
  5000                           
  5001                           ;prog.c: 227: if (temp & 0x01) {
  5002  05C7  1C72               	btfss	i1TX@temp,0
  5003  05C8  2DD7               	goto	i1l185
  5004                           
  5005                           ;prog.c: 228: TRISA3 = 0;
  5006  05C9  1683               	bsf	3,5	;RP0=1, select bank1
  5007  05CA  1303               	bcf	3,6	;RP1=0, select bank1
  5008  05CB  1185               	bcf	5,3	;volatile
  5009                           
  5010                           ;prog.c: 229: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5011  05CC  2DCD               	nop2	;2 cycle nop
  5012  05CD  2DCE               	nop2	;2 cycle nop
  5013  05CE  0000               	nop
  5014                           
  5015                           ;prog.c: 230: TRISA3 = 1;
  5016  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  5017  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  5018  05D1  1585               	bsf	5,3	;volatile
  5019                           
  5020                           ;prog.c: 231: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5021  05D2  3017               	movlw	23
  5022  05D3  00F0               	movwf	??i1_TX
  5023  05D4                     u479_27:	
  5024  05D4  0BF0               	decfsz	??i1_TX,f
  5025  05D5  2DD4               	goto	u479_27
  5026                           
  5027                           ;prog.c: 232: } else {
  5028  05D6  2DE4               	goto	i1l2578
  5029  05D7                     i1l185:	
  5030                           
  5031                           ;prog.c: 233: TRISA3 = 0;
  5032  05D7  1683               	bsf	3,5	;RP0=1, select bank1
  5033  05D8  1303               	bcf	3,6	;RP1=0, select bank1
  5034  05D9  1185               	bcf	5,3	;volatile
  5035                           
  5036                           ;prog.c: 234: _delay((unsigned long)((70)*(4000000/4000000.0)));
  5037  05DA  3017               	movlw	23
  5038  05DB  00F0               	movwf	??i1_TX
  5039  05DC                     u480_27:	
  5040  05DC  0BF0               	decfsz	??i1_TX,f
  5041  05DD  2DDC               	goto	u480_27
  5042                           
  5043                           ;prog.c: 235: TRISA3 = 1;
  5044  05DE  1683               	bsf	3,5	;RP0=1, select bank1
  5045  05DF  1303               	bcf	3,6	;RP1=0, select bank1
  5046  05E0  1585               	bsf	5,3	;volatile
  5047                           
  5048                           ;prog.c: 236: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5049  05E1  2DE2               	nop2	;2 cycle nop
  5050  05E2  2DE3               	nop2	;2 cycle nop
  5051  05E3  0000               	nop
  5052  05E4                     i1l2578:	
  5053  05E4  3008               	movlw	8
  5054                           
  5055                           ;prog.c: 237: }
  5056                           ;prog.c: 238: temp >>= 1;
  5057  05E5  1003               	clrc
  5058  05E6  0CF2               	rrf	i1TX@temp,f
  5059  05E7  0AF3               	incf	i1TX@i,f
  5060  05E8  0273               	subwf	i1TX@i,w
  5061  05E9  1803               	btfsc	3,0
  5062  05EA  0008               	return
  5063  05EB  2DC7               	goto	i1l183
  5064  05EC                     __end_ofi1_TX:	
  5065                           
  5066                           	psect	text31
  5067  0698                     __ptext31:	
  5068 ;; *************** function i1_RX *****************
  5069 ;; Defined at:
  5070 ;;		line 242 in file "prog.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  RX              1    2[COMMON] unsigned char 
  5075 ;;  RX              1    1[COMMON] unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      unsigned char 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0
  5080 ;; Tracked objects:
  5081 ;;		On entry : 300/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5085 ;;      Params:         0       0       0       0
  5086 ;;      Locals:         2       0       0       0
  5087 ;;      Temps:          1       0       0       0
  5088 ;;      Totals:         3       0       0       0
  5089 ;;Total ram usage:        3 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_get_temp_Async
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function i1_RX
  5100  0698                     i1_RX:	
  5101                           
  5102                           ;prog.c: 243: unsigned char d = 0;
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  5106  0698  01F1               	clrf	i1RX@d
  5107                           
  5108                           ;prog.c: 244: for (unsigned char i = 0; i < 8; i++) {
  5109  0699  01F2               	clrf	i1RX@i
  5110  069A                     i1l190:	
  5111                           
  5112                           ;prog.c: 245: TRISA3 = 0;
  5113  069A  1683               	bsf	3,5	;RP0=1, select bank1
  5114  069B  1303               	bcf	3,6	;RP1=0, select bank1
  5115  069C  1185               	bcf	5,3	;volatile
  5116                           
  5117                           ;prog.c: 246: _delay((unsigned long)((6)*(4000000/4000000.0)));
  5118  069D  2E9E               	nop2	;2 cycle nop
  5119  069E  2E9F               	nop2	;2 cycle nop
  5120  069F  2EA0               	nop2	;2 cycle nop
  5121                           
  5122                           ;prog.c: 247: TRISA3 = 1;
  5123  06A0  1683               	bsf	3,5	;RP0=1, select bank1
  5124  06A1  1303               	bcf	3,6	;RP1=0, select bank1
  5125  06A2  1585               	bsf	5,3	;volatile
  5126                           
  5127                           ;prog.c: 248: _delay((unsigned long)((4)*(4000000/4000000.0)));
  5128  06A3  2EA4               	nop2	;2 cycle nop
  5129  06A4  2EA5               	nop2	;2 cycle nop
  5130                           
  5131                           ;prog.c: 249: d >>= 1;
  5132  06A5  1003               	clrc
  5133  06A6  0CF1               	rrf	i1RX@d,f
  5134                           
  5135                           ;prog.c: 250: if (RA3 == 1) d |= 0x80;
  5136  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  5137  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  5138  06A9  1985               	btfsc	5,3	;volatile
  5139  06AA  17F1               	bsf	i1RX@d,7
  5140                           
  5141                           ;prog.c: 251: _delay((unsigned long)((60)*(4000000/4000000.0)));
  5142  06AB  3013               	movlw	19
  5143  06AC  00F0               	movwf	??i1_RX
  5144  06AD                     u481_27:	
  5145  06AD  0BF0               	decfsz	??i1_RX,f
  5146  06AE  2EAD               	goto	u481_27
  5147  06AF  2EB0               	nop2	;nop
  5148  06B0  3008               	movlw	8
  5149  06B1  0AF2               	incf	i1RX@i,f
  5150  06B2  0272               	subwf	i1RX@i,w
  5151  06B3  1C03               	skipc
  5152  06B4  2E9A               	goto	i1l190
  5153                           
  5154                           ;prog.c: 252: }
  5155                           ;prog.c: 253: return d;
  5156  06B5  0871               	movf	i1RX@d,w
  5157  06B6  0008               	return
  5158  06B7                     __end_ofi1_RX:	
  5159                           
  5160                           	psect	text32
  5161  0599                     __ptext32:	
  5162 ;; *************** function i1_INIT *****************
  5163 ;; Defined at:
  5164 ;;		line 203 in file "prog.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;		None               void
  5171 ;; Registers used:
  5172 ;;		wreg, status,2, status,0
  5173 ;; Tracked objects:
  5174 ;;		On entry : 300/0
  5175 ;;		On exit  : 300/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5178 ;;      Params:         0       0       0       0
  5179 ;;      Locals:         0       0       0       0
  5180 ;;      Temps:          1       0       0       0
  5181 ;;      Totals:         1       0       0       0
  5182 ;;Total ram usage:        1 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_get_temp_Async
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           
  5192                           ;psect for function i1_INIT
  5193  0599                     i1_INIT:	
  5194                           
  5195                           ;prog.c: 204: static bit b;
  5196                           ;prog.c: 205: b = 0;
  5197                           
  5198                           ;incstack = 0
  5199                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  5200  0599  105E               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  5201                           
  5202                           ;prog.c: 206: TRISA3 = 1;
  5203  059A  1683               	bsf	3,5	;RP0=1, select bank1
  5204  059B  1585               	bsf	5,3	;volatile
  5205                           
  5206                           ;prog.c: 207: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5207  059C  3006               	movlw	6
  5208  059D  00F0               	movwf	??i1_INIT
  5209  059E                     u482_27:	
  5210  059E  0BF0               	decfsz	??i1_INIT,f
  5211  059F  2D9E               	goto	u482_27
  5212  05A0  0000               	nop
  5213                           
  5214                           ;prog.c: 208: TRISA3 = 0;
  5215  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  5216  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  5217  05A3  1185               	bcf	5,3	;volatile
  5218                           
  5219                           ;prog.c: 209: _delay((unsigned long)((500)*(4000000/4000000.0)));
  5220  05A4  30A6               	movlw	166
  5221  05A5  00F0               	movwf	??i1_INIT
  5222  05A6                     u483_27:	
  5223  05A6  0BF0               	decfsz	??i1_INIT,f
  5224  05A7  2DA6               	goto	u483_27
  5225  05A8  0000               	nop
  5226                           
  5227                           ;prog.c: 210: TRISA3 = 1;
  5228  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  5229  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  5230  05AB  1585               	bsf	5,3	;volatile
  5231                           
  5232                           ;prog.c: 211: _delay((unsigned long)((65)*(4000000/4000000.0)));
  5233  05AC  3015               	movlw	21
  5234  05AD  00F0               	movwf	??i1_INIT
  5235  05AE                     u484_27:	
  5236  05AE  0BF0               	decfsz	??i1_INIT,f
  5237  05AF  2DAE               	goto	u484_27
  5238  05B0  0000               	nop
  5239                           
  5240                           ;prog.c: 212: b = RA3;
  5241  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  5242  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  5243  05B3  105E               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  5244  05B4  1985               	btfsc	5,3	;volatile
  5245  05B5  145E               	bsf	INIT@b/(0+8),INIT@b& (0+7)
  5246                           
  5247                           ;prog.c: 213: _delay((unsigned long)((450)*(4000000/4000000.0)));
  5248  05B6  3095               	movlw	149
  5249  05B7  00F0               	movwf	??i1_INIT
  5250  05B8                     u485_27:	
  5251  05B8  0BF0               	decfsz	??i1_INIT,f
  5252  05B9  2DB8               	goto	u485_27
  5253  05BA  2DBB               	nop2	;nop
  5254                           
  5255                           ;prog.c: 215: return !b;
  5256  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  5257  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  5258  05BD  1C5E               	btfss	INIT@b/(0+8),INIT@b& (0+7)
  5259  05BE  2DC1               	goto	i1l2556
  5260  05BF  1003               	clrc
  5261  05C0  0008               	return
  5262  05C1                     i1l2556:	
  5263  05C1  1403               	setc
  5264  05C2  0008               	return
  5265  05C3                     __end_ofi1_INIT:	
  5266                           
  5267                           	psect	text33
  5268  06EE                     __ptext33:	
  5269 ;; *************** function ___wmul *****************
  5270 ;; Defined at:
  5271 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  multiplier      2    0[COMMON] unsigned int 
  5274 ;;  multiplicand    2    2[COMMON] unsigned int 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  product         2    4[COMMON] unsigned int 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  2    0[COMMON] unsigned int 
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0
  5281 ;; Tracked objects:
  5282 ;;		On entry : 300/0
  5283 ;;		On exit  : 300/0
  5284 ;;		Unchanged: 300/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5286 ;;      Params:         4       0       0       0
  5287 ;;      Locals:         2       0       0       0
  5288 ;;      Temps:          0       0       0       0
  5289 ;;      Totals:         6       0       0       0
  5290 ;;Total ram usage:        6 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_get_temp_Async
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function ___wmul
  5301  06EE                     ___wmul:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5305  06EE  01F4               	clrf	___wmul@product
  5306  06EF  01F5               	clrf	___wmul@product+1
  5307  06F0                     i1l2486:	
  5308  06F0  1C70               	btfss	___wmul@multiplier,0
  5309  06F1  2EF8               	goto	i1l2490
  5310  06F2  0872               	movf	___wmul@multiplicand,w
  5311  06F3  07F4               	addwf	___wmul@product,f
  5312  06F4  1803               	skipnc
  5313  06F5  0AF5               	incf	___wmul@product+1,f
  5314  06F6  0873               	movf	___wmul@multiplicand+1,w
  5315  06F7  07F5               	addwf	___wmul@product+1,f
  5316  06F8                     i1l2490:	
  5317  06F8  1003               	clrc
  5318  06F9  0DF2               	rlf	___wmul@multiplicand,f
  5319  06FA  0DF3               	rlf	___wmul@multiplicand+1,f
  5320  06FB  1003               	clrc
  5321  06FC  0CF1               	rrf	___wmul@multiplier+1,f
  5322  06FD  0CF0               	rrf	___wmul@multiplier,f
  5323  06FE  0870               	movf	___wmul@multiplier,w
  5324  06FF  0471               	iorwf	___wmul@multiplier+1,w
  5325  0700  1D03               	btfss	3,2
  5326  0701  2EF0               	goto	i1l2486
  5327  0702  0875               	movf	___wmul@product+1,w
  5328  0703  00F1               	movwf	?___wmul+1
  5329  0704  0874               	movf	___wmul@product,w
  5330  0705  00F0               	movwf	?___wmul
  5331  0706  0008               	return
  5332  0707                     __end_of___wmul:	
  5333                           
  5334                           	psect	text34
  5335  04E0                     __ptext34:	
  5336 ;; *************** function _convDig *****************
  5337 ;; Defined at:
  5338 ;;		line 121 in file "prog.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  dig             1    wreg     unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  dig             1    0[COMMON] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      unsigned char 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : B00/0
  5349 ;;		On exit  : B00/0
  5350 ;;		Unchanged: B00/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5352 ;;      Params:         0       0       0       0
  5353 ;;      Locals:         1       0       0       0
  5354 ;;      Temps:          0       0       0       0
  5355 ;;      Totals:         1       0       0       0
  5356 ;;Total ram usage:        1 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_F
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _convDig
  5367  04E0                     _convDig:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5371                           ;convDig@dig stored from wreg
  5372  04E0  00F0               	movwf	convDig@dig
  5373                           
  5374                           ;prog.c: 122: switch (dig) {
  5375  04E1  2D05               	goto	i1l2824
  5376  04E2                     i1l2678:	
  5377  04E2  34DB               	retlw	219
  5378  04E3                     i1l2682:	
  5379  04E3  3418               	retlw	24
  5380  04E4                     i1l2686:	
  5381  04E4  34B3               	retlw	179
  5382  04E5                     i1l2690:	
  5383  04E5  34BA               	retlw	186
  5384  04E6                     i1l2694:	
  5385  04E6  3478               	retlw	120
  5386  04E7                     i1l2698:	
  5387  04E7  34EA               	retlw	234
  5388  04E8                     i1l2702:	
  5389  04E8  34EB               	retlw	235
  5390  04E9                     i1l2706:	
  5391  04E9  3498               	retlw	152
  5392  04EA                     i1l2710:	
  5393  04EA  34FB               	retlw	251
  5394  04EB                     i1l2714:	
  5395  04EB  34FA               	retlw	250
  5396  04EC                     i1l2718:	
  5397  04EC  34F9               	retlw	249
  5398  04ED                     i1l2722:	
  5399  04ED  346B               	retlw	107
  5400  04EE                     i1l2726:	
  5401  04EE  34C3               	retlw	195
  5402  04EF                     i1l2730:	
  5403  04EF  343B               	retlw	59
  5404  04F0                     i1l2734:	
  5405  04F0  34E3               	retlw	227
  5406  04F1                     i1l2738:	
  5407  04F1  34E1               	retlw	225
  5408  04F2                     i1l2742:	
  5409  04F2  34F8               	retlw	248
  5410  04F3                     i1l2746:	
  5411  04F3  3469               	retlw	105
  5412  04F4                     i1l2750:	
  5413  04F4  3441               	retlw	65
  5414  04F5                     i1l2754:	
  5415  04F5  341A               	retlw	26
  5416  04F6                     i1l2758:	
  5417  04F6  3443               	retlw	67
  5418  04F7                     i1l2762:	
  5419  04F7  3429               	retlw	41
  5420  04F8                     i1l2766:	
  5421  04F8  342B               	retlw	43
  5422  04F9                     i1l2770:	
  5423  04F9  34F1               	retlw	241
  5424  04FA                     i1l2774:	
  5425  04FA  3421               	retlw	33
  5426  04FB                     i1l2778:	
  5427  04FB  346A               	retlw	106
  5428  04FC                     i1l2782:	
  5429  04FC  3463               	retlw	99
  5430  04FD                     i1l2786:	
  5431  04FD  345B               	retlw	91
  5432  04FE                     i1l2790:	
  5433  04FE  340B               	retlw	11
  5434  04FF                     i1l2794:	
  5435  04FF  3471               	retlw	113
  5436  0500                     i1l2798:	
  5437  0500  34B1               	retlw	177
  5438  0501                     i1l2802:	
  5439  0501  34F0               	retlw	240
  5440  0502                     i1l2806:	
  5441  0502  3420               	retlw	32
  5442  0503                     i1l2810:	
  5443  0503  3402               	retlw	2
  5444  0504                     i1l2814:	
  5445  0504  3400               	retlw	0
  5446  0505                     i1l2824:	
  5447  0505  0870               	movf	convDig@dig,w
  5448                           
  5449                           ; Switch size 1, requested type "space"
  5450                           ; Number of cases is 35, Range of values is 0 to 34
  5451                           ; switch strategies available:
  5452                           ; Name         Instructions Cycles
  5453                           ; direct_byte           41     6 (fixed)
  5454                           ; simple_byte          106    54 (average)
  5455                           ; jumptable            260     6 (fixed)
  5456                           ;	Chosen strategy is direct_byte
  5457  0506  0084               	movwf	4
  5458  0507  3023               	movlw	35
  5459  0508  0204               	subwf	4,w
  5460  0509  1803               	skipnc
  5461  050A  3400               	retlw	0
  5462  050B  3006               	movlw	high i1S4476
  5463  050C  008A               	movwf	10
  5464  050D  3011               	movlw	low i1S4476
  5465  050E  0704               	addwf	4,w
  5466  050F  0082               	movwf	2
  5467  0510  0008               	return
  5468  0511                     __end_of_convDig:	
  5469  007E                     btemp	set	126	;btemp
  5470  007E                     wtemp	set	126
  5471  007E                     wtemp0	set	126
  5472  0080                     wtemp1	set	128
  5473  0082                     wtemp2	set	130
  5474  0084                     wtemp3	set	132
  5475  0086                     wtemp4	set	134
  5476  0088                     wtemp5	set	136
  5477  007F                     wtemp6	set	127
  5478  007E                     ttemp	set	126
  5479  007E                     ttemp0	set	126
  5480  0081                     ttemp1	set	129
  5481  0084                     ttemp2	set	132
  5482  0087                     ttemp3	set	135
  5483  007F                     ttemp4	set	127
  5484  007E                     ltemp	set	126
  5485  007E                     ltemp0	set	126
  5486  0082                     ltemp1	set	130
  5487  0086                     ltemp2	set	134
  5488  0080                     ltemp3	set	128
  5489                           
  5490                           	psect	swtext1
  5491  0611                     __pswtext1:	
  5492  0611                     i1S4476:	
  5493  0611  2CE2               	ljmp	i1l2678
  5494  0612  2CE3               	ljmp	i1l2682
  5495  0613  2CE4               	ljmp	i1l2686
  5496  0614  2CE5               	ljmp	i1l2690
  5497  0615  2CE6               	ljmp	i1l2694
  5498  0616  2CE7               	ljmp	i1l2698
  5499  0617  2CE8               	ljmp	i1l2702
  5500  0618  2CE9               	ljmp	i1l2706
  5501  0619  2CEA               	ljmp	i1l2710
  5502  061A  2CEB               	ljmp	i1l2714
  5503  061B  2CEC               	ljmp	i1l2718
  5504  061C  2CED               	ljmp	i1l2722
  5505  061D  2CEE               	ljmp	i1l2726
  5506  061E  2CEF               	ljmp	i1l2730
  5507  061F  2CF0               	ljmp	i1l2734
  5508  0620  2CF1               	ljmp	i1l2738
  5509  0621  2CF2               	ljmp	i1l2742
  5510  0622  2CF3               	ljmp	i1l2746
  5511  0623  2CF4               	ljmp	i1l2750
  5512  0624  2CF5               	ljmp	i1l2754
  5513  0625  2CF6               	ljmp	i1l2758
  5514  0626  2CF7               	ljmp	i1l2762
  5515  0627  2CF8               	ljmp	i1l2766
  5516  0628  2CF9               	ljmp	i1l2770
  5517  0629  2CFA               	ljmp	i1l2774
  5518  062A  2CFB               	ljmp	i1l2778
  5519  062B  2CFC               	ljmp	i1l2782
  5520  062C  2CFD               	ljmp	i1l2786
  5521  062D  2CFE               	ljmp	i1l2790
  5522  062E  2CFF               	ljmp	i1l2794
  5523  062F  2D00               	ljmp	i1l2798
  5524  0630  2D01               	ljmp	i1l2802
  5525  0631  2D02               	ljmp	i1l2806
  5526  0632  2D03               	ljmp	i1l2810
  5527  0633  2D04               	ljmp	i1l2814


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      63
    BANK1            80     23      40
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellIsEmpty	PTR unsigned char  size(1) Largest target is 1
		 -> EditAddressMemory@CellIsEmpty(BANK1[1]), 

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 9
		 -> EditAddressMemory@CellsData(BANK1[8]), DS_ReadData(BANK1[9]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->i1___awdiv
    i1___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_ReadCell
    _WriteArrayToEEPROM->_EEWR
    _ShowError->_setDigit
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___awdiv

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   19722
                                             34 BANK0      1     1      0
                                             14 BANK1      9     9      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
              _Reset_powerOnInterval
                        _Run_getTemp
                          _ShowError
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2658
                                             24 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                             12 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     501
                                             12 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            14    13      1    1636
                                             20 BANK0     14    13      1
                _FillArrayFromEEPROM
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   15    15      0    8393
                                             26 BANK0      1     1      0
                                              0 BANK1     14    14      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                          _ShowError
                                 _TX
                 _WriteArrayToEEPROM
                           _calc_crc
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     288
                                             12 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     433
                                             12 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     673
                                             15 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     161
                                             12 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _TX                                                   4     4      0     142
                                             12 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ShowError                                            0     0      0    1297
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             6     4      2    1451
                                             20 BANK0      6     4      2
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2     931
                                             15 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             12 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   3     3      0     108
                                             12 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _INIT                                                 1     1      0       0
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    2771
                                             24 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1    1068
                                             20 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           2     2      0     130
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               1     1      0      99
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     594
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     756
                                             12 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    7     7      0    1513
                                              5 BANK0      7     7      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       5     5      0    1318
                                              0 BANK0      5     5      0
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                          i1___awdiv
                         i1_calc_crc
 ---------------------------------------------------------------------------------
 (7) i1_calc_crc                                           6     5      1     313
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (7) i1___awdiv                                            8     4      4     352
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 4     4      0      94
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 3     3      0      71
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     278
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___awdiv
     ___awmod
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___awdiv
       ___awmod
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _ShowError
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _calc_crc
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _waitInterrupt
   _Reset_powerOnInterval
   _Run_getTemp
   _ShowError
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___awdiv (ARG)
     ___awmod (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1___awdiv
       ___wmul (ARG)
     i1_calc_crc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      3F       3       78.8%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      75      10        0.0%
ABS                  0      0      75       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Dec 03 23:41:34 2016

                               _F 02B6              FindCell@addressStart 003F                                 pc 0002  
                              ?_F 0070                       __CFG_CP$OFF 0000                                PL2 010E  
                              PL4 0116                                PL6 02B1                                l81 07CC  
                              _RX 0677                                _TX 056E                      ___awdiv@sign 0031  
                              fsr 0004               ___wmul@multiplicand 0072                        i1_calc_crc 0634  
                             ??_F 0025                               ?_RX 0070                               ?_TX 0070  
                             l420 01C9                               l404 0154                               l157 0719  
                             l190 067A                               l183 0572                               l271 03E0  
                             l185 0582                               RX@d 002D                               RX@i 002E  
                             l774 06DF                               TX@i 002F                               _RA2 002A  
                             _RA3 002B                               _RA5 002D                      __CFG_CPD$OFF 0000  
                             fsr0 0004                               indf 0000                      ___awmod@sign 0031  
                     main@address 00B5                   ?_get_temp_Async 0070                      main@TheStart 00B3  
                            ??_RX 002C                              ??_TX 002C                      __CFG_LVP$OFF 0000  
                            F@dig 002A                    setPoint@dignum 002D                              l4004 0390  
                            l4022 03B2                              l4120 024B                              l4032 03CC  
                            l4130 0262                              l4036 03D0                              l3502 0734  
                            l4072 021C                              l4064 0210                              l4056 0205  
                            l4400 01C1                              l3514 07A7                              l4138 0274  
                            l4146 0279                              l4170 0292                              l4074 021E  
                            l4410 0196                              l4402 018C                              l3604 04C0  
                            l3612 04D3                              l3700 0659                              l4156 0286  
                            l4084 022E                              l4076 0222                              l4420 01AA  
                            l3710 065F                              l4182 02AF                              l3616 04DB  
                            l3720 0672                              l3624 0782                              l4088 0230  
                            l4432 01C7                              l4416 01A4                              l3554 042C  
                            l3538 076A                              l4098 0238                              l3580 0459  
                            l3564 043A                              l3548 0423                              l3652 053E  
                            l3740 0607                              l3636 0721                              l4428 01C2  
                            l3718 066D                              l4454 01F1                              l4438 01CE  
                            l4358 0142                              l3576 0451                              l3592 04AD  
                            l3496 0732                              l3744 060C                              l3736 05FD  
                            l3760 06D9                              l4448 01E0                              l4376 0162  
                            l4368 0152                              l3674 058F                              l4386 0176  
                            l3596 04B4                              l4388 017A                              l3950 03F6  
                            l3774 06EC                              l3790 06CF                              l3782 06BB  
                            l3952 03F8                              l3944 03ED                              l3936 03DE  
                            l3946 03F0                              l3938 03E4                              l3964 0402  
                            l3976 0413                              l3992 036C                              l3978 0417  
                            l3994 036D                              _EERD 0788                              _T0IF 005A  
                            _EEWR 0707                              u4000 0374                              u4010 037B  
                            u4100 03B9                              u4020 037C                              u4300 02A9  
                            u3415 04C6                              u3345 0443                              u4090 03B8  
                            _INIT 0511                              u4290 02A8                              u4610 0181  
                            u4620 0182                              u4727 057F                              u4737 0587  
                            u4747 068C                              u4757 0517                              u3990 0373  
                            u4767 0520                              u4777 0529                              u4787 0535  
                            i1_RX 0698                              i1_TX 05C3                              _TMR0 0001  
                            _main 011E                              _sign 005B                              btemp 007E  
                            ltemp 007E                              start 0010                              ttemp 007E  
                            wtemp 007E        WriteArrayToEEPROM@quantity 0030                    EEWR@INTCON_BUP 002E  
     WriteArrayToEEPROM@container 0032                       i1calc_crc@i 0074      __size_of_FillArrayFromEEPROM 0011  
                           ?_EERD 0070                             ?_EEWR 002C                             ?_INIT 0070  
                           ?i1_RX 0070                             ?i1_TX 0070                             INIT@b 02F0  
                           ?_main 0070                    i1___awdiv@sign 007B                   __end_of___awdiv 045E  
                 __end_of___lbdiv 06EE                             _EEADR 009B                     __CFG_WDTE$OFF 0000  
                 __end_of___awmod 04E0                   __end_of___lbmod 06D3                             _CMCON 001F  
                 ___awdiv@divisor 002C                             _T2CON 0012                             TX@cmd 002D  
                           i1l300 02CC                             i1l240 0079                             i1l251 0090  
                           i1l236 003C                             i1l237 0039                             i1l190 069A  
                           i1l254 0098                             i1l342 0355                             i1l183 05C7  
                           i1l185 05D7                             i1RX@d 0071                             i1RX@i 0072  
                           i1TX@i 0073                   ___awdiv@counter 0030                             _PORTA 0005  
                           _PORTB 0006                             _TRISA 0085                             _TRISB 0086  
                   __CFG_PWRTE$ON 0000                   __end_of_indData 03D4                   __end_of_convDig 0511  
                           main@X 00AE                             main@Z 00B6                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
              __size_ofi1___awdiv 0045                   ___lbdiv@divisor 002C            main@point_on_ind_delay 00AF  
                 ___lbdiv@counter 002E                  __end_of_FindCell 0419                      __end_of_EERD 0797  
                    __end_of_EEWR 071F                      __end_of_INIT 0540                      __end_ofi1_RX 06B7  
                    __end_ofi1_TX 05EC                    __CFG_MCLRE$OFF 0000                   __initialization 0011  
                    __end_of_main 01F3                      i1calc_crc@fb 0073                __size_of_CellToInd 002E  
                  EERD@EEDATA_BUP 002E                  __end_of_ReadCell 0611                            ??_EERD 002C  
                          ??_EEWR 002D                            ??_INIT 002C                            ??i1_RX 0070  
                          ??i1_TX 0070                       ?i1_calc_crc 0070                            ??_main 0042  
         ??_Reset_powerOnInterval 002C                      ReadCell@cell 0037                            i1S4476 0611  
                          _EEDATA 009A                            _EECON2 009D                  ___awdiv@dividend 002E  
               F@CurrentKeysState 002B                            i1l2710 04EA                            i1l2702 04E8  
                          i1l4222 02CD                            i1l4320 034A                            i1l4304 0352  
                          i1l4240 02E8                            i1l2810 0503                            i1l2802 0501  
                          i1l2730 04EF                            i1l2722 04ED                            i1l2714 04EB  
                          i1l2706 04E9                            i1l2490 06F8                            i1l4322 034E  
                          i1l4306 0340                            i1l2556 05C1                            i1l2644 0471  
                          i1l4260 02FC                            i1l2814 0504                            i1l2806 0502  
                          i1l2750 04F4                            i1l2742 04F2                            i1l2734 04F0  
                          i1l2726 04EE                            i1l2718 04EC                            i1l2486 06F0  
                          i1l2670 049E                            i1l2654 047F                            i1l2638 0468  
                          i1l4270 0307                            i1l4254 02F6                            i1l4326 0354  
                          i1l4246 02EF                            i1l2824 0505                            i1l4280 0316  
                          i1l4272 0308                            i1l2770 04F9                            i1l2762 04F7  
                          i1l2754 04F5                            i1l2746 04F3                            i1l2738 04F1  
                          i1l2690 04E5                            i1l2682 04E3                            i1l2578 05E4  
                          i1l2666 0496                            i1l4266 0302                            i1l4258 02FB  
                          i1l4292 032E                            i1l4276 030F                            i1l2790 04FE  
                          i1l2782 04FC                            i1l2774 04FA                            i1l2766 04F8  
                          i1l2758 04F6                            i1l2694 04E6                            i1l2686 04E4  
                          i1l2678 04E2                            i1l3816 064C                            i1l3808 063E  
                          i1l3840 0042                            i1l4288 0323                            i1l2794 04FF  
                          i1l2786 04FD                            i1l2778 04FB                            i1l2698 04E7  
                          i1l3818 0651                            i1l3922 0108                            i1l4298 0338  
                          i1l3924 010A                            i1l3852 005D                            i1l3844 004A  
                          i1l2798 0500                            i1l3846 004C                            i1l3864 0081  
                          i1l3890 00B9                            i1l3798 0637                            i1l3886 00B5  
                          i1l3896 00CB                            i1l3888 009F                            _INTCON 000B  
                          u218_25 0488                            TX@temp 002E                            i1_INIT 0599  
                          u480_27 05DC                            u481_27 06AD                            u482_27 059E  
                          u483_27 05A6                            u484_27 05AE                            u485_27 05B8  
                          u479_27 05D4                  __end_of_calc_crc 0677                            _TRISA3 042B  
                          _TRISA4 042C                            ___wmul 06EE                         ??___awdiv 0030  
                       ??___lbdiv 002D                         ??___awmod 0030                         ??___lbmod 002D  
                          _clrInd 07A5                            _digits 0048                  ___awdiv@quotient 0032  
                 ___awmod@divisor 002C                   ___awmod@counter 0030                         ??_indData 0038  
                __end_of_setDigit 0757                         ??_convDig 0070                __size_of_ShowError 000E  
               __end_ofi1___awdiv 04A3                  __end_of_setPoint 0788                            saved_w 007E  
               _EditAddressMemory 01F3                 __end_of_CellToInd 056E                  ___lbdiv@dividend 002D  
              ?_EditAddressMemory 0070                   ___lbmod@divisor 002C           __end_of__initialization 002B  
                  EERD@INTCON_BUP 002D                   ___lbmod@counter 002F               __size_ofi1_calc_crc 0022  
      __end_of_WriteArrayToEEPROM 0732               ??_EditAddressMemory 003A                    __pcstackCOMMON 0070  
                    __pidataBANK1 0000             __end_of_waitInterrupt 07CF                     ??_Run_getTemp 002C  
                   i1calc_crc@dat 0072                     i1calc_crc@crc 0075                     i1calc_crc@len 0070  
                   i1calc_crc@mas 0071                        __end_ofPL2 0116                        __end_ofPL4 011E  
                      __end_ofPL6 02B6                  ___lbdiv@quotient 002F                        __end_of_RX 0698  
                      __end_of_TX 0599                  ??_get_temp_Async 0020                       F@long_press 0057  
      EditAddressMemory@CellsData 00A0         __end_of_EditAddressMemory 02B1                         ?_FindCell 0034  
             _FillArrayFromEEPROM 0768       EditAddressMemory@RereadCell 00A9                        __pbssBANK0 0043  
                         ?i1_INIT 0070                         ?_ReadCell 0034                 __end_of_PortAData 07BC  
               __end_of_ShowError 07A5                        __pmaintext 011E              ReadCell@_CellIsEmpty 0038  
    EditAddressMemory@CellIsEmpty 00AC                      _endInterrupt 02F2              ?_FillArrayFromEEPROM 002F  
                         ?___wmul 0070                           ?_clrInd 0070                        __pintentry 0004  
                     refreshInd@a 002D                        __size_of_F 00AA                         ?_calc_crc 002C  
              i1___awdiv@dividend 0078               __end_of_Run_getTemp 0768                           i1TX@cmd 0071  
FillArrayFromEEPROM@address_start 002F                        ??_FindCell 0035                        calc_crc@fb 002E  
                    _Broadcasting 02F1                        __stringtab 07B3                 ReadCell@CellsData 0034  
                      ??_ReadCell 0036                   __size_ofi1_INIT 002A                           _KeyCode 0058  
                       ?_setDigit 0034                         ?_setPoint 002C               get_temp_Async@temp1 0023  
             get_temp_Async@temp2 0024                i1___awdiv@quotient 007C             ??_FillArrayFromEEPROM 0031  
                         ___awdiv 0419                           ___lbdiv 06D3                           ___awmod 04A3  
                         ___lbmod 06B7                   __size_of___wmul 0019                   __size_of_clrInd 000E  
                    ??i1_calc_crc 0071                           __ptext1 0360                           __ptext2 06B7  
                         __ptext3 06D3                           __ptext4 0757                           __ptext5 07C4  
                         __ptext6 03D4                           __ptext7 01F3                           __ptext8 0779  
                         __ptext9 0656                           _indData 0360                           _convDig 04E0  
                      ??_calc_crc 002D                  ___awmod@dividend 002E                           clrInd@a 002C  
      __size_of_EditAddressMemory 00BE    __size_of_Reset_powerOnInterval 0006     __end_of_Reset_powerOnInterval 07CA  
                         clrloop0 07BD              end_of_initialization 002B                        _refreshInd 0732  
              __end_ofi1_calc_crc 0656                        ??_setDigit 0035                        ??_setPoint 002D  
                       FindCell@i 0040                       _Run_getTemp 0757                  FindCell@previous 0034  
             ReadCell@CellIsEmpty 0035                  ___lbmod@dividend 002E               WriteArrayToEEPROM@i 0033  
                       i1___awdiv 045E                        convDig@dig 0070                       ___lbmod@rem 0030  
                 F@KeyTimeCounter 004E                         _CellToInd 0540                         ReadCell@i 0039  
                  __end_ofi1_INIT 05C3                     setPoint@value 002C                    __end_of___wmul 0707  
    EditAddressMemory@ErrorShowed 00A8                    __end_of_clrInd 07B3                     __pbitbssBANK0 02F0  
              _WriteArrayToEEPROM 071F               start_initialization 0011   WriteArrayToEEPROM@address_start 002F  
                      ?i1___awdiv 0076               ?_WriteArrayToEEPROM 002F                 __size_of_FindCell 0045  
                     ?_refreshInd 0070                          ??i1_INIT 0070      FillArrayFromEEPROM@container 0032  
                      ?_CellToInd 0070                 __size_of_ReadCell 0025                         _PortAData 07B9  
            ??_WriteArrayToEEPROM 0031                EditAddressMemory@i 00AA                         _ShowError 0797  
                        ??___wmul 0074                          ??_clrInd 002C                       __pdataBANK1 00B7  
                        EEWR@data 002C                      setDigit@data 0034                         ___latbits 0000  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                 __size_of_calc_crc 0021  
          EditAddressMemory@i_261 00AB                         __end_of_F 0360            __size_of_waitInterrupt 0005  
               __size_of_setDigit 0012                        ?_ShowError 0070                 __size_of_setPoint 000F  
                        ?___awdiv 002C                          ?___lbdiv 002C                          ?___awmod 002C  
                        ?___lbmod 002C                 i1___awdiv@divisor 0076                 i1___awdiv@counter 007A  
             __size_of_refreshInd 0013                         __pstrings 07B3                         calc_crc@i 0030  
                        ?_indData 0070                         __pswtext1 0611                          ?_convDig 0070  
                     ??i1___awdiv 007A           __size_of_get_temp_Async 00E1                   get_temp_Async@i 0022  
                     __size_of_RX 0021                       __size_of_TX 002B                 interrupt_function 0004  
                 FindCell@address 0041                    ___wmul@product 0074                       ??_CellToInd 0038  
     __end_of_FillArrayFromEEPROM 0779                         clear_ram0 07BC                          i1TX@temp 0072  
                       _temp_drob 005C                       calc_crc@dat 002D                       calc_crc@crc 0031  
                     calc_crc@len 002C                       calc_crc@mas 002F                         indData@dN 003D  
                       indData@cd 003C                     _waitInterrupt 07CA                      ?_Run_getTemp 0070  
              FindCell@addressNew 003D                       __stringbase 07B8                 FindCell@CellsData 0035  
               ___wmul@multiplier 0070                   _powerOnInterval 0050                    F@LastKeysState 0056  
                        _FindCell 03D4             _Reset_powerOnInterval 07C4                          _ReadCell 05EC  
                      _EECON1bits 009C              FillArrayFromEEPROM@i 0033                    indData@isPoint 003A  
                     ??_ShowError 0038                    ?_waitInterrupt 0070                  __size_of___awdiv 0045  
                __size_of___lbdiv 001B                  __size_of___awmod 003D                  __size_of___lbmod 001C  
                   _getTemp_flags 0043                __end_of__stringtab 07B9             EditAddressMemory@cell 00AD  
     FillArrayFromEEPROM@quantity 0030                          _calc_crc 0656                  __size_of_indData 0074  
                __size_of_convDig 0031                      F@DigitNumber 0055                         setDigit@a 0037  
                     EERD@address 002C                          _main$273 00B1                          _digits_0 004B  
                        _digitemp 005A                          __ptext10 071F                          __ptext11 07CA  
                        __ptext20 0540                          __ptext12 0707                          __ptext21 0745  
                        __ptext13 056E                          __ptext30 05C3                          __ptext22 0732  
                        __ptext14 0797                          __ptext31 0698                          __ptext23 07A5  
                        __ptext15 05EC                          __ptext32 0599                          __ptext24 04A3  
                        __ptext16 0768                          __ptext33 06EE                          __ptext25 0419  
                        __ptext17 0788                          __ptext34 04E0                          __ptext26 02B6  
                        __ptext18 0677                          __ptext27 002D                          __ptext19 0511  
                        __ptext28 0634                          __ptext29 045E                      ??_refreshInd 002C  
                   __size_of_EERD 000F                     __size_of_EEWR 0018                     __size_of_INIT 002F  
                   __size_ofi1_RX 001F                     __size_ofi1_TX 0029                       _DS_ReadData 00B7  
                   __size_of_main 00D5                          _setDigit 0745                          _setPoint 0779  
                        indData@v 003B                      _PowerBlocked 0059                          main@cell 00B4  
              __end_of_refreshInd 0745                        _INTCONbits 000B            ?_Reset_powerOnInterval 0070  
                  _get_temp_Async 002D                          intlevel1 0000                        _DS_Address 00C0  
                       stringcode 07B3                   ??_waitInterrupt 002C                       EEWR@address 002D  
             F@ButtonPressTimeIn1 0052               F@ButtonPressTimeIn2 0053       __size_of_WriteArrayToEEPROM 0013  
             F@ButtonPressTimeOut 0054                     CellToInd@cell 0038                      indData@v_241 0039  
            __size_of_Run_getTemp 0011                        _OPTION_REG 0081                       _temperature 005D  
                        stringdir 07B3                          stringtab 07B3            __end_of_get_temp_Async 010E  
              __CFG_FOSC$INTOSCIO 0000               FindCell@CellIsEmpty 003E  
