

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Sat Nov 26 23:32:37 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	swtext1,local,class=CONST,delta=2
    51                           	psect	pa_nodes,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0092                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009F                     	;# 
    90                           
    91                           	psect	idataBANK1
    92  0000                     __pidataBANK1:	
    93                           
    94                           	psect	strings
    95  0772                     __pstrings:	
    96  0772                     stringtab:	
    97  0772                     __stringtab:	
    98  0772                     stringcode:	
    99                           ;	String table - string pointers are 1 byte each
   100                           
   101  0772                     stringdir:	
   102  0772  3007               	movlw	high stringdir
   103  0773  008A               	movwf	10
   104  0774  0804               	movf	4,w
   105  0775  0A84               	incf	4,f
   106  0776  0782               	addwf	2,f
   107  0777                     __stringbase:	
   108  0777  3400               	retlw	0
   109  0778                     __end_of__stringtab:	
   110  0778                     _PortAData:	
   111  0778  3480               	retlw	128
   112  0779  3440               	retlw	64
   113  077A  3401               	retlw	1
   114  077B                     __end_of_PortAData:	
   115                           
   116                           	psect	nvBANK1
   117  00D5                     __pnvBANK1:	
   118  00D5                     _powerOnInterval:	
   119  00D5                     	ds	2
   120  001F                     _CMCON	set	31
   121  000B                     _INTCON	set	11
   122  000B                     _INTCONbits	set	11
   123  0005                     _PORTA	set	5
   124  0006                     _PORTB	set	6
   125  0012                     _T2CON	set	18
   126  0001                     _TMR0	set	1
   127  0029                     _RA1	set	41
   128  002A                     _RA2	set	42
   129  002B                     _RA3	set	43
   130  005A                     _T0IF	set	90
   131  009B                     _EEADR	set	155
   132  009C                     _EECON1bits	set	156
   133  009D                     _EECON2	set	157
   134  009A                     _EEDATA	set	154
   135  0081                     _OPTION_REG	set	129
   136  0085                     _TRISA	set	133
   137  0086                     _TRISB	set	134
   138  042B                     _TRISA3	set	1067
   139  042C                     _TRISA4	set	1068
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  0011                     start_initialization:	
   145  0011                     __initialization:	
   146  0011  30FF               	movlw	255
   147                           
   148                           ; Initialize objects allocated to BANK1
   149  0012  1683               	bsf	3,5	;RP0=1, select bank1
   150                           
   151                           ;initializer for _DS_ReadData
   152  0013  00BC               	movwf	__pdataBANK1& (0+127)
   153  0014  00BD               	movwf	(__pdataBANK1+1)& (0+127)
   154  0015  00BE               	movwf	(__pdataBANK1+2)& (0+127)
   155  0016  00BF               	movwf	(__pdataBANK1+3)& (0+127)
   156  0017  00C0               	movwf	(__pdataBANK1+4)& (0+127)
   157  0018  00C1               	movwf	(__pdataBANK1+5)& (0+127)
   158  0019  00C2               	movwf	(__pdataBANK1+6)& (0+127)
   159  001A  00C3               	movwf	(__pdataBANK1+7)& (0+127)
   160  001B  00C4               	movwf	(__pdataBANK1+8)& (0+127)
   161                           
   162                           ;initializer for _DS_Address
   163  001C  00C5               	movwf	(__pdataBANK1+9)& (0+127)
   164  001D  00C6               	movwf	(__pdataBANK1+10)& (0+127)
   165  001E  00C7               	movwf	(__pdataBANK1+11)& (0+127)
   166  001F  00C8               	movwf	(__pdataBANK1+12)& (0+127)
   167  0020  00C9               	movwf	(__pdataBANK1+13)& (0+127)
   168  0021  00CA               	movwf	(__pdataBANK1+14)& (0+127)
   169  0022  00CB               	movwf	(__pdataBANK1+15)& (0+127)
   170  0023  00CC               	movwf	(__pdataBANK1+16)& (0+127)
   171  0024  30CD               	movlw	low __pbssBANK1
   172                           
   173                           ; Clear objects allocated to BANK1
   174  0025  1383               	bcf	3,7	;select IRP bank0
   175  0026  0084               	movwf	4
   176  0027  30D5               	movlw	low (__pbssBANK1+8)
   177  0028  277B               	fcall	clear_ram0
   178                           
   179                           ; Clear objects allocated to BANK0
   180  0029  3048               	movlw	low __pbssBANK0
   181  002A  0084               	movwf	4
   182  002B  3059               	movlw	low (__pbssBANK0+17)
   183  002C  277B               	fcall	clear_ram0
   184                           
   185                           ; Clear objects allocated to BITBANK0
   186  002D  1283               	bcf	3,5	;RP0=0, select bank0
   187  002E  01D9               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   188  002F                     end_of_initialization:	
   189                           ;End of C runtime variable initialization code
   190                           
   191  002F                     __end_of__initialization:	
   192  002F  0183               	clrf	3
   193  0030  2831               	ljmp	_main	;jump to C main() function
   194                           
   195                           	psect	bssBANK0
   196  0048                     __pbssBANK0:	
   197  0048                     _getTemp_flags:	
   198  0048                     	ds	4
   199  004C                     F@ButtonPressTimeIn1:	
   200  004C                     	ds	1
   201  004D                     F@ButtonPressTimeIn2:	
   202  004D                     	ds	1
   203  004E                     F@ButtonPressTimeOut:	
   204  004E                     	ds	1
   205  004F                     F@LastKeysState:	
   206  004F                     	ds	1
   207  0050                     F@long_press:	
   208  0050                     	ds	1
   209  0051                     _DigitNumber:	
   210  0051                     	ds	1
   211  0052                     _KeyCode:	
   212  0052                     	ds	1
   213  0053                     _PowerBlocked:	
   214  0053                     	ds	1
   215  0054                     _digitemp:	
   216  0054                     	ds	1
   217  0055                     _digitnum:	
   218  0055                     	ds	1
   219  0056                     _sign:	
   220  0056                     	ds	1
   221  0057                     _temp_drob:	
   222  0057                     	ds	1
   223  0058                     _temperature:	
   224  0058                     	ds	1
   225                           
   226                           	psect	bitbssBANK0
   227  02C8                     __pbitbssBANK0:	
   228  02C8                     INIT@b:	
   229  02C8                     	ds	1
   230  02C9                     _Broadcasting:	
   231  02C9                     	ds	1
   232  02CA                     _endInterrupt:	
   233  02CA                     	ds	1
   234                           
   235                           	psect	bssBANK1
   236  00CD                     __pbssBANK1:	
   237  00CD                     _digits:	
   238  00CD                     	ds	3
   239  00D0                     _digits_0:	
   240  00D0                     	ds	3
   241  00D3                     F@KeyTimeCounter:	
   242  00D3                     	ds	2
   243                           
   244                           	psect	dataBANK1
   245  00BC                     __pdataBANK1:	
   246  00BC                     _DS_ReadData:	
   247  00BC                     	ds	9
   248  00C5                     _DS_Address:	
   249  00C5                     	ds	8
   250                           
   251                           	psect	clrtext
   252  077B                     clear_ram0:	
   253                           ;	Called with FSR containing the base address, and
   254                           ;	W with the last address+1
   255                           
   256  077B  0064               	clrwdt	;clear the watchdog before getting into this loop
   257  077C                     clrloop0:	
   258  077C  0180               	clrf	0	;clear RAM location pointed to by FSR
   259  077D  0A84               	incf	4,f	;increment pointer
   260  077E  0604               	xorwf	4,w	;XOR with final address
   261  077F  1903               	btfsc	3,2	;have we reached the end yet?
   262  0780  3400               	retlw	0	;all done for this memory range, return
   263  0781  0604               	xorwf	4,w	;XOR again to restore value
   264  0782  2F7C               	goto	clrloop0	;do the next byte
   265                           
   266                           	psect	cstackBANK1
   267  00A0                     __pcstackBANK1:	
   268  00A0                     EditAddressMemory@CellsData:	
   269                           
   270                           ; 8 bytes @ 0x0
   271  00A0                     	ds	8
   272  00A8                     EditAddressMemory@CellsData_253:	
   273                           
   274                           ; 8 bytes @ 0x8
   275  00A8                     	ds	8
   276  00B0                     EditAddressMemory@CellsData_256:	
   277                           
   278                           ; 8 bytes @ 0x10
   279  00B0                     	ds	8
   280  00B8                     EditAddressMemory@i:	
   281                           
   282                           ; 1 bytes @ 0x18
   283  00B8                     	ds	1
   284  00B9                     EditAddressMemory@i_257:	
   285                           
   286                           ; 1 bytes @ 0x19
   287  00B9                     	ds	1
   288  00BA                     EditAddressMemory@CellIsEmpty:	
   289                           
   290                           ; 1 bytes @ 0x1A
   291  00BA                     	ds	1
   292  00BB                     EditAddressMemory@cell:	
   293                           
   294                           ; 1 bytes @ 0x1B
   295  00BB                     	ds	1
   296                           
   297                           	psect	cstackCOMMON
   298  0070                     __pcstackCOMMON:	
   299  0070                     ?_INIT:	
   300  0070                     ?i1_INIT:	
   301                           ; 1 bit 
   302                           
   303  0070                     ?_waitInterrupt:	
   304                           ; 1 bit 
   305                           
   306  0070                     ?_Reset_powerOnInterval:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_refreshInd:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_clrInd:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_convDig:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ??_convDig:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_EERD:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_TX:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_RX:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_get_temp_Async:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_F:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_indData:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_CellToInd:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_EditAddressMemory:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_Run_getTemp:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_main:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ??i1_INIT:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?i1_TX:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ??i1_TX:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?i1_RX:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ??i1_RX:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?___wmul:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     convDig@dig:	
   370                           ; 2 bytes @ 0x0
   371                           
   372  0070                     ___wmul@multiplier:	
   373                           ; 1 bytes @ 0x0
   374                           
   375                           
   376                           ; 2 bytes @ 0x0
   377  0070                     	ds	1
   378  0071                     i1TX@cmd:	
   379  0071                     i1RX@d:	
   380                           ; 1 bytes @ 0x1
   381                           
   382                           
   383                           ; 1 bytes @ 0x1
   384  0071                     	ds	1
   385  0072                     i1TX@temp:	
   386  0072                     i1RX@i:	
   387                           ; 1 bytes @ 0x2
   388                           
   389  0072                     ___wmul@multiplicand:	
   390                           ; 1 bytes @ 0x2
   391                           
   392                           
   393                           ; 2 bytes @ 0x2
   394  0072                     	ds	1
   395  0073                     i1TX@i:	
   396                           
   397                           ; 1 bytes @ 0x3
   398  0073                     	ds	1
   399  0074                     ??___wmul:	
   400  0074                     ___wmul@product:	
   401                           ; 1 bytes @ 0x4
   402                           
   403                           
   404                           ; 2 bytes @ 0x4
   405  0074                     	ds	2
   406  0076                     ?i1___awdiv:	
   407  0076                     i1___awdiv@divisor:	
   408                           ; 2 bytes @ 0x6
   409                           
   410                           
   411                           ; 2 bytes @ 0x6
   412  0076                     	ds	2
   413  0078                     i1___awdiv@dividend:	
   414                           
   415                           ; 2 bytes @ 0x8
   416  0078                     	ds	2
   417  007A                     ??i1___awdiv:	
   418  007A                     i1___awdiv@counter:	
   419                           ; 1 bytes @ 0xA
   420                           
   421                           
   422                           ; 1 bytes @ 0xA
   423  007A                     	ds	1
   424  007B                     i1___awdiv@sign:	
   425                           
   426                           ; 1 bytes @ 0xB
   427  007B                     	ds	1
   428  007C                     i1___awdiv@quotient:	
   429                           
   430                           ; 2 bytes @ 0xC
   431  007C                     	ds	2
   432                           
   433                           	psect	cstackBANK0
   434  0020                     __pcstackBANK0:	
   435  0020                     ??_get_temp_Async:	
   436                           
   437                           ; 1 bytes @ 0x0
   438  0020                     	ds	2
   439  0022                     get_temp_Async@temp1:	
   440                           
   441                           ; 1 bytes @ 0x2
   442  0022                     	ds	1
   443  0023                     get_temp_Async@temp2:	
   444                           
   445                           ; 1 bytes @ 0x3
   446  0023                     	ds	1
   447  0024                     ??_F:	
   448                           
   449                           ; 1 bytes @ 0x4
   450  0024                     	ds	4
   451  0028                     F@dig:	
   452                           
   453                           ; 1 bytes @ 0x8
   454  0028                     	ds	1
   455  0029                     F@CurrentKeysState:	
   456                           
   457                           ; 1 bytes @ 0x9
   458  0029                     	ds	1
   459  002A                     ??_waitInterrupt:	
   460  002A                     ??_Reset_powerOnInterval:	
   461                           ; 1 bytes @ 0xA
   462                           
   463  002A                     ?_setPoint:	
   464                           ; 1 bytes @ 0xA
   465                           
   466  002A                     ??_refreshInd:	
   467                           ; 1 bytes @ 0xA
   468                           
   469  002A                     ??_clrInd:	
   470                           ; 1 bytes @ 0xA
   471                           
   472  002A                     ?_EEWR:	
   473                           ; 1 bytes @ 0xA
   474                           
   475  002A                     ??_EERD:	
   476                           ; 1 bytes @ 0xA
   477                           
   478  002A                     ??_INIT:	
   479                           ; 1 bytes @ 0xA
   480                           
   481  002A                     ??_TX:	
   482                           ; 1 bytes @ 0xA
   483                           
   484  002A                     ??_RX:	
   485                           ; 1 bytes @ 0xA
   486                           
   487  002A                     ?_calc_crc:	
   488                           ; 1 bytes @ 0xA
   489                           
   490  002A                     ??_Run_getTemp:	
   491                           ; 1 bytes @ 0xA
   492                           
   493  002A                     ?___lbdiv:	
   494                           ; 1 bytes @ 0xA
   495                           
   496  002A                     ?___lbmod:	
   497                           ; 1 bytes @ 0xA
   498                           
   499  002A                     ?___awdiv:	
   500                           ; 1 bytes @ 0xA
   501                           
   502  002A                     ?___awmod:	
   503                           ; 2 bytes @ 0xA
   504                           
   505  002A                     setPoint@value:	
   506                           ; 2 bytes @ 0xA
   507                           
   508  002A                     clrInd@a:	
   509                           ; 1 bytes @ 0xA
   510                           
   511  002A                     EEWR@data:	
   512                           ; 1 bytes @ 0xA
   513                           
   514  002A                     EERD@address:	
   515                           ; 1 bytes @ 0xA
   516                           
   517  002A                     calc_crc@len:	
   518                           ; 1 bytes @ 0xA
   519                           
   520  002A                     ___lbdiv@divisor:	
   521                           ; 1 bytes @ 0xA
   522                           
   523  002A                     ___lbmod@divisor:	
   524                           ; 1 bytes @ 0xA
   525                           
   526  002A                     ___awdiv@divisor:	
   527                           ; 1 bytes @ 0xA
   528                           
   529  002A                     ___awmod@divisor:	
   530                           ; 2 bytes @ 0xA
   531                           
   532                           
   533                           ; 2 bytes @ 0xA
   534  002A                     	ds	1
   535  002B                     ??_setPoint:	
   536  002B                     ??_EEWR:	
   537                           ; 1 bytes @ 0xB
   538                           
   539  002B                     ??_calc_crc:	
   540                           ; 1 bytes @ 0xB
   541                           
   542  002B                     ??___lbdiv:	
   543                           ; 1 bytes @ 0xB
   544                           
   545  002B                     ??___lbmod:	
   546                           ; 1 bytes @ 0xB
   547                           
   548  002B                     setPoint@dignum:	
   549                           ; 1 bytes @ 0xB
   550                           
   551  002B                     refreshInd@a:	
   552                           ; 1 bytes @ 0xB
   553                           
   554  002B                     EEWR@address:	
   555                           ; 1 bytes @ 0xB
   556                           
   557  002B                     EERD@INTCON_BUP:	
   558                           ; 1 bytes @ 0xB
   559                           
   560  002B                     TX@cmd:	
   561                           ; 1 bytes @ 0xB
   562                           
   563  002B                     RX@d:	
   564                           ; 1 bytes @ 0xB
   565                           
   566  002B                     calc_crc@dat:	
   567                           ; 1 bytes @ 0xB
   568                           
   569  002B                     ___lbdiv@dividend:	
   570                           ; 1 bytes @ 0xB
   571                           
   572                           
   573                           ; 1 bytes @ 0xB
   574  002B                     	ds	1
   575  002C                     EEWR@INTCON_BUP:	
   576  002C                     EERD@EEDATA_BUP:	
   577                           ; 1 bytes @ 0xC
   578                           
   579  002C                     TX@temp:	
   580                           ; 1 bytes @ 0xC
   581                           
   582  002C                     RX@i:	
   583                           ; 1 bytes @ 0xC
   584                           
   585  002C                     calc_crc@fb:	
   586                           ; 1 bytes @ 0xC
   587                           
   588  002C                     ___lbdiv@counter:	
   589                           ; 1 bytes @ 0xC
   590                           
   591  002C                     ___lbmod@dividend:	
   592                           ; 1 bytes @ 0xC
   593                           
   594  002C                     ___awdiv@dividend:	
   595                           ; 1 bytes @ 0xC
   596                           
   597  002C                     ___awmod@dividend:	
   598                           ; 2 bytes @ 0xC
   599                           
   600                           
   601                           ; 2 bytes @ 0xC
   602  002C                     	ds	1
   603  002D                     ?_FillArrayFromEEPROM:	
   604  002D                     ?_WriteArrayToEEPROM:	
   605                           ; 1 bytes @ 0xD
   606                           
   607  002D                     FillArrayFromEEPROM@address_start:	
   608                           ; 1 bytes @ 0xD
   609                           
   610  002D                     WriteArrayToEEPROM@address_start:	
   611                           ; 1 bytes @ 0xD
   612                           
   613  002D                     TX@i:	
   614                           ; 1 bytes @ 0xD
   615                           
   616  002D                     calc_crc@mas:	
   617                           ; 1 bytes @ 0xD
   618                           
   619  002D                     ___lbdiv@quotient:	
   620                           ; 1 bytes @ 0xD
   621                           
   622  002D                     ___lbmod@counter:	
   623                           ; 1 bytes @ 0xD
   624                           
   625                           
   626                           ; 1 bytes @ 0xD
   627  002D                     	ds	1
   628  002E                     ??___awdiv:	
   629  002E                     ??___awmod:	
   630                           ; 1 bytes @ 0xE
   631                           
   632  002E                     FillArrayFromEEPROM@quantity:	
   633                           ; 1 bytes @ 0xE
   634                           
   635  002E                     WriteArrayToEEPROM@quantity:	
   636                           ; 1 bytes @ 0xE
   637                           
   638  002E                     calc_crc@i:	
   639                           ; 1 bytes @ 0xE
   640                           
   641  002E                     ___awdiv@counter:	
   642                           ; 1 bytes @ 0xE
   643                           
   644  002E                     ___awmod@counter:	
   645                           ; 1 bytes @ 0xE
   646                           
   647  002E                     ___lbmod@rem:	
   648                           ; 1 bytes @ 0xE
   649                           
   650                           
   651                           ; 1 bytes @ 0xE
   652  002E                     	ds	1
   653  002F                     ??_FillArrayFromEEPROM:	
   654  002F                     ??_WriteArrayToEEPROM:	
   655                           ; 1 bytes @ 0xF
   656                           
   657  002F                     calc_crc@crc:	
   658                           ; 1 bytes @ 0xF
   659                           
   660  002F                     ___awdiv@sign:	
   661                           ; 1 bytes @ 0xF
   662                           
   663  002F                     ___awmod@sign:	
   664                           ; 1 bytes @ 0xF
   665                           
   666                           
   667                           ; 1 bytes @ 0xF
   668  002F                     	ds	1
   669  0030                     FillArrayFromEEPROM@container:	
   670  0030                     WriteArrayToEEPROM@container:	
   671                           ; 1 bytes @ 0x10
   672                           
   673  0030                     ___awdiv@quotient:	
   674                           ; 1 bytes @ 0x10
   675                           
   676                           
   677                           ; 2 bytes @ 0x10
   678  0030                     	ds	1
   679  0031                     FillArrayFromEEPROM@i:	
   680  0031                     WriteArrayToEEPROM@i:	
   681                           ; 1 bytes @ 0x11
   682                           
   683                           
   684                           ; 1 bytes @ 0x11
   685  0031                     	ds	1
   686  0032                     ?_setDigit:	
   687  0032                     ?_FindCell:	
   688                           ; 1 bytes @ 0x12
   689                           
   690  0032                     ?_ReadCell:	
   691                           ; 1 bytes @ 0x12
   692                           
   693  0032                     setDigit@data:	
   694                           ; 1 bytes @ 0x12
   695                           
   696  0032                     FindCell@previous:	
   697                           ; 1 bytes @ 0x12
   698                           
   699  0032                     ReadCell@CellsData:	
   700                           ; 1 bytes @ 0x12
   701                           
   702                           
   703                           ; 1 bytes @ 0x12
   704  0032                     	ds	1
   705  0033                     ??_setDigit:	
   706  0033                     ??_FindCell:	
   707                           ; 1 bytes @ 0x13
   708                           
   709  0033                     ReadCell@CellIsEmpty:	
   710                           ; 1 bytes @ 0x13
   711                           
   712  0033                     FindCell@CellsData:	
   713                           ; 1 bytes @ 0x13
   714                           
   715                           
   716                           ; 8 bytes @ 0x13
   717  0033                     	ds	1
   718  0034                     ??_ReadCell:	
   719                           
   720                           ; 1 bytes @ 0x14
   721  0034                     	ds	1
   722  0035                     setDigit@a:	
   723  0035                     ReadCell@cell:	
   724                           ; 1 bytes @ 0x15
   725                           
   726                           
   727                           ; 1 bytes @ 0x15
   728  0035                     	ds	1
   729  0036                     ??_indData:	
   730  0036                     ??_CellToInd:	
   731                           ; 1 bytes @ 0x16
   732                           
   733  0036                     ReadCell@_CellIsEmpty:	
   734                           ; 1 bytes @ 0x16
   735                           
   736  0036                     CellToInd@cell:	
   737                           ; 1 bytes @ 0x16
   738                           
   739                           
   740                           ; 1 bytes @ 0x16
   741  0036                     	ds	1
   742  0037                     indData@v_236:	
   743  0037                     ReadCell@i:	
   744                           ; 1 bytes @ 0x17
   745                           
   746                           
   747                           ; 1 bytes @ 0x17
   748  0037                     	ds	1
   749  0038                     ??_EditAddressMemory:	
   750  0038                     indData@isPoint:	
   751                           ; 1 bytes @ 0x18
   752                           
   753                           
   754                           ; 1 bytes @ 0x18
   755  0038                     	ds	1
   756  0039                     indData@v:	
   757                           
   758                           ; 1 bytes @ 0x19
   759  0039                     	ds	1
   760  003A                     indData@cd:	
   761                           
   762                           ; 1 bytes @ 0x1A
   763  003A                     	ds	1
   764  003B                     FindCell@addressNew:	
   765  003B                     indData@dN:	
   766                           ; 1 bytes @ 0x1B
   767                           
   768                           
   769                           ; 1 bytes @ 0x1B
   770  003B                     	ds	1
   771  003C                     FindCell@CellIsEmpty:	
   772                           
   773                           ; 1 bytes @ 0x1C
   774  003C                     	ds	1
   775  003D                     FindCell@addressStart:	
   776                           
   777                           ; 1 bytes @ 0x1D
   778  003D                     	ds	1
   779  003E                     FindCell@i:	
   780                           
   781                           ; 1 bytes @ 0x1E
   782  003E                     	ds	1
   783  003F                     FindCell@address:	
   784                           
   785                           ; 1 bytes @ 0x1F
   786  003F                     	ds	1
   787  0040                     ??_main:	
   788                           
   789                           ; 1 bytes @ 0x20
   790  0040                     	ds	1
   791  0041                     main@switcher:	
   792                           
   793                           ; 1 bytes @ 0x21
   794  0041                     	ds	1
   795  0042                     _main$266:	
   796                           
   797                           ; 2 bytes @ 0x22
   798  0042                     	ds	2
   799  0044                     main@data_on_ind_delay:	
   800                           
   801                           ; 2 bytes @ 0x24
   802  0044                     	ds	2
   803  0046                     main@cell:	
   804                           
   805                           ; 1 bytes @ 0x26
   806  0046                     	ds	1
   807  0047                     main@address:	
   808                           
   809                           ; 1 bytes @ 0x27
   810  0047                     	ds	1
   811                           
   812                           	psect	maintext
   813  0031                     __pmaintext:	
   814 ;;
   815 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   816 ;;
   817 ;; *************** function _main *****************
   818 ;; Defined at:
   819 ;;		line 709 in file "prog.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  data_on_ind_    2   36[BANK0 ] unsigned int 
   824 ;;  address         1   39[BANK0 ] unsigned char 
   825 ;;  cell            1   38[BANK0 ] unsigned char 
   826 ;;  switcher        1   33[BANK0 ] unsigned char 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : B00/0
   833 ;;		On exit  : 300/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   836 ;;      Params:         0       0       0       0
   837 ;;      Locals:         0       7       0       0
   838 ;;      Temps:          0       1       0       0
   839 ;;      Totals:         0       8       0       0
   840 ;;Total ram usage:        8 bytes
   841 ;; Hardware stack levels required when called:    7
   842 ;; This function calls:
   843 ;;		_CellToInd
   844 ;;		_EditAddressMemory
   845 ;;		_FillArrayFromEEPROM
   846 ;;		_FindCell
   847 ;;		_Reset_powerOnInterval
   848 ;;		_Run_getTemp
   849 ;;		_clrInd
   850 ;;		_indData
   851 ;;		_refreshInd
   852 ;;		_setDigit
   853 ;;		_setPoint
   854 ;;		_waitInterrupt
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           
   861                           ;psect for function _main
   862  0031                     _main:	
   863                           
   864                           ;prog.c: 712: INTCON = 0;
   865                           
   866                           ;incstack = 0
   867                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   868  0031  018B               	clrf	11	;volatile
   869                           
   870                           ;prog.c: 713: OPTION_REG = 0b00000111;
   871  0032  3007               	movlw	7
   872  0033  1683               	bsf	3,5	;RP0=1, select bank1
   873  0034  0081               	movwf	1	;volatile
   874                           
   875                           ;prog.c: 714: TRISA = 0b00000110;
   876  0035  3006               	movlw	6
   877  0036  0085               	movwf	5	;volatile
   878                           
   879                           ;prog.c: 715: TRISB = 0b00000000;
   880  0037  0186               	clrf	6	;volatile
   881                           
   882                           ;prog.c: 716: PORTA = 0b00000000;
   883  0038  1283               	bcf	3,5	;RP0=0, select bank0
   884  0039  0185               	clrf	5	;volatile
   885                           
   886                           ;prog.c: 717: PORTB = 0b00000000;
   887  003A  0186               	clrf	6	;volatile
   888                           
   889                           ;prog.c: 718: TMR0 = TMR0_VALUE;
   890  003B  30EB               	movlw	235
   891  003C  0081               	movwf	1	;volatile
   892                           
   893                           ;prog.c: 719: T2CON = 0b00000100;
   894  003D  3004               	movlw	4
   895  003E  0092               	movwf	18	;volatile
   896                           
   897                           ;prog.c: 720: CMCON = 0b00000111;
   898  003F  3007               	movlw	7
   899  0040  009F               	movwf	31	;volatile
   900                           
   901                           ;prog.c: 721: INTCON = 0b10100000;
   902  0041  30A0               	movlw	160
   903  0042  008B               	movwf	11	;volatile
   904                           
   905                           ;prog.c: 723: Reset_powerOnInterval();
   906  0043  2783               	fcall	_Reset_powerOnInterval
   907                           
   908                           ;prog.c: 725: clrInd();
   909  0044  2764               	fcall	_clrInd
   910                           
   911                           ;prog.c: 726: setDigit(1, 32);
   912  0045  3020               	movlw	32
   913  0046  00B2               	movwf	setDigit@data
   914  0047  3001               	movlw	1
   915  0048  2702               	fcall	_setDigit
   916                           
   917                           ;prog.c: 727: setDigit(2, 32);
   918  0049  3020               	movlw	32
   919  004A  00B2               	movwf	setDigit@data
   920  004B  3002               	movlw	2
   921  004C  2702               	fcall	_setDigit
   922                           
   923                           ;prog.c: 728: setDigit(3, 32);
   924  004D  3020               	movlw	32
   925  004E  00B2               	movwf	setDigit@data
   926  004F  3003               	movlw	3
   927  0050  2702               	fcall	_setDigit
   928                           
   929                           ;prog.c: 730: refreshInd();
   930  0051  2714               	fcall	_refreshInd
   931  0052  3080               	movlw	128
   932                           
   933                           ;prog.c: 740: unsigned char address = FindCell(((sizeof(DS_Address)) * 16), 0);
   934  0053  01B2               	clrf	FindCell@previous
   935  0054  23C2               	fcall	_FindCell
   936  0055  00C7               	movwf	main@address
   937                           
   938                           ;prog.c: 741: Broadcasting = address == ((sizeof(DS_Address)) * 16);
   939  0056  3A80               	xorlw	128
   940  0057  1283               	bcf	3,5	;RP0=0, select bank0
   941  0058  1303               	bcf	3,6	;RP1=0, select bank0
   942  0059  1D03               	btfss	3,2
   943  005A  285D               	goto	L2
   944  005B  14D9               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
   945  005C  285E               	goto	l3986
   946  005D                     L2:	
   947  005D  10D9               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
   948  005E                     l3986:	
   949                           
   950                           ;prog.c: 743: if (!Broadcasting) {
   951  005E  18D9               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
   952  005F  2862               	goto	l3990
   953                           
   954                           ;prog.c: 744: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
   955  0060  211D               	fcall	PL8	;call to abstracted procedure
   956  0061  2726               	fcall	_FillArrayFromEEPROM
   957  0062                     l3990:	
   958                           
   959                           ;prog.c: 745: }
   960                           ;prog.c: 747: unsigned char cell = 0;
   961  0062  01C6               	clrf	main@cell
   962                           
   963                           ;prog.c: 749: unsigned int data_on_ind_delay = 0;
   964  0063  01C4               	clrf	main@data_on_ind_delay
   965  0064  01C5               	clrf	main@data_on_ind_delay+1
   966                           
   967                           ;prog.c: 751: unsigned char switcher = 0;
   968  0065  01C1               	clrf	main@switcher
   969  0066                     l3996:	
   970                           
   971                           ;prog.c: 755: if (KeyCode == 33) {
   972  0066  3021               	movlw	33
   973  0067  0652               	xorwf	_KeyCode,w	;volatile
   974  0068  1D03               	btfss	3,2
   975  0069  287B               	goto	l4010
   976                           
   977                           ;prog.c: 756: KeyCode = 0;
   978  006A  01D2               	clrf	_KeyCode	;volatile
   979                           
   980                           ;prog.c: 757: if (PowerBlocked != 1) {
   981  006B  0353               	decf	_PowerBlocked,w
   982  006C  1903               	btfsc	3,2
   983  006D  2879               	goto	l4008
   984  006E  3001               	movlw	1
   985                           
   986                           ;prog.c: 758: PowerBlocked = 1;
   987  006F  01D3               	clrf	_PowerBlocked
   988  0070  0AD3               	incf	_PowerBlocked,f
   989  0071  01AA               	clrf	setPoint@value
   990  0072  0AAA               	incf	setPoint@value,f
   991  0073  2746               	fcall	_setPoint
   992                           
   993                           ;prog.c: 760: refreshInd();
   994  0074  2714               	fcall	_refreshInd
   995                           
   996                           ;prog.c: 761: data_on_ind_delay = 10000;
   997  0075  3010               	movlw	16
   998  0076  00C4               	movwf	main@data_on_ind_delay
   999  0077  3027               	movlw	39
  1000  0078  28E7               	goto	L1
  1001  0079                     l4008:	
  1002                           ;prog.c: 762: } else {
  1003                           
  1004                           
  1005                           ;prog.c: 763: PowerBlocked = 0;
  1006  0079  01D3               	clrf	_PowerBlocked
  1007  007A  28E8               	goto	l4068
  1008  007B                     l4010:	
  1009  007B  301F               	movlw	31
  1010  007C  0652               	xorwf	_KeyCode,w	;volatile
  1011  007D  1903               	btfsc	3,2
  1012  007E  2887               	goto	l4016
  1013  007F  3020               	movlw	32
  1014  0080  0652               	xorwf	_KeyCode,w	;volatile
  1015  0081  1903               	btfsc	3,2
  1016  0082  2887               	goto	l4016
  1017  0083  3022               	movlw	34
  1018  0084  0652               	xorwf	_KeyCode,w	;volatile
  1019  0085  1D03               	btfss	3,2
  1020  0086  28B4               	goto	l4044
  1021  0087                     l4016:	
  1022                           
  1023                           ;prog.c: 766: Reset_powerOnInterval();
  1024  0087  2783               	fcall	_Reset_powerOnInterval
  1025                           
  1026                           ;prog.c: 767: waitInterrupt();
  1027  0088  2789               	fcall	_waitInterrupt
  1028                           
  1029                           ;prog.c: 768: address = FindCell((KeyCode == 34 ? ((sizeof(DS_Address)) * 16) : cell * (
      +                          sizeof(DS_Address))), (KeyCode == 31 ? 1 : 0));
  1030  0089  3022               	movlw	34
  1031  008A  0652               	xorwf	_KeyCode,w	;volatile
  1032  008B  1903               	btfsc	3,2
  1033  008C  289A               	goto	l4026
  1034  008D  0846               	movf	main@cell,w
  1035  008E  00C2               	movwf	_main$266
  1036  008F  01C3               	clrf	_main$266+1
  1037  0090  1003               	clrc
  1038  0091  0DC2               	rlf	_main$266,f
  1039  0092  0DC3               	rlf	_main$266+1,f
  1040  0093  1003               	clrc
  1041  0094  0DC2               	rlf	_main$266,f
  1042  0095  0DC3               	rlf	_main$266+1,f
  1043  0096  1003               	clrc
  1044  0097  0DC2               	rlf	_main$266,f
  1045  0098  0DC3               	rlf	_main$266+1,f
  1046  0099  289D               	goto	l4028
  1047  009A                     l4026:	
  1048  009A  3080               	movlw	128
  1049  009B  00C2               	movwf	_main$266
  1050  009C  01C3               	clrf	_main$266+1
  1051  009D                     l4028:	
  1052  009D  301F               	movlw	31
  1053  009E  0652               	xorwf	_KeyCode,w	;volatile
  1054  009F  1D03               	btfss	3,2
  1055  00A0  28A3               	goto	u3900
  1056  00A1  3001               	movlw	1
  1057  00A2  28A4               	goto	u3910
  1058  00A3                     u3900:	
  1059  00A3  3000               	movlw	0
  1060  00A4                     u3910:	
  1061  00A4  00B2               	movwf	FindCell@previous
  1062  00A5  0842               	movf	_main$266,w
  1063  00A6  23C2               	fcall	_FindCell
  1064  00A7  00C7               	movwf	main@address
  1065                           
  1066                           ;prog.c: 769: KeyCode = 0;
  1067  00A8  01D2               	clrf	_KeyCode	;volatile
  1068                           
  1069                           ;prog.c: 771: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1070  00A9  3A80               	xorlw	128
  1071  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1072  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1073  00AC  1D03               	btfss	3,2
  1074  00AD  28B0               	goto	L3
  1075  00AE  14D9               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1076  00AF  28B1               	goto	l4034
  1077  00B0                     L3:	
  1078  00B0  10D9               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1079  00B1                     l4034:	
  1080                           
  1081                           ;prog.c: 772: if (!Broadcasting) {
  1082  00B1  18D9               	btfsc	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1083  00B2  28E8               	goto	l4068
  1084  00B3  28D7               	goto	l4060
  1085  00B4                     l4044:	
  1086                           ;prog.c: 776: CellToInd(cell);
  1087                           
  1088                           ;prog.c: 774: cell = address / (sizeof(DS_Address));
  1089                           
  1090                           ;prog.c: 773: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1091                           
  1092  00B4  3024               	movlw	36
  1093  00B5  0652               	xorwf	_KeyCode,w	;volatile
  1094  00B6  1D03               	btfss	3,2
  1095  00B7  28E8               	goto	l4068
  1096                           
  1097                           ;prog.c: 781: KeyCode = 0;
  1098  00B8  01D2               	clrf	_KeyCode	;volatile
  1099                           
  1100                           ;prog.c: 782: EditAddressMemory();
  1101  00B9  22A1               	fcall	_EditAddressMemory
  1102                           
  1103                           ;prog.c: 784: waitInterrupt();
  1104  00BA  2789               	fcall	_waitInterrupt
  1105  00BB  3080               	movlw	128
  1106                           
  1107                           ;prog.c: 785: address = FindCell(((sizeof(DS_Address)) * 16), 0);
  1108  00BC  01B2               	clrf	FindCell@previous
  1109  00BD  23C2               	fcall	_FindCell
  1110  00BE  00C7               	movwf	main@address
  1111                           
  1112                           ;prog.c: 786: Broadcasting = address == ((sizeof(DS_Address)) * 16);
  1113  00BF  3A80               	xorlw	128
  1114  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1115  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1116  00C2  1D03               	btfss	3,2
  1117  00C3  28C6               	goto	L4
  1118  00C4  14D9               	bsf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1119  00C5  28C7               	goto	l4056
  1120  00C6                     L4:	
  1121  00C6  10D9               	bcf	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1122  00C7                     l4056:	
  1123                           
  1124                           ;prog.c: 787: if (Broadcasting) {
  1125  00C7  1CD9               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  1126  00C8  28D7               	goto	l4060
  1127                           
  1128                           ;prog.c: 788: setDigit(1, 32);
  1129  00C9  3020               	movlw	32
  1130  00CA  00B2               	movwf	setDigit@data
  1131  00CB  3001               	movlw	1
  1132  00CC  2702               	fcall	_setDigit
  1133                           
  1134                           ;prog.c: 789: setDigit(2, 32);
  1135  00CD  3020               	movlw	32
  1136  00CE  00B2               	movwf	setDigit@data
  1137  00CF  3002               	movlw	2
  1138  00D0  2702               	fcall	_setDigit
  1139                           
  1140                           ;prog.c: 790: setDigit(3, 32);
  1141  00D1  3020               	movlw	32
  1142  00D2  00B2               	movwf	setDigit@data
  1143  00D3  3003               	movlw	3
  1144  00D4  2702               	fcall	_setDigit
  1145                           
  1146                           ;prog.c: 791: refreshInd();
  1147  00D5  2714               	fcall	_refreshInd
  1148                           
  1149                           ;prog.c: 792: } else {
  1150  00D6  28E8               	goto	l4068
  1151  00D7                     l4060:	
  1152                           
  1153                           ;prog.c: 793: FillArrayFromEEPROM(DS_Address, address, (sizeof(DS_Address)));
  1154  00D7  211D               	fcall	PL8	;call to abstracted procedure
  1155  00D8  2726               	fcall	_FillArrayFromEEPROM
  1156                           
  1157                           ;prog.c: 794: cell = address / (sizeof(DS_Address));
  1158  00D9  0847               	movf	main@address,w
  1159  00DA  00C0               	movwf	??_main
  1160  00DB  1003               	clrc
  1161  00DC  0CC0               	rrf	??_main,f
  1162  00DD  1003               	clrc
  1163  00DE  0CC0               	rrf	??_main,f
  1164  00DF  1003               	clrc
  1165  00E0  0CC0               	rrf	??_main,f
  1166  00E1  0840               	movf	??_main,w
  1167  00E2  00C6               	movwf	main@cell
  1168                           
  1169                           ;prog.c: 796: CellToInd(cell);
  1170  00E3  2531               	fcall	_CellToInd
  1171                           
  1172                           ;prog.c: 777: data_on_ind_delay = 25000;
  1173  00E4  30A8               	movlw	168
  1174  00E5  00C4               	movwf	main@data_on_ind_delay
  1175  00E6  3061               	movlw	97
  1176  00E7                     L1:	
  1177  00E7  00C5               	movwf	main@data_on_ind_delay+1
  1178  00E8                     l4068:	
  1179                           
  1180                           ;prog.c: 798: }
  1181                           ;prog.c: 799: }
  1182                           ;prog.c: 801: if (switcher != getTemp_flags.ActiveProcess) {
  1183  00E8  0E4B               	swapf	_getTemp_flags+3,w
  1184  00E9  3901               	andlw	1
  1185  00EA  0641               	xorwf	main@switcher,w
  1186  00EB  1903               	skipnz
  1187  00EC  290B               	goto	l4080
  1188                           
  1189                           ;prog.c: 802: if (getTemp_flags.Error) {
  1190  00ED  1ECB               	btfss	_getTemp_flags+3,5
  1191  00EE  28FE               	goto	l404
  1192                           
  1193                           ;prog.c: 803: clrInd();
  1194  00EF  2764               	fcall	_clrInd
  1195                           
  1196                           ;prog.c: 804: setDigit(3, 14);
  1197  00F0  300E               	movlw	14
  1198  00F1  00B2               	movwf	setDigit@data
  1199  00F2  3003               	movlw	3
  1200  00F3  2702               	fcall	_setDigit
  1201                           
  1202                           ;prog.c: 805: setDigit(2, 24);
  1203  00F4  3018               	movlw	24
  1204  00F5  00B2               	movwf	setDigit@data
  1205  00F6  3002               	movlw	2
  1206  00F7  2702               	fcall	_setDigit
  1207                           
  1208                           ;prog.c: 806: setDigit(1, 24);
  1209  00F8  3018               	movlw	24
  1210  00F9  00B2               	movwf	setDigit@data
  1211  00FA  3001               	movlw	1
  1212  00FB  2702               	fcall	_setDigit
  1213                           
  1214                           ;prog.c: 807: refreshInd();
  1215  00FC  2714               	fcall	_refreshInd
  1216                           
  1217                           ;prog.c: 808: } else if (!getTemp_flags.ActiveProcess) {
  1218  00FD  2907               	goto	l4078
  1219  00FE                     l404:	
  1220  00FE  1A4B               	btfsc	_getTemp_flags+3,4
  1221  00FF  2907               	goto	l4078
  1222                           
  1223                           ;prog.c: 809: clrInd();
  1224  0100  2764               	fcall	_clrInd
  1225                           
  1226                           ;prog.c: 810: indData();
  1227  0101  234E               	fcall	_indData
  1228                           
  1229                           ;prog.c: 811: refreshInd();
  1230  0102  2714               	fcall	_refreshInd
  1231                           
  1232                           ;prog.c: 812: data_on_ind_delay = 30000;
  1233  0103  3030               	movlw	48
  1234  0104  00C4               	movwf	main@data_on_ind_delay
  1235  0105  3075               	movlw	117
  1236  0106  00C5               	movwf	main@data_on_ind_delay+1
  1237  0107                     l4078:	
  1238                           
  1239                           ;prog.c: 813: }
  1240                           ;prog.c: 814: switcher = getTemp_flags.ActiveProcess;
  1241  0107  3000               	movlw	0
  1242  0108  1A4B               	btfsc	_getTemp_flags+3,4
  1243  0109  3001               	movlw	1
  1244  010A  00C1               	movwf	main@switcher
  1245  010B                     l4080:	
  1246                           
  1247                           ;prog.c: 815: }
  1248                           ;prog.c: 817: if (data_on_ind_delay == 0 && !getTemp_flags.ActiveProcess) {
  1249  010B  0844               	movf	main@data_on_ind_delay,w
  1250  010C  0445               	iorwf	main@data_on_ind_delay+1,w
  1251  010D  1903               	btfsc	3,2
  1252  010E  1A4B               	btfsc	_getTemp_flags+3,4
  1253  010F  2912               	goto	l4086
  1254                           
  1255                           ;prog.c: 818: Run_getTemp();
  1256  0110  2737               	fcall	_Run_getTemp
  1257                           
  1258                           ;prog.c: 819: } else {
  1259  0111  2866               	goto	l3996
  1260  0112                     l4086:	
  1261                           
  1262                           ;prog.c: 820: if (data_on_ind_delay > 0) {
  1263  0112  0844               	movf	main@data_on_ind_delay,w
  1264  0113  0445               	iorwf	main@data_on_ind_delay+1,w
  1265  0114  1903               	btfsc	3,2
  1266  0115  2866               	goto	l3996
  1267                           
  1268                           ;prog.c: 821: data_on_ind_delay--;
  1269  0116  3001               	movlw	1
  1270  0117  02C4               	subwf	main@data_on_ind_delay,f
  1271  0118  3000               	movlw	0
  1272  0119  1C03               	skipc
  1273  011A  03C5               	decf	main@data_on_ind_delay+1,f
  1274  011B  02C5               	subwf	main@data_on_ind_delay+1,f
  1275  011C  2866               	goto	l3996
  1276  011D                     __end_of_main:	
  1277  011D                     PL8:	
  1278  011D  0847               	movf	main@address,w
  1279  011E  00AD               	movwf	FillArrayFromEEPROM@address_start
  1280  011F  3008               	movlw	8
  1281  0120  00AE               	movwf	FillArrayFromEEPROM@quantity
  1282  0121  34C5               	retlw	(low (_DS_Address| 0))& (0+255)
  1283  0122                     __end_ofPL8:	
  1284                           
  1285                           	psect	text1
  1286  034E                     __ptext1:	
  1287 ;; *************** function _indData *****************
  1288 ;; Defined at:
  1289 ;;		line 546 in file "prog.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  v               1   23[BANK0 ] unsigned char 
  1294 ;;  v               1   25[BANK0 ] unsigned char 
  1295 ;;  dN              1   27[BANK0 ] unsigned char 
  1296 ;;  cd              1   26[BANK0 ] unsigned char 
  1297 ;;  isPoint         1   24[BANK0 ] unsigned char 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : B00/0
  1304 ;;		On exit  : 300/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1307 ;;      Params:         0       0       0       0
  1308 ;;      Locals:         0       5       0       0
  1309 ;;      Temps:          0       1       0       0
  1310 ;;      Totals:         0       6       0       0
  1311 ;;Total ram usage:        6 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    4
  1314 ;; This function calls:
  1315 ;;		___lbdiv
  1316 ;;		___lbmod
  1317 ;;		_setDigit
  1318 ;;		_setPoint
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           
  1325                           ;psect for function _indData
  1326  034E                     _indData:	
  1327                           
  1328                           ;prog.c: 555: unsigned char cd = 3;
  1329                           
  1330                           ;incstack = 0
  1331                           ; Regs used in _indData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1332  034E  3003               	movlw	3
  1333  034F  00BA               	movwf	indData@cd
  1334                           
  1335                           ;prog.c: 556: unsigned char dN = 3;
  1336  0350  00BB               	movwf	indData@dN
  1337                           
  1338                           ;prog.c: 558: if (sign != 0) {
  1339  0351  0856               	movf	_sign,w
  1340  0352  1903               	btfsc	3,2
  1341  0353  2B5A               	goto	l3800
  1342                           
  1343                           ;prog.c: 559: setDigit(cd, 32);
  1344  0354  3020               	movlw	32
  1345  0355  00B2               	movwf	setDigit@data
  1346  0356  3003               	movlw	3
  1347  0357  2702               	fcall	_setDigit
  1348                           
  1349                           ;prog.c: 560: cd--;
  1350  0358  03BA               	decf	indData@cd,f
  1351                           
  1352                           ;prog.c: 561: dN--;
  1353  0359  03BB               	decf	indData@dN,f
  1354  035A                     l3800:	
  1355                           
  1356                           ;prog.c: 562: }
  1357                           ;prog.c: 563: unsigned char isPoint = 0;
  1358  035A  01B8               	clrf	indData@isPoint
  1359  035B                     l3802:	
  1360                           
  1361                           ;prog.c: 565: unsigned char v = (temperature > 9 ? 1 : 0) + (temperature > 99 ? 1 : 0);
  1362  035B  3064               	movlw	100
  1363  035C  0258               	subwf	_temperature,w
  1364  035D  1C03               	btfss	3,0
  1365  035E  2B61               	goto	u3530
  1366  035F  3001               	movlw	1
  1367  0360  2B62               	goto	u3540
  1368  0361                     u3530:	
  1369  0361  3000               	movlw	0
  1370  0362                     u3540:	
  1371  0362  00B6               	movwf	??_indData
  1372  0363  300A               	movlw	10
  1373  0364  0258               	subwf	_temperature,w
  1374  0365  1C03               	btfss	3,0
  1375  0366  2B69               	goto	u3550
  1376  0367  3001               	movlw	1
  1377  0368  2B6A               	goto	u3560
  1378  0369                     u3550:	
  1379  0369  3000               	movlw	0
  1380  036A                     u3560:	
  1381  036A  0736               	addwf	??_indData,w
  1382  036B  00B9               	movwf	indData@v
  1383                           
  1384                           ;prog.c: 566: setDigit(cd - v, temperature % 10);
  1385  036C  300A               	movlw	10
  1386  036D  00AA               	movwf	___lbmod@divisor
  1387  036E  0858               	movf	_temperature,w
  1388  036F  2687               	fcall	___lbmod
  1389  0370  00B2               	movwf	setDigit@data
  1390  0371  0839               	movf	indData@v,w
  1391  0372  023A               	subwf	indData@cd,w
  1392  0373  2702               	fcall	_setDigit
  1393                           
  1394                           ;prog.c: 567: if (!isPoint) {
  1395  0374  0838               	movf	indData@isPoint,w
  1396  0375  1D03               	btfss	3,2
  1397  0376  2B7E               	goto	l3812
  1398                           
  1399                           ;prog.c: 568: setPoint(cd - v, 1);
  1400  0377  01AA               	clrf	setPoint@value
  1401  0378  0AAA               	incf	setPoint@value,f
  1402  0379  0839               	movf	indData@v,w
  1403  037A  023A               	subwf	indData@cd,w
  1404  037B  2746               	fcall	_setPoint
  1405                           
  1406                           ;prog.c: 569: isPoint = 1;
  1407  037C  01B8               	clrf	indData@isPoint
  1408  037D  0AB8               	incf	indData@isPoint,f
  1409  037E                     l3812:	
  1410                           
  1411                           ;prog.c: 570: }
  1412                           ;prog.c: 571: temperature /= 10;
  1413  037E  300A               	movlw	10
  1414  037F  00AA               	movwf	___lbdiv@divisor
  1415  0380  0858               	movf	_temperature,w
  1416  0381  26A3               	fcall	___lbdiv
  1417  0382  00D8               	movwf	_temperature
  1418                           
  1419                           ;prog.c: 572: dN--;
  1420  0383  03BB               	decf	indData@dN,f
  1421                           
  1422                           ;prog.c: 573: } while (temperature > 0);
  1423  0384  0858               	movf	_temperature,w
  1424  0385  1D03               	btfss	3,2
  1425  0386  2B5B               	goto	l3802
  1426                           
  1427                           ;prog.c: 575: if (dN > 0) {
  1428  0387  083B               	movf	indData@dN,w
  1429  0388  1903               	btfsc	3,2
  1430  0389  2BBE               	goto	l3844
  1431                           
  1432                           ;prog.c: 576: cd = dN;
  1433  038A  083B               	movf	indData@dN,w
  1434  038B  00BA               	movwf	indData@cd
  1435                           
  1436                           ;prog.c: 577: if (temp_drob > 99) temp_drob /= 10;
  1437  038C  3064               	movlw	100
  1438  038D  0257               	subwf	_temp_drob,w
  1439  038E  300A               	movlw	10
  1440  038F  1C03               	skipc
  1441  0390  2B96               	goto	L5
  1442  0391  00AA               	movwf	___lbdiv@divisor
  1443  0392  0857               	movf	_temp_drob,w
  1444  0393  26A3               	fcall	___lbdiv
  1445  0394  00D7               	movwf	_temp_drob
  1446                           
  1447                           ;prog.c: 578: if (temp_drob > 9 && dN == 1) temp_drob /= 10;
  1448  0395  300A               	movlw	10
  1449  0396                     L5:	
  1450  0396  0257               	subwf	_temp_drob,w
  1451  0397  1C03               	skipc
  1452  0398  2BA0               	goto	l3830
  1453  0399  0B3B               	decfsz	indData@dN,w
  1454  039A  2BA0               	goto	l3830
  1455  039B  300A               	movlw	10
  1456  039C  00AA               	movwf	___lbdiv@divisor
  1457  039D  0857               	movf	_temp_drob,w
  1458  039E  26A3               	fcall	___lbdiv
  1459  039F  00D7               	movwf	_temp_drob
  1460  03A0                     l3830:	
  1461                           
  1462                           ;prog.c: 580: unsigned char v = (temp_drob > 9 ? 1 : 0);
  1463  03A0  300A               	movlw	10
  1464  03A1  0257               	subwf	_temp_drob,w
  1465  03A2  1C03               	btfss	3,0
  1466  03A3  2BA6               	goto	u3630
  1467  03A4  3001               	movlw	1
  1468  03A5  2BA7               	goto	u3640
  1469  03A6                     u3630:	
  1470  03A6  3000               	movlw	0
  1471  03A7                     u3640:	
  1472  03A7  00B7               	movwf	indData@v_236
  1473                           
  1474                           ;prog.c: 581: setDigit(cd - v, temp_drob % 10);
  1475  03A8  300A               	movlw	10
  1476  03A9  00AA               	movwf	___lbmod@divisor
  1477  03AA  0857               	movf	_temp_drob,w
  1478  03AB  2687               	fcall	___lbmod
  1479  03AC  00B2               	movwf	setDigit@data
  1480  03AD  0837               	movf	indData@v_236,w
  1481  03AE  023A               	subwf	indData@cd,w
  1482  03AF  2702               	fcall	_setDigit
  1483                           
  1484                           ;prog.c: 582: temp_drob /= 10;
  1485  03B0  300A               	movlw	10
  1486  03B1  00AA               	movwf	___lbdiv@divisor
  1487  03B2  0857               	movf	_temp_drob,w
  1488  03B3  26A3               	fcall	___lbdiv
  1489  03B4  00D7               	movwf	_temp_drob
  1490                           
  1491                           ;prog.c: 583: dN--;
  1492  03B5  03BB               	decf	indData@dN,f
  1493                           
  1494                           ;prog.c: 584: } while (temp_drob > 0);
  1495  03B6  0857               	movf	_temp_drob,w
  1496  03B7  1903               	btfsc	3,2
  1497  03B8  2BBE               	goto	l3844
  1498  03B9  2BA0               	goto	l3830
  1499  03BA                     l3840:	
  1500                           
  1501                           ;prog.c: 588: setDigit(dN, 0);
  1502  03BA  01B2               	clrf	setDigit@data
  1503  03BB  083B               	movf	indData@dN,w
  1504  03BC  2702               	fcall	_setDigit
  1505                           
  1506                           ;prog.c: 589: dN--;
  1507  03BD  03BB               	decf	indData@dN,f
  1508  03BE                     l3844:	
  1509  03BE  083B               	movf	indData@dN,w
  1510  03BF  1903               	btfsc	3,2
  1511  03C0  0008               	return
  1512  03C1  2BBA               	goto	l3840
  1513  03C2                     __end_of_indData:	
  1514                           
  1515                           	psect	text2
  1516  0687                     __ptext2:	
  1517 ;; *************** function ___lbmod *****************
  1518 ;; Defined at:
  1519 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbmod.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  dividend        1    wreg     unsigned char 
  1522 ;;  divisor         1   10[BANK0 ] unsigned char 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  dividend        1   12[BANK0 ] unsigned char 
  1525 ;;  rem             1   14[BANK0 ] unsigned char 
  1526 ;;  counter         1   13[BANK0 ] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      unsigned char 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0
  1531 ;; Tracked objects:
  1532 ;;		On entry : 300/0
  1533 ;;		On exit  : 300/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1536 ;;      Params:         0       1       0       0
  1537 ;;      Locals:         0       3       0       0
  1538 ;;      Temps:          0       1       0       0
  1539 ;;      Totals:         0       5       0       0
  1540 ;;Total ram usage:        5 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    3
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_indData
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           
  1551                           ;psect for function ___lbmod
  1552  0687                     ___lbmod:	
  1553                           
  1554                           ;incstack = 0
  1555                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1556                           ;___lbmod@dividend stored from wreg
  1557  0687  00AC               	movwf	___lbmod@dividend
  1558  0688  3008               	movlw	8
  1559  0689  00AD               	movwf	___lbmod@counter
  1560  068A  01AE               	clrf	___lbmod@rem
  1561  068B                     l2626:	
  1562  068B  082C               	movf	___lbmod@dividend,w
  1563  068C  00AB               	movwf	??___lbmod
  1564  068D  3007               	movlw	7
  1565  068E  1003               	clrc
  1566  068F                     L6:	
  1567  068F  0CAB               	rrf	??___lbmod,f
  1568  0690  3EFF               	addlw	-1
  1569  0691  1003               	clrc
  1570  0692  1D03               	skipz
  1571  0693  2E8F               	goto	L6
  1572  0694  0D2E               	rlf	___lbmod@rem,w
  1573  0695  042B               	iorwf	??___lbmod,w
  1574  0696  00AE               	movwf	___lbmod@rem
  1575  0697  1003               	clrc
  1576  0698  0DAC               	rlf	___lbmod@dividend,f
  1577  0699  082A               	movf	___lbmod@divisor,w
  1578  069A  022E               	subwf	___lbmod@rem,w
  1579  069B  1C03               	skipc
  1580  069C  2E9F               	goto	l2634
  1581  069D  082A               	movf	___lbmod@divisor,w
  1582  069E  02AE               	subwf	___lbmod@rem,f
  1583  069F                     l2634:	
  1584  069F  0BAD               	decfsz	___lbmod@counter,f
  1585  06A0  2E8B               	goto	l2626
  1586  06A1  082E               	movf	___lbmod@rem,w
  1587  06A2  0008               	return
  1588  06A3                     __end_of___lbmod:	
  1589                           
  1590                           	psect	text3
  1591  06A3                     __ptext3:	
  1592 ;; *************** function ___lbdiv *****************
  1593 ;; Defined at:
  1594 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  dividend        1    wreg     unsigned char 
  1597 ;;  divisor         1   10[BANK0 ] unsigned char 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  dividend        1   11[BANK0 ] unsigned char 
  1600 ;;  quotient        1   13[BANK0 ] unsigned char 
  1601 ;;  counter         1   12[BANK0 ] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      unsigned char 
  1604 ;; Registers used:
  1605 ;;		wreg, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 300/0
  1608 ;;		On exit  : 300/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1611 ;;      Params:         0       1       0       0
  1612 ;;      Locals:         0       3       0       0
  1613 ;;      Temps:          0       0       0       0
  1614 ;;      Totals:         0       4       0       0
  1615 ;;Total ram usage:        4 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    3
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_indData
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           
  1626                           ;psect for function ___lbdiv
  1627  06A3                     ___lbdiv:	
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1631                           ;___lbdiv@dividend stored from wreg
  1632  06A3  00AB               	movwf	___lbdiv@dividend
  1633  06A4  01AD               	clrf	___lbdiv@quotient
  1634  06A5  082A               	movf	___lbdiv@divisor,w
  1635  06A6  1903               	btfsc	3,2
  1636  06A7  2EBC               	goto	l2618
  1637  06A8  01AC               	clrf	___lbdiv@counter
  1638  06A9                     l2604:	
  1639  06A9  0AAC               	incf	___lbdiv@counter,f
  1640  06AA  1BAA               	btfsc	___lbdiv@divisor,7
  1641  06AB  2EAF               	goto	l783
  1642  06AC  1003               	clrc
  1643  06AD  0DAA               	rlf	___lbdiv@divisor,f
  1644  06AE  2EA9               	goto	l2604
  1645  06AF                     l783:	
  1646  06AF  1003               	clrc
  1647  06B0  0DAD               	rlf	___lbdiv@quotient,f
  1648  06B1  082A               	movf	___lbdiv@divisor,w
  1649  06B2  022B               	subwf	___lbdiv@dividend,w
  1650  06B3  1C03               	skipc
  1651  06B4  2EB9               	goto	L7
  1652  06B5  082A               	movf	___lbdiv@divisor,w
  1653  06B6  02AB               	subwf	___lbdiv@dividend,f
  1654  06B7  142D               	bsf	___lbdiv@quotient,0
  1655  06B8  1003               	clrc
  1656  06B9                     L7:	
  1657  06B9  0CAA               	rrf	___lbdiv@divisor,f
  1658  06BA  0BAC               	decfsz	___lbdiv@counter,f
  1659  06BB  2EAF               	goto	l783
  1660  06BC                     l2618:	
  1661  06BC  082D               	movf	___lbdiv@quotient,w
  1662  06BD  0008               	return
  1663  06BE                     __end_of___lbdiv:	
  1664                           
  1665                           	psect	text4
  1666  0737                     __ptext4:	
  1667 ;; *************** function _Run_getTemp *****************
  1668 ;; Defined at:
  1669 ;;		line 693 in file "prog.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 300/0
  1680 ;;		On exit  : 300/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1683 ;;      Params:         0       0       0       0
  1684 ;;      Locals:         0       0       0       0
  1685 ;;      Temps:          0       0       0       0
  1686 ;;      Totals:         0       0       0       0
  1687 ;;Total ram usage:        0 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    3
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           
  1698                           ;psect for function _Run_getTemp
  1699  0737                     _Run_getTemp:	
  1700  0737  30C3               	movlw	-61
  1701                           
  1702                           ;prog.c: 695: getTemp_flags.Init = 1;
  1703                           
  1704                           ;incstack = 0
  1705                           ; Regs used in _Run_getTemp: [wreg+status,2+status,0]
  1706  0738  1448               	bsf	_getTemp_flags,0
  1707                           
  1708                           ;prog.c: 696: getTemp_flags.Send_Address = 1;
  1709  0739  14C8               	bsf	_getTemp_flags,1
  1710                           
  1711                           ;prog.c: 697: getTemp_flags.CountAddressBytes = 0;
  1712  073A  05C8               	andwf	_getTemp_flags,f
  1713  073B  3078               	movlw	120
  1714                           
  1715                           ;prog.c: 698: getTemp_flags.SendConvertTemp = 1;
  1716  073C  1748               	bsf	_getTemp_flags,6
  1717                           
  1718                           ;prog.c: 699: getTemp_flags.PauseValue = 120;
  1719  073D  00C9               	movwf	_getTemp_flags+1
  1720  073E  30F3               	movlw	-13
  1721  073F  01CA               	clrf	_getTemp_flags+2
  1722                           
  1723                           ;prog.c: 700: getTemp_flags.SendGetTemp = 1;
  1724  0740  144B               	bsf	_getTemp_flags+3,0
  1725                           
  1726                           ;prog.c: 701: getTemp_flags.ReadData = 1;
  1727  0741  14CB               	bsf	_getTemp_flags+3,1
  1728                           
  1729                           ;prog.c: 702: getTemp_flags.CountDataBytes = 0;
  1730  0742  05CB               	andwf	_getTemp_flags+3,f
  1731                           
  1732                           ;prog.c: 703: getTemp_flags.Error = 0;
  1733  0743  12CB               	bcf	_getTemp_flags+3,5
  1734                           
  1735                           ;prog.c: 705: getTemp_flags.ActiveProcess = 1;
  1736  0744  164B               	bsf	_getTemp_flags+3,4
  1737  0745  0008               	return
  1738  0746                     __end_of_Run_getTemp:	
  1739                           
  1740                           	psect	text5
  1741  0783                     __ptext5:	
  1742 ;; *************** function _Reset_powerOnInterval *****************
  1743 ;; Defined at:
  1744 ;;		line 79 in file "prog.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;		None
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;		None
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      void 
  1751 ;; Registers used:
  1752 ;;		wreg
  1753 ;; Tracked objects:
  1754 ;;		On entry : 300/0
  1755 ;;		On exit  : 300/100
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1758 ;;      Params:         0       0       0       0
  1759 ;;      Locals:         0       0       0       0
  1760 ;;      Temps:          0       0       0       0
  1761 ;;      Totals:         0       0       0       0
  1762 ;;Total ram usage:        0 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    3
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_main
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           
  1773                           ;psect for function _Reset_powerOnInterval
  1774  0783                     _Reset_powerOnInterval:	
  1775                           
  1776                           ;prog.c: 80: powerOnInterval = 700;
  1777                           
  1778                           ;incstack = 0
  1779                           ; Regs used in _Reset_powerOnInterval: [wreg]
  1780  0783  30BC               	movlw	188
  1781  0784  1683               	bsf	3,5	;RP0=1, select bank1
  1782  0785  00D5               	movwf	_powerOnInterval^(0+128)
  1783  0786  3002               	movlw	2
  1784  0787  00D6               	movwf	(_powerOnInterval^(0+128)+1)
  1785  0788  0008               	return
  1786  0789                     __end_of_Reset_powerOnInterval:	
  1787                           
  1788                           	psect	text6
  1789  03C2                     __ptext6:	
  1790 ;; *************** function _FindCell *****************
  1791 ;; Defined at:
  1792 ;;		line 412 in file "prog.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  addressStart    1    wreg     unsigned char 
  1795 ;;  previous        1   18[BANK0 ] unsigned char 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  addressStart    1   29[BANK0 ] unsigned char 
  1798 ;;  i               1   30[BANK0 ] unsigned char 
  1799 ;;  CellsData       8   19[BANK0 ] unsigned char [8]
  1800 ;;  CellIsEmpty     1   28[BANK0 ] unsigned char 
  1801 ;;  CRC             1    0        unsigned char 
  1802 ;;  address         1   31[BANK0 ] unsigned char 
  1803 ;;  addressNew      1   27[BANK0 ] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      unsigned char 
  1806 ;; Registers used:
  1807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 300/0
  1810 ;;		On exit  : B00/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1813 ;;      Params:         0       1       0       0
  1814 ;;      Locals:         0      13       0       0
  1815 ;;      Temps:          0       0       0       0
  1816 ;;      Totals:         0      14       0       0
  1817 ;;Total ram usage:       14 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    5
  1820 ;; This function calls:
  1821 ;;		_FillArrayFromEEPROM
  1822 ;;		_calc_crc
  1823 ;;		_waitInterrupt
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           
  1830                           ;psect for function _FindCell
  1831  03C2                     _FindCell:	
  1832                           
  1833                           ;incstack = 0
  1834                           ; Regs used in _FindCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1835                           ;FindCell@addressStart stored from wreg
  1836  03C2  00BD               	movwf	FindCell@addressStart
  1837                           
  1838                           ;prog.c: 413: if (addressStart == ((sizeof(DS_Address)) * 16)) {
  1839  03C3  3A80               	xorlw	128
  1840  03C4  1D03               	btfss	3,2
  1841  03C5  2BCD               	goto	l260
  1842                           
  1843                           ;prog.c: 414: previous ? addressStart = 0 : addressStart = (((sizeof(DS_Address)) * 16) 
      +                          - (sizeof(DS_Address)));
  1844  03C6  0832               	movf	FindCell@previous,w
  1845  03C7  1903               	btfsc	3,2
  1846  03C8  2BCB               	goto	l3742
  1847  03C9  01BD               	clrf	FindCell@addressStart
  1848  03CA  2BCD               	goto	l260
  1849  03CB                     l3742:	
  1850  03CB  3078               	movlw	120
  1851  03CC  00BD               	movwf	FindCell@addressStart
  1852  03CD                     l260:	
  1853                           
  1854                           ;prog.c: 415: }
  1855                           ;prog.c: 416: unsigned char address = addressStart;
  1856  03CD  083D               	movf	FindCell@addressStart,w
  1857  03CE  00BF               	movwf	FindCell@address
  1858                           
  1859                           ;prog.c: 417: unsigned char addressNew = ((sizeof(DS_Address)) * 16);
  1860  03CF  3080               	movlw	128
  1861  03D0  00BB               	movwf	FindCell@addressNew
  1862  03D1                     l3744:	
  1863                           
  1864                           ;prog.c: 420: if (!previous) {
  1865  03D1  0832               	movf	FindCell@previous,w
  1866  03D2  1D03               	btfss	3,2
  1867  03D3  2BDD               	goto	l3752
  1868                           
  1869                           ;prog.c: 421: address == (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address))) ? address 
      +                          = 0 : address += (sizeof(DS_Address));
  1870  03D4  3078               	movlw	120
  1871  03D5  063F               	xorwf	FindCell@address,w
  1872  03D6  1D03               	btfss	3,2
  1873  03D7  2BDA               	goto	l3750
  1874  03D8  01BF               	clrf	FindCell@address
  1875  03D9  2BE5               	goto	l3758
  1876  03DA                     l3750:	
  1877  03DA  3008               	movlw	8
  1878  03DB  07BF               	addwf	FindCell@address,f
  1879  03DC  2BE5               	goto	l3758
  1880  03DD                     l3752:	
  1881                           
  1882                           ;prog.c: 423: address == 0 ? address = (((sizeof(DS_Address)) * 16) - (sizeof(DS_Address
      +                          ))) : address -= (sizeof(DS_Address));
  1883  03DD  083F               	movf	FindCell@address,w
  1884  03DE  1D03               	btfss	3,2
  1885  03DF  2BE3               	goto	l3756
  1886  03E0  3078               	movlw	120
  1887  03E1  00BF               	movwf	FindCell@address
  1888  03E2  2BE5               	goto	l3758
  1889  03E3                     l3756:	
  1890  03E3  3008               	movlw	8
  1891  03E4  02BF               	subwf	FindCell@address,f
  1892  03E5                     l3758:	
  1893                           
  1894                           ;prog.c: 424: }
  1895                           ;prog.c: 426: unsigned char CellsData [(sizeof(DS_Address))];
  1896                           ;prog.c: 427: waitInterrupt();
  1897  03E5  2789               	fcall	_waitInterrupt
  1898                           
  1899                           ;prog.c: 428: FillArrayFromEEPROM(CellsData, address, (sizeof(DS_Address)));
  1900  03E6  083F               	movf	FindCell@address,w
  1901  03E7  00AD               	movwf	FillArrayFromEEPROM@address_start
  1902  03E8  3008               	movlw	8
  1903  03E9  00AE               	movwf	FillArrayFromEEPROM@quantity
  1904  03EA  3033               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  1905  03EB  2726               	fcall	_FillArrayFromEEPROM
  1906                           
  1907                           ;prog.c: 429: unsigned char CRC = calc_crc(CellsData, 7);
  1908  03EC  3007               	movlw	7
  1909  03ED  00AA               	movwf	calc_crc@len
  1910  03EE  3033               	movlw	(low (FindCell@CellsData| 0))& (0+255)
  1911  03EF  2625               	fcall	_calc_crc
  1912                           
  1913                           ;prog.c: 430: unsigned char CellIsEmpty = 1;
  1914  03F0  01BC               	clrf	FindCell@CellIsEmpty
  1915  03F1  0ABC               	incf	FindCell@CellIsEmpty,f
  1916                           
  1917                           ;prog.c: 431: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  1918  03F2  01BE               	clrf	FindCell@i
  1919  03F3                     l3772:	
  1920                           
  1921                           ;prog.c: 432: if (CellsData[i] != 0xFF) {
  1922  03F3  083E               	movf	FindCell@i,w
  1923  03F4  3E33               	addlw	(low (FindCell@CellsData| 0))& (0+255)
  1924  03F5  0084               	movwf	4
  1925  03F6  1383               	bcf	3,7	;select IRP bank0
  1926  03F7  0F00               	incfsz	0,w
  1927                           
  1928                           ;prog.c: 433: CellIsEmpty = 0;
  1929  03F8  01BC               	clrf	FindCell@CellIsEmpty
  1930  03F9  3008               	movlw	8
  1931  03FA  0ABE               	incf	FindCell@i,f
  1932  03FB  023E               	subwf	FindCell@i,w
  1933  03FC  1C03               	skipc
  1934  03FD  2BF3               	goto	l3772
  1935                           
  1936                           ;prog.c: 434: }
  1937                           ;prog.c: 435: }
  1938                           ;prog.c: 437: if (CellIsEmpty == 0) {
  1939  03FE  083C               	movf	FindCell@CellIsEmpty,w
  1940  03FF  1D03               	btfss	3,2
  1941  0400  2C04               	goto	l3784
  1942                           
  1943                           ;prog.c: 438: addressNew = address;
  1944  0401  083F               	movf	FindCell@address,w
  1945  0402  00BB               	movwf	FindCell@addressNew
  1946                           
  1947                           ;prog.c: 439: break;
  1948  0403  2C08               	goto	l3786
  1949  0404                     l3784:	
  1950                           
  1951                           ;prog.c: 440: }
  1952                           ;prog.c: 441: } while (address != addressStart);
  1953  0404  083F               	movf	FindCell@address,w
  1954  0405  063D               	xorwf	FindCell@addressStart,w
  1955  0406  1D03               	skipz
  1956  0407  2BD1               	goto	l3744
  1957  0408                     l3786:	
  1958                           
  1959                           ;prog.c: 442: return addressNew;
  1960  0408  083B               	movf	FindCell@addressNew,w
  1961  0409  0008               	return
  1962  040A                     __end_of_FindCell:	
  1963                           
  1964                           	psect	text7
  1965  0625                     __ptext7:	
  1966 ;; *************** function _calc_crc *****************
  1967 ;; Defined at:
  1968 ;;		line 238 in file "prog.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  mas             1    wreg     PTR unsigned char 
  1971 ;;		 -> FindCell@CellsData(8), 
  1972 ;;  len             1   10[BANK0 ] unsigned char 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  mas             1   13[BANK0 ] PTR unsigned char 
  1975 ;;		 -> FindCell@CellsData(8), 
  1976 ;;  fb              1   12[BANK0 ] unsigned char 
  1977 ;;  i               1   14[BANK0 ] unsigned char 
  1978 ;;  dat             1   11[BANK0 ] unsigned char 
  1979 ;;  crc             1   15[BANK0 ] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      unsigned char 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1984 ;; Tracked objects:
  1985 ;;		On entry : 300/0
  1986 ;;		On exit  : 300/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1989 ;;      Params:         0       1       0       0
  1990 ;;      Locals:         0       5       0       0
  1991 ;;      Temps:          0       0       0       0
  1992 ;;      Totals:         0       6       0       0
  1993 ;;Total ram usage:        6 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    3
  1996 ;; This function calls:
  1997 ;;		Nothing
  1998 ;; This function is called by:
  1999 ;;		_FindCell
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           
  2004                           ;psect for function _calc_crc
  2005  0625                     _calc_crc:	
  2006                           
  2007                           ;incstack = 0
  2008                           ; Regs used in _calc_crc: [wreg-fsr0h+status,2+status,0]
  2009                           ;calc_crc@mas stored from wreg
  2010  0625  00AD               	movwf	calc_crc@mas
  2011                           
  2012                           ;prog.c: 239: unsigned char crc = 0;
  2013  0626  01AF               	clrf	calc_crc@crc
  2014                           
  2015                           ;prog.c: 240: while (len--) {
  2016  0627  2E42               	goto	l2548
  2017  0628                     l2528:	
  2018                           
  2019                           ;prog.c: 241: unsigned char dat = *mas++;
  2020  0628  082D               	movf	calc_crc@mas,w
  2021  0629  0084               	movwf	4
  2022  062A  1383               	bcf	3,7	;select IRP bank0
  2023  062B  0800               	movf	0,w
  2024  062C  00AB               	movwf	calc_crc@dat
  2025  062D  0AAD               	incf	calc_crc@mas,f
  2026                           
  2027                           ;prog.c: 242: for (unsigned char i = 0; i < 8; i++) {
  2028  062E  01AE               	clrf	calc_crc@i
  2029  062F                     l2538:	
  2030                           
  2031                           ;prog.c: 243: unsigned char fb = (crc ^ dat) & 1;
  2032  062F  082F               	movf	calc_crc@crc,w
  2033  0630  062B               	xorwf	calc_crc@dat,w
  2034  0631  00AC               	movwf	calc_crc@fb
  2035  0632  3001               	movlw	1
  2036  0633  05AC               	andwf	calc_crc@fb,f
  2037                           
  2038                           ;prog.c: 244: crc >>= 1;
  2039  0634  1003               	clrc
  2040  0635  0CAF               	rrf	calc_crc@crc,f
  2041                           
  2042                           ;prog.c: 245: dat >>= 1;
  2043  0636  1003               	clrc
  2044  0637  0CAB               	rrf	calc_crc@dat,f
  2045                           
  2046                           ;prog.c: 246: if (fb) crc ^= 0x8c;
  2047  0638  082C               	movf	calc_crc@fb,w
  2048  0639  1903               	btfsc	3,2
  2049  063A  2E3D               	goto	l2546
  2050  063B  308C               	movlw	140
  2051  063C  06AF               	xorwf	calc_crc@crc,f
  2052  063D                     l2546:	
  2053  063D  3008               	movlw	8
  2054  063E  0AAE               	incf	calc_crc@i,f
  2055  063F  022E               	subwf	calc_crc@i,w
  2056  0640  1C03               	skipc
  2057  0641  2E2F               	goto	l2538
  2058  0642                     l2548:	
  2059  0642  03AA               	decf	calc_crc@len,f
  2060  0643  0F2A               	incfsz	calc_crc@len,w
  2061  0644  2E28               	goto	l2528
  2062                           
  2063                           ;prog.c: 247: }
  2064                           ;prog.c: 248: }
  2065                           ;prog.c: 249: return crc;
  2066  0645  082F               	movf	calc_crc@crc,w
  2067  0646  0008               	return
  2068  0647                     __end_of_calc_crc:	
  2069                           
  2070                           	psect	text8
  2071  02A1                     __ptext8:	
  2072 ;; *************** function _EditAddressMemory *****************
  2073 ;; Defined at:
  2074 ;;		line 620 in file "prog.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  i               1   24[BANK1 ] unsigned char 
  2079 ;;  i               1   25[BANK1 ] unsigned char 
  2080 ;;  CellsData       8    8[BANK1 ] unsigned char [8]
  2081 ;;  CellsData       8   16[BANK1 ] unsigned char [8]
  2082 ;;  CellsData       8    0[BANK1 ] unsigned char [8]
  2083 ;;  cell            1   27[BANK1 ] unsigned char 
  2084 ;;  CellIsEmpty     1   26[BANK1 ] unsigned char 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      void 
  2087 ;; Registers used:
  2088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 300/0
  2091 ;;		On exit  : B00/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2094 ;;      Params:         0       0       0       0
  2095 ;;      Locals:         0       0      28       0
  2096 ;;      Temps:          0       1       0       0
  2097 ;;      Totals:         0       1      28       0
  2098 ;;Total ram usage:       29 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    6
  2101 ;; This function calls:
  2102 ;;		_CellToInd
  2103 ;;		_INIT
  2104 ;;		_RX
  2105 ;;		_ReadCell
  2106 ;;		_TX
  2107 ;;		_WriteArrayToEEPROM
  2108 ;;		_clrInd
  2109 ;;		_refreshInd
  2110 ;;		_setPoint
  2111 ;;		_waitInterrupt
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _EditAddressMemory
  2119  02A1                     _EditAddressMemory:	
  2120                           
  2121                           ;prog.c: 621: PowerBlocked++;
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in _EditAddressMemory: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2125  02A1  0AD3               	incf	_PowerBlocked,f
  2126                           
  2127                           ;prog.c: 623: clrInd();
  2128  02A2  2764               	fcall	_clrInd
  2129  02A3  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2130                           
  2131                           ;prog.c: 625: unsigned char cell = 0;
  2132  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  2133  02A5  01BB               	clrf	EditAddressMemory@cell^(0+128)
  2134                           
  2135                           ;prog.c: 626: unsigned char CellIsEmpty = 1;
  2136  02A6  01BA               	clrf	EditAddressMemory@CellIsEmpty^(0+128)
  2137  02A7  0ABA               	incf	EditAddressMemory@CellIsEmpty^(0+128),f
  2138                           
  2139                           ;prog.c: 627: unsigned char CellsData [(sizeof(DS_Address))];
  2140                           ;prog.c: 629: ReadCell(cell, CellsData, &CellIsEmpty);
  2141  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  2142  02A9  00B2               	movwf	ReadCell@CellsData
  2143  02AA  30BA               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2144  02AB  00B3               	movwf	ReadCell@CellIsEmpty
  2145  02AC  3000               	movlw	0
  2146  02AD  25DD               	fcall	_ReadCell
  2147                           
  2148                           ;prog.c: 630: CellToInd(cell);
  2149  02AE  3000               	movlw	0
  2150  02AF  2531               	fcall	_CellToInd
  2151  02B0                     l3858:	
  2152                           
  2153                           ;prog.c: 633: if (KeyCode == 31) {
  2154  02B0  301F               	movlw	31
  2155  02B1  0652               	xorwf	_KeyCode,w	;volatile
  2156  02B2  1D03               	btfss	3,2
  2157  02B3  2AC3               	goto	l3872
  2158                           
  2159                           ;prog.c: 634: KeyCode = 0;
  2160  02B4  01D2               	clrf	_KeyCode	;volatile
  2161                           
  2162                           ;prog.c: 635: if (cell > 0) {
  2163  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2164  02B6  083B               	movf	EditAddressMemory@cell^(0+128),w
  2165  02B7  1903               	btfsc	3,2
  2166  02B8  2ABB               	goto	l3866
  2167                           
  2168                           ;prog.c: 636: cell--;
  2169  02B9  03BB               	decf	EditAddressMemory@cell^(0+128),f
  2170                           
  2171                           ;prog.c: 637: } else {
  2172  02BA  2ABD               	goto	l3868
  2173  02BB                     l3866:	
  2174                           
  2175                           ;prog.c: 638: cell = 16 - 1;
  2176  02BB  300F               	movlw	15
  2177  02BC  00BB               	movwf	EditAddressMemory@cell^(0+128)
  2178  02BD                     l3868:	
  2179                           
  2180                           ;prog.c: 639: }
  2181                           ;prog.c: 640: ReadCell(cell, CellsData, &CellIsEmpty);
  2182  02BD  2346               	fcall	PL4	;call to abstracted procedure
  2183  02BE  25DD               	fcall	_ReadCell
  2184                           
  2185                           ;prog.c: 641: CellToInd(cell);
  2186  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2187  02C0  083B               	movf	EditAddressMemory@cell^(0+128),w
  2188  02C1  2531               	fcall	_CellToInd
  2189                           
  2190                           ;prog.c: 642: } else if (KeyCode == 32) {
  2191  02C2  2B29               	goto	l362
  2192  02C3                     l3872:	
  2193  02C3  3020               	movlw	32
  2194  02C4  0652               	xorwf	_KeyCode,w	;volatile
  2195  02C5  1D03               	btfss	3,2
  2196  02C6  2AD6               	goto	l3886
  2197                           
  2198                           ;prog.c: 643: KeyCode = 0;
  2199  02C7  01D2               	clrf	_KeyCode	;volatile
  2200                           
  2201                           ;prog.c: 644: if (cell < 16 - 1) {
  2202  02C8  300F               	movlw	15
  2203  02C9  1683               	bsf	3,5	;RP0=1, select bank1
  2204  02CA  023B               	subwf	EditAddressMemory@cell^(0+128),w
  2205  02CB  1803               	skipnc
  2206  02CC  2ACF               	goto	l3880
  2207                           
  2208                           ;prog.c: 645: cell++;
  2209  02CD  0ABB               	incf	EditAddressMemory@cell^(0+128),f
  2210                           
  2211                           ;prog.c: 646: } else {
  2212  02CE  2AD0               	goto	l3882
  2213  02CF                     l3880:	
  2214                           
  2215                           ;prog.c: 647: cell = 0;
  2216  02CF  01BB               	clrf	EditAddressMemory@cell^(0+128)
  2217  02D0                     l3882:	
  2218                           
  2219                           ;prog.c: 648: }
  2220                           ;prog.c: 649: ReadCell(cell, CellsData, &CellIsEmpty);
  2221  02D0  2346               	fcall	PL4	;call to abstracted procedure
  2222  02D1  25DD               	fcall	_ReadCell
  2223                           
  2224                           ;prog.c: 650: CellToInd(cell);
  2225  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  2226  02D3  083B               	movf	EditAddressMemory@cell^(0+128),w
  2227  02D4  2531               	fcall	_CellToInd
  2228                           
  2229                           ;prog.c: 651: } else if (KeyCode == 34) {
  2230  02D5  2B29               	goto	l362
  2231  02D6                     l3886:	
  2232  02D6  3022               	movlw	34
  2233  02D7  0652               	xorwf	_KeyCode,w	;volatile
  2234  02D8  1D03               	btfss	3,2
  2235  02D9  2ADE               	goto	l3896
  2236                           
  2237                           ;prog.c: 652: KeyCode = 0;
  2238  02DA  01D2               	clrf	_KeyCode	;volatile
  2239                           
  2240                           ;prog.c: 653: clrInd();
  2241  02DB  2764               	fcall	_clrInd
  2242                           
  2243                           ;prog.c: 654: refreshInd();
  2244  02DC  2714               	fcall	_refreshInd
  2245                           
  2246                           ;prog.c: 655: break;
  2247  02DD  2B36               	goto	l3954
  2248  02DE                     l3896:	
  2249  02DE  3023               	movlw	35
  2250  02DF  0652               	xorwf	_KeyCode,w	;volatile
  2251  02E0  1D03               	btfss	3,2
  2252  02E1  2B06               	goto	l3932
  2253  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  2254  02E3  0B3A               	decfsz	EditAddressMemory@CellIsEmpty^(0+128),w
  2255  02E4  2B06               	goto	l3932
  2256                           
  2257                           ;prog.c: 657: KeyCode = 0;
  2258  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2259  02E6  01D2               	clrf	_KeyCode	;volatile
  2260                           
  2261                           ;prog.c: 658: waitInterrupt();
  2262  02E7  2789               	fcall	_waitInterrupt
  2263                           
  2264                           ;prog.c: 659: if (INIT()) {
  2265  02E8  2502               	fcall	_INIT
  2266  02E9  1C03               	btfss	3,0
  2267  02EA  2B29               	goto	l362
  2268                           
  2269                           ;prog.c: 660: waitInterrupt();
  2270  02EB  2789               	fcall	_waitInterrupt
  2271                           
  2272                           ;prog.c: 661: TX(0x33);
  2273  02EC  3033               	movlw	51
  2274  02ED  255F               	fcall	_TX
  2275                           
  2276                           ;prog.c: 662: waitInterrupt();
  2277  02EE  2789               	fcall	_waitInterrupt
  2278                           
  2279                           ;prog.c: 663: unsigned char CellsData [(sizeof(DS_Address))];
  2280                           ;prog.c: 664: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2281  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  2282  02F0  01B8               	clrf	EditAddressMemory@i^(0+128)
  2283  02F1                     l3918:	
  2284                           
  2285                           ;prog.c: 665: waitInterrupt();
  2286  02F1  2789               	fcall	_waitInterrupt
  2287                           
  2288                           ;prog.c: 666: CellsData[i] = RX();
  2289  02F2  1683               	bsf	3,5	;RP0=1, select bank1
  2290  02F3  0838               	movf	EditAddressMemory@i^(0+128),w
  2291  02F4  3EA8               	addlw	(low (EditAddressMemory@CellsData_253| 0))& (0+255)
  2292  02F5  0084               	movwf	4
  2293  02F6  2647               	fcall	_RX
  2294  02F7  1383               	bcf	3,7	;select IRP bank1
  2295  02F8  0080               	movwf	0
  2296  02F9  3008               	movlw	8
  2297  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  2298  02FB  0AB8               	incf	EditAddressMemory@i^(0+128),f
  2299  02FC  0238               	subwf	EditAddressMemory@i^(0+128),w
  2300  02FD  1C03               	skipc
  2301  02FE  2AF1               	goto	l3918
  2302                           
  2303                           ;prog.c: 667: }
  2304                           ;prog.c: 668: waitInterrupt();
  2305  02FF  2789               	fcall	_waitInterrupt
  2306                           
  2307                           ;prog.c: 669: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2308  0300  2338               	fcall	PL2	;call to abstracted procedure
  2309  0301  30A8               	movlw	(low (EditAddressMemory@CellsData_253| 0))& (0+255)
  2310  0302  26EF               	fcall	_WriteArrayToEEPROM
  2311                           
  2312                           ;prog.c: 670: waitInterrupt();
  2313  0303  2789               	fcall	_waitInterrupt
  2314                           
  2315                           ;prog.c: 671: ReadCell(cell, CellsData, &CellIsEmpty);
  2316  0304  30A8               	movlw	(low (EditAddressMemory@CellsData_253| 0))& (0+255)
  2317  0305  2B23               	goto	L8
  2318  0306                     l3932:	
  2319  0306  3024               	movlw	36
  2320  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2321  0308  0652               	xorwf	_KeyCode,w	;volatile
  2322  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2323  030A  1D03               	btfss	3,2
  2324  030B  2B2A               	goto	L9
  2325  030C  083A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2326  030D  1D03               	btfss	3,2
  2327  030E  2B29               	goto	l362
  2328                           
  2329                           ;prog.c: 674: KeyCode = 0;
  2330  030F  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0310  01D2               	clrf	_KeyCode	;volatile
  2332                           
  2333                           ;prog.c: 675: unsigned char CellsData [(sizeof(DS_Address))];
  2334                           ;prog.c: 676: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2335  0311  1683               	bsf	3,5	;RP0=1, select bank1
  2336  0312  01B9               	clrf	EditAddressMemory@i_257^(0+128)
  2337  0313                     l3942:	
  2338                           
  2339                           ;prog.c: 677: CellsData[i] = 0xFF;
  2340  0313  0839               	movf	EditAddressMemory@i_257^(0+128),w
  2341  0314  3EB0               	addlw	(low (EditAddressMemory@CellsData_256| 0))& (0+255)
  2342  0315  0084               	movwf	4
  2343  0316  30FF               	movlw	255
  2344  0317  0080               	movwf	0
  2345  0318  3008               	movlw	8
  2346  0319  0AB9               	incf	EditAddressMemory@i_257^(0+128),f
  2347  031A  0239               	subwf	EditAddressMemory@i_257^(0+128),w
  2348  031B  1C03               	skipc
  2349  031C  2B13               	goto	l3942
  2350                           
  2351                           ;prog.c: 678: }
  2352                           ;prog.c: 679: waitInterrupt();
  2353  031D  2789               	fcall	_waitInterrupt
  2354                           
  2355                           ;prog.c: 680: WriteArrayToEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Addr
      +                          ess)));
  2356  031E  2338               	fcall	PL2	;call to abstracted procedure
  2357  031F  30B0               	movlw	(low (EditAddressMemory@CellsData_256| 0))& (0+255)
  2358  0320  26EF               	fcall	_WriteArrayToEEPROM
  2359                           
  2360                           ;prog.c: 681: waitInterrupt();
  2361  0321  2789               	fcall	_waitInterrupt
  2362                           
  2363                           ;prog.c: 682: ReadCell(cell, CellsData, &CellIsEmpty);
  2364  0322  30B0               	movlw	(low (EditAddressMemory@CellsData_256| 0))& (0+255)
  2365  0323                     L8:	
  2366  0323  00B2               	movwf	ReadCell@CellsData
  2367  0324  30BA               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2368  0325  00B3               	movwf	ReadCell@CellIsEmpty
  2369  0326  1683               	bsf	3,5	;RP0=1, select bank1
  2370  0327  083B               	movf	EditAddressMemory@cell^(0+128),w
  2371  0328  25DD               	fcall	_ReadCell
  2372  0329                     l362:	
  2373                           
  2374                           ;prog.c: 683: }
  2375                           ;prog.c: 686: setPoint(1, !CellIsEmpty);
  2376  0329  1683               	bsf	3,5	;RP0=1, select bank1
  2377  032A                     L9:	
  2378  032A  083A               	movf	EditAddressMemory@CellIsEmpty^(0+128),w
  2379  032B  1D03               	btfss	3,2
  2380  032C  2B2F               	goto	u3790
  2381  032D  3001               	movlw	1
  2382  032E  2B30               	goto	u3800
  2383  032F                     u3790:	
  2384  032F  3000               	movlw	0
  2385  0330                     u3800:	
  2386  0330  1283               	bcf	3,5	;RP0=0, select bank0
  2387  0331  00AA               	movwf	setPoint@value
  2388  0332  3001               	movlw	1
  2389  0333  2746               	fcall	_setPoint
  2390                           
  2391                           ;prog.c: 688: refreshInd();
  2392  0334  2714               	fcall	_refreshInd
  2393  0335  2AB0               	goto	l3858
  2394  0336                     l3954:	
  2395                           
  2396                           ;prog.c: 689: }
  2397                           ;prog.c: 690: PowerBlocked--;
  2398  0336  03D3               	decf	_PowerBlocked,f
  2399  0337  0008               	return
  2400  0338                     __end_of_EditAddressMemory:	
  2401  0338                     PL2:	
  2402  0338  1683               	bsf	3,5	;RP0=1, select bank1
  2403  0339  083B               	movf	EditAddressMemory@cell^(0+128),w
  2404  033A  1283               	bcf	3,5	;RP0=0, select bank0
  2405  033B  00B8               	movwf	??_EditAddressMemory
  2406  033C  1003               	clrc
  2407  033D  0DB8               	rlf	??_EditAddressMemory,f
  2408  033E  1003               	clrc
  2409  033F  0DB8               	rlf	??_EditAddressMemory,f
  2410  0340  1003               	clrc
  2411  0341  0D38               	rlf	??_EditAddressMemory,w
  2412  0342  00AD               	movwf	WriteArrayToEEPROM@address_start
  2413  0343  3008               	movlw	8
  2414  0344  00AE               	movwf	WriteArrayToEEPROM@quantity
  2415  0345  0008               	return
  2416  0346                     __end_ofPL2:	
  2417  0346                     PL4:	
  2418  0346  30A0               	movlw	(low (EditAddressMemory@CellsData| 0))& (0+255)
  2419  0347  1283               	bcf	3,5	;RP0=0, select bank0
  2420  0348  00B2               	movwf	ReadCell@CellsData
  2421  0349  30BA               	movlw	(low (EditAddressMemory@CellIsEmpty| 0))& (0+255)
  2422  034A  00B3               	movwf	ReadCell@CellIsEmpty
  2423  034B  1683               	bsf	3,5	;RP0=1, select bank1
  2424  034C  083B               	movf	EditAddressMemory@cell^(0+128),w
  2425  034D  0008               	return
  2426  034E                     __end_ofPL4:	
  2427                           
  2428                           	psect	text9
  2429  0746                     __ptext9:	
  2430 ;; *************** function _setPoint *****************
  2431 ;; Defined at:
  2432 ;;		line 91 in file "prog.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  dignum          1    wreg     unsigned char 
  2435 ;;  value           1   10[BANK0 ] unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  dignum          1   11[BANK0 ] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2442 ;; Tracked objects:
  2443 ;;		On entry : 300/0
  2444 ;;		On exit  : B00/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2447 ;;      Params:         0       1       0       0
  2448 ;;      Locals:         0       1       0       0
  2449 ;;      Temps:          0       0       0       0
  2450 ;;      Totals:         0       2       0       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    3
  2454 ;; This function calls:
  2455 ;;		Nothing
  2456 ;; This function is called by:
  2457 ;;		_indData
  2458 ;;		_EditAddressMemory
  2459 ;;		_main
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function _setPoint
  2465  0746                     _setPoint:	
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in _setPoint: [wreg-fsr0h+status,2+status,0]
  2469                           ;setPoint@dignum stored from wreg
  2470  0746  00AB               	movwf	setPoint@dignum
  2471                           
  2472                           ;prog.c: 92: value == 1 ? digits_0[dignum - 1] |= 0b01000000 : digits_0[dignum - 1] &= 0
      +                          b10111111;
  2473  0747  0B2A               	decfsz	setPoint@value,w
  2474  0748  2F4F               	goto	l3636
  2475  0749  082B               	movf	setPoint@dignum,w
  2476  074A  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2477  074B  0084               	movwf	4
  2478  074C  1383               	bcf	3,7	;select IRP bank1
  2479  074D  1700               	bsf	0,6
  2480  074E  0008               	return
  2481  074F                     l3636:	
  2482  074F  082B               	movf	setPoint@dignum,w
  2483  0750  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  2484  0751  0084               	movwf	4
  2485  0752  1383               	bcf	3,7	;select IRP bank1
  2486  0753  1300               	bcf	0,6
  2487  0754  0008               	return
  2488  0755                     __end_of_setPoint:	
  2489                           
  2490                           	psect	text10
  2491  06EF                     __ptext10:	
  2492 ;; *************** function _WriteArrayToEEPROM *****************
  2493 ;; Defined at:
  2494 ;;		line 181 in file "prog.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  container       1    wreg     PTR unsigned char 
  2497 ;;		 -> EditAddressMemory@CellsData_256(8), EditAddressMemory@CellsData_253(8), 
  2498 ;;  address_star    1   13[BANK0 ] unsigned char 
  2499 ;;  quantity        1   14[BANK0 ] unsigned char 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  container       1   16[BANK0 ] PTR unsigned char 
  2502 ;;		 -> EditAddressMemory@CellsData_256(8), EditAddressMemory@CellsData_253(8), 
  2503 ;;  i               1   17[BANK0 ] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 300/0
  2510 ;;		On exit  : 300/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       2       0       0
  2514 ;;      Locals:         0       2       0       0
  2515 ;;      Temps:          0       1       0       0
  2516 ;;      Totals:         0       5       0       0
  2517 ;;Total ram usage:        5 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    4
  2520 ;; This function calls:
  2521 ;;		_EEWR
  2522 ;;		_waitInterrupt
  2523 ;; This function is called by:
  2524 ;;		_EditAddressMemory
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           
  2529                           ;psect for function _WriteArrayToEEPROM
  2530  06EF                     _WriteArrayToEEPROM:	
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in _WriteArrayToEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2534                           ;WriteArrayToEEPROM@container stored from wreg
  2535  06EF  00B0               	movwf	WriteArrayToEEPROM@container
  2536                           
  2537                           ;prog.c: 182: for (unsigned char i = 0; i < quantity; i++) {
  2538  06F0  01B1               	clrf	WriteArrayToEEPROM@i
  2539  06F1                     l3646:	
  2540  06F1  082E               	movf	WriteArrayToEEPROM@quantity,w
  2541  06F2  0231               	subwf	WriteArrayToEEPROM@i,w
  2542  06F3  1803               	btfsc	3,0
  2543  06F4  0008               	return
  2544                           
  2545                           ;prog.c: 183: waitInterrupt();
  2546  06F5  2789               	fcall	_waitInterrupt
  2547                           
  2548                           ;prog.c: 184: EEWR(address_start + i, container[i]);
  2549  06F6  0831               	movf	WriteArrayToEEPROM@i,w
  2550  06F7  0730               	addwf	WriteArrayToEEPROM@container,w
  2551  06F8  00AF               	movwf	??_WriteArrayToEEPROM
  2552  06F9  0084               	movwf	4
  2553  06FA  1383               	bcf	3,7	;select IRP bank0
  2554  06FB  0800               	movf	0,w
  2555  06FC  00AA               	movwf	EEWR@data
  2556  06FD  0831               	movf	WriteArrayToEEPROM@i,w
  2557  06FE  072D               	addwf	WriteArrayToEEPROM@address_start,w
  2558  06FF  26D7               	fcall	_EEWR
  2559  0700  0AB1               	incf	WriteArrayToEEPROM@i,f
  2560  0701  2EF1               	goto	l3646
  2561  0702                     __end_of_WriteArrayToEEPROM:	
  2562                           
  2563                           	psect	text11
  2564  0789                     __ptext11:	
  2565 ;; *************** function _waitInterrupt *****************
  2566 ;; Defined at:
  2567 ;;		line 74 in file "prog.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;		None
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;		None
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      void 
  2574 ;; Registers used:
  2575 ;;		None
  2576 ;; Tracked objects:
  2577 ;;		On entry : 200/100
  2578 ;;		On exit  : 300/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2581 ;;      Params:         0       0       0       0
  2582 ;;      Locals:         0       0       0       0
  2583 ;;      Temps:          0       0       0       0
  2584 ;;      Totals:         0       0       0       0
  2585 ;;Total ram usage:        0 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    3
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_WriteArrayToEEPROM
  2592 ;;		_FindCell
  2593 ;;		_EditAddressMemory
  2594 ;;		_main
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _waitInterrupt
  2600  0789                     _waitInterrupt:	
  2601                           
  2602                           ;prog.c: 75: endInterrupt = 0;
  2603                           
  2604                           ;incstack = 0
  2605                           ; Regs used in _waitInterrupt: []
  2606  0789  1283               	bcf	3,5	;RP0=0, select bank0
  2607  078A  1159               	bcf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2608  078B                     l83:	
  2609                           ;prog.c: 76: while (!endInterrupt);
  2610                           
  2611  078B  1959               	btfsc	_endInterrupt/(0+8),_endInterrupt& (0+7)
  2612  078C  0008               	return
  2613  078D  2F8B               	goto	l83
  2614  078E                     __end_of_waitInterrupt:	
  2615                           
  2616                           	psect	text12
  2617  06D7                     __ptext12:	
  2618 ;; *************** function _EEWR *****************
  2619 ;; Defined at:
  2620 ;;		line 148 in file "prog.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  address         1    wreg     unsigned char 
  2623 ;;  data            1   10[BANK0 ] unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  address         1   11[BANK0 ] unsigned char 
  2626 ;;  INTCON_BUP      1   12[BANK0 ] volatile unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg
  2631 ;; Tracked objects:
  2632 ;;		On entry : B00/0
  2633 ;;		On exit  : B00/0
  2634 ;;		Unchanged: 800/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2636 ;;      Params:         0       1       0       0
  2637 ;;      Locals:         0       2       0       0
  2638 ;;      Temps:          0       0       0       0
  2639 ;;      Totals:         0       3       0       0
  2640 ;;Total ram usage:        3 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    3
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_WriteArrayToEEPROM
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _EEWR
  2652  06D7                     _EEWR:	
  2653                           
  2654                           ;incstack = 0
  2655                           ; Regs used in _EEWR: [wreg]
  2656                           ;EEWR@address stored from wreg
  2657  06D7  00AB               	movwf	EEWR@address
  2658                           
  2659                           ;prog.c: 149: volatile unsigned char INTCON_BUP = INTCON;
  2660  06D8  080B               	movf	11,w	;volatile
  2661  06D9  00AC               	movwf	EEWR@INTCON_BUP	;volatile
  2662                           
  2663                           ;prog.c: 150: INTCONbits.GIE = 0;
  2664  06DA  138B               	bcf	11,7	;volatile
  2665                           
  2666                           ;prog.c: 151: EEADR = address;
  2667  06DB  082B               	movf	EEWR@address,w
  2668  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  2669  06DD  009B               	movwf	27	;volatile
  2670                           
  2671                           ;prog.c: 152: EEDATA = data;
  2672  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2673  06DF  082A               	movf	EEWR@data,w
  2674  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  2675  06E1  009A               	movwf	26	;volatile
  2676                           
  2677                           ;prog.c: 153: EECON1bits.WREN = 1;
  2678  06E2  151C               	bsf	28,2	;volsfr
  2679                           
  2680                           ;prog.c: 154: EECON2 = 0x55;
  2681  06E3  3055               	movlw	85
  2682  06E4  009D               	movwf	29	;volsfr
  2683                           
  2684                           ;prog.c: 155: EECON2 = 0xAA;
  2685  06E5  30AA               	movlw	170
  2686  06E6  009D               	movwf	29	;volsfr
  2687                           
  2688                           ;prog.c: 156: EECON1bits.WR = 1;
  2689  06E7  149C               	bsf	28,1	;volsfr
  2690                           
  2691                           ;prog.c: 157: EECON1bits.WREN = 0;
  2692  06E8  111C               	bcf	28,2	;volsfr
  2693  06E9                     l156:	
  2694                           ;prog.c: 158: while (EECON1bits.WR == 1) {
  2695                           
  2696  06E9  189C               	btfsc	28,1	;volsfr
  2697  06EA  2EE9               	goto	l156
  2698                           
  2699                           ;prog.c: 159: }
  2700                           ;prog.c: 160: INTCON = INTCON_BUP;
  2701  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  2702  06EC  082C               	movf	EEWR@INTCON_BUP,w	;volatile
  2703  06ED  008B               	movwf	11	;volatile
  2704  06EE  0008               	return
  2705  06EF                     __end_of_EEWR:	
  2706                           
  2707                           	psect	text13
  2708  055F                     __ptext13:	
  2709 ;; *************** function _TX *****************
  2710 ;; Defined at:
  2711 ;;		line 204 in file "prog.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  cmd             1    wreg     unsigned char 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  cmd             1   11[BANK0 ] unsigned char 
  2716 ;;  i               1   13[BANK0 ] unsigned char 
  2717 ;;  temp            1   12[BANK0 ] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2, status,0
  2722 ;; Tracked objects:
  2723 ;;		On entry : 300/0
  2724 ;;		On exit  : 300/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2727 ;;      Params:         0       0       0       0
  2728 ;;      Locals:         0       3       0       0
  2729 ;;      Temps:          0       1       0       0
  2730 ;;      Totals:         0       4       0       0
  2731 ;;Total ram usage:        4 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    3
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_EditAddressMemory
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           
  2742                           ;psect for function _TX
  2743  055F                     _TX:	
  2744                           
  2745                           ;incstack = 0
  2746                           ; Regs used in _TX: [wreg+status,2+status,0]
  2747                           ;TX@cmd stored from wreg
  2748  055F  00AB               	movwf	TX@cmd
  2749                           
  2750                           ;prog.c: 206: unsigned char i = 0;
  2751  0560  01AD               	clrf	TX@i
  2752                           
  2753                           ;prog.c: 207: temp = cmd;
  2754  0561  00AC               	movwf	TX@temp
  2755                           
  2756                           ;prog.c: 208: for (i = 0; i < 8; i++) {
  2757  0562  01AD               	clrf	TX@i
  2758  0563                     l182:	
  2759                           
  2760                           ;prog.c: 209: if (temp & 0x01) {
  2761  0563  1C2C               	btfss	TX@temp,0
  2762  0564  2D73               	goto	l184
  2763                           
  2764                           ;prog.c: 210: TRISA3 = 0;
  2765  0565  1683               	bsf	3,5	;RP0=1, select bank1
  2766  0566  1185               	bcf	5,3	;volatile
  2767                           
  2768                           ;prog.c: 211: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2769  0567  2D68               	nop2	;2 cycle nop
  2770  0568  2D69               	nop2	;2 cycle nop
  2771  0569  0000               	nop
  2772                           
  2773                           ;prog.c: 212: TRISA3 = 1;
  2774  056A  1683               	bsf	3,5	;RP0=1, select bank1
  2775  056B  1303               	bcf	3,6	;RP1=0, select bank1
  2776  056C  1585               	bsf	5,3	;volatile
  2777                           
  2778                           ;prog.c: 213: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2779  056D  3017               	movlw	23
  2780  056E  1283               	bcf	3,5	;RP0=0, select bank0
  2781  056F  00AA               	movwf	??_TX
  2782  0570                     u4057:	
  2783  0570  0BAA               	decfsz	??_TX,f
  2784  0571  2D70               	goto	u4057
  2785                           
  2786                           ;prog.c: 214: } else {
  2787  0572  2D80               	goto	l3684
  2788  0573                     l184:	
  2789                           
  2790                           ;prog.c: 215: TRISA3 = 0;
  2791  0573  1683               	bsf	3,5	;RP0=1, select bank1
  2792  0574  1185               	bcf	5,3	;volatile
  2793                           
  2794                           ;prog.c: 216: _delay((unsigned long)((70)*(4000000/4000000.0)));
  2795  0575  3017               	movlw	23
  2796  0576  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0577  00AA               	movwf	??_TX
  2798  0578                     u4067:	
  2799  0578  0BAA               	decfsz	??_TX,f
  2800  0579  2D78               	goto	u4067
  2801                           
  2802                           ;prog.c: 217: TRISA3 = 1;
  2803  057A  1683               	bsf	3,5	;RP0=1, select bank1
  2804  057B  1303               	bcf	3,6	;RP1=0, select bank1
  2805  057C  1585               	bsf	5,3	;volatile
  2806                           
  2807                           ;prog.c: 218: _delay((unsigned long)((5)*(4000000/4000000.0)));
  2808  057D  2D7E               	nop2	;2 cycle nop
  2809  057E  2D7F               	nop2	;2 cycle nop
  2810  057F  0000               	nop
  2811  0580                     l3684:	
  2812  0580  3008               	movlw	8
  2813                           
  2814                           ;prog.c: 219: }
  2815                           ;prog.c: 220: temp >>= 1;
  2816  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2817  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2818  0583  1003               	clrc
  2819  0584  0CAC               	rrf	TX@temp,f
  2820  0585  0AAD               	incf	TX@i,f
  2821  0586  022D               	subwf	TX@i,w
  2822  0587  1803               	btfsc	3,0
  2823  0588  0008               	return
  2824  0589  2D63               	goto	l182
  2825  058A                     __end_of_TX:	
  2826                           
  2827                           	psect	text14
  2828  05DD                     __ptext14:	
  2829 ;; *************** function _ReadCell *****************
  2830 ;; Defined at:
  2831 ;;		line 593 in file "prog.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  cell            1    wreg     unsigned char 
  2834 ;;  CellsData       1   18[BANK0 ] PTR unsigned char 
  2835 ;;		 -> EditAddressMemory@CellsData_256(8), EditAddressMemory@CellsData_253(8), EditAddressMemory@CellsData(8), 
  2836 ;;  CellIsEmpty     1   19[BANK0 ] PTR unsigned char 
  2837 ;;		 -> EditAddressMemory@CellIsEmpty(1), 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  cell            1   21[BANK0 ] unsigned char 
  2840 ;;  i               1   23[BANK0 ] unsigned char 
  2841 ;;  _CellIsEmpty    1   22[BANK0 ] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 200/0
  2848 ;;		On exit  : B00/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2851 ;;      Params:         0       2       0       0
  2852 ;;      Locals:         0       3       0       0
  2853 ;;      Temps:          0       1       0       0
  2854 ;;      Totals:         0       6       0       0
  2855 ;;Total ram usage:        6 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    5
  2858 ;; This function calls:
  2859 ;;		_FillArrayFromEEPROM
  2860 ;; This function is called by:
  2861 ;;		_EditAddressMemory
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _ReadCell
  2867  05DD                     _ReadCell:	
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _ReadCell: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2871                           ;ReadCell@cell stored from wreg
  2872  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  2873  05DE  00B5               	movwf	ReadCell@cell
  2874                           
  2875                           ;prog.c: 594: unsigned char _CellIsEmpty = 1;
  2876  05DF  01B6               	clrf	ReadCell@_CellIsEmpty
  2877  05E0  0AB6               	incf	ReadCell@_CellIsEmpty,f
  2878                           
  2879                           ;prog.c: 595: FillArrayFromEEPROM(CellsData, cell * (sizeof(DS_Address)), (sizeof(DS_Add
      +                          ress)));
  2880  05E1  00B4               	movwf	??_ReadCell
  2881  05E2  1003               	clrc
  2882  05E3  0DB4               	rlf	??_ReadCell,f
  2883  05E4  1003               	clrc
  2884  05E5  0DB4               	rlf	??_ReadCell,f
  2885  05E6  1003               	clrc
  2886  05E7  0D34               	rlf	??_ReadCell,w
  2887  05E8  00AD               	movwf	FillArrayFromEEPROM@address_start
  2888  05E9  3008               	movlw	8
  2889  05EA  00AE               	movwf	FillArrayFromEEPROM@quantity
  2890  05EB  0832               	movf	ReadCell@CellsData,w
  2891  05EC  2726               	fcall	_FillArrayFromEEPROM
  2892                           
  2893                           ;prog.c: 596: for (unsigned char i = 0; i < (sizeof(DS_Address)); i++) {
  2894  05ED  01B7               	clrf	ReadCell@i
  2895  05EE                     l3718:	
  2896                           
  2897                           ;prog.c: 597: if (CellsData[i] != 0xFF) {
  2898  05EE  0837               	movf	ReadCell@i,w
  2899  05EF  0732               	addwf	ReadCell@CellsData,w
  2900  05F0  00B4               	movwf	??_ReadCell
  2901  05F1  0084               	movwf	4
  2902  05F2  1383               	bcf	3,7	;select IRP bank0
  2903  05F3  0A00               	incf	0,w
  2904  05F4  1903               	btfsc	3,2
  2905  05F5  2DF8               	goto	l3722
  2906                           
  2907                           ;prog.c: 598: _CellIsEmpty = 0;
  2908  05F6  01B6               	clrf	ReadCell@_CellIsEmpty
  2909                           
  2910                           ;prog.c: 599: break;
  2911  05F7  2DFD               	goto	l3726
  2912  05F8                     l3722:	
  2913  05F8  3008               	movlw	8
  2914  05F9  0AB7               	incf	ReadCell@i,f
  2915  05FA  0237               	subwf	ReadCell@i,w
  2916  05FB  1C03               	skipc
  2917  05FC  2DEE               	goto	l3718
  2918  05FD                     l3726:	
  2919                           
  2920                           ;prog.c: 600: }
  2921                           ;prog.c: 601: }
  2922                           ;prog.c: 602: *CellIsEmpty = _CellIsEmpty;
  2923  05FD  0833               	movf	ReadCell@CellIsEmpty,w
  2924  05FE  0084               	movwf	4
  2925  05FF  0836               	movf	ReadCell@_CellIsEmpty,w
  2926  0600  0080               	movwf	0
  2927  0601  0008               	return
  2928  0602                     __end_of_ReadCell:	
  2929                           
  2930                           	psect	text15
  2931  0726                     __ptext15:	
  2932 ;; *************** function _FillArrayFromEEPROM *****************
  2933 ;; Defined at:
  2934 ;;		line 174 in file "prog.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;  container       1    wreg     PTR unsigned char 
  2937 ;;		 -> EditAddressMemory@CellsData_256(8), EditAddressMemory@CellsData_253(8), EditAddressMemory@CellsData(8), FindCell
      +@CellsData(8), 
  2938 ;;		 -> DS_Address(8), 
  2939 ;;  address_star    1   13[BANK0 ] unsigned char 
  2940 ;;  quantity        1   14[BANK0 ] unsigned char 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  container       1   16[BANK0 ] PTR unsigned char 
  2943 ;;		 -> EditAddressMemory@CellsData_256(8), EditAddressMemory@CellsData_253(8), EditAddressMemory@CellsData(8), FindCell
      +@CellsData(8), 
  2944 ;;		 -> DS_Address(8), 
  2945 ;;  i               1   17[BANK0 ] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 300/0
  2952 ;;		On exit  : 300/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2955 ;;      Params:         0       2       0       0
  2956 ;;      Locals:         0       2       0       0
  2957 ;;      Temps:          0       1       0       0
  2958 ;;      Totals:         0       5       0       0
  2959 ;;Total ram usage:        5 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    4
  2962 ;; This function calls:
  2963 ;;		_EERD
  2964 ;; This function is called by:
  2965 ;;		_FindCell
  2966 ;;		_ReadCell
  2967 ;;		_main
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           
  2972                           ;psect for function _FillArrayFromEEPROM
  2973  0726                     _FillArrayFromEEPROM:	
  2974                           
  2975                           ;incstack = 0
  2976                           ; Regs used in _FillArrayFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2977                           ;FillArrayFromEEPROM@container stored from wreg
  2978  0726  00B0               	movwf	FillArrayFromEEPROM@container
  2979                           
  2980                           ;prog.c: 175: for (unsigned char i = 0; i < quantity; i++) {
  2981  0727  01B1               	clrf	FillArrayFromEEPROM@i
  2982  0728                     l3550:	
  2983  0728  082E               	movf	FillArrayFromEEPROM@quantity,w
  2984  0729  0231               	subwf	FillArrayFromEEPROM@i,w
  2985  072A  1803               	btfsc	3,0
  2986  072B  0008               	return
  2987                           
  2988                           ;prog.c: 177: container[i] = EERD(address_start + i);
  2989  072C  0831               	movf	FillArrayFromEEPROM@i,w
  2990  072D  0730               	addwf	FillArrayFromEEPROM@container,w
  2991  072E  00AF               	movwf	??_FillArrayFromEEPROM
  2992  072F  0084               	movwf	4
  2993  0730  0831               	movf	FillArrayFromEEPROM@i,w
  2994  0731  072D               	addwf	FillArrayFromEEPROM@address_start,w
  2995  0732  2755               	fcall	_EERD
  2996  0733  1383               	bcf	3,7	;select IRP bank0
  2997  0734  0080               	movwf	0
  2998  0735  0AB1               	incf	FillArrayFromEEPROM@i,f
  2999  0736  2F28               	goto	l3550
  3000  0737                     __end_of_FillArrayFromEEPROM:	
  3001                           
  3002                           	psect	text16
  3003  0755                     __ptext16:	
  3004 ;; *************** function _EERD *****************
  3005 ;; Defined at:
  3006 ;;		line 163 in file "prog.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  address         1    wreg     unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  address         1   10[BANK0 ] unsigned char 
  3011 ;;  EEDATA_BUP      1   12[BANK0 ] volatile unsigned char 
  3012 ;;  INTCON_BUP      1   11[BANK0 ] volatile unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      unsigned char 
  3015 ;; Registers used:
  3016 ;;		wreg
  3017 ;; Tracked objects:
  3018 ;;		On entry : 300/0
  3019 ;;		On exit  : 300/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3022 ;;      Params:         0       0       0       0
  3023 ;;      Locals:         0       3       0       0
  3024 ;;      Temps:          0       0       0       0
  3025 ;;      Totals:         0       3       0       0
  3026 ;;Total ram usage:        3 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    3
  3029 ;; This function calls:
  3030 ;;		Nothing
  3031 ;; This function is called by:
  3032 ;;		_FillArrayFromEEPROM
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function _EERD
  3038  0755                     _EERD:	
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _EERD: [wreg]
  3042                           ;EERD@address stored from wreg
  3043  0755  00AA               	movwf	EERD@address
  3044                           
  3045                           ;prog.c: 164: volatile unsigned char INTCON_BUP = INTCON;
  3046  0756  080B               	movf	11,w	;volatile
  3047  0757  00AB               	movwf	EERD@INTCON_BUP	;volatile
  3048                           
  3049                           ;prog.c: 165: volatile unsigned char EEDATA_BUP;
  3050                           ;prog.c: 166: INTCONbits.GIE = 0;
  3051  0758  138B               	bcf	11,7	;volatile
  3052                           
  3053                           ;prog.c: 167: EEADR = address;
  3054  0759  082A               	movf	EERD@address,w
  3055  075A  1683               	bsf	3,5	;RP0=1, select bank1
  3056  075B  009B               	movwf	27	;volatile
  3057                           
  3058                           ;prog.c: 168: EECON1bits.RD = 1;
  3059  075C  141C               	bsf	28,0	;volsfr
  3060                           
  3061                           ;prog.c: 169: EEDATA_BUP = EEDATA;
  3062  075D  081A               	movf	26,w	;volatile
  3063  075E  1283               	bcf	3,5	;RP0=0, select bank0
  3064  075F  00AC               	movwf	EERD@EEDATA_BUP	;volatile
  3065                           
  3066                           ;prog.c: 170: INTCON = INTCON_BUP;
  3067  0760  082B               	movf	EERD@INTCON_BUP,w	;volatile
  3068  0761  008B               	movwf	11	;volatile
  3069                           
  3070                           ;prog.c: 171: return EEDATA_BUP;
  3071  0762  082C               	movf	EERD@EEDATA_BUP,w	;volatile
  3072  0763  0008               	return
  3073  0764                     __end_of_EERD:	
  3074                           
  3075                           	psect	text17
  3076  0647                     __ptext17:	
  3077 ;; *************** function _RX *****************
  3078 ;; Defined at:
  3079 ;;		line 224 in file "prog.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  i               1   12[BANK0 ] unsigned char 
  3084 ;;  d               1   11[BANK0 ] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      unsigned char 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 300/100
  3091 ;;		On exit  : 300/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3094 ;;      Params:         0       0       0       0
  3095 ;;      Locals:         0       2       0       0
  3096 ;;      Temps:          0       1       0       0
  3097 ;;      Totals:         0       3       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    3
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_EditAddressMemory
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function _RX
  3110  0647                     _RX:	
  3111                           
  3112                           ;prog.c: 225: unsigned char d = 0;
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in _RX: [wreg+status,2+status,0]
  3116  0647  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0648  01AB               	clrf	RX@d
  3118                           
  3119                           ;prog.c: 226: for (unsigned char i = 0; i < 8; i++) {
  3120  0649  01AC               	clrf	RX@i
  3121  064A                     l189:	
  3122                           
  3123                           ;prog.c: 227: TRISA3 = 0;
  3124  064A  1683               	bsf	3,5	;RP0=1, select bank1
  3125  064B  1185               	bcf	5,3	;volatile
  3126                           
  3127                           ;prog.c: 228: _delay((unsigned long)((6)*(4000000/4000000.0)));
  3128  064C  2E4D               	nop2	;2 cycle nop
  3129  064D  2E4E               	nop2	;2 cycle nop
  3130  064E  2E4F               	nop2	;2 cycle nop
  3131                           
  3132                           ;prog.c: 229: TRISA3 = 1;
  3133  064F  1683               	bsf	3,5	;RP0=1, select bank1
  3134  0650  1303               	bcf	3,6	;RP1=0, select bank1
  3135  0651  1585               	bsf	5,3	;volatile
  3136                           
  3137                           ;prog.c: 230: _delay((unsigned long)((4)*(4000000/4000000.0)));
  3138  0652  2E53               	nop2	;2 cycle nop
  3139  0653  2E54               	nop2	;2 cycle nop
  3140                           
  3141                           ;prog.c: 231: d >>= 1;
  3142  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3144  0656  1003               	clrc
  3145  0657  0CAB               	rrf	RX@d,f
  3146                           
  3147                           ;prog.c: 232: if (RA3 == 1) d |= 0x80;
  3148  0658  1985               	btfsc	5,3	;volatile
  3149  0659  17AB               	bsf	RX@d,7
  3150                           
  3151                           ;prog.c: 233: _delay((unsigned long)((60)*(4000000/4000000.0)));
  3152  065A  3013               	movlw	19
  3153  065B  00AA               	movwf	??_RX
  3154  065C                     u4077:	
  3155  065C  0BAA               	decfsz	??_RX,f
  3156  065D  2E5C               	goto	u4077
  3157  065E  2E5F               	nop2	;nop
  3158  065F  3008               	movlw	8
  3159  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0662  0AAC               	incf	RX@i,f
  3162  0663  022C               	subwf	RX@i,w
  3163  0664  1C03               	skipc
  3164  0665  2E4A               	goto	l189
  3165                           
  3166                           ;prog.c: 234: }
  3167                           ;prog.c: 235: return d;
  3168  0666  082B               	movf	RX@d,w
  3169  0667  0008               	return
  3170  0668                     __end_of_RX:	
  3171                           
  3172                           	psect	text18
  3173  0502                     __ptext18:	
  3174 ;; *************** function _INIT *****************
  3175 ;; Defined at:
  3176 ;;		line 189 in file "prog.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;		None               void
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0
  3185 ;; Tracked objects:
  3186 ;;		On entry : 300/0
  3187 ;;		On exit  : 300/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3190 ;;      Params:         0       0       0       0
  3191 ;;      Locals:         0       0       0       0
  3192 ;;      Temps:          0       1       0       0
  3193 ;;      Totals:         0       1       0       0
  3194 ;;Total ram usage:        1 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    3
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_EditAddressMemory
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _INIT
  3206  0502                     _INIT:	
  3207                           
  3208                           ;prog.c: 190: static bit b;
  3209                           ;prog.c: 191: b = 0;
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in _INIT: [wreg+status,2+status,0]
  3213  0502  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  3214                           
  3215                           ;prog.c: 192: TRISA3 = 1;
  3216  0503  1683               	bsf	3,5	;RP0=1, select bank1
  3217  0504  1585               	bsf	5,3	;volatile
  3218                           
  3219                           ;prog.c: 193: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3220  0505  3006               	movlw	6
  3221  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0507  00AA               	movwf	??_INIT
  3223  0508                     u4087:	
  3224  0508  0BAA               	decfsz	??_INIT,f
  3225  0509  2D08               	goto	u4087
  3226  050A  0000               	nop
  3227                           
  3228                           ;prog.c: 194: TRISA3 = 0;
  3229  050B  1683               	bsf	3,5	;RP0=1, select bank1
  3230  050C  1303               	bcf	3,6	;RP1=0, select bank1
  3231  050D  1185               	bcf	5,3	;volatile
  3232                           
  3233                           ;prog.c: 195: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3234  050E  30A6               	movlw	166
  3235  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3236  0510  00AA               	movwf	??_INIT
  3237  0511                     u4097:	
  3238  0511  0BAA               	decfsz	??_INIT,f
  3239  0512  2D11               	goto	u4097
  3240  0513  0000               	nop
  3241                           
  3242                           ;prog.c: 196: TRISA3 = 1;
  3243  0514  1683               	bsf	3,5	;RP0=1, select bank1
  3244  0515  1303               	bcf	3,6	;RP1=0, select bank1
  3245  0516  1585               	bsf	5,3	;volatile
  3246                           
  3247                           ;prog.c: 197: _delay((unsigned long)((65)*(4000000/4000000.0)));
  3248  0517  3015               	movlw	21
  3249  0518  1283               	bcf	3,5	;RP0=0, select bank0
  3250  0519  00AA               	movwf	??_INIT
  3251  051A                     u4107:	
  3252  051A  0BAA               	decfsz	??_INIT,f
  3253  051B  2D1A               	goto	u4107
  3254  051C  0000               	nop
  3255                           
  3256                           ;prog.c: 198: b = RA3;
  3257  051D  1283               	bcf	3,5	;RP0=0, select bank0
  3258  051E  1303               	bcf	3,6	;RP1=0, select bank0
  3259  051F  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  3260  0520  1985               	btfsc	5,3	;volatile
  3261  0521  1459               	bsf	INIT@b/(0+8),INIT@b& (0+7)
  3262                           
  3263                           ;prog.c: 199: _delay((unsigned long)((450)*(4000000/4000000.0)));
  3264  0522  3095               	movlw	149
  3265  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3266  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3267  0525  00AA               	movwf	??_INIT
  3268  0526                     u4117:	
  3269  0526  0BAA               	decfsz	??_INIT,f
  3270  0527  2D26               	goto	u4117
  3271  0528  2D29               	nop2	;nop
  3272                           
  3273                           ;prog.c: 201: return !b;
  3274  0529  1283               	bcf	3,5	;RP0=0, select bank0
  3275  052A  1303               	bcf	3,6	;RP1=0, select bank0
  3276  052B  1C59               	btfss	INIT@b/(0+8),INIT@b& (0+7)
  3277  052C  2D2F               	goto	l3662
  3278  052D  1003               	clrc
  3279  052E  0008               	return
  3280  052F                     l3662:	
  3281  052F  1403               	setc
  3282  0530  0008               	return
  3283  0531                     __end_of_INIT:	
  3284                           
  3285                           	psect	text19
  3286  0531                     __ptext19:	
  3287 ;; *************** function _CellToInd *****************
  3288 ;; Defined at:
  3289 ;;		line 605 in file "prog.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  cell            1    wreg     unsigned char 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  cell            1   22[BANK0 ] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 200/0
  3300 ;;		On exit  : B00/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3303 ;;      Params:         0       0       0       0
  3304 ;;      Locals:         0       1       0       0
  3305 ;;      Temps:          0       0       0       0
  3306 ;;      Totals:         0       1       0       0
  3307 ;;Total ram usage:        1 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    4
  3310 ;; This function calls:
  3311 ;;		___awdiv
  3312 ;;		___awmod
  3313 ;;		_clrInd
  3314 ;;		_refreshInd
  3315 ;;		_setDigit
  3316 ;; This function is called by:
  3317 ;;		_EditAddressMemory
  3318 ;;		_main
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _CellToInd
  3324  0531                     _CellToInd:	
  3325                           
  3326                           ;incstack = 0
  3327                           ; Regs used in _CellToInd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3328                           ;CellToInd@cell stored from wreg
  3329  0531  1283               	bcf	3,5	;RP0=0, select bank0
  3330  0532  00B6               	movwf	CellToInd@cell
  3331                           
  3332                           ;prog.c: 606: clrInd();
  3333  0533  2764               	fcall	_clrInd
  3334                           
  3335                           ;prog.c: 608: if (cell >= 9) {
  3336  0534  3009               	movlw	9
  3337  0535  0236               	subwf	CellToInd@cell,w
  3338                           
  3339                           ;prog.c: 609: setDigit(3, (1 + cell) / 10);
  3340  0536  0836               	movf	CellToInd@cell,w
  3341  0537  1C03               	skipc
  3342  0538  2D52               	goto	L11
  3343  0539  00AC               	movwf	___awdiv@dividend
  3344  053A  01AD               	clrf	___awdiv@dividend+1
  3345  053B  0AAC               	incf	___awdiv@dividend,f
  3346  053C  1903               	skipnz
  3347  053D  0AAD               	incf	___awdiv@dividend+1,f
  3348  053E  300A               	movlw	10
  3349  053F  00AA               	movwf	___awdiv@divisor
  3350  0540  01AB               	clrf	___awdiv@divisor+1
  3351  0541  240A               	fcall	___awdiv
  3352  0542  082A               	movf	?___awdiv,w
  3353  0543  00B2               	movwf	setDigit@data
  3354  0544  3003               	movlw	3
  3355  0545  2702               	fcall	_setDigit
  3356                           
  3357                           ;prog.c: 610: setDigit(2, (1 + cell) % 10);
  3358  0546  0836               	movf	CellToInd@cell,w
  3359  0547  00AC               	movwf	___awmod@dividend
  3360  0548  01AD               	clrf	___awmod@dividend+1
  3361  0549  0AAC               	incf	___awmod@dividend,f
  3362  054A  1903               	skipnz
  3363  054B  0AAD               	incf	___awmod@dividend+1,f
  3364  054C  300A               	movlw	10
  3365  054D  00AA               	movwf	___awmod@divisor
  3366  054E  01AB               	clrf	___awmod@divisor+1
  3367  054F  2494               	fcall	___awmod
  3368  0550  082A               	movf	?___awmod,w
  3369  0551  2D57               	goto	L10
  3370  0552                     L11:	
  3371                           ;prog.c: 612: setDigit(3, 1 + cell);
  3372                           
  3373                           ;prog.c: 611: } else {
  3374                           
  3375  0552  3E01               	addlw	1
  3376  0553  00B2               	movwf	setDigit@data
  3377  0554  3003               	movlw	3
  3378  0555  2702               	fcall	_setDigit
  3379                           
  3380                           ;prog.c: 613: setDigit(2, 34);
  3381  0556  3022               	movlw	34
  3382  0557                     L10:	
  3383  0557  00B2               	movwf	setDigit@data
  3384  0558  3002               	movlw	2
  3385  0559  2702               	fcall	_setDigit
  3386                           
  3387                           ;prog.c: 614: }
  3388                           ;prog.c: 615: setDigit(1, 34);
  3389  055A  3022               	movlw	34
  3390  055B  00B2               	movwf	setDigit@data
  3391  055C  3001               	movlw	1
  3392  055D  2702               	fcall	_setDigit
  3393                           
  3394                           ;prog.c: 617: refreshInd();
  3395  055E  2F14               	ljmp	l3508
  3396  055F                     __end_of_CellToInd:	
  3397                           
  3398                           	psect	text20
  3399  0702                     __ptext20:	
  3400 ;; *************** function _setDigit *****************
  3401 ;; Defined at:
  3402 ;;		line 87 in file "prog.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  a               1    wreg     unsigned char 
  3405 ;;  data            1   18[BANK0 ] unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  a               1   21[BANK0 ] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3412 ;; Tracked objects:
  3413 ;;		On entry : 300/0
  3414 ;;		On exit  : B00/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3417 ;;      Params:         0       1       0       0
  3418 ;;      Locals:         0       1       0       0
  3419 ;;      Temps:          0       2       0       0
  3420 ;;      Totals:         0       4       0       0
  3421 ;;Total ram usage:        4 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_indData
  3428 ;;		_CellToInd
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _setDigit
  3435  0702                     _setDigit:	
  3436                           
  3437                           ;incstack = 0
  3438                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  3439                           ;setDigit@a stored from wreg
  3440  0702  00B5               	movwf	setDigit@a
  3441                           
  3442                           ;prog.c: 88: digits_0[a - 1] = (digits_0[a - 1] & 0b11000000) | (data & 0b00111111);
  3443  0703  303F               	movlw	63
  3444  0704  0532               	andwf	setDigit@data,w
  3445  0705  00B3               	movwf	??_setDigit
  3446  0706  0835               	movf	setDigit@a,w
  3447  0707  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3448  0708  0084               	movwf	4
  3449  0709  1383               	bcf	3,7	;select IRP bank1
  3450  070A  0800               	movf	0,w
  3451  070B  39C0               	andlw	192
  3452  070C  0433               	iorwf	??_setDigit,w
  3453  070D  00B4               	movwf	??_setDigit+1
  3454  070E  0835               	movf	setDigit@a,w
  3455  070F  3ECF               	addlw	(low ((_digits_0| 0+255)))& (0+255)
  3456  0710  0084               	movwf	4
  3457  0711  0834               	movf	??_setDigit+1,w
  3458  0712  0080               	movwf	0
  3459  0713  0008               	return
  3460  0714                     __end_of_setDigit:	
  3461                           
  3462                           	psect	text21
  3463  0714                     __ptext21:	
  3464 ;; *************** function _refreshInd *****************
  3465 ;; Defined at:
  3466 ;;		line 95 in file "prog.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  a               1   11[BANK0 ] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3475 ;; Tracked objects:
  3476 ;;		On entry : 300/0
  3477 ;;		On exit  : B00/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3480 ;;      Params:         0       0       0       0
  3481 ;;      Locals:         0       1       0       0
  3482 ;;      Temps:          0       1       0       0
  3483 ;;      Totals:         0       2       0       0
  3484 ;;Total ram usage:        2 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    3
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_CellToInd
  3491 ;;		_EditAddressMemory
  3492 ;;		_main
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           
  3497                           ;psect for function _refreshInd
  3498  0714                     _refreshInd:	
  3499  0714                     l3508:	
  3500                           ;incstack = 0
  3501                           ; Regs used in _refreshInd: [wreg-fsr0h+status,2+status,0]
  3502                           
  3503                           
  3504                           ;prog.c: 96: for (char a = 0; a < 3; a++) {
  3505  0714  01AB               	clrf	refreshInd@a
  3506  0715                     l3514:	
  3507                           
  3508                           ;prog.c: 97: digits[a] = digits_0[a];
  3509  0715  082B               	movf	refreshInd@a,w
  3510  0716  3ED0               	addlw	(low (_digits_0| 0))& (0+255)
  3511  0717  0084               	movwf	4
  3512  0718  1383               	bcf	3,7	;select IRP bank1
  3513  0719  0800               	movf	0,w
  3514  071A  00AA               	movwf	??_refreshInd
  3515  071B  082B               	movf	refreshInd@a,w
  3516  071C  3ECD               	addlw	(low (_digits| 0))& (0+255)
  3517  071D  0084               	movwf	4
  3518  071E  082A               	movf	??_refreshInd,w
  3519  071F  0080               	movwf	0
  3520  0720  3003               	movlw	3
  3521  0721  0AAB               	incf	refreshInd@a,f
  3522  0722  022B               	subwf	refreshInd@a,w
  3523  0723  1803               	btfsc	3,0
  3524  0724  0008               	return
  3525  0725  2F15               	goto	l3514
  3526  0726                     __end_of_refreshInd:	
  3527                           
  3528                           	psect	text22
  3529  0764                     __ptext22:	
  3530 ;; *************** function _clrInd *****************
  3531 ;; Defined at:
  3532 ;;		line 101 in file "prog.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;		None
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  a               1   10[BANK0 ] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3541 ;; Tracked objects:
  3542 ;;		On entry : 200/100
  3543 ;;		On exit  : B00/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3546 ;;      Params:         0       0       0       0
  3547 ;;      Locals:         0       1       0       0
  3548 ;;      Temps:          0       0       0       0
  3549 ;;      Totals:         0       1       0       0
  3550 ;;Total ram usage:        1 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    3
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_CellToInd
  3557 ;;		_EditAddressMemory
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _clrInd
  3564  0764                     _clrInd:	
  3565                           
  3566                           ;prog.c: 102: for (char a = 0; a < 3; a++) {
  3567                           
  3568                           ;incstack = 0
  3569                           ; Regs used in _clrInd: [wreg-fsr0h+status,2+status,0]
  3570  0764  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0765  01AA               	clrf	clrInd@a
  3572  0766                     l3526:	
  3573                           
  3574                           ;prog.c: 103: digits_0[a] = 34;
  3575  0766  082A               	movf	clrInd@a,w
  3576  0767  3ED0               	addlw	(low (_digits_0| 0))& (0+255)
  3577  0768  0084               	movwf	4
  3578  0769  3022               	movlw	34
  3579  076A  1383               	bcf	3,7	;select IRP bank1
  3580  076B  0080               	movwf	0
  3581  076C  3003               	movlw	3
  3582  076D  0AAA               	incf	clrInd@a,f
  3583  076E  022A               	subwf	clrInd@a,w
  3584  076F  1803               	btfsc	3,0
  3585  0770  0008               	return
  3586  0771  2F66               	goto	l3526
  3587  0772                     __end_of_clrInd:	
  3588                           
  3589                           	psect	text23
  3590  0494                     __ptext23:	
  3591 ;; *************** function ___awmod *****************
  3592 ;; Defined at:
  3593 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  divisor         2   10[BANK0 ] int 
  3596 ;;  dividend        2   12[BANK0 ] int 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  sign            1   15[BANK0 ] unsigned char 
  3599 ;;  counter         1   14[BANK0 ] unsigned char 
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  2   10[BANK0 ] int 
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, status,0
  3604 ;; Tracked objects:
  3605 ;;		On entry : B00/0
  3606 ;;		On exit  : B00/0
  3607 ;;		Unchanged: 800/0
  3608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3609 ;;      Params:         0       4       0       0
  3610 ;;      Locals:         0       2       0       0
  3611 ;;      Temps:          0       0       0       0
  3612 ;;      Totals:         0       6       0       0
  3613 ;;Total ram usage:        6 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    3
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_CellToInd
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           
  3624                           ;psect for function ___awmod
  3625  0494                     ___awmod:	
  3626                           
  3627                           ;incstack = 0
  3628                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3629  0494  01AF               	clrf	___awmod@sign
  3630  0495  1FAD               	btfss	___awmod@dividend+1,7
  3631  0496  2C9E               	goto	l3604
  3632  0497  09AC               	comf	___awmod@dividend,f
  3633  0498  09AD               	comf	___awmod@dividend+1,f
  3634  0499  0AAC               	incf	___awmod@dividend,f
  3635  049A  1903               	skipnz
  3636  049B  0AAD               	incf	___awmod@dividend+1,f
  3637  049C  01AF               	clrf	___awmod@sign
  3638  049D  0AAF               	incf	___awmod@sign,f
  3639  049E                     l3604:	
  3640  049E  1FAB               	btfss	___awmod@divisor+1,7
  3641  049F  2CA5               	goto	l3608
  3642  04A0  09AA               	comf	___awmod@divisor,f
  3643  04A1  09AB               	comf	___awmod@divisor+1,f
  3644  04A2  0AAA               	incf	___awmod@divisor,f
  3645  04A3  1903               	skipnz
  3646  04A4  0AAB               	incf	___awmod@divisor+1,f
  3647  04A5                     l3608:	
  3648  04A5  082A               	movf	___awmod@divisor,w
  3649  04A6  042B               	iorwf	___awmod@divisor+1,w
  3650  04A7  1903               	btfsc	3,2
  3651  04A8  2CC4               	goto	l3624
  3652  04A9  01AE               	clrf	___awmod@counter
  3653  04AA                     L12:	
  3654  04AA  0AAE               	incf	___awmod@counter,f
  3655  04AB  1BAB               	btfsc	___awmod@divisor+1,7
  3656  04AC  2CB1               	goto	l3616
  3657  04AD  1003               	clrc
  3658  04AE  0DAA               	rlf	___awmod@divisor,f
  3659  04AF  0DAB               	rlf	___awmod@divisor+1,f
  3660  04B0  2CAA               	goto	L12
  3661  04B1                     l3616:	
  3662  04B1  082B               	movf	___awmod@divisor+1,w
  3663  04B2  022D               	subwf	___awmod@dividend+1,w
  3664  04B3  1D03               	skipz
  3665  04B4  2CB7               	goto	u3295
  3666  04B5  082A               	movf	___awmod@divisor,w
  3667  04B6  022C               	subwf	___awmod@dividend,w
  3668  04B7                     u3295:	
  3669  04B7  1C03               	skipc
  3670  04B8  2CC0               	goto	L13
  3671  04B9  082A               	movf	___awmod@divisor,w
  3672  04BA  02AC               	subwf	___awmod@dividend,f
  3673  04BB  082B               	movf	___awmod@divisor+1,w
  3674  04BC  1C03               	skipc
  3675  04BD  03AD               	decf	___awmod@dividend+1,f
  3676  04BE  02AD               	subwf	___awmod@dividend+1,f
  3677  04BF  1003               	clrc
  3678  04C0                     L13:	
  3679  04C0  0CAB               	rrf	___awmod@divisor+1,f
  3680  04C1  0CAA               	rrf	___awmod@divisor,f
  3681  04C2  0BAE               	decfsz	___awmod@counter,f
  3682  04C3  2CB1               	goto	l3616
  3683  04C4                     l3624:	
  3684  04C4  082F               	movf	___awmod@sign,w
  3685  04C5  1903               	btfsc	3,2
  3686  04C6  2CCC               	goto	l3628
  3687  04C7  09AC               	comf	___awmod@dividend,f
  3688  04C8  09AD               	comf	___awmod@dividend+1,f
  3689  04C9  0AAC               	incf	___awmod@dividend,f
  3690  04CA  1903               	skipnz
  3691  04CB  0AAD               	incf	___awmod@dividend+1,f
  3692  04CC                     l3628:	
  3693  04CC  082D               	movf	___awmod@dividend+1,w
  3694  04CD  00AB               	movwf	?___awmod+1
  3695  04CE  082C               	movf	___awmod@dividend,w
  3696  04CF  00AA               	movwf	?___awmod
  3697  04D0  0008               	return
  3698  04D1                     __end_of___awmod:	
  3699                           
  3700                           	psect	text24
  3701  040A                     __ptext24:	
  3702 ;; *************** function ___awdiv *****************
  3703 ;; Defined at:
  3704 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  divisor         2   10[BANK0 ] int 
  3707 ;;  dividend        2   12[BANK0 ] int 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  quotient        2   16[BANK0 ] int 
  3710 ;;  sign            1   15[BANK0 ] unsigned char 
  3711 ;;  counter         1   14[BANK0 ] unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  2   10[BANK0 ] int 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0
  3716 ;; Tracked objects:
  3717 ;;		On entry : B00/0
  3718 ;;		On exit  : B00/0
  3719 ;;		Unchanged: 800/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3721 ;;      Params:         0       4       0       0
  3722 ;;      Locals:         0       4       0       0
  3723 ;;      Temps:          0       0       0       0
  3724 ;;      Totals:         0       8       0       0
  3725 ;;Total ram usage:        8 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    3
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_CellToInd
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function ___awdiv
  3737  040A                     ___awdiv:	
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3741  040A  01AF               	clrf	___awdiv@sign
  3742  040B  1FAB               	btfss	___awdiv@divisor+1,7
  3743  040C  2C14               	goto	l3560
  3744  040D  09AA               	comf	___awdiv@divisor,f
  3745  040E  09AB               	comf	___awdiv@divisor+1,f
  3746  040F  0AAA               	incf	___awdiv@divisor,f
  3747  0410  1903               	skipnz
  3748  0411  0AAB               	incf	___awdiv@divisor+1,f
  3749  0412  01AF               	clrf	___awdiv@sign
  3750  0413  0AAF               	incf	___awdiv@sign,f
  3751  0414                     l3560:	
  3752  0414  1FAD               	btfss	___awdiv@dividend+1,7
  3753  0415  2C1D               	goto	l3566
  3754  0416  09AC               	comf	___awdiv@dividend,f
  3755  0417  09AD               	comf	___awdiv@dividend+1,f
  3756  0418  0AAC               	incf	___awdiv@dividend,f
  3757  0419  1903               	skipnz
  3758  041A  0AAD               	incf	___awdiv@dividend+1,f
  3759  041B  3001               	movlw	1
  3760  041C  06AF               	xorwf	___awdiv@sign,f
  3761  041D                     l3566:	
  3762  041D  01B0               	clrf	___awdiv@quotient
  3763  041E  01B1               	clrf	___awdiv@quotient+1
  3764  041F  082A               	movf	___awdiv@divisor,w
  3765  0420  042B               	iorwf	___awdiv@divisor+1,w
  3766  0421  1903               	btfsc	3,2
  3767  0422  2C42               	goto	l3588
  3768  0423  01AE               	clrf	___awdiv@counter
  3769  0424                     L14:	
  3770  0424  0AAE               	incf	___awdiv@counter,f
  3771  0425  1BAB               	btfsc	___awdiv@divisor+1,7
  3772  0426  2C2B               	goto	l3576
  3773  0427  1003               	clrc
  3774  0428  0DAA               	rlf	___awdiv@divisor,f
  3775  0429  0DAB               	rlf	___awdiv@divisor+1,f
  3776  042A  2C24               	goto	L14
  3777  042B                     l3576:	
  3778  042B  1003               	clrc
  3779  042C  0DB0               	rlf	___awdiv@quotient,f
  3780  042D  0DB1               	rlf	___awdiv@quotient+1,f
  3781  042E  082B               	movf	___awdiv@divisor+1,w
  3782  042F  022D               	subwf	___awdiv@dividend+1,w
  3783  0430  1D03               	skipz
  3784  0431  2C34               	goto	u3225
  3785  0432  082A               	movf	___awdiv@divisor,w
  3786  0433  022C               	subwf	___awdiv@dividend,w
  3787  0434                     u3225:	
  3788  0434  1C03               	skipc
  3789  0435  2C3E               	goto	L15
  3790  0436  082A               	movf	___awdiv@divisor,w
  3791  0437  02AC               	subwf	___awdiv@dividend,f
  3792  0438  082B               	movf	___awdiv@divisor+1,w
  3793  0439  1C03               	skipc
  3794  043A  03AD               	decf	___awdiv@dividend+1,f
  3795  043B  02AD               	subwf	___awdiv@dividend+1,f
  3796  043C  1430               	bsf	___awdiv@quotient,0
  3797  043D  1003               	clrc
  3798  043E                     L15:	
  3799  043E  0CAB               	rrf	___awdiv@divisor+1,f
  3800  043F  0CAA               	rrf	___awdiv@divisor,f
  3801  0440  0BAE               	decfsz	___awdiv@counter,f
  3802  0441  2C2B               	goto	l3576
  3803  0442                     l3588:	
  3804  0442  082F               	movf	___awdiv@sign,w
  3805  0443  1903               	btfsc	3,2
  3806  0444  2C4A               	goto	l3592
  3807  0445  09B0               	comf	___awdiv@quotient,f
  3808  0446  09B1               	comf	___awdiv@quotient+1,f
  3809  0447  0AB0               	incf	___awdiv@quotient,f
  3810  0448  1903               	skipnz
  3811  0449  0AB1               	incf	___awdiv@quotient+1,f
  3812  044A                     l3592:	
  3813  044A  0831               	movf	___awdiv@quotient+1,w
  3814  044B  00AB               	movwf	?___awdiv+1
  3815  044C  0830               	movf	___awdiv@quotient,w
  3816  044D  00AA               	movwf	?___awdiv
  3817  044E  0008               	return
  3818  044F                     __end_of___awdiv:	
  3819                           
  3820                           	psect	text25
  3821  01F2                     __ptext25:	
  3822 ;; *************** function _F *****************
  3823 ;; Defined at:
  3824 ;;		line 447 in file "prog.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;  CurrentKeysS    1    9[BANK0 ] unsigned char 
  3829 ;;  dig             1    8[BANK0 ] unsigned char 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 300/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3839 ;;      Params:         0       0       0       0
  3840 ;;      Locals:         0       2       0       0
  3841 ;;      Temps:          0       4       0       0
  3842 ;;      Totals:         0       6       0       0
  3843 ;;Total ram usage:        6 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    2
  3846 ;; This function calls:
  3847 ;;		_convDig
  3848 ;;		_get_temp_Async
  3849 ;; This function is called by:
  3850 ;;		Interrupt level 1
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           
  3855                           ;psect for function _F
  3856  01F2                     _F:	
  3857                           
  3858                           ;prog.c: 448: if (T0IF) {
  3859  01F2  1D0B               	btfss	11,2	;volatile
  3860  01F3  2A90               	goto	i1l329
  3861                           
  3862                           ;prog.c: 450: T0IF = 0;
  3863  01F4  110B               	bcf	11,2	;volatile
  3864                           
  3865                           ;prog.c: 451: TMR0 += TMR0_VALUE;
  3866  01F5  30EB               	movlw	235
  3867  01F6  0781               	addwf	1,f	;volatile
  3868                           
  3869                           ;prog.c: 453: if (DigitNumber > 2)DigitNumber = 0;
  3870  01F7  3003               	movlw	3
  3871  01F8  0251               	subwf	_DigitNumber,w
  3872  01F9  1803               	btfsc	3,0
  3873  01FA  01D1               	clrf	_DigitNumber
  3874                           
  3875                           ;prog.c: 454: digitnum = PortAData[DigitNumber];
  3876  01FB  0851               	movf	_DigitNumber,w
  3877  01FC  3E01               	addlw	low ((_PortAData-__stringbase)| (0+32768))
  3878  01FD  0084               	movwf	4
  3879  01FE  2772               	fcall	stringdir
  3880  01FF  00D5               	movwf	_digitnum
  3881                           
  3882                           ;prog.c: 455: unsigned char dig = digits[DigitNumber];
  3883  0200  0851               	movf	_DigitNumber,w
  3884  0201  3ECD               	addlw	(low (_digits| 0))& (0+255)
  3885  0202  0084               	movwf	4
  3886  0203  1383               	bcf	3,7	;select IRP bank1
  3887  0204  0800               	movf	0,w
  3888  0205  00A8               	movwf	F@dig
  3889                           
  3890                           ;prog.c: 456: digitemp = convDig(0b00111111 & dig);
  3891  0206  393F               	andlw	63
  3892  0207  24D1               	fcall	_convDig
  3893  0208  00D4               	movwf	_digitemp
  3894                           
  3895                           ;prog.c: 460: (0b01000000 == (0b01000000 & dig)) ? digitemp |= 0b00000100 : digitemp &= 
      +                          0b11111011;
  3896  0209  1F28               	btfss	F@dig,6
  3897  020A  2A0D               	goto	i1l287
  3898  020B  1554               	bsf	_digitemp,2
  3899  020C  2A0E               	goto	i1l3240
  3900  020D                     i1l287:	
  3901  020D  1154               	bcf	_digitemp,2
  3902  020E                     i1l3240:	
  3903                           
  3904                           ;prog.c: 461: DigitNumber++;
  3905  020E  0AD1               	incf	_DigitNumber,f
  3906                           
  3907                           ;prog.c: 463: PORTB = digitemp;
  3908  020F  0854               	movf	_digitemp,w
  3909  0210  0086               	movwf	6	;volatile
  3910                           
  3911                           ;prog.c: 464: PORTA = (PORTA & 0b00110110) | digitnum;
  3912  0211  0805               	movf	5,w	;volatile
  3913  0212  3936               	andlw	54
  3914  0213  0455               	iorwf	_digitnum,w
  3915  0214  0085               	movwf	5	;volatile
  3916  0215  30FF               	movlw	-1
  3917                           
  3918                           ;prog.c: 465: endInterrupt = 1;
  3919  0216  1559               	bsf	_endInterrupt/(0+8),_endInterrupt& (0+7)
  3920                           
  3921                           ;prog.c: 466: powerOnInterval--;
  3922  0217  1683               	bsf	3,5	;RP0=1, select bank1
  3923  0218  07D5               	addwf	_powerOnInterval^(0+128),f
  3924  0219  1C03               	skipc
  3925  021A  03D6               	decf	(_powerOnInterval+1)^(0+128),f
  3926                           
  3927                           ;prog.c: 467: if (powerOnInterval == 0 && PowerBlocked == 0) {
  3928  021B  0855               	movf	_powerOnInterval^(0+128),w
  3929  021C  0456               	iorwf	(_powerOnInterval+1)^(0+128),w
  3930                           
  3931                           ;prog.c: 468: powerOff = 1;
  3932  021D  1283               	bcf	3,5	;RP0=0, select bank0
  3933  021E  1D03               	btfss	3,2
  3934  021F  2A25               	goto	L16
  3935  0220  0853               	movf	_PowerBlocked,w
  3936                           
  3937                           ;prog.c: 469: TRISA4 = 1;
  3938  0221  1683               	bsf	3,5	;RP0=1, select bank1
  3939  0222  1903               	btfsc	3,2
  3940  0223  1605               	bsf	5,4	;volatile
  3941                           
  3942                           ;prog.c: 470: }
  3943                           ;prog.c: 472: static unsigned int KeyTimeCounter = 0;
  3944                           ;prog.c: 473: static unsigned char LastKeysState = 0;
  3945                           ;prog.c: 474: static unsigned char long_press = 0;
  3946                           ;prog.c: 475: static unsigned char ButtonPressTimeIn1 = 0;
  3947                           ;prog.c: 476: static unsigned char ButtonPressTimeIn2 = 0;
  3948                           ;prog.c: 477: static unsigned char ButtonPressTimeOut = 0;
  3949                           ;prog.c: 478: unsigned char CurrentKeysState = 0;
  3950  0224  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0225                     L16:	
  3952  0225  01A9               	clrf	F@CurrentKeysState
  3953                           
  3954                           ;prog.c: 480: if (ButtonPressTimeOut > 0) {
  3955  0226  084E               	movf	F@ButtonPressTimeOut,w
  3956  0227  1903               	btfsc	3,2
  3957  0228  2A2B               	goto	i1l3256
  3958                           
  3959                           ;prog.c: 481: ButtonPressTimeOut--;
  3960  0229  03CE               	decf	F@ButtonPressTimeOut,f
  3961                           
  3962                           ;prog.c: 482: } else {
  3963  022A  2A8F               	goto	i1l3336
  3964  022B                     i1l3256:	
  3965                           
  3966                           ;prog.c: 484: KeyCode = 0;
  3967  022B  01D2               	clrf	_KeyCode	;volatile
  3968                           
  3969                           ;prog.c: 486: if (RA2) {
  3970  022C  1D05               	btfss	5,2	;volatile
  3971  022D  2A32               	goto	i1l3264
  3972  022E  3019               	movlw	25
  3973                           
  3974                           ;prog.c: 487: CurrentKeysState = CurrentKeysState | 0b00000001;
  3975  022F  1429               	bsf	F@CurrentKeysState,0
  3976                           
  3977                           ;prog.c: 488: ButtonPressTimeIn1 = 25;
  3978  0230  00CC               	movwf	F@ButtonPressTimeIn1
  3979                           
  3980                           ;prog.c: 489: } else {
  3981  0231  2A38               	goto	i1l3270
  3982  0232                     i1l3264:	
  3983                           
  3984                           ;prog.c: 490: if (ButtonPressTimeIn1 == 0) {
  3985  0232  084C               	movf	F@ButtonPressTimeIn1,w
  3986  0233  1D03               	btfss	3,2
  3987  0234  2A37               	goto	i1l3268
  3988                           
  3989                           ;prog.c: 491: CurrentKeysState = CurrentKeysState & 0b11111110;
  3990  0235  1029               	bcf	F@CurrentKeysState,0
  3991                           
  3992                           ;prog.c: 492: } else {
  3993  0236  2A38               	goto	i1l3270
  3994  0237                     i1l3268:	
  3995                           
  3996                           ;prog.c: 493: ButtonPressTimeIn1--;
  3997  0237  03CC               	decf	F@ButtonPressTimeIn1,f
  3998  0238                     i1l3270:	
  3999                           
  4000                           ;prog.c: 494: }
  4001                           ;prog.c: 495: }
  4002                           ;prog.c: 497: if (RA1) {
  4003  0238  1C85               	btfss	5,1	;volatile
  4004  0239  2A3E               	goto	i1l3276
  4005  023A  3019               	movlw	25
  4006                           
  4007                           ;prog.c: 498: CurrentKeysState = CurrentKeysState | 0b00000010;
  4008  023B  14A9               	bsf	F@CurrentKeysState,1
  4009                           
  4010                           ;prog.c: 499: ButtonPressTimeIn2 = 25;
  4011  023C  00CD               	movwf	F@ButtonPressTimeIn2
  4012                           
  4013                           ;prog.c: 500: } else {
  4014  023D  2A44               	goto	i1l3282
  4015  023E                     i1l3276:	
  4016                           
  4017                           ;prog.c: 501: if (ButtonPressTimeIn2 == 0) {
  4018  023E  084D               	movf	F@ButtonPressTimeIn2,w
  4019  023F  1D03               	btfss	3,2
  4020  0240  2A43               	goto	i1l3280
  4021                           
  4022                           ;prog.c: 502: CurrentKeysState = CurrentKeysState & 0b11111101;
  4023  0241  10A9               	bcf	F@CurrentKeysState,1
  4024                           
  4025                           ;prog.c: 503: } else {
  4026  0242  2A44               	goto	i1l3282
  4027  0243                     i1l3280:	
  4028                           
  4029                           ;prog.c: 504: ButtonPressTimeIn2--;
  4030  0243  03CD               	decf	F@ButtonPressTimeIn2,f
  4031  0244                     i1l3282:	
  4032                           
  4033                           ;prog.c: 505: }
  4034                           ;prog.c: 506: }
  4035                           ;prog.c: 508: if ((ButtonPressTimeIn1 == 0 || ButtonPressTimeIn1 == 25) && (ButtonPressT
      +                          imeIn2 == 0 || ButtonPressTimeIn2 == 25)) {
  4036  0244  084C               	movf	F@ButtonPressTimeIn1,w
  4037  0245  1903               	btfsc	3,2
  4038  0246  2A4B               	goto	i1l3286
  4039  0247  3019               	movlw	25
  4040  0248  064C               	xorwf	F@ButtonPressTimeIn1,w
  4041  0249  1D03               	btfss	3,2
  4042  024A  2A8F               	goto	i1l3336
  4043  024B                     i1l3286:	
  4044  024B  084D               	movf	F@ButtonPressTimeIn2,w
  4045  024C  1903               	btfsc	3,2
  4046  024D  2A52               	goto	i1l3290
  4047  024E  3019               	movlw	25
  4048  024F  064D               	xorwf	F@ButtonPressTimeIn2,w
  4049  0250  1D03               	btfss	3,2
  4050  0251  2A8F               	goto	i1l3336
  4051  0252                     i1l3290:	
  4052                           
  4053                           ;prog.c: 509: if (CurrentKeysState > 0) {
  4054  0252  0829               	movf	F@CurrentKeysState,w
  4055  0253  1903               	btfsc	3,2
  4056  0254  2A7D               	goto	i1l3316
  4057                           
  4058                           ;prog.c: 510: if (LastKeysState != CurrentKeysState) {
  4059  0255  084F               	movf	F@LastKeysState,w
  4060  0256  0629               	xorwf	F@CurrentKeysState,w
  4061  0257  1903               	skipnz
  4062  0258  2A5D               	goto	i1l3298
  4063                           
  4064                           ;prog.c: 511: KeyTimeCounter = 0;
  4065                           
  4066                           ;prog.c: 512: long_press = 0;
  4067  0259  229B               	fcall	PL6	;call to abstracted procedure
  4068                           
  4069                           ;prog.c: 513: LastKeysState = CurrentKeysState;
  4070  025A  0829               	movf	F@CurrentKeysState,w
  4071  025B  00CF               	movwf	F@LastKeysState
  4072                           
  4073                           ;prog.c: 514: } else if (KeyTimeCounter < 150) {
  4074  025C  2A74               	goto	i1l3308
  4075  025D                     i1l3298:	
  4076  025D  3000               	movlw	0
  4077  025E  1683               	bsf	3,5	;RP0=1, select bank1
  4078  025F  0254               	subwf	(F@KeyTimeCounter+1)^(0+128),w
  4079  0260  3096               	movlw	150
  4080  0261  1903               	skipnz
  4081  0262  0253               	subwf	F@KeyTimeCounter^(0+128),w
  4082  0263  1803               	skipnc
  4083  0264  2A69               	goto	i1l3302
  4084                           
  4085                           ;prog.c: 515: KeyTimeCounter++;
  4086  0265  0AD3               	incf	F@KeyTimeCounter^(0+128),f
  4087  0266  1903               	skipnz
  4088  0267  0AD4               	incf	(F@KeyTimeCounter+1)^(0+128),f
  4089                           
  4090                           ;prog.c: 516: } else if (KeyTimeCounter == 150 && !long_press) {
  4091  0268  2A74               	goto	i1l3308
  4092  0269                     i1l3302:	
  4093  0269  3096               	movlw	150
  4094  026A  0653               	xorwf	F@KeyTimeCounter^(0+128),w
  4095  026B  0454               	iorwf	(F@KeyTimeCounter+1)^(0+128),w
  4096  026C  1283               	bcf	3,5	;RP0=0, select bank0
  4097  026D  1D03               	btfss	3,2
  4098  026E  2A75               	goto	L17
  4099  026F  0850               	movf	F@long_press,w
  4100  0270  1D03               	btfss	3,2
  4101  0271  2A74               	goto	i1l3308
  4102                           
  4103                           ;prog.c: 517: long_press = 1;
  4104  0272  01D0               	clrf	F@long_press
  4105  0273  0AD0               	incf	F@long_press,f
  4106  0274                     i1l3308:	
  4107                           
  4108                           ;prog.c: 518: }
  4109                           ;prog.c: 520: if (long_press == 1) {
  4110  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4111  0275                     L17:	
  4112  0275  0B50               	decfsz	F@long_press,w
  4113  0276  2A8F               	goto	i1l3336
  4114                           
  4115                           ;prog.c: 521: KeyCode = 30 + LastKeysState + 3;
  4116  0277  084F               	movf	F@LastKeysState,w
  4117  0278  3E21               	addlw	33
  4118  0279  00D2               	movwf	_KeyCode	;volatile
  4119                           
  4120                           ;prog.c: 522: long_press = 2;
  4121  027A  3002               	movlw	2
  4122  027B  00D0               	movwf	F@long_press
  4123  027C  2A8D               	goto	i1l3314
  4124  027D                     i1l3316:	
  4125  027D  084F               	movf	F@LastKeysState,w
  4126  027E  1903               	btfsc	3,2
  4127  027F  2A87               	goto	i1l3330
  4128  0280  0850               	movf	F@long_press,w
  4129  0281  1D03               	btfss	3,2
  4130  0282  2A87               	goto	i1l3330
  4131                           
  4132                           ;prog.c: 527: KeyCode = 30 + LastKeysState;
  4133  0283  084F               	movf	F@LastKeysState,w
  4134  0284  3E1E               	addlw	30
  4135  0285  00D2               	movwf	_KeyCode	;volatile
  4136  0286  2A8B               	goto	i1l3332
  4137  0287                     i1l3330:	
  4138                           ;prog.c: 530: long_press = 0;
  4139                           
  4140                           ;prog.c: 529: KeyTimeCounter = 0;
  4141                           
  4142                           ;prog.c: 528: LastKeysState = 0;
  4143                           
  4144  0287  3002               	movlw	2
  4145  0288  0650               	xorwf	F@long_press,w
  4146  0289  1D03               	btfss	3,2
  4147  028A  2A8F               	goto	i1l3336
  4148  028B                     i1l3332:	
  4149                           
  4150                           ;prog.c: 534: LastKeysState = 0;
  4151  028B  01CF               	clrf	F@LastKeysState
  4152                           
  4153                           ;prog.c: 535: KeyTimeCounter = 0;
  4154                           
  4155                           ;prog.c: 536: long_press = 0;
  4156  028C  229B               	fcall	PL6	;call to abstracted procedure
  4157  028D                     i1l3314:	
  4158                           
  4159                           ;prog.c: 523: ButtonPressTimeOut = 40;
  4160  028D  3028               	movlw	40
  4161  028E  00CE               	movwf	F@ButtonPressTimeOut
  4162  028F                     i1l3336:	
  4163                           
  4164                           ;prog.c: 538: }
  4165                           ;prog.c: 539: }
  4166                           ;prog.c: 540: }
  4167                           ;prog.c: 542: get_temp_Async();
  4168  028F  2122               	fcall	_get_temp_Async
  4169  0290                     i1l329:	
  4170  0290  0827               	movf	??_F+3,w
  4171  0291  00FF               	movwf	127
  4172  0292  0826               	movf	??_F+2,w
  4173  0293  008A               	movwf	10
  4174  0294  0825               	movf	??_F+1,w
  4175  0295  0084               	movwf	4
  4176  0296  0E24               	swapf	??_F^0,w
  4177  0297  0083               	movwf	3
  4178  0298  0EFE               	swapf	126,f
  4179  0299  0E7E               	swapf	126,w
  4180  029A  0009               	retfie
  4181  029B                     __end_of_F:	
  4182  029B                     PL6:	
  4183  029B  1683               	bsf	3,5	;RP0=1, select bank1
  4184  029C  01D3               	clrf	F@KeyTimeCounter^(0+128)
  4185  029D  01D4               	clrf	(F@KeyTimeCounter+1)^(0+128)
  4186  029E  1283               	bcf	3,5	;RP0=0, select bank0
  4187  029F  01D0               	clrf	F@long_press
  4188  02A0  0008               	return
  4189  02A1                     __end_ofPL6:	
  4190                           
  4191                           	psect	intentry
  4192  0004                     __pintentry:	
  4193                           ;incstack = 0
  4194                           ; Regs used in _F: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4195                           
  4196  0004                     interrupt_function:	
  4197  007E                     saved_w	set	btemp
  4198  0004  00FE               	movwf	btemp
  4199  0005  0E03               	swapf	3,w
  4200  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4201  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4202  0008  00A4               	movwf	??_F
  4203  0009  0804               	movf	4,w
  4204  000A  00A5               	movwf	??_F+1
  4205  000B  080A               	movf	10,w
  4206  000C  00A6               	movwf	??_F+2
  4207  000D  087F               	movf	btemp+1,w
  4208  000E  00A7               	movwf	??_F+3
  4209  000F  29F2               	ljmp	_F
  4210                           
  4211                           	psect	text26
  4212  0122                     __ptext26:	
  4213 ;; *************** function _get_temp_Async *****************
  4214 ;; Defined at:
  4215 ;;		line 329 in file "prog.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  temp2           1    3[BANK0 ] unsigned char 
  4220 ;;  temp1           1    2[BANK0 ] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 300/0
  4227 ;;		On exit  : 300/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4230 ;;      Params:         0       0       0       0
  4231 ;;      Locals:         0       2       0       0
  4232 ;;      Temps:          0       2       0       0
  4233 ;;      Totals:         0       4       0       0
  4234 ;;Total ram usage:        4 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    1
  4237 ;; This function calls:
  4238 ;;		___wmul
  4239 ;;		i1_INIT
  4240 ;;		i1_RX
  4241 ;;		i1_TX
  4242 ;;		i1___awdiv
  4243 ;; This function is called by:
  4244 ;;		_F
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _get_temp_Async
  4250  0122                     _get_temp_Async:	
  4251                           
  4252                           ;prog.c: 331: if (!getTemp_flags.ActiveProcess) {
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _get_temp_Async: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4256  0122  1E4B               	btfss	_getTemp_flags+3,4
  4257  0123  0008               	return
  4258                           
  4259                           ;prog.c: 333: }
  4260                           ;prog.c: 336: if (getTemp_flags.Init) {
  4261                           
  4262                           ;prog.c: 332: return;
  4263  0124  1C48               	btfss	_getTemp_flags,0
  4264  0125  2930               	goto	i1l235
  4265                           
  4266                           ;prog.c: 337: if (INIT()) {
  4267  0126  258A               	fcall	i1_INIT
  4268  0127  1C03               	btfss	3,0
  4269  0128  292E               	goto	i1l236
  4270  0129  30C3               	movlw	-61
  4271                           
  4272                           ;prog.c: 338: getTemp_flags.Init = 0;
  4273  012A  1048               	bcf	_getTemp_flags,0
  4274                           
  4275                           ;prog.c: 340: getTemp_flags.Send_Address = 1;
  4276  012B  14C8               	bsf	_getTemp_flags,1
  4277                           
  4278                           ;prog.c: 341: getTemp_flags.CountAddressBytes = 0;
  4279  012C  05C8               	andwf	_getTemp_flags,f
  4280                           
  4281                           ;prog.c: 342: } else {
  4282  012D  0008               	return
  4283  012E                     i1l236:	
  4284                           
  4285                           ;prog.c: 343: getTemp_flags.ActiveProcess = 0;
  4286  012E  124B               	bcf	_getTemp_flags+3,4
  4287  012F  0008               	return
  4288  0130                     i1l235:	
  4289                           
  4290                           ;prog.c: 347: if (getTemp_flags.Send_Address) {
  4291  0130  1CC8               	btfss	_getTemp_flags,1
  4292  0131  2967               	goto	i1l239
  4293                           
  4294                           ;prog.c: 348: if (Broadcasting) {
  4295  0132  1CD9               	btfss	_Broadcasting/(0+8),_Broadcasting& (0+7)
  4296  0133  293E               	goto	i1l2918
  4297                           
  4298                           ;prog.c: 349: TX(0xCC);
  4299  0134  30CC               	movlw	204
  4300  0135  25B4               	fcall	i1_TX
  4301                           
  4302                           ;prog.c: 350: getTemp_flags.CountAddressBytes = 1;
  4303  0136  1283               	bcf	3,5	;RP0=0, select bank0
  4304  0137  1303               	bcf	3,6	;RP1=0, select bank0
  4305  0138  0848               	movf	_getTemp_flags,w
  4306  0139  39C3               	andlw	-61
  4307  013A  3804               	iorlw	4
  4308  013B  00C8               	movwf	_getTemp_flags
  4309  013C                     i1l2916:	
  4310                           
  4311                           ;prog.c: 351: getTemp_flags.Send_Address = 0;
  4312  013C  10C8               	bcf	_getTemp_flags,1
  4313                           
  4314                           ;prog.c: 352: } else if (getTemp_flags.CountAddressBytes < 8) {
  4315  013D  0008               	return
  4316  013E                     i1l2918:	
  4317  013E  0C48               	rrf	_getTemp_flags,w
  4318  013F  00A0               	movwf	??_get_temp_Async
  4319  0140  0C20               	rrf	??_get_temp_Async,w
  4320  0141  390F               	andlw	15
  4321  0142  00A1               	movwf	??_get_temp_Async+1
  4322  0143  3008               	movlw	8
  4323  0144  0221               	subwf	??_get_temp_Async+1,w
  4324  0145  1803               	skipnc
  4325  0146  0008               	return
  4326                           
  4327                           ;prog.c: 353: TX(DS_Address[getTemp_flags.CountAddressBytes]);
  4328  0147  0C48               	rrf	_getTemp_flags,w
  4329  0148  00A0               	movwf	??_get_temp_Async
  4330  0149  0C20               	rrf	??_get_temp_Async,w
  4331  014A  390F               	andlw	15
  4332  014B  3EC5               	addlw	(low (_DS_Address| 0))& (0+255)
  4333  014C  0084               	movwf	4
  4334  014D  1383               	bcf	3,7	;select IRP bank1
  4335  014E  0800               	movf	0,w
  4336  014F  25B4               	fcall	i1_TX
  4337                           
  4338                           ;prog.c: 354: getTemp_flags.CountAddressBytes++;
  4339  0150  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0151  1303               	bcf	3,6	;RP1=0, select bank0
  4341  0152  0C48               	rrf	_getTemp_flags,w
  4342  0153  00A0               	movwf	??_get_temp_Async
  4343  0154  0C20               	rrf	??_get_temp_Async,w
  4344  0155  390F               	andlw	15
  4345  0156  00A0               	movwf	??_get_temp_Async
  4346  0157  0AA0               	incf	??_get_temp_Async,f
  4347  0158  0DA0               	rlf	??_get_temp_Async,f
  4348  0159  0DA0               	rlf	??_get_temp_Async,f
  4349  015A  0848               	movf	_getTemp_flags,w
  4350  015B  0620               	xorwf	??_get_temp_Async,w
  4351  015C  39C3               	andlw	-61
  4352  015D  0620               	xorwf	??_get_temp_Async,w
  4353  015E  00C8               	movwf	_getTemp_flags
  4354                           
  4355                           ;prog.c: 355: if (getTemp_flags.CountAddressBytes == 8) {
  4356  015F  0C48               	rrf	_getTemp_flags,w
  4357  0160  00A0               	movwf	??_get_temp_Async
  4358  0161  0C20               	rrf	??_get_temp_Async,w
  4359  0162  390F               	andlw	15
  4360  0163  3A08               	xorlw	8
  4361  0164  1D03               	skipz
  4362  0165  0008               	return
  4363  0166  293C               	goto	i1l2916
  4364  0167                     i1l239:	
  4365                           
  4366                           ;prog.c: 361: if (getTemp_flags.SendConvertTemp) {
  4367  0167  1F48               	btfss	_getTemp_flags,6
  4368  0168  296F               	goto	i1l2932
  4369                           
  4370                           ;prog.c: 362: TX(0x44);
  4371  0169  3044               	movlw	68
  4372  016A  25B4               	fcall	i1_TX
  4373                           
  4374                           ;prog.c: 363: getTemp_flags.SendConvertTemp = 0;
  4375  016B  1283               	bcf	3,5	;RP0=0, select bank0
  4376  016C  1303               	bcf	3,6	;RP1=0, select bank0
  4377  016D  1348               	bcf	_getTemp_flags,6
  4378                           
  4379                           ;prog.c: 365: } else
  4380  016E  0008               	return
  4381  016F                     i1l2932:	
  4382                           
  4383                           ;prog.c: 367: if (getTemp_flags.PauseValue > 0) {
  4384  016F  0849               	movf	_getTemp_flags+1,w
  4385  0170  044A               	iorwf	_getTemp_flags+2,w
  4386  0171  1903               	btfsc	3,2
  4387  0172  297E               	goto	i1l247
  4388                           
  4389                           ;prog.c: 368: getTemp_flags.PauseValue--;
  4390  0173  3001               	movlw	1
  4391  0174  02C9               	subwf	_getTemp_flags+1,f
  4392  0175  3000               	movlw	0
  4393  0176  1C03               	skipc
  4394  0177  03CA               	decf	_getTemp_flags+2,f
  4395  0178  02CA               	subwf	_getTemp_flags+2,f
  4396                           
  4397                           ;prog.c: 369: if (getTemp_flags.PauseValue == 0) {
  4398  0179  0849               	movf	_getTemp_flags+1,w
  4399  017A  044A               	iorwf	_getTemp_flags+2,w
  4400  017B  1903               	btfsc	3,2
  4401                           
  4402                           ;prog.c: 370: getTemp_flags.Init = 1;
  4403  017C  1448               	bsf	_getTemp_flags,0
  4404  017D  0008               	return
  4405  017E                     i1l247:	
  4406                           
  4407                           ;prog.c: 374: if (getTemp_flags.SendGetTemp) {
  4408  017E  1C4B               	btfss	_getTemp_flags+3,0
  4409  017F  2986               	goto	i1l250
  4410                           
  4411                           ;prog.c: 375: TX(0xBE);
  4412  0180  30BE               	movlw	190
  4413  0181  25B4               	fcall	i1_TX
  4414                           
  4415                           ;prog.c: 376: getTemp_flags.SendGetTemp = 0;
  4416  0182  1283               	bcf	3,5	;RP0=0, select bank0
  4417  0183  1303               	bcf	3,6	;RP1=0, select bank0
  4418  0184  104B               	bcf	_getTemp_flags+3,0
  4419                           
  4420                           ;prog.c: 377: } else
  4421  0185  0008               	return
  4422  0186                     i1l250:	
  4423                           
  4424                           ;prog.c: 379: if (getTemp_flags.ReadData) {
  4425  0186  1CCB               	btfss	_getTemp_flags+3,1
  4426  0187  0008               	return
  4427                           
  4428                           ;prog.c: 380: if (getTemp_flags.CountDataBytes < 2) {
  4429  0188  0C4B               	rrf	_getTemp_flags+3,w
  4430  0189  00A0               	movwf	??_get_temp_Async
  4431  018A  0C20               	rrf	??_get_temp_Async,w
  4432  018B  3903               	andlw	3
  4433  018C  00A1               	movwf	??_get_temp_Async+1
  4434  018D  3002               	movlw	2
  4435  018E  0221               	subwf	??_get_temp_Async+1,w
  4436  018F  1803               	skipnc
  4437  0190  0008               	return
  4438                           
  4439                           ;prog.c: 381: DS_ReadData[getTemp_flags.CountDataBytes] = RX();
  4440  0191  0C4B               	rrf	_getTemp_flags+3,w
  4441  0192  00A0               	movwf	??_get_temp_Async
  4442  0193  0C20               	rrf	??_get_temp_Async,w
  4443  0194  3903               	andlw	3
  4444  0195  3EBC               	addlw	(low (_DS_ReadData| 0))& (0+255)
  4445  0196  0084               	movwf	4
  4446  0197  2668               	fcall	i1_RX
  4447  0198  1383               	bcf	3,7	;select IRP bank1
  4448  0199  0080               	movwf	0
  4449                           
  4450                           ;prog.c: 382: getTemp_flags.CountDataBytes++;
  4451  019A  1283               	bcf	3,5	;RP0=0, select bank0
  4452  019B  1303               	bcf	3,6	;RP1=0, select bank0
  4453  019C  0C4B               	rrf	_getTemp_flags+3,w
  4454  019D  00A0               	movwf	??_get_temp_Async
  4455  019E  0C20               	rrf	??_get_temp_Async,w
  4456  019F  3903               	andlw	3
  4457  01A0  00A0               	movwf	??_get_temp_Async
  4458  01A1  0AA0               	incf	??_get_temp_Async,f
  4459  01A2  0DA0               	rlf	??_get_temp_Async,f
  4460  01A3  0DA0               	rlf	??_get_temp_Async,f
  4461  01A4  084B               	movf	_getTemp_flags+3,w
  4462  01A5  0620               	xorwf	??_get_temp_Async,w
  4463  01A6  39F3               	andlw	-13
  4464  01A7  0620               	xorwf	??_get_temp_Async,w
  4465  01A8  00CB               	movwf	_getTemp_flags+3
  4466                           
  4467                           ;prog.c: 383: if (getTemp_flags.CountDataBytes == 2) {
  4468  01A9  0C4B               	rrf	_getTemp_flags+3,w
  4469  01AA  00A0               	movwf	??_get_temp_Async
  4470  01AB  0C20               	rrf	??_get_temp_Async,w
  4471  01AC  3903               	andlw	3
  4472  01AD  3A02               	xorlw	2
  4473  01AE  1D03               	skipz
  4474  01AF  0008               	return
  4475                           
  4476                           ;prog.c: 384: getTemp_flags.ActiveProcess = 0;
  4477  01B0  124B               	bcf	_getTemp_flags+3,4
  4478                           
  4479                           ;prog.c: 386: unsigned char temp1 = DS_ReadData[0];
  4480  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  4481  01B2  083C               	movf	_DS_ReadData^(0+128),w
  4482  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  4483  01B4  00A2               	movwf	get_temp_Async@temp1
  4484                           
  4485                           ;prog.c: 387: unsigned char temp2 = DS_ReadData[1];
  4486  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  4487  01B6  083D               	movf	(_DS_ReadData^(0+128)+1),w
  4488  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  4489  01B8  00A3               	movwf	get_temp_Async@temp2
  4490                           
  4491                           ;prog.c: 389: temp_drob = temp1 & 0b00001111;
  4492  01B9  0822               	movf	get_temp_Async@temp1,w
  4493  01BA  00D7               	movwf	_temp_drob
  4494  01BB  300F               	movlw	15
  4495  01BC  05D7               	andwf	_temp_drob,f
  4496                           
  4497                           ;prog.c: 390: temp_drob = ((temp_drob * 6) + 2) / 10;
  4498  01BD  300A               	movlw	10
  4499  01BE  00F6               	movwf	i1___awdiv@divisor
  4500  01BF  01F7               	clrf	i1___awdiv@divisor+1
  4501  01C0  0857               	movf	_temp_drob,w
  4502  01C1  00F0               	movwf	___wmul@multiplier
  4503  01C2  3006               	movlw	6
  4504  01C3  01F1               	clrf	___wmul@multiplier+1
  4505  01C4  00F2               	movwf	___wmul@multiplicand
  4506  01C5  01F3               	clrf	___wmul@multiplicand+1
  4507  01C6  26BE               	fcall	___wmul
  4508  01C7  0870               	movf	?___wmul,w
  4509  01C8  3E02               	addlw	2
  4510  01C9  00F8               	movwf	i1___awdiv@dividend
  4511  01CA  0871               	movf	?___wmul+1,w
  4512  01CB  1803               	skipnc
  4513  01CC  3E01               	addlw	1
  4514  01CD  3E00               	addlw	0
  4515  01CE  00F9               	movwf	i1___awdiv@dividend+1
  4516  01CF  244F               	fcall	i1___awdiv
  4517  01D0  0876               	movf	?i1___awdiv,w
  4518  01D1  00D7               	movwf	_temp_drob
  4519  01D2  300F               	movlw	15
  4520                           
  4521                           ;prog.c: 391: temp1 >>= 4;
  4522  01D3  0EA2               	swapf	get_temp_Async@temp1,f
  4523  01D4  05A2               	andwf	get_temp_Async@temp1,f
  4524                           
  4525                           ;prog.c: 392: sign = temp2 & 0x80;
  4526  01D5  0823               	movf	get_temp_Async@temp2,w
  4527  01D6  00D6               	movwf	_sign
  4528  01D7  3080               	movlw	128
  4529  01D8  05D6               	andwf	_sign,f
  4530  01D9  30F0               	movlw	240
  4531                           
  4532                           ;prog.c: 393: temp2 <<= 4;
  4533  01DA  0EA3               	swapf	get_temp_Async@temp2,f
  4534  01DB  05A3               	andwf	get_temp_Async@temp2,f
  4535                           
  4536                           ;prog.c: 394: temp2 &= 0b01110000;
  4537  01DC  3070               	movlw	112
  4538  01DD  05A3               	andwf	get_temp_Async@temp2,f
  4539                           
  4540                           ;prog.c: 395: temp2 |= temp1;
  4541  01DE  0822               	movf	get_temp_Async@temp1,w
  4542  01DF  04A3               	iorwf	get_temp_Async@temp2,f
  4543                           
  4544                           ;prog.c: 397: if (sign) {
  4545  01E0  0856               	movf	_sign,w
  4546  01E1  1903               	btfsc	3,2
  4547  01E2  29EF               	goto	i1l2980
  4548                           
  4549                           ;prog.c: 398: temperature = 127 - temp2;
  4550  01E3  0823               	movf	get_temp_Async@temp2,w
  4551  01E4  3C7F               	sublw	127
  4552  01E5  00D8               	movwf	_temperature
  4553                           
  4554                           ;prog.c: 399: temp_drob = 10 - temp_drob;
  4555  01E6  0857               	movf	_temp_drob,w
  4556  01E7  3C0A               	sublw	10
  4557  01E8  00D7               	movwf	_temp_drob
  4558                           
  4559                           ;prog.c: 400: if (temp_drob == 10) {
  4560  01E9  3A0A               	xorlw	10
  4561  01EA  1D03               	btfss	3,2
  4562  01EB  0008               	return
  4563                           
  4564                           ;prog.c: 401: temp_drob = 0;
  4565  01EC  01D7               	clrf	_temp_drob
  4566                           
  4567                           ;prog.c: 402: temperature++;
  4568  01ED  0AD8               	incf	_temperature,f
  4569  01EE  0008               	return
  4570  01EF                     i1l2980:	
  4571                           
  4572                           ;prog.c: 405: temperature = temp2;
  4573  01EF  0823               	movf	get_temp_Async@temp2,w
  4574  01F0  00D8               	movwf	_temperature
  4575  01F1  0008               	return
  4576  01F2                     __end_of_get_temp_Async:	
  4577                           
  4578                           	psect	text27
  4579  044F                     __ptext27:	
  4580 ;; *************** function i1___awdiv *****************
  4581 ;; Defined at:
  4582 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  divisor         2    6[COMMON] int 
  4585 ;;  dividend        2    8[COMMON] int 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  __awdiv         2   12[COMMON] int 
  4588 ;;  __awdiv         1   11[COMMON] unsigned char 
  4589 ;;  __awdiv         1   10[COMMON] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  2    6[COMMON] int 
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : B00/0
  4596 ;;		On exit  : B00/0
  4597 ;;		Unchanged: B00/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4599 ;;      Params:         4       0       0       0
  4600 ;;      Locals:         4       0       0       0
  4601 ;;      Temps:          0       0       0       0
  4602 ;;      Totals:         8       0       0       0
  4603 ;;Total ram usage:        8 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; This function calls:
  4606 ;;		Nothing
  4607 ;; This function is called by:
  4608 ;;		_get_temp_Async
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function i1___awdiv
  4614  044F                     i1___awdiv:	
  4615                           
  4616                           ;incstack = 0
  4617                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4618  044F  01FB               	clrf	i1___awdiv@sign
  4619  0450  1FF7               	btfss	i1___awdiv@divisor+1,7
  4620  0451  2C59               	goto	i1l2708
  4621  0452  09F6               	comf	i1___awdiv@divisor,f
  4622  0453  09F7               	comf	i1___awdiv@divisor+1,f
  4623  0454  0AF6               	incf	i1___awdiv@divisor,f
  4624  0455  1903               	skipnz
  4625  0456  0AF7               	incf	i1___awdiv@divisor+1,f
  4626  0457  01FB               	clrf	i1___awdiv@sign
  4627  0458  0AFB               	incf	i1___awdiv@sign,f
  4628  0459                     i1l2708:	
  4629  0459  1FF9               	btfss	i1___awdiv@dividend+1,7
  4630  045A  2C62               	goto	i1l2714
  4631  045B  09F8               	comf	i1___awdiv@dividend,f
  4632  045C  09F9               	comf	i1___awdiv@dividend+1,f
  4633  045D  0AF8               	incf	i1___awdiv@dividend,f
  4634  045E  1903               	skipnz
  4635  045F  0AF9               	incf	i1___awdiv@dividend+1,f
  4636  0460  3001               	movlw	1
  4637  0461  06FB               	xorwf	i1___awdiv@sign,f
  4638  0462                     i1l2714:	
  4639  0462  01FC               	clrf	i1___awdiv@quotient
  4640  0463  01FD               	clrf	i1___awdiv@quotient+1
  4641  0464  0876               	movf	i1___awdiv@divisor,w
  4642  0465  0477               	iorwf	i1___awdiv@divisor+1,w
  4643  0466  1903               	btfsc	3,2
  4644  0467  2C87               	goto	i1l2736
  4645  0468  01FA               	clrf	i1___awdiv@counter
  4646  0469                     L18:	
  4647  0469  0AFA               	incf	i1___awdiv@counter,f
  4648  046A  1BF7               	btfsc	i1___awdiv@divisor+1,7
  4649  046B  2C70               	goto	i1l2724
  4650  046C  1003               	clrc
  4651  046D  0DF6               	rlf	i1___awdiv@divisor,f
  4652  046E  0DF7               	rlf	i1___awdiv@divisor+1,f
  4653  046F  2C69               	goto	L18
  4654  0470                     i1l2724:	
  4655  0470  1003               	clrc
  4656  0471  0DFC               	rlf	i1___awdiv@quotient,f
  4657  0472  0DFD               	rlf	i1___awdiv@quotient+1,f
  4658  0473  0877               	movf	i1___awdiv@divisor+1,w
  4659  0474  0279               	subwf	i1___awdiv@dividend+1,w
  4660  0475  1D03               	skipz
  4661  0476  2C79               	goto	u209_25
  4662  0477  0876               	movf	i1___awdiv@divisor,w
  4663  0478  0278               	subwf	i1___awdiv@dividend,w
  4664  0479                     u209_25:	
  4665  0479  1C03               	skipc
  4666  047A  2C83               	goto	L19
  4667  047B  0876               	movf	i1___awdiv@divisor,w
  4668  047C  02F8               	subwf	i1___awdiv@dividend,f
  4669  047D  0877               	movf	i1___awdiv@divisor+1,w
  4670  047E  1C03               	skipc
  4671  047F  03F9               	decf	i1___awdiv@dividend+1,f
  4672  0480  02F9               	subwf	i1___awdiv@dividend+1,f
  4673  0481  147C               	bsf	i1___awdiv@quotient,0
  4674  0482  1003               	clrc
  4675  0483                     L19:	
  4676  0483  0CF7               	rrf	i1___awdiv@divisor+1,f
  4677  0484  0CF6               	rrf	i1___awdiv@divisor,f
  4678  0485  0BFA               	decfsz	i1___awdiv@counter,f
  4679  0486  2C70               	goto	i1l2724
  4680  0487                     i1l2736:	
  4681  0487  087B               	movf	i1___awdiv@sign,w
  4682  0488  1903               	btfsc	3,2
  4683  0489  2C8F               	goto	i1l2740
  4684  048A  09FC               	comf	i1___awdiv@quotient,f
  4685  048B  09FD               	comf	i1___awdiv@quotient+1,f
  4686  048C  0AFC               	incf	i1___awdiv@quotient,f
  4687  048D  1903               	skipnz
  4688  048E  0AFD               	incf	i1___awdiv@quotient+1,f
  4689  048F                     i1l2740:	
  4690  048F  087D               	movf	i1___awdiv@quotient+1,w
  4691  0490  00F7               	movwf	?i1___awdiv+1
  4692  0491  087C               	movf	i1___awdiv@quotient,w
  4693  0492  00F6               	movwf	?i1___awdiv
  4694  0493  0008               	return
  4695  0494                     __end_ofi1___awdiv:	
  4696                           
  4697                           	psect	text28
  4698  05B4                     __ptext28:	
  4699 ;; *************** function i1_TX *****************
  4700 ;; Defined at:
  4701 ;;		line 204 in file "prog.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  cmd             1    wreg     unsigned char 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  cmd             1    1[COMMON] unsigned char 
  4706 ;;  TX              1    3[COMMON] unsigned char 
  4707 ;;  TX              1    2[COMMON] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      void 
  4710 ;; Registers used:
  4711 ;;		wreg, status,2, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 300/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4717 ;;      Params:         0       0       0       0
  4718 ;;      Locals:         3       0       0       0
  4719 ;;      Temps:          1       0       0       0
  4720 ;;      Totals:         4       0       0       0
  4721 ;;Total ram usage:        4 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_get_temp_Async
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function i1_TX
  4732  05B4                     i1_TX:	
  4733                           
  4734                           ;incstack = 0
  4735                           ; Regs used in i1_TX: [wreg+status,2+status,0]
  4736                           ;i1TX@cmd stored from wreg
  4737  05B4  00F1               	movwf	i1TX@cmd
  4738                           
  4739                           ;prog.c: 206: unsigned char i = 0;
  4740  05B5  01F3               	clrf	i1TX@i
  4741                           
  4742                           ;prog.c: 207: temp = cmd;
  4743  05B6  00F2               	movwf	i1TX@temp
  4744                           
  4745                           ;prog.c: 208: for (i = 0; i < 8; i++) {
  4746  05B7  01F3               	clrf	i1TX@i
  4747  05B8                     i1l182:	
  4748                           
  4749                           ;prog.c: 209: if (temp & 0x01) {
  4750  05B8  1C72               	btfss	i1TX@temp,0
  4751  05B9  2DC8               	goto	i1l184
  4752                           
  4753                           ;prog.c: 210: TRISA3 = 0;
  4754  05BA  1683               	bsf	3,5	;RP0=1, select bank1
  4755  05BB  1303               	bcf	3,6	;RP1=0, select bank1
  4756  05BC  1185               	bcf	5,3	;volatile
  4757                           
  4758                           ;prog.c: 211: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4759  05BD  2DBE               	nop2	;2 cycle nop
  4760  05BE  2DBF               	nop2	;2 cycle nop
  4761  05BF  0000               	nop
  4762                           
  4763                           ;prog.c: 212: TRISA3 = 1;
  4764  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  4765  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  4766  05C2  1585               	bsf	5,3	;volatile
  4767                           
  4768                           ;prog.c: 213: _delay((unsigned long)((70)*(4000000/4000000.0)));
  4769  05C3  3017               	movlw	23
  4770  05C4  00F0               	movwf	??i1_TX
  4771  05C5                     u412_27:	
  4772  05C5  0BF0               	decfsz	??i1_TX,f
  4773  05C6  2DC5               	goto	u412_27
  4774                           
  4775                           ;prog.c: 214: } else {
  4776  05C7  2DD5               	goto	i1l2676
  4777  05C8                     i1l184:	
  4778                           
  4779                           ;prog.c: 215: TRISA3 = 0;
  4780  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  4781  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  4782  05CA  1185               	bcf	5,3	;volatile
  4783                           
  4784                           ;prog.c: 216: _delay((unsigned long)((70)*(4000000/4000000.0)));
  4785  05CB  3017               	movlw	23
  4786  05CC  00F0               	movwf	??i1_TX
  4787  05CD                     u413_27:	
  4788  05CD  0BF0               	decfsz	??i1_TX,f
  4789  05CE  2DCD               	goto	u413_27
  4790                           
  4791                           ;prog.c: 217: TRISA3 = 1;
  4792  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  4793  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  4794  05D1  1585               	bsf	5,3	;volatile
  4795                           
  4796                           ;prog.c: 218: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4797  05D2  2DD3               	nop2	;2 cycle nop
  4798  05D3  2DD4               	nop2	;2 cycle nop
  4799  05D4  0000               	nop
  4800  05D5                     i1l2676:	
  4801  05D5  3008               	movlw	8
  4802                           
  4803                           ;prog.c: 219: }
  4804                           ;prog.c: 220: temp >>= 1;
  4805  05D6  1003               	clrc
  4806  05D7  0CF2               	rrf	i1TX@temp,f
  4807  05D8  0AF3               	incf	i1TX@i,f
  4808  05D9  0273               	subwf	i1TX@i,w
  4809  05DA  1803               	btfsc	3,0
  4810  05DB  0008               	return
  4811  05DC  2DB8               	goto	i1l182
  4812  05DD                     __end_ofi1_TX:	
  4813                           
  4814                           	psect	text29
  4815  0668                     __ptext29:	
  4816 ;; *************** function i1_RX *****************
  4817 ;; Defined at:
  4818 ;;		line 224 in file "prog.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;		None
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  RX              1    2[COMMON] unsigned char 
  4823 ;;  RX              1    1[COMMON] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  1    wreg      unsigned char 
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 300/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4833 ;;      Params:         0       0       0       0
  4834 ;;      Locals:         2       0       0       0
  4835 ;;      Temps:          1       0       0       0
  4836 ;;      Totals:         3       0       0       0
  4837 ;;Total ram usage:        3 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_get_temp_Async
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function i1_RX
  4848  0668                     i1_RX:	
  4849                           
  4850                           ;prog.c: 225: unsigned char d = 0;
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in i1_RX: [wreg+status,2+status,0]
  4854  0668  01F1               	clrf	i1RX@d
  4855                           
  4856                           ;prog.c: 226: for (unsigned char i = 0; i < 8; i++) {
  4857  0669  01F2               	clrf	i1RX@i
  4858  066A                     i1l189:	
  4859                           
  4860                           ;prog.c: 227: TRISA3 = 0;
  4861  066A  1683               	bsf	3,5	;RP0=1, select bank1
  4862  066B  1303               	bcf	3,6	;RP1=0, select bank1
  4863  066C  1185               	bcf	5,3	;volatile
  4864                           
  4865                           ;prog.c: 228: _delay((unsigned long)((6)*(4000000/4000000.0)));
  4866  066D  2E6E               	nop2	;2 cycle nop
  4867  066E  2E6F               	nop2	;2 cycle nop
  4868  066F  2E70               	nop2	;2 cycle nop
  4869                           
  4870                           ;prog.c: 229: TRISA3 = 1;
  4871  0670  1683               	bsf	3,5	;RP0=1, select bank1
  4872  0671  1303               	bcf	3,6	;RP1=0, select bank1
  4873  0672  1585               	bsf	5,3	;volatile
  4874                           
  4875                           ;prog.c: 230: _delay((unsigned long)((4)*(4000000/4000000.0)));
  4876  0673  2E74               	nop2	;2 cycle nop
  4877  0674  2E75               	nop2	;2 cycle nop
  4878                           
  4879                           ;prog.c: 231: d >>= 1;
  4880  0675  1003               	clrc
  4881  0676  0CF1               	rrf	i1RX@d,f
  4882                           
  4883                           ;prog.c: 232: if (RA3 == 1) d |= 0x80;
  4884  0677  1283               	bcf	3,5	;RP0=0, select bank0
  4885  0678  1303               	bcf	3,6	;RP1=0, select bank0
  4886  0679  1985               	btfsc	5,3	;volatile
  4887  067A  17F1               	bsf	i1RX@d,7
  4888                           
  4889                           ;prog.c: 233: _delay((unsigned long)((60)*(4000000/4000000.0)));
  4890  067B  3013               	movlw	19
  4891  067C  00F0               	movwf	??i1_RX
  4892  067D                     u414_27:	
  4893  067D  0BF0               	decfsz	??i1_RX,f
  4894  067E  2E7D               	goto	u414_27
  4895  067F  2E80               	nop2	;nop
  4896  0680  3008               	movlw	8
  4897  0681  0AF2               	incf	i1RX@i,f
  4898  0682  0272               	subwf	i1RX@i,w
  4899  0683  1C03               	skipc
  4900  0684  2E6A               	goto	i1l189
  4901                           
  4902                           ;prog.c: 234: }
  4903                           ;prog.c: 235: return d;
  4904  0685  0871               	movf	i1RX@d,w
  4905  0686  0008               	return
  4906  0687                     __end_ofi1_RX:	
  4907                           
  4908                           	psect	text30
  4909  058A                     __ptext30:	
  4910 ;; *************** function i1_INIT *****************
  4911 ;; Defined at:
  4912 ;;		line 189 in file "prog.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;		None               void
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 300/0
  4923 ;;		On exit  : 300/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4926 ;;      Params:         0       0       0       0
  4927 ;;      Locals:         0       0       0       0
  4928 ;;      Temps:          1       0       0       0
  4929 ;;      Totals:         1       0       0       0
  4930 ;;Total ram usage:        1 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; This function calls:
  4933 ;;		Nothing
  4934 ;; This function is called by:
  4935 ;;		_get_temp_Async
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function i1_INIT
  4941  058A                     i1_INIT:	
  4942                           
  4943                           ;prog.c: 190: static bit b;
  4944                           ;prog.c: 191: b = 0;
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in i1_INIT: [wreg+status,2+status,0]
  4948  058A  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  4949                           
  4950                           ;prog.c: 192: TRISA3 = 1;
  4951  058B  1683               	bsf	3,5	;RP0=1, select bank1
  4952  058C  1585               	bsf	5,3	;volatile
  4953                           
  4954                           ;prog.c: 193: _delay((unsigned long)((20)*(4000000/4000000.0)));
  4955  058D  3006               	movlw	6
  4956  058E  00F0               	movwf	??i1_INIT
  4957  058F                     u415_27:	
  4958  058F  0BF0               	decfsz	??i1_INIT,f
  4959  0590  2D8F               	goto	u415_27
  4960  0591  0000               	nop
  4961                           
  4962                           ;prog.c: 194: TRISA3 = 0;
  4963  0592  1683               	bsf	3,5	;RP0=1, select bank1
  4964  0593  1303               	bcf	3,6	;RP1=0, select bank1
  4965  0594  1185               	bcf	5,3	;volatile
  4966                           
  4967                           ;prog.c: 195: _delay((unsigned long)((500)*(4000000/4000000.0)));
  4968  0595  30A6               	movlw	166
  4969  0596  00F0               	movwf	??i1_INIT
  4970  0597                     u416_27:	
  4971  0597  0BF0               	decfsz	??i1_INIT,f
  4972  0598  2D97               	goto	u416_27
  4973  0599  0000               	nop
  4974                           
  4975                           ;prog.c: 196: TRISA3 = 1;
  4976  059A  1683               	bsf	3,5	;RP0=1, select bank1
  4977  059B  1303               	bcf	3,6	;RP1=0, select bank1
  4978  059C  1585               	bsf	5,3	;volatile
  4979                           
  4980                           ;prog.c: 197: _delay((unsigned long)((65)*(4000000/4000000.0)));
  4981  059D  3015               	movlw	21
  4982  059E  00F0               	movwf	??i1_INIT
  4983  059F                     u417_27:	
  4984  059F  0BF0               	decfsz	??i1_INIT,f
  4985  05A0  2D9F               	goto	u417_27
  4986  05A1  0000               	nop
  4987                           
  4988                           ;prog.c: 198: b = RA3;
  4989  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  4990  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  4991  05A4  1059               	bcf	INIT@b/(0+8),INIT@b& (0+7)
  4992  05A5  1985               	btfsc	5,3	;volatile
  4993  05A6  1459               	bsf	INIT@b/(0+8),INIT@b& (0+7)
  4994                           
  4995                           ;prog.c: 199: _delay((unsigned long)((450)*(4000000/4000000.0)));
  4996  05A7  3095               	movlw	149
  4997  05A8  00F0               	movwf	??i1_INIT
  4998  05A9                     u418_27:	
  4999  05A9  0BF0               	decfsz	??i1_INIT,f
  5000  05AA  2DA9               	goto	u418_27
  5001  05AB  2DAC               	nop2	;nop
  5002                           
  5003                           ;prog.c: 201: return !b;
  5004  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  5005  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  5006  05AE  1C59               	btfss	INIT@b/(0+8),INIT@b& (0+7)
  5007  05AF  2DB2               	goto	i1l2654
  5008  05B0  1003               	clrc
  5009  05B1  0008               	return
  5010  05B2                     i1l2654:	
  5011  05B2  1403               	setc
  5012  05B3  0008               	return
  5013  05B4                     __end_ofi1_INIT:	
  5014                           
  5015                           	psect	text31
  5016  06BE                     __ptext31:	
  5017 ;; *************** function ___wmul *****************
  5018 ;; Defined at:
  5019 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  multiplier      2    0[COMMON] unsigned int 
  5022 ;;  multiplicand    2    2[COMMON] unsigned int 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  product         2    4[COMMON] unsigned int 
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  2    0[COMMON] unsigned int 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2, status,0
  5029 ;; Tracked objects:
  5030 ;;		On entry : B00/0
  5031 ;;		On exit  : B00/0
  5032 ;;		Unchanged: B00/0
  5033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5034 ;;      Params:         4       0       0       0
  5035 ;;      Locals:         2       0       0       0
  5036 ;;      Temps:          0       0       0       0
  5037 ;;      Totals:         6       0       0       0
  5038 ;;Total ram usage:        6 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_get_temp_Async
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function ___wmul
  5049  06BE                     ___wmul:	
  5050                           
  5051                           ;incstack = 0
  5052                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5053  06BE  01F4               	clrf	___wmul@product
  5054  06BF  01F5               	clrf	___wmul@product+1
  5055  06C0                     i1l2584:	
  5056  06C0  1C70               	btfss	___wmul@multiplier,0
  5057  06C1  2EC8               	goto	i1l2588
  5058  06C2  0872               	movf	___wmul@multiplicand,w
  5059  06C3  07F4               	addwf	___wmul@product,f
  5060  06C4  1803               	skipnc
  5061  06C5  0AF5               	incf	___wmul@product+1,f
  5062  06C6  0873               	movf	___wmul@multiplicand+1,w
  5063  06C7  07F5               	addwf	___wmul@product+1,f
  5064  06C8                     i1l2588:	
  5065  06C8  1003               	clrc
  5066  06C9  0DF2               	rlf	___wmul@multiplicand,f
  5067  06CA  0DF3               	rlf	___wmul@multiplicand+1,f
  5068  06CB  1003               	clrc
  5069  06CC  0CF1               	rrf	___wmul@multiplier+1,f
  5070  06CD  0CF0               	rrf	___wmul@multiplier,f
  5071  06CE  0870               	movf	___wmul@multiplier,w
  5072  06CF  0471               	iorwf	___wmul@multiplier+1,w
  5073  06D0  1D03               	btfss	3,2
  5074  06D1  2EC0               	goto	i1l2584
  5075  06D2  0875               	movf	___wmul@product+1,w
  5076  06D3  00F1               	movwf	?___wmul+1
  5077  06D4  0874               	movf	___wmul@product,w
  5078  06D5  00F0               	movwf	?___wmul
  5079  06D6  0008               	return
  5080  06D7                     __end_of___wmul:	
  5081                           
  5082                           	psect	text32
  5083  04D1                     __ptext32:	
  5084 ;; *************** function _convDig *****************
  5085 ;; Defined at:
  5086 ;;		line 107 in file "prog.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  dig             1    wreg     unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  dig             1    0[COMMON] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      unsigned char 
  5093 ;; Registers used:
  5094 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5095 ;; Tracked objects:
  5096 ;;		On entry : B00/0
  5097 ;;		On exit  : B00/0
  5098 ;;		Unchanged: B00/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5100 ;;      Params:         0       0       0       0
  5101 ;;      Locals:         1       0       0       0
  5102 ;;      Temps:          0       0       0       0
  5103 ;;      Totals:         1       0       0       0
  5104 ;;Total ram usage:        1 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_F
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _convDig
  5115  04D1                     _convDig:	
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _convDig: [wreg-fsr0h+status,2+status,0]
  5119                           ;convDig@dig stored from wreg
  5120  04D1  00F0               	movwf	convDig@dig
  5121                           
  5122                           ;prog.c: 108: switch (dig) {
  5123  04D2  2CF6               	goto	i1l2894
  5124  04D3                     i1l2748:	
  5125  04D3  34DB               	retlw	219
  5126  04D4                     i1l2752:	
  5127  04D4  3418               	retlw	24
  5128  04D5                     i1l2756:	
  5129  04D5  34B3               	retlw	179
  5130  04D6                     i1l2760:	
  5131  04D6  34BA               	retlw	186
  5132  04D7                     i1l2764:	
  5133  04D7  3478               	retlw	120
  5134  04D8                     i1l2768:	
  5135  04D8  34EA               	retlw	234
  5136  04D9                     i1l2772:	
  5137  04D9  34EB               	retlw	235
  5138  04DA                     i1l2776:	
  5139  04DA  3498               	retlw	152
  5140  04DB                     i1l2780:	
  5141  04DB  34FB               	retlw	251
  5142  04DC                     i1l2784:	
  5143  04DC  34FA               	retlw	250
  5144  04DD                     i1l2788:	
  5145  04DD  34F9               	retlw	249
  5146  04DE                     i1l2792:	
  5147  04DE  346B               	retlw	107
  5148  04DF                     i1l2796:	
  5149  04DF  34C3               	retlw	195
  5150  04E0                     i1l2800:	
  5151  04E0  343B               	retlw	59
  5152  04E1                     i1l2804:	
  5153  04E1  34E3               	retlw	227
  5154  04E2                     i1l2808:	
  5155  04E2  34E1               	retlw	225
  5156  04E3                     i1l2812:	
  5157  04E3  34F8               	retlw	248
  5158  04E4                     i1l2816:	
  5159  04E4  3469               	retlw	105
  5160  04E5                     i1l2820:	
  5161  04E5  3441               	retlw	65
  5162  04E6                     i1l2824:	
  5163  04E6  341A               	retlw	26
  5164  04E7                     i1l2828:	
  5165  04E7  3443               	retlw	67
  5166  04E8                     i1l2832:	
  5167  04E8  3429               	retlw	41
  5168  04E9                     i1l2836:	
  5169  04E9  342B               	retlw	43
  5170  04EA                     i1l2840:	
  5171  04EA  34F1               	retlw	241
  5172  04EB                     i1l2844:	
  5173  04EB  3421               	retlw	33
  5174  04EC                     i1l2848:	
  5175  04EC  346A               	retlw	106
  5176  04ED                     i1l2852:	
  5177  04ED  3463               	retlw	99
  5178  04EE                     i1l2856:	
  5179  04EE  345B               	retlw	91
  5180  04EF                     i1l2860:	
  5181  04EF  340B               	retlw	11
  5182  04F0                     i1l2864:	
  5183  04F0  3471               	retlw	113
  5184  04F1                     i1l2868:	
  5185  04F1  34B1               	retlw	177
  5186  04F2                     i1l2872:	
  5187  04F2  34F0               	retlw	240
  5188  04F3                     i1l2876:	
  5189  04F3  3420               	retlw	32
  5190  04F4                     i1l2880:	
  5191  04F4  3402               	retlw	2
  5192  04F5                     i1l2884:	
  5193  04F5  3400               	retlw	0
  5194  04F6                     i1l2894:	
  5195  04F6  0870               	movf	convDig@dig,w
  5196                           
  5197                           ; Switch size 1, requested type "space"
  5198                           ; Number of cases is 35, Range of values is 0 to 34
  5199                           ; switch strategies available:
  5200                           ; Name         Instructions Cycles
  5201                           ; direct_byte           41     6 (fixed)
  5202                           ; simple_byte          106    54 (average)
  5203                           ; jumptable            260     6 (fixed)
  5204                           ;	Chosen strategy is direct_byte
  5205  04F7  0084               	movwf	4
  5206  04F8  3023               	movlw	35
  5207  04F9  0204               	subwf	4,w
  5208  04FA  1803               	skipnc
  5209  04FB  3400               	retlw	0
  5210  04FC  3006               	movlw	high i1S4110
  5211  04FD  008A               	movwf	10
  5212  04FE  3002               	movlw	low i1S4110
  5213  04FF  0704               	addwf	4,w
  5214  0500  0082               	movwf	2
  5215  0501  0008               	return
  5216  0502                     __end_of_convDig:	
  5217  007E                     btemp	set	126	;btemp
  5218  007E                     wtemp	set	126
  5219  007E                     wtemp0	set	126
  5220  0080                     wtemp1	set	128
  5221  0082                     wtemp2	set	130
  5222  0084                     wtemp3	set	132
  5223  0086                     wtemp4	set	134
  5224  0088                     wtemp5	set	136
  5225  007F                     wtemp6	set	127
  5226  007E                     ttemp	set	126
  5227  007E                     ttemp0	set	126
  5228  0081                     ttemp1	set	129
  5229  0084                     ttemp2	set	132
  5230  0087                     ttemp3	set	135
  5231  007F                     ttemp4	set	127
  5232  007E                     ltemp	set	126
  5233  007E                     ltemp0	set	126
  5234  0082                     ltemp1	set	130
  5235  0086                     ltemp2	set	134
  5236  0080                     ltemp3	set	128
  5237                           
  5238                           	psect	swtext1
  5239  0602                     __pswtext1:	
  5240  0602                     i1S4110:	
  5241  0602  2CD3               	ljmp	i1l2748
  5242  0603  2CD4               	ljmp	i1l2752
  5243  0604  2CD5               	ljmp	i1l2756
  5244  0605  2CD6               	ljmp	i1l2760
  5245  0606  2CD7               	ljmp	i1l2764
  5246  0607  2CD8               	ljmp	i1l2768
  5247  0608  2CD9               	ljmp	i1l2772
  5248  0609  2CDA               	ljmp	i1l2776
  5249  060A  2CDB               	ljmp	i1l2780
  5250  060B  2CDC               	ljmp	i1l2784
  5251  060C  2CDD               	ljmp	i1l2788
  5252  060D  2CDE               	ljmp	i1l2792
  5253  060E  2CDF               	ljmp	i1l2796
  5254  060F  2CE0               	ljmp	i1l2800
  5255  0610  2CE1               	ljmp	i1l2804
  5256  0611  2CE2               	ljmp	i1l2808
  5257  0612  2CE3               	ljmp	i1l2812
  5258  0613  2CE4               	ljmp	i1l2816
  5259  0614  2CE5               	ljmp	i1l2820
  5260  0615  2CE6               	ljmp	i1l2824
  5261  0616  2CE7               	ljmp	i1l2828
  5262  0617  2CE8               	ljmp	i1l2832
  5263  0618  2CE9               	ljmp	i1l2836
  5264  0619  2CEA               	ljmp	i1l2840
  5265  061A  2CEB               	ljmp	i1l2844
  5266  061B  2CEC               	ljmp	i1l2848
  5267  061C  2CED               	ljmp	i1l2852
  5268  061D  2CEE               	ljmp	i1l2856
  5269  061E  2CEF               	ljmp	i1l2860
  5270  061F  2CF0               	ljmp	i1l2864
  5271  0620  2CF1               	ljmp	i1l2868
  5272  0621  2CF2               	ljmp	i1l2872
  5273  0622  2CF3               	ljmp	i1l2876
  5274  0623  2CF4               	ljmp	i1l2880
  5275  0624  2CF5               	ljmp	i1l2884


Data Sizes:
    Strings     0
    Constant    3
    Data        17
    BSS         25
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     40      58
    BANK1            80     28      55
    BANK2            48      0       0

Pointer List with Targets:

    ReadCell@CellIsEmpty	PTR unsigned char  size(1) Largest target is 1
		 -> EditAddressMemory@CellIsEmpty(BANK1[1]), 

    ReadCell@CellsData	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData_256(BANK1[8]), EditAddressMemory@CellsData_253(BANK1[8]), EditAddressMemory@CellsData(BANK1[8]), 

    calc_crc@mas	PTR unsigned char  size(1) Largest target is 8
		 -> FindCell@CellsData(BANK0[8]), 

    WriteArrayToEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData_256(BANK1[8]), EditAddressMemory@CellsData_253(BANK1[8]), 

    FillArrayFromEEPROM@container	PTR unsigned char  size(1) Largest target is 8
		 -> EditAddressMemory@CellsData_256(BANK1[8]), EditAddressMemory@CellsData_253(BANK1[8]), EditAddressMemory@CellsData(BANK1[8]), FindCell@CellsData(BANK0[8]), 
		 -> DS_Address(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _F in COMMON

    _get_temp_Async->i1___awdiv
    i1___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_FindCell
    _indData->_setDigit
    _FindCell->_FillArrayFromEEPROM
    _EditAddressMemory->_ReadCell
    _WriteArrayToEEPROM->_EEWR
    _ReadCell->_FillArrayFromEEPROM
    _FillArrayFromEEPROM->_EERD
    _CellToInd->_setDigit
    _setDigit->___awdiv

Critical Paths under _F in BANK0

    _F->_get_temp_Async

Critical Paths under _main in BANK1

    _main->_EditAddressMemory

Critical Paths under _F in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _F in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   20587
                                             32 BANK0      8     8      0
                          _CellToInd
                  _EditAddressMemory
                _FillArrayFromEEPROM
                           _FindCell
              _Reset_powerOnInterval
                        _Run_getTemp
                             _clrInd
                            _indData
                         _refreshInd
                           _setDigit
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _indData                                              6     6      0    2947
                                             22 BANK0      6     6      0
                            ___lbdiv
                            ___lbmod
                           _setDigit
                           _setPoint
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     287
                                             10 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     418
                                             10 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _Run_getTemp                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Reset_powerOnInterval                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FindCell                                            15    14      1    2346
                                             18 BANK0     14    13      1
                _FillArrayFromEEPROM
                           _calc_crc
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (2) _calc_crc                                             6     5      1     280
                                             10 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _EditAddressMemory                                   29    29      0    8242
                                             24 BANK0      1     1      0
                                              0 BANK1     28    28      0
                          _CellToInd
                               _INIT
                                 _RX
                           _ReadCell
                                 _TX
                 _WriteArrayToEEPROM
                             _clrInd
                         _refreshInd
                           _setPoint
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _setPoint                                             2     1      1     324
                                             10 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _WriteArrayToEEPROM                                   5     3      2     739
                                             13 BANK0      5     3      2
                               _EEWR
                      _waitInterrupt
 ---------------------------------------------------------------------------------
 (1) _waitInterrupt                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EEWR                                                 3     2      1     173
                                             10 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _TX                                                   4     4      0     142
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ReadCell                                             6     4      2    2256
                                             18 BANK0      6     4      2
                _FillArrayFromEEPROM
 ---------------------------------------------------------------------------------
 (2) _FillArrayFromEEPROM                                  5     3      2    1226
                                             13 BANK0      5     3      2
                               _EERD
 ---------------------------------------------------------------------------------
 (3) _EERD                                                 3     3      0      99
                                             10 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _RX                                                   3     3      0     108
                                             10 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _INIT                                                 1     1      0       0
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CellToInd                                            1     1      0    3278
                                             22 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                             _clrInd
                         _refreshInd
                           _setDigit
 ---------------------------------------------------------------------------------
 (1) _setDigit                                             4     3      1    1479
                                             18 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _refreshInd                                           2     2      0     130
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _clrInd                                               1     1      0      99
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     618
                                             10 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     828
                                             10 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _F                                                    6     6      0    1093
                                              4 BANK0      6     6      0
                            _convDig
                     _get_temp_Async
 ---------------------------------------------------------------------------------
 (6) _get_temp_Async                                       4     4      0     955
                                              0 BANK0      4     4      0
                             ___wmul
                             i1_INIT
                               i1_RX
                               i1_TX
                          i1___awdiv
 ---------------------------------------------------------------------------------
 (7) i1___awdiv                                            8     4      4     352
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_TX                                                 4     4      0      94
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (7) i1_RX                                                 3     3      0      71
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) i1_INIT                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     322
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _convDig                                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CellToInd
     ___awdiv
     ___awmod
     _clrInd
     _refreshInd
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
   _EditAddressMemory
     _CellToInd
       ___awdiv
       ___awmod
       _clrInd
       _refreshInd
       _setDigit
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lbmod (ARG)
     _INIT
     _RX
     _ReadCell
       _FillArrayFromEEPROM
         _EERD
     _TX
     _WriteArrayToEEPROM
       _EEWR
       _waitInterrupt
     _clrInd
     _refreshInd
     _setPoint
     _waitInterrupt
   _FillArrayFromEEPROM
     _EERD
   _FindCell
     _FillArrayFromEEPROM
       _EERD
     _calc_crc
     _waitInterrupt
   _Reset_powerOnInterval
   _Run_getTemp
   _clrInd
   _indData
     ___lbdiv
     ___lbmod
     _setDigit
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbmod (ARG)
     _setPoint
   _refreshInd
   _setDigit
     ___awdiv (ARG)
     ___awmod (ARG)
     ___lbmod (ARG)
   _setPoint
   _waitInterrupt

 _F (ROOT)
   _convDig
   _get_temp_Async
     ___wmul
     i1_INIT
     i1_RX
     i1_TX
     i1___awdiv
       ___wmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1C      37       7       68.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      3A       3       72.5%
BITBANK0            50      0       1       5        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7F      10        0.0%
ABS                  0      0      7F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Nov 26 23:32:37 2016

                               _F 01F2              FindCell@addressStart 003D                                 pc 0002  
                              ?_F 0070                       __CFG_CP$OFF 0000                                PL2 0338  
                              PL4 0346                                PL6 029B                                PL8 011D  
                              l83 078B                                _RX 0647                                _TX 055F  
                    ___awdiv@sign 002F                                fsr 0004               ___wmul@multiplicand 0072  
                             ??_F 0024                               ?_RX 0070                               ?_TX 0070  
                             l156 06E9                               l260 03CD                               l404 00FE  
                             l182 0563                               l184 0573                               l362 0329  
                             l189 064A                               RX@d 002B                               RX@i 002C  
                             l783 06AF                               TX@i 002D                               _RA1 0029  
                             _RA2 002A                               _RA3 002B                      __CFG_CPD$OFF 0000  
                             fsr0 0004                               indf 0000                      ___awmod@sign 002F  
                     main@address 0047                   ?_get_temp_Async 0070                              ??_RX 002A  
                            ??_TX 002A                      __CFG_LVP$OFF 0000                              F@dig 0028  
                  setPoint@dignum 002B                              l4010 007B                              l4016 0087  
                            l4008 0079                              l4034 00B1                              l4026 009A  
                            l2604 06A9                              l4060 00D7                              l4028 009D  
                            l4044 00B4                              l2528 0628                              l4080 010B  
                            l4056 00C7                              l3514 0715                              l2546 063D  
                            l2538 062F                              l2618 06BC                              l2634 069F  
                            l2626 068B                              l3604 049E                              l3508 0714  
                            l2548 0642                              l4068 00E8                              l3526 0766  
                            l3550 0728                              l4086 0112                              l4078 0107  
                            l3560 0414                              l3616 04B1                              l3624 04C4  
                            l3608 04A5                              l3800 035A                              l3722 05F8  
                            l3802 035B                              l3628 04CC                              l3636 074F  
                            l3812 037E                              l3566 041D                              l3662 052F  
                            l3726 05FD                              l3718 05EE                              l3646 06F1  
                            l3750 03DA                              l3742 03CB                              l3830 03A0  
                            l3592 044A                              l3576 042B                              l3752 03DD  
                            l3744 03D1                              l3840 03BA                              l3588 0442  
                            l3684 0580                              l3932 0306                              l3772 03F3  
                            l3756 03E3                              l3844 03BE                              l3942 0313  
                            l3918 02F1                              l3758 03E5                              l3880 02CF  
                            l3872 02C3                              l3784 0404                              l3954 0336  
                            l3882 02D0                              l3866 02BB                              l3858 02B0  
                            l3786 0408                              l3868 02BD                              l3886 02D6  
                            l3990 0062                              l3896 02DE                              l3986 005E  
                            l3996 0066                              _EERD 0755                              _T0IF 005A  
                            _EEWR 06D7                              u3225 0434                              u4107 051A  
                            u4117 0526                              u4057 0570                              u3530 0361  
                            u4067 0578                              u3540 0362                              u4077 065C  
                            u3630 03A6                              u3550 0369                              _INIT 0502  
                            u3295 04B7                              u4087 0508                              u3800 0330  
                            u3640 03A7                              u3560 036A                              u4097 0511  
                            u3900 00A3                              u3910 00A4                              u3790 032F  
                            i1_RX 0668                              i1_TX 05B4                              _TMR0 0001  
                            _main 0031                              _sign 0056                              btemp 007E  
                            ltemp 007E                              start 0010                              ttemp 007E  
                            wtemp 007E        WriteArrayToEEPROM@quantity 002E                    EEWR@INTCON_BUP 002C  
     WriteArrayToEEPROM@container 0030                     __CFG_MCLRE$ON 0000      __size_of_FillArrayFromEEPROM 0011  
                           ?_EERD 0070                             ?_EEWR 002A                             ?_INIT 0070  
                           ?i1_RX 0070                             ?i1_TX 0070                             INIT@b 02C8  
                           ?_main 0070                    i1___awdiv@sign 007B                   __end_of___awdiv 044F  
                 __end_of___lbdiv 06BE                             _EEADR 009B                     __CFG_WDTE$OFF 0000  
                 __end_of___awmod 04D1                   __end_of___lbmod 06A3                             _CMCON 001F  
                 ___awdiv@divisor 002A                             _T2CON 0012                             TX@cmd 002B  
                           i1l250 0186                             i1l235 0130                             i1l236 012E  
                           i1l182 05B8                             i1l247 017E                             i1l239 0167  
                           i1l184 05C8                             i1l329 0290                             i1l189 066A  
                           i1l287 020D                             i1RX@d 0071                             i1RX@i 0072  
                           i1TX@i 0073                   ___awdiv@counter 002E                             _PORTA 0005  
                           _PORTB 0006                             _TRISA 0085                             _TRISB 0086  
                   __CFG_PWRTE$ON 0000                   __end_of_indData 03C2                   __end_of_convDig 0502  
                  __CFG_BOREN$OFF 0000                             pclath 000A                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             status 0003  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F                __size_ofi1___awdiv 0045                   ___lbdiv@divisor 002A  
                 ___lbdiv@counter 002C                      main@switcher 0041                  __end_of_FindCell 040A  
                    __end_of_EERD 0764                      __end_of_EEWR 06EF                      __end_of_INIT 0531  
                    __end_ofi1_RX 0687                      __end_ofi1_TX 05DD                   __initialization 0011  
                     _DigitNumber 0051                      __end_of_main 011D                __size_of_CellToInd 002E  
                  EERD@EEDATA_BUP 002C                  __end_of_ReadCell 0602                            ??_EERD 002A  
                          ??_EEWR 002B                            ??_INIT 002A                            ??i1_RX 0070  
                          ??i1_TX 0070                            ??_main 0040           ??_Reset_powerOnInterval 002A  
                    ReadCell@cell 0035                            i1S4110 0602                            _EEDATA 009A  
                          _EECON2 009D                  ___awdiv@dividend 002C                 F@CurrentKeysState 0029  
                          i1l3302 0269                            i1l3240 020E                            i1l3330 0287  
                          i1l3314 028D                            i1l3332 028B                            i1l3308 0274  
                          i1l3316 027D                            i1l3270 0238                            i1l2800 04E0  
                          i1l3280 0243                            i1l3264 0232                            i1l3336 028F  
                          i1l3256 022B                            i1l2714 0462                            i1l3290 0252  
                          i1l3282 0244                            i1l2820 04E5                            i1l2812 04E3  
                          i1l2804 04E1                            i1l2740 048F                            i1l2724 0470  
                          i1l2708 0459                            i1l3276 023E                            i1l3268 0237  
                          i1l2654 05B2                            i1l3286 024B                            i1l2840 04EA  
                          i1l2832 04E8                            i1l2824 04E6                            i1l2816 04E4  
                          i1l2808 04E2                            i1l2760 04D6                            i1l2752 04D4  
                          i1l2584 06C0                            i1l2736 0487                            i1l3298 025D  
                          i1l2860 04EF                            i1l2852 04ED                            i1l2844 04EB  
                          i1l2836 04E9                            i1l2828 04E7                            i1l2780 04DB  
                          i1l2772 04D9                            i1l2764 04D7                            i1l2756 04D5  
                          i1l2748 04D3                            i1l2588 06C8                            i1l2676 05D5  
                          i1l2932 016F                            i1l2916 013C                            i1l2918 013E  
                          i1l2880 04F4                            i1l2872 04F2                            i1l2864 04F0  
                          i1l2856 04EE                            i1l2848 04EC                            i1l2792 04DE  
                          i1l2784 04DC                            i1l2776 04DA                            i1l2768 04D8  
                          i1l2884 04F5                            i1l2876 04F3                            i1l2868 04F1  
                          i1l2796 04DF                            i1l2788 04DD                            i1l2980 01EF  
                          i1l2894 04F6                            _INTCON 000B                            u209_25 0479  
                          u412_27 05C5                            TX@temp 002C                            u413_27 05CD  
                          u414_27 067D                            u415_27 058F                            u416_27 0597  
                          u417_27 059F                            u418_27 05A9                            i1_INIT 058A  
                __end_of_calc_crc 0647                            _TRISA3 042B                            _TRISA4 042C  
                          ___wmul 06BE                         ??___awdiv 002E                         ??___lbdiv 002B  
                       ??___awmod 002E                         ??___lbmod 002B                            _clrInd 0764  
                          _digits 00CD                  ___awdiv@quotient 0030                   ___awmod@divisor 002A  
                 ___awmod@counter 002E                         ??_indData 0036                  __end_of_setDigit 0714  
                       ??_convDig 0070                 __end_ofi1___awdiv 0494                  __end_of_setPoint 0755  
                          saved_w 007E                 _EditAddressMemory 02A1                 __end_of_CellToInd 055F  
                ___lbdiv@dividend 002B                ?_EditAddressMemory 0070                   ___lbmod@divisor 002A  
         __end_of__initialization 002F                    EERD@INTCON_BUP 002B                   ___lbmod@counter 002D  
      __end_of_WriteArrayToEEPROM 0702               ??_EditAddressMemory 0038                    __pcstackCOMMON 0070  
                    __pidataBANK1 0000             __end_of_waitInterrupt 078E                     ??_Run_getTemp 002A  
                      __end_ofPL2 0346                        __end_ofPL4 034E                        __end_ofPL6 02A1  
                      __end_ofPL8 0122                  ___lbdiv@quotient 002D                        __end_of_RX 0668  
                      __end_of_TX 058A                  ??_get_temp_Async 0020                       F@long_press 0050  
      EditAddressMemory@CellsData 00A0         __end_of_EditAddressMemory 0338                         ?_FindCell 0032  
             _FillArrayFromEEPROM 0726                        __pbssBANK0 0048                        __pbssBANK1 00CD  
                         ?i1_INIT 0070                         ?_ReadCell 0032                 __end_of_PortAData 077B  
                      __pmaintext 0031              ReadCell@_CellIsEmpty 0036      EditAddressMemory@CellIsEmpty 00BA  
                    _endInterrupt 02CA              ?_FillArrayFromEEPROM 002D                           ?___wmul 0070  
                         ?_clrInd 0070                        __pintentry 0004                       refreshInd@a 002B  
                      __size_of_F 00A9                         ?_calc_crc 002A                i1___awdiv@dividend 0078  
             __end_of_Run_getTemp 0746                           i1TX@cmd 0071  FillArrayFromEEPROM@address_start 002D  
                      ??_FindCell 0033                        calc_crc@fb 002C                      _Broadcasting 02C9  
                      __stringtab 0772                 ReadCell@CellsData 0032                        ??_ReadCell 0034  
                 __size_ofi1_INIT 002A                           _KeyCode 0052                         ?_setDigit 0032  
                       ?_setPoint 002A               get_temp_Async@temp1 0022               get_temp_Async@temp2 0023  
              i1___awdiv@quotient 007C             ??_FillArrayFromEEPROM 002F                           ___awdiv 040A  
                         ___lbdiv 06A3                           ___awmod 0494                           ___lbmod 0687  
                 __size_of___wmul 0019                   __size_of_clrInd 000E                           __ptext1 034E  
                         __ptext2 0687                           __ptext3 06A3                           __ptext4 0737  
                         __ptext5 0783                           __ptext6 03C2                           __ptext7 0625  
                         __ptext8 02A1                           __ptext9 0746                           _indData 034E  
                         _convDig 04D1                        ??_calc_crc 002B                  ___awmod@dividend 002C  
                         clrInd@a 002A        __size_of_EditAddressMemory 0097    __size_of_Reset_powerOnInterval 0006  
   __end_of_Reset_powerOnInterval 0789                           clrloop0 077C              end_of_initialization 002F  
                      _refreshInd 0714                        ??_setDigit 0033                        ??_setPoint 002B  
                       FindCell@i 003E                       _Run_getTemp 0737                  FindCell@previous 0032  
             ReadCell@CellIsEmpty 0033                  ___lbmod@dividend 002C               WriteArrayToEEPROM@i 0031  
                       i1___awdiv 044F                        convDig@dig 0070                       ___lbmod@rem 002E  
                 F@KeyTimeCounter 00D3                         _CellToInd 0531                         ReadCell@i 0037  
                  __end_ofi1_INIT 05B4                     setPoint@value 002A                    __end_of___wmul 06D7  
                  __end_of_clrInd 0772                     __pbitbssBANK0 02C8                _WriteArrayToEEPROM 06EF  
             start_initialization 0011   WriteArrayToEEPROM@address_start 002D                        ?i1___awdiv 0076  
             ?_WriteArrayToEEPROM 002D                 __size_of_FindCell 0048                       ?_refreshInd 0070  
                        ??i1_INIT 0070      FillArrayFromEEPROM@container 0030                        ?_CellToInd 0070  
               __size_of_ReadCell 0025                         _PortAData 0778              ??_WriteArrayToEEPROM 002F  
              EditAddressMemory@i 00B8                          ??___wmul 0074                          ??_clrInd 002A  
                     __pdataBANK1 00BC                          EEWR@data 002A    EditAddressMemory@CellsData_253 00A8  
  EditAddressMemory@CellsData_256 00B0                      setDigit@data 0032                         ___latbits 0000  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                 __size_of_calc_crc 0022  
          EditAddressMemory@i_257 00B9                         __end_of_F 029B            __size_of_waitInterrupt 0005  
                       __pnvBANK1 00D5                 __size_of_setDigit 0012                 __size_of_setPoint 000F  
                        ?___awdiv 002A                          ?___lbdiv 002A                          ?___awmod 002A  
                        ?___lbmod 002A                 i1___awdiv@divisor 0076                 i1___awdiv@counter 007A  
             __size_of_refreshInd 0012                         __pstrings 0772                         calc_crc@i 002E  
                        ?_indData 0070                         __pswtext1 0602                          ?_convDig 0070  
                     ??i1___awdiv 007A           __size_of_get_temp_Async 00D0                       __size_of_RX 0021  
                     __size_of_TX 002B             main@data_on_ind_delay 0044                 interrupt_function 0004  
                 FindCell@address 003F                    ___wmul@product 0074                       ??_CellToInd 0036  
     __end_of_FillArrayFromEEPROM 0737                         clear_ram0 077B                          i1TX@temp 0072  
                       _temp_drob 0057                       calc_crc@dat 002B                       calc_crc@crc 002F  
                     calc_crc@len 002A                       calc_crc@mas 002D                         indData@dN 003B  
                       indData@cd 003A                     _waitInterrupt 0789                      ?_Run_getTemp 0070  
              FindCell@addressNew 003B                       __stringbase 0777                 FindCell@CellsData 0033  
               ___wmul@multiplier 0070                   _powerOnInterval 00D5                    F@LastKeysState 004F  
                        _FindCell 03C2             _Reset_powerOnInterval 0783                          _ReadCell 05DD  
                      _EECON1bits 009C              FillArrayFromEEPROM@i 0031                    indData@isPoint 0038  
                  ?_waitInterrupt 0070                  __size_of___awdiv 0045                  __size_of___lbdiv 001B  
                __size_of___awmod 003D                  __size_of___lbmod 001C                     _getTemp_flags 0048  
              __end_of__stringtab 0778             EditAddressMemory@cell 00BB       FillArrayFromEEPROM@quantity 002E  
                        _calc_crc 0625                  __size_of_indData 0074                  __size_of_convDig 0031  
                       setDigit@a 0035                       EERD@address 002A                          _main$266 0042  
                        _digits_0 00D0                          _digitemp 0054                          _digitnum 0055  
                        __ptext10 06EF                          __ptext11 0789                          __ptext20 0702  
                        __ptext12 06D7                          __ptext21 0714                          __ptext13 055F  
                        __ptext30 058A                          __ptext22 0764                          __ptext14 05DD  
                        __ptext31 06BE                          __ptext23 0494                          __ptext15 0726  
                        __ptext32 04D1                          __ptext24 040A                          __ptext16 0755  
                        __ptext25 01F2                          __ptext17 0647                          __ptext26 0122  
                        __ptext18 0502                          __ptext27 044F                          __ptext19 0531  
                        __ptext28 05B4                          __ptext29 0668                      ??_refreshInd 002A  
                   __size_of_EERD 000F                     __size_of_EEWR 0018                     __size_of_INIT 002F  
                   __size_ofi1_RX 001F                     __size_ofi1_TX 0029                       _DS_ReadData 00BC  
                   __size_of_main 00EC                          _setDigit 0702                          _setPoint 0746  
                        indData@v 0039                      _PowerBlocked 0053                          main@cell 0046  
              __end_of_refreshInd 0726                        _INTCONbits 000B            ?_Reset_powerOnInterval 0070  
                  _get_temp_Async 0122                          intlevel1 0000                        _DS_Address 00C5  
                       stringcode 0772                   ??_waitInterrupt 002A                       EEWR@address 002B  
             F@ButtonPressTimeIn1 004C               F@ButtonPressTimeIn2 004D       __size_of_WriteArrayToEEPROM 0013  
             F@ButtonPressTimeOut 004E                     CellToInd@cell 0036                      indData@v_236 0037  
            __size_of_Run_getTemp 000F                        _OPTION_REG 0081                       _temperature 0058  
                        stringdir 0772                          stringtab 0772            __end_of_get_temp_Async 01F2  
              __CFG_FOSC$INTOSCIO 0000               FindCell@CellIsEmpty 003C  
